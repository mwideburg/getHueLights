
/Users/michaelwideburg/Desktop/getHueLights/getHueLights/target/2.1.0/photon/getHueLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4810  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a4814  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001194  20000084  20000084  00040084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4898  080a4898  00034898  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a48c0  080a48c0  000348c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014327a  00000000  00000000  000348c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017788  00000000  00000000  00177b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000230e1  00000000  00000000  0018f2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027a0  00000000  00000000  001b23a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006610  00000000  00000000  001b4b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029aa2  00000000  00000000  001bb157  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035a79  00000000  00000000  001e4bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bb373  00000000  00000000  0021a672  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006b84  00000000  00000000  002d59e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fee9 	bl	80a3e04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 ff0b 	bl	80a3e54 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4814 	.word	0x080a4814
 80a004c:	20000084 	.word	0x20000084
 80a0050:	20000084 	.word	0x20000084
 80a0054:	20001218 	.word	0x20001218
 80a0058:	20001218 	.word	0x20001218

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fc7f 	bl	80a3960 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a47e4 	.word	0x080a47e4
 80a0080:	080a4804 	.word	0x080a4804

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b88e 	b.w	80a01a4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f977 	bl	80a037c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f003 bc27 	b.w	80a38e4 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bfc3 	b.w	80a1020 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bfc1 	b.w	80a1020 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bfc7 	b.w	80a1030 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 fedc 	bl	80a0e68 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0ba5 	.word	0x080a0ba5

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00cc:	6a00      	ldr	r0, [r0, #32]
 80a00ce:	6803      	ldr	r3, [r0, #0]
 80a00d0:	68db      	ldr	r3, [r3, #12]
 80a00d2:	4718      	bx	r3

080a00d4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	3004      	adds	r0, #4
 80a00da:	f002 fe34 	bl	80a2d46 <_ZN6StringD1Ev>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN14http_request_tD1Ev>:
} http_request_t;
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	303c      	adds	r0, #60	; 0x3c
 80a00e8:	f002 fe2d 	bl	80a2d46 <_ZN6StringD1Ev>
 80a00ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00f0:	f002 fe29 	bl	80a2d46 <_ZN6StringD1Ev>
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f002 fe26 	bl	80a2d46 <_ZN6StringD1Ev>
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	bd10      	pop	{r4, pc}
	...

080a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	4b02      	ldr	r3, [pc, #8]	; (80a0110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
 80a0106:	6003      	str	r3, [r0, #0]
 80a0108:	f000 fcf8 	bl	80a0afc <_ZN10JsonParserD1Ev>
 80a010c:	4620      	mov	r0, r4
 80a010e:	bd10      	pop	{r4, pc}
 80a0110:	080a42ac 	.word	0x080a42ac

080a0114 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	f7ff fff2 	bl	80a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
 80a011c:	4620      	mov	r0, r4
 80a011e:	f240 714c 	movw	r1, #1868	; 0x74c
 80a0122:	f003 fd3c 	bl	80a3b9e <_ZdlPvj>
 80a0126:	4620      	mov	r0, r4
 80a0128:	bd10      	pop	{r4, pc}
	...

080a012c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a012c:	b513      	push	{r0, r1, r4, lr}
 80a012e:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0130:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0132:	2200      	movs	r2, #0
 80a0134:	781b      	ldrb	r3, [r3, #0]
 80a0136:	f88d 3000 	strb.w	r3, [sp]
 80a013a:	233c      	movs	r3, #60	; 0x3c
 80a013c:	f001 f906 	bl	80a134c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0140:	4620      	mov	r0, r4
 80a0142:	b002      	add	sp, #8
 80a0144:	bd10      	pop	{r4, pc}
 80a0146:	bf00      	nop
 80a0148:	200000e8 	.word	0x200000e8

080a014c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a014c:	b510      	push	{r4, lr}
 80a014e:	4604      	mov	r4, r0
 80a0150:	4b09      	ldr	r3, [pc, #36]	; (80a0178 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a0152:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0154:	f001 fe44 	bl	80a1de0 <_ZN5spark10LogManager8instanceEv>
 80a0158:	4621      	mov	r1, r4
 80a015a:	f002 f855 	bl	80a2208 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a015e:	f003 fac5 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a0162:	f003 faa9 	bl	80a36b8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a0166:	4620      	mov	r0, r4
 80a0168:	4b04      	ldr	r3, [pc, #16]	; (80a017c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a016a:	f840 3b04 	str.w	r3, [r0], #4
 80a016e:	f001 ff39 	bl	80a1fe4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0172:	4620      	mov	r0, r4
 80a0174:	bd10      	pop	{r4, pc}
 80a0176:	bf00      	nop
 80a0178:	080a4294 	.word	0x080a4294
 80a017c:	080a427c 	.word	0x080a427c

080a0180 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0180:	b510      	push	{r4, lr}
 80a0182:	4604      	mov	r4, r0
    }
 80a0184:	f7ff ffe2 	bl	80a014c <_ZN5spark16SerialLogHandlerD1Ev>
 80a0188:	4620      	mov	r0, r4
 80a018a:	2124      	movs	r1, #36	; 0x24
 80a018c:	f003 fd07 	bl	80a3b9e <_ZdlPvj>
 80a0190:	4620      	mov	r0, r4
 80a0192:	bd10      	pop	{r4, pc}

080a0194 <_ZN9IPAddressD0Ev>:
 80a0194:	b510      	push	{r4, lr}
 80a0196:	4604      	mov	r4, r0
 80a0198:	2118      	movs	r1, #24
 80a019a:	f003 fd00 	bl	80a3b9e <_ZdlPvj>
 80a019e:	4620      	mov	r0, r4
 80a01a0:	bd10      	pop	{r4, pc}
	...

080a01a4 <setup>:
int trigger = 0;
bool lightStatus = false;
String last = "null";


void setup() {
 80a01a4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a01a6:	4e10      	ldr	r6, [pc, #64]	; (80a01e8 <setup+0x44>)
 80a01a8:	4d10      	ldr	r5, [pc, #64]	; (80a01ec <setup+0x48>)
 80a01aa:	f106 0414 	add.w	r4, r6, #20
 80a01ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01b2:	682b      	ldr	r3, [r5, #0]
 80a01b4:	7023      	strb	r3, [r4, #0]
  // Put initialization like pinMode and begin functions here.
  request.ip = hueIP;
  request.port = 80;
 80a01b6:	2350      	movs	r3, #80	; 0x50
 80a01b8:	63b3      	str	r3, [r6, #56]	; 0x38
  Serial.begin(9600);
 80a01ba:	f003 fa97 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a01be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01c2:	f003 fa75 	bl	80a36b0 <_ZN9USBSerial5beginEl>
  // First, declare all of our pins. This lets our device know which ones
  // will be used for outputting voltage, and which ones will read
  // incoming voltage.
  pinMode(LED_PIN, OUTPUT); // Our LED pin is output (lighting up the LED)
 80a01c6:	2101      	movs	r1, #1
 80a01c8:	2006      	movs	r0, #6
 80a01ca:	f003 fc49 	bl	80a3a60 <pinMode>
  digitalWrite(LED_PIN, LOW);
 80a01ce:	2100      	movs	r1, #0
 80a01d0:	2006      	movs	r0, #6
 80a01d2:	f003 fc56 	bl	80a3a82 <digitalWrite>

  // We are going to declare a Particle.variable() here so that we can
  // access the value of the photosensor from the cloud.
  Particle.variable("analogvalue", analogvalue);
}
 80a01d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a01da:	2300      	movs	r3, #0
 80a01dc:	2202      	movs	r2, #2
 80a01de:	4904      	ldr	r1, [pc, #16]	; (80a01f0 <setup+0x4c>)
 80a01e0:	4804      	ldr	r0, [pc, #16]	; (80a01f4 <setup+0x50>)
 80a01e2:	f000 be9d 	b.w	80a0f20 <spark_variable>
 80a01e6:	bf00      	nop
 80a01e8:	20000ca8 	.word	0x20000ca8
 80a01ec:	20000510 	.word	0x20000510
 80a01f0:	200000ec 	.word	0x200000ec
 80a01f4:	080a40dc 	.word	0x080a40dc

080a01f8 <_Z9getLightsv>:
    
  
  }


void getLights(){
 80a01f8:	b530      	push	{r4, r5, lr}
 80a01fa:	b08b      	sub	sp, #44	; 0x2c

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01fc:	4923      	ldr	r1, [pc, #140]	; (80a028c <_Z9getLightsv+0x94>)
 80a01fe:	a806      	add	r0, sp, #24
 80a0200:	f002 fdeb 	bl	80a2dda <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + BEDROOM_PATH;
 80a0204:	4922      	ldr	r1, [pc, #136]	; (80a0290 <_Z9getLightsv+0x98>)
 80a0206:	a806      	add	r0, sp, #24
 80a0208:	f002 fe68 	bl	80a2edc <_ZplRK15StringSumHelperRK6String>
 80a020c:	4921      	ldr	r1, [pc, #132]	; (80a0294 <_Z9getLightsv+0x9c>)
 80a020e:	f002 fe65 	bl	80a2edc <_ZplRK15StringSumHelperRK6String>
 80a0212:	4d21      	ldr	r5, [pc, #132]	; (80a0298 <_Z9getLightsv+0xa0>)
 80a0214:	4601      	mov	r1, r0
 80a0216:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80a021a:	f002 fe19 	bl	80a2e50 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a021e:	a806      	add	r0, sp, #24
 80a0220:	f002 fd91 	bl	80a2d46 <_ZN6StringD1Ev>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
 80a0224:	4c1d      	ldr	r4, [pc, #116]	; (80a029c <_Z9getLightsv+0xa4>)
 80a0226:	4b1e      	ldr	r3, [pc, #120]	; (80a02a0 <_Z9getLightsv+0xa8>)
 80a0228:	4622      	mov	r2, r4
 80a022a:	4629      	mov	r1, r5
 80a022c:	9300      	str	r3, [sp, #0]
 80a022e:	481d      	ldr	r0, [pc, #116]	; (80a02a4 <_Z9getLightsv+0xac>)
 80a0230:	4b1d      	ldr	r3, [pc, #116]	; (80a02a8 <_Z9getLightsv+0xb0>)
 80a0232:	f000 fb25 	bl	80a0880 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  
  http.get(request, response, headers);
  String data = response.body.c_str();
 80a0236:	6861      	ldr	r1, [r4, #4]
 80a0238:	a802      	add	r0, sp, #8
 80a023a:	f002 fdce 	bl	80a2dda <_ZN6StringC1EPKc>
  // Serial.println();
  // count ++;
  // Serial.println("count");
  // Serial.println(count);
  // Serial.println("------------------");
  int pos = data.indexOf("h") + 5;
 80a023e:	491b      	ldr	r1, [pc, #108]	; (80a02ac <_Z9getLightsv+0xb4>)
 80a0240:	a806      	add	r0, sp, #24
 80a0242:	f002 fdca 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0246:	a906      	add	r1, sp, #24
 80a0248:	a802      	add	r0, sp, #8
 80a024a:	f002 fe74 	bl	80a2f36 <_ZNK6String7indexOfERKS_>
 80a024e:	4604      	mov	r4, r0
 80a0250:	a806      	add	r0, sp, #24
 80a0252:	f002 fd78 	bl	80a2d46 <_ZN6StringD1Ev>

  hue = data.substring(pos, pos + 4).toInt();
 80a0256:	1d62      	adds	r2, r4, #5
 80a0258:	a902      	add	r1, sp, #8
 80a025a:	f104 0309 	add.w	r3, r4, #9
 80a025e:	a806      	add	r0, sp, #24
 80a0260:	f002 fe6c 	bl	80a2f3c <_ZNK6String9substringEjj>
 80a0264:	a806      	add	r0, sp, #24
 80a0266:	f002 fe92 	bl	80a2f8e <_ZNK6String5toIntEv>
 80a026a:	4b11      	ldr	r3, [pc, #68]	; (80a02b0 <_Z9getLightsv+0xb8>)
 80a026c:	6018      	str	r0, [r3, #0]
 80a026e:	a806      	add	r0, sp, #24
 80a0270:	f002 fd69 	bl	80a2d46 <_ZN6StringD1Ev>
  
  delay(1000);
 80a0274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0278:	f000 ff0a 	bl	80a1090 <delay>
  lightStatus = true;
 80a027c:	2201      	movs	r2, #1
 80a027e:	4b0d      	ldr	r3, [pc, #52]	; (80a02b4 <_Z9getLightsv+0xbc>)
  String data = response.body.c_str();
 80a0280:	a802      	add	r0, sp, #8
  lightStatus = true;
 80a0282:	701a      	strb	r2, [r3, #0]
  String data = response.body.c_str();
 80a0284:	f002 fd5f 	bl	80a2d46 <_ZN6StringD1Ev>
  // Serial.println(lightStatus);
  // count++ ;
  // Serial.println("count");
  // Serial.println(count);
  // Serial.println("------------------");
}
 80a0288:	b00b      	add	sp, #44	; 0x2c
 80a028a:	bd30      	pop	{r4, r5, pc}
 80a028c:	080a40e8 	.word	0x080a40e8
 80a0290:	200000a8 	.word	0x200000a8
 80a0294:	200000b8 	.word	0x200000b8
 80a0298:	20000ca8 	.word	0x20000ca8
 80a029c:	20000cf4 	.word	0x20000cf4
 80a02a0:	080a40ee 	.word	0x080a40ee
 80a02a4:	200000f0 	.word	0x200000f0
 80a02a8:	20000000 	.word	0x20000000
 80a02ac:	080a42ee 	.word	0x080a42ee
 80a02b0:	20000010 	.word	0x20000010
 80a02b4:	20000534 	.word	0x20000534

080a02b8 <_Z12setHueLights6String>:

void setHueLights(String command){
 80a02b8:	b530      	push	{r4, r5, lr}
 80a02ba:	b087      	sub	sp, #28
 80a02bc:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
 80a02be:	4911      	ldr	r1, [pc, #68]	; (80a0304 <_Z12setHueLights6String+0x4c>)
 80a02c0:	a802      	add	r0, sp, #8
 80a02c2:	f002 fd8a 	bl	80a2dda <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + LIGHT_PATH;
 80a02c6:	4910      	ldr	r1, [pc, #64]	; (80a0308 <_Z12setHueLights6String+0x50>)
 80a02c8:	a802      	add	r0, sp, #8
 80a02ca:	f002 fe07 	bl	80a2edc <_ZplRK15StringSumHelperRK6String>
 80a02ce:	490f      	ldr	r1, [pc, #60]	; (80a030c <_Z12setHueLights6String+0x54>)
 80a02d0:	f002 fe04 	bl	80a2edc <_ZplRK15StringSumHelperRK6String>
 80a02d4:	4c0e      	ldr	r4, [pc, #56]	; (80a0310 <_Z12setHueLights6String+0x58>)
 80a02d6:	4601      	mov	r1, r0
 80a02d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a02dc:	f002 fdb8 	bl	80a2e50 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a02e0:	a802      	add	r0, sp, #8
 80a02e2:	f002 fd30 	bl	80a2d46 <_ZN6StringD1Ev>
  request.body = command;
 80a02e6:	4629      	mov	r1, r5
 80a02e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a02ec:	f002 fdb0 	bl	80a2e50 <_ZN6StringaSERKS_>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
 80a02f0:	4b08      	ldr	r3, [pc, #32]	; (80a0314 <_Z12setHueLights6String+0x5c>)
 80a02f2:	4621      	mov	r1, r4
 80a02f4:	9300      	str	r3, [sp, #0]
 80a02f6:	4a08      	ldr	r2, [pc, #32]	; (80a0318 <_Z12setHueLights6String+0x60>)
 80a02f8:	4b08      	ldr	r3, [pc, #32]	; (80a031c <_Z12setHueLights6String+0x64>)
 80a02fa:	4809      	ldr	r0, [pc, #36]	; (80a0320 <_Z12setHueLights6String+0x68>)
 80a02fc:	f000 fac0 	bl	80a0880 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  http.put(request, response, headers);

}
 80a0300:	b007      	add	sp, #28
 80a0302:	bd30      	pop	{r4, r5, pc}
 80a0304:	080a40e8 	.word	0x080a40e8
 80a0308:	200000a8 	.word	0x200000a8
 80a030c:	20000088 	.word	0x20000088
 80a0310:	20000ca8 	.word	0x20000ca8
 80a0314:	080a40f2 	.word	0x080a40f2
 80a0318:	20000cf4 	.word	0x20000cf4
 80a031c:	20000000 	.word	0x20000000
 80a0320:	200000f0 	.word	0x200000f0

080a0324 <_Z19numTimesLoopCommand6String>:

void numTimesLoopCommand(String command)
{
 80a0324:	b530      	push	{r4, r5, lr}
 80a0326:	4605      	mov	r5, r0
 80a0328:	2405      	movs	r4, #5
 80a032a:	b085      	sub	sp, #20
  for (int i = 0; i < 5; i++)
  {
    setHueLights(command);
 80a032c:	4629      	mov	r1, r5
 80a032e:	4668      	mov	r0, sp
 80a0330:	f002 fd9d 	bl	80a2e6e <_ZN6StringC1ERKS_>
 80a0334:	4668      	mov	r0, sp
 80a0336:	f7ff ffbf 	bl	80a02b8 <_Z12setHueLights6String>
 80a033a:	4668      	mov	r0, sp
 80a033c:	f002 fd03 	bl	80a2d46 <_ZN6StringD1Ev>
    delay(200);
 80a0340:	20c8      	movs	r0, #200	; 0xc8
 80a0342:	f000 fea5 	bl	80a1090 <delay>
  for (int i = 0; i < 5; i++)
 80a0346:	3c01      	subs	r4, #1
 80a0348:	d1f0      	bne.n	80a032c <_Z19numTimesLoopCommand6String+0x8>
  }
 80a034a:	b005      	add	sp, #20
 80a034c:	bd30      	pop	{r4, r5, pc}

080a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a034e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0350:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0352:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0354:	b17c      	cbz	r4, 80a0376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0356:	6863      	ldr	r3, [r4, #4]
 80a0358:	3b01      	subs	r3, #1
 80a035a:	6063      	str	r3, [r4, #4]
 80a035c:	b95b      	cbnz	r3, 80a0376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a035e:	6823      	ldr	r3, [r4, #0]
 80a0360:	4620      	mov	r0, r4
 80a0362:	689b      	ldr	r3, [r3, #8]
 80a0364:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0366:	68a3      	ldr	r3, [r4, #8]
 80a0368:	3b01      	subs	r3, #1
 80a036a:	60a3      	str	r3, [r4, #8]
 80a036c:	b91b      	cbnz	r3, 80a0376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a036e:	6823      	ldr	r3, [r4, #0]
 80a0370:	4620      	mov	r0, r4
 80a0372:	68db      	ldr	r3, [r3, #12]
 80a0374:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0376:	4628      	mov	r0, r5
 80a0378:	bd38      	pop	{r3, r4, r5, pc}
	...

080a037c <loop>:
void loop() {
 80a037c:	b5f0      	push	{r4, r5, r6, r7, lr}
    analogvalue = analogRead(SENSOR_PIN);
 80a037e:	200a      	movs	r0, #10
void loop() {
 80a0380:	b089      	sub	sp, #36	; 0x24
    analogvalue = analogRead(SENSOR_PIN);
 80a0382:	f003 fb97 	bl	80a3ab4 <analogRead>
    lightStatus = false;
 80a0386:	2300      	movs	r3, #0
    analogvalue = analogRead(SENSOR_PIN);
 80a0388:	4e44      	ldr	r6, [pc, #272]	; (80a049c <loop+0x120>)
    lightStatus = false;
 80a038a:	4f45      	ldr	r7, [pc, #276]	; (80a04a0 <loop+0x124>)
    analogvalue = analogRead(SENSOR_PIN);
 80a038c:	6030      	str	r0, [r6, #0]
    lightStatus = false;
 80a038e:	703b      	strb	r3, [r7, #0]
    getLights();
 80a0390:	f7ff ff32 	bl	80a01f8 <_Z9getLightsv>
    if (hue != 8418 && lightStatus == true && trigger >= 3)
 80a0394:	4b43      	ldr	r3, [pc, #268]	; (80a04a4 <loop+0x128>)
 80a0396:	4635      	mov	r5, r6
 80a0398:	681a      	ldr	r2, [r3, #0]
 80a039a:	f242 03e2 	movw	r3, #8418	; 0x20e2
 80a039e:	429a      	cmp	r2, r3
 80a03a0:	4c41      	ldr	r4, [pc, #260]	; (80a04a8 <loop+0x12c>)
 80a03a2:	d076      	beq.n	80a0492 <loop+0x116>
 80a03a4:	783b      	ldrb	r3, [r7, #0]
 80a03a6:	2b00      	cmp	r3, #0
 80a03a8:	d073      	beq.n	80a0492 <loop+0x116>
 80a03aa:	6823      	ldr	r3, [r4, #0]
 80a03ac:	2b02      	cmp	r3, #2
 80a03ae:	dd70      	ble.n	80a0492 <loop+0x116>
      if (analogvalue >= 8 && analogvalue < 10 && last != "Dusk")
 80a03b0:	6833      	ldr	r3, [r6, #0]
 80a03b2:	3b08      	subs	r3, #8
 80a03b4:	2b01      	cmp	r3, #1
 80a03b6:	d827      	bhi.n	80a0408 <loop+0x8c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a03b8:	493c      	ldr	r1, [pc, #240]	; (80a04ac <loop+0x130>)
 80a03ba:	483d      	ldr	r0, [pc, #244]	; (80a04b0 <loop+0x134>)
 80a03bc:	f002 fd9a 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
 80a03c0:	bb10      	cbnz	r0, 80a0408 <loop+0x8c>
          Particle.publish("Dusk");
 80a03c2:	493a      	ldr	r1, [pc, #232]	; (80a04ac <loop+0x130>)
 80a03c4:	a804      	add	r0, sp, #16
 80a03c6:	f7ff feb1 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a03ca:	a805      	add	r0, sp, #20
 80a03cc:	f7ff ffbf 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          last = "Dusk";
 80a03d0:	4936      	ldr	r1, [pc, #216]	; (80a04ac <loop+0x130>)
 80a03d2:	4837      	ldr	r0, [pc, #220]	; (80a04b0 <loop+0x134>)
 80a03d4:	f002 fd56 	bl	80a2e84 <_ZN6StringaSEPKc>
          String command = "{\"on\": true, \"scene\": \"dpRaqSDvH6m0nx2\", \"transitiontime\": 30}";
 80a03d8:	4668      	mov	r0, sp
 80a03da:	4936      	ldr	r1, [pc, #216]	; (80a04b4 <loop+0x138>)
 80a03dc:	f002 fcfd 	bl	80a2dda <_ZN6StringC1EPKc>
          numTimesLoopCommand(command);
 80a03e0:	4669      	mov	r1, sp
 80a03e2:	a804      	add	r0, sp, #16
 80a03e4:	f002 fd43 	bl	80a2e6e <_ZN6StringC1ERKS_>
 80a03e8:	a804      	add	r0, sp, #16
 80a03ea:	f7ff ff9b 	bl	80a0324 <_Z19numTimesLoopCommand6String>
 80a03ee:	a804      	add	r0, sp, #16
 80a03f0:	f002 fca9 	bl	80a2d46 <_ZN6StringD1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a03f4:	4668      	mov	r0, sp
 80a03f6:	f002 fca6 	bl	80a2d46 <_ZN6StringD1Ev>
        trigger = 0;
 80a03fa:	2300      	movs	r3, #0
 80a03fc:	6023      	str	r3, [r4, #0]
    trigger ++;
 80a03fe:	6823      	ldr	r3, [r4, #0]
 80a0400:	3301      	adds	r3, #1
 80a0402:	6023      	str	r3, [r4, #0]
  }
 80a0404:	b009      	add	sp, #36	; 0x24
 80a0406:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (analogvalue >= 4 && analogvalue < 8 && last != "Dusk 2")
 80a0408:	682b      	ldr	r3, [r5, #0]
 80a040a:	3b04      	subs	r3, #4
 80a040c:	2b03      	cmp	r3, #3
 80a040e:	d914      	bls.n	80a043a <loop+0xbe>
        else if (analogvalue <= 2 && analogvalue < 4 && last != "Night")
 80a0410:	682b      	ldr	r3, [r5, #0]
 80a0412:	2b02      	cmp	r3, #2
 80a0414:	dc27      	bgt.n	80a0466 <loop+0xea>
 80a0416:	4928      	ldr	r1, [pc, #160]	; (80a04b8 <loop+0x13c>)
 80a0418:	4825      	ldr	r0, [pc, #148]	; (80a04b0 <loop+0x134>)
 80a041a:	f002 fd6b 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
 80a041e:	bb10      	cbnz	r0, 80a0466 <loop+0xea>
          Particle.publish("Night");
 80a0420:	4925      	ldr	r1, [pc, #148]	; (80a04b8 <loop+0x13c>)
 80a0422:	a804      	add	r0, sp, #16
 80a0424:	f7ff fe82 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0428:	a805      	add	r0, sp, #20
 80a042a:	f7ff ff90 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"bbI-AG7rdXVVyxI\", \"transitiontime\": 30}";
 80a042e:	4923      	ldr	r1, [pc, #140]	; (80a04bc <loop+0x140>)
 80a0430:	4668      	mov	r0, sp
 80a0432:	f002 fcd2 	bl	80a2dda <_ZN6StringC1EPKc>
          last = "Night";
 80a0436:	4920      	ldr	r1, [pc, #128]	; (80a04b8 <loop+0x13c>)
 80a0438:	e011      	b.n	80a045e <loop+0xe2>
 80a043a:	4921      	ldr	r1, [pc, #132]	; (80a04c0 <loop+0x144>)
 80a043c:	481c      	ldr	r0, [pc, #112]	; (80a04b0 <loop+0x134>)
 80a043e:	f002 fd59 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
        else if (analogvalue >= 4 && analogvalue < 8 && last != "Dusk 2")
 80a0442:	2800      	cmp	r0, #0
 80a0444:	d1e4      	bne.n	80a0410 <loop+0x94>
          Particle.publish("Dusk 2");
 80a0446:	491e      	ldr	r1, [pc, #120]	; (80a04c0 <loop+0x144>)
 80a0448:	a804      	add	r0, sp, #16
 80a044a:	f7ff fe6f 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a044e:	a805      	add	r0, sp, #20
 80a0450:	f7ff ff7d 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"O2PwRXlDLslyAId\", \"transitiontime\": 30}";
 80a0454:	491b      	ldr	r1, [pc, #108]	; (80a04c4 <loop+0x148>)
 80a0456:	4668      	mov	r0, sp
 80a0458:	f002 fcbf 	bl	80a2dda <_ZN6StringC1EPKc>
          last = "Dusk 2";
 80a045c:	4918      	ldr	r1, [pc, #96]	; (80a04c0 <loop+0x144>)
          last = "Day";
 80a045e:	4814      	ldr	r0, [pc, #80]	; (80a04b0 <loop+0x134>)
 80a0460:	f002 fd10 	bl	80a2e84 <_ZN6StringaSEPKc>
 80a0464:	e7bc      	b.n	80a03e0 <loop+0x64>
        else if (analogvalue >= 10 && last != "Day")
 80a0466:	682b      	ldr	r3, [r5, #0]
 80a0468:	2b09      	cmp	r3, #9
 80a046a:	ddc6      	ble.n	80a03fa <loop+0x7e>
 80a046c:	4916      	ldr	r1, [pc, #88]	; (80a04c8 <loop+0x14c>)
 80a046e:	4810      	ldr	r0, [pc, #64]	; (80a04b0 <loop+0x134>)
 80a0470:	f002 fd40 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
 80a0474:	2800      	cmp	r0, #0
 80a0476:	d1c0      	bne.n	80a03fa <loop+0x7e>
          Particle.publish("DAY");
 80a0478:	4914      	ldr	r1, [pc, #80]	; (80a04cc <loop+0x150>)
 80a047a:	a804      	add	r0, sp, #16
 80a047c:	f7ff fe56 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0480:	a805      	add	r0, sp, #20
 80a0482:	f7ff ff64 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0486:	4912      	ldr	r1, [pc, #72]	; (80a04d0 <loop+0x154>)
 80a0488:	4668      	mov	r0, sp
 80a048a:	f002 fca6 	bl	80a2dda <_ZN6StringC1EPKc>
          last = "Day";
 80a048e:	490e      	ldr	r1, [pc, #56]	; (80a04c8 <loop+0x14c>)
 80a0490:	e7e5      	b.n	80a045e <loop+0xe2>
    if (trigger > 3)
 80a0492:	6823      	ldr	r3, [r4, #0]
 80a0494:	2b03      	cmp	r3, #3
 80a0496:	dcb0      	bgt.n	80a03fa <loop+0x7e>
 80a0498:	e7b1      	b.n	80a03fe <loop+0x82>
 80a049a:	bf00      	nop
 80a049c:	200000ec 	.word	0x200000ec
 80a04a0:	20000534 	.word	0x20000534
 80a04a4:	20000010 	.word	0x20000010
 80a04a8:	20000d08 	.word	0x20000d08
 80a04ac:	080a40f6 	.word	0x080a40f6
 80a04b0:	20000524 	.word	0x20000524
 80a04b4:	080a40fb 	.word	0x080a40fb
 80a04b8:	080a4180 	.word	0x080a4180
 80a04bc:	080a4186 	.word	0x080a4186
 80a04c0:	080a413a 	.word	0x080a413a
 80a04c4:	080a4141 	.word	0x080a4141
 80a04c8:	080a41c5 	.word	0x080a41c5
 80a04cc:	080a41c9 	.word	0x080a41c9
 80a04d0:	080a41cd 	.word	0x080a41cd

080a04d4 <_ZN10HttpClientD1Ev>:
class HttpClient {
 80a04d4:	b510      	push	{r4, lr}
 80a04d6:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a04d8:	4b03      	ldr	r3, [pc, #12]	; (80a04e8 <_ZN10HttpClientD1Ev+0x14>)
 80a04da:	f840 3b18 	str.w	r3, [r0], #24
 80a04de:	f7ff ff36 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a04e2:	4620      	mov	r0, r4
 80a04e4:	bd10      	pop	{r4, pc}
 80a04e6:	bf00      	nop
 80a04e8:	080a44f0 	.word	0x080a44f0

080a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a04ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a04ee:	2614      	movs	r6, #20
 80a04f0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a04f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a04f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a04fa:	42ae      	cmp	r6, r5
 80a04fc:	d004      	beq.n	80a0508 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a04fe:	4628      	mov	r0, r5
 80a0500:	f002 fc21 	bl	80a2d46 <_ZN6StringD1Ev>
 80a0504:	3514      	adds	r5, #20
 80a0506:	e7f8      	b.n	80a04fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a0508:	6820      	ldr	r0, [r4, #0]
 80a050a:	f000 fd91 	bl	80a1030 <free>
    AllocatorT::free(data_);
}
 80a050e:	4620      	mov	r0, r4
 80a0510:	bd70      	pop	{r4, r5, r6, pc}

080a0512 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0512:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0516:	4604      	mov	r4, r0
 80a0518:	460d      	mov	r5, r1
 80a051a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a051c:	d916      	bls.n	80a054c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a051e:	4290      	cmp	r0, r2
 80a0520:	d215      	bcs.n	80a054e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0522:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a0526:	1a75      	subs	r5, r6, r1
 80a0528:	f1a1 0714 	sub.w	r7, r1, #20
 80a052c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a052e:	42b7      	cmp	r7, r6
 80a0530:	d01c      	beq.n	80a056c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0532:	b12c      	cbz	r4, 80a0540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0534:	4631      	mov	r1, r6
 80a0536:	4620      	mov	r0, r4
 80a0538:	f002 fc7f 	bl	80a2e3a <_ZN6StringC1EOS_>
 80a053c:	7c33      	ldrb	r3, [r6, #16]
 80a053e:	7423      	strb	r3, [r4, #16]
 80a0540:	4630      	mov	r0, r6
 80a0542:	f002 fc00 	bl	80a2d46 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a0546:	3e14      	subs	r6, #20
 80a0548:	3c14      	subs	r4, #20
 80a054a:	e7f0      	b.n	80a052e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a054c:	d00e      	beq.n	80a056c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a054e:	42b5      	cmp	r5, r6
 80a0550:	d00c      	beq.n	80a056c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0552:	b12c      	cbz	r4, 80a0560 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0554:	4629      	mov	r1, r5
 80a0556:	4620      	mov	r0, r4
 80a0558:	f002 fc6f 	bl	80a2e3a <_ZN6StringC1EOS_>
 80a055c:	7c2b      	ldrb	r3, [r5, #16]
 80a055e:	7423      	strb	r3, [r4, #16]
 80a0560:	4628      	mov	r0, r5
 80a0562:	f002 fbf0 	bl	80a2d46 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a0566:	3514      	adds	r5, #20
 80a0568:	3414      	adds	r4, #20
 80a056a:	e7f0      	b.n	80a054e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a056e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0574:	e9c0 3300 	strd	r3, r3, [r0]
 80a0578:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a057a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a057c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a057e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0580:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0582:	dd24      	ble.n	80a05ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a0584:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a0588:	fb08 f007 	mul.w	r0, r8, r7
 80a058c:	f000 fd48 	bl	80a1020 <malloc>
            if (!d) {
 80a0590:	4605      	mov	r5, r0
 80a0592:	b1e0      	cbz	r0, 80a05ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a0594:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a0598:	fb08 1202 	mla	r2, r8, r2, r1
 80a059c:	f7ff ffb9 	bl	80a0512 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a05a0:	6820      	ldr	r0, [r4, #0]
 80a05a2:	f000 fd45 	bl	80a1030 <free>
        data_ = d;
 80a05a6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a05a8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a05aa:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a05ae:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a05b2:	45b8      	cmp	r8, r7
 80a05b4:	d009      	beq.n	80a05ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a05b6:	4639      	mov	r1, r7
 80a05b8:	4628      	mov	r0, r5
 80a05ba:	f002 fc58 	bl	80a2e6e <_ZN6StringC1ERKS_>
 80a05be:	7c3b      	ldrb	r3, [r7, #16]
 80a05c0:	3514      	adds	r5, #20
 80a05c2:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a05c6:	3714      	adds	r7, #20
 80a05c8:	e7f3      	b.n	80a05b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a05ca:	6873      	ldr	r3, [r6, #4]
 80a05cc:	6063      	str	r3, [r4, #4]
}
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a05d4 <_GLOBAL__sub_I_logHandler>:
 80a05d4:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
 80a05d6:	2400      	movs	r4, #0
 80a05d8:	4b6d      	ldr	r3, [pc, #436]	; (80a0790 <_GLOBAL__sub_I_logHandler+0x1bc>)
 80a05da:	b08f      	sub	sp, #60	; 0x3c
 80a05dc:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a05de:	4621      	mov	r1, r4
 80a05e0:	2001      	movs	r0, #1
 80a05e2:	f000 fc71 	bl	80a0ec8 <system_thread_set_state>
        capacity_(0) {
 80a05e6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a05ea:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 80a05ec:	f003 f87e 	bl	80a36ec <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a05f0:	4d68      	ldr	r5, [pc, #416]	; (80a0794 <_GLOBAL__sub_I_logHandler+0x1c0>)
 80a05f2:	4604      	mov	r4, r0
 80a05f4:	462e      	mov	r6, r5
 80a05f6:	a902      	add	r1, sp, #8
 80a05f8:	a805      	add	r0, sp, #20
 80a05fa:	f7ff ffb8 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a05fe:	a905      	add	r1, sp, #20
 80a0600:	a808      	add	r0, sp, #32
 80a0602:	f7ff ffb4 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a0606:	4b64      	ldr	r3, [pc, #400]	; (80a0798 <_GLOBAL__sub_I_logHandler+0x1c4>)
 80a0608:	a908      	add	r1, sp, #32
 80a060a:	f846 3b04 	str.w	r3, [r6], #4
 80a060e:	a80b      	add	r0, sp, #44	; 0x2c
 80a0610:	f7ff ffad 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0614:	aa0b      	add	r2, sp, #44	; 0x2c
 80a0616:	211e      	movs	r1, #30
 80a0618:	4630      	mov	r0, r6
 80a061a:	f001 ff47 	bl	80a24ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a061e:	a80b      	add	r0, sp, #44	; 0x2c
 80a0620:	f7ff ff64 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a0624:	a808      	add	r0, sp, #32
 80a0626:	f7ff ff61 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a062a:	4b5c      	ldr	r3, [pc, #368]	; (80a079c <_GLOBAL__sub_I_logHandler+0x1c8>)
 80a062c:	622c      	str	r4, [r5, #32]
 80a062e:	602b      	str	r3, [r5, #0]
 80a0630:	a805      	add	r0, sp, #20
 80a0632:	f7ff ff5b 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0636:	4b5a      	ldr	r3, [pc, #360]	; (80a07a0 <_GLOBAL__sub_I_logHandler+0x1cc>)
SerialLogHandler logHandler;
 80a0638:	4c5a      	ldr	r4, [pc, #360]	; (80a07a4 <_GLOBAL__sub_I_logHandler+0x1d0>)
 80a063a:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a063c:	f003 f856 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a0640:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0644:	f003 f834 	bl	80a36b0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0648:	f001 fbca 	bl	80a1de0 <_ZN5spark10LogManager8instanceEv>
 80a064c:	4629      	mov	r1, r5
 80a064e:	f001 fec0 	bl	80a23d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0652:	4e55      	ldr	r6, [pc, #340]	; (80a07a8 <_GLOBAL__sub_I_logHandler+0x1d4>)
SerialLogHandler logHandler;
 80a0654:	a802      	add	r0, sp, #8
 80a0656:	f7ff ff49 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a065a:	4622      	mov	r2, r4
 80a065c:	4628      	mov	r0, r5
 80a065e:	4953      	ldr	r1, [pc, #332]	; (80a07ac <_GLOBAL__sub_I_logHandler+0x1d8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0660:	4d53      	ldr	r5, [pc, #332]	; (80a07b0 <_GLOBAL__sub_I_logHandler+0x1dc>)
SerialLogHandler logHandler;
 80a0662:	f003 fa97 	bl	80a3b94 <__aeabi_atexit>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0666:	4630      	mov	r0, r6
 80a0668:	4952      	ldr	r1, [pc, #328]	; (80a07b4 <_GLOBAL__sub_I_logHandler+0x1e0>)
 80a066a:	f002 fbb6 	bl	80a2dda <_ZN6StringC1EPKc>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a066e:	4f52      	ldr	r7, [pc, #328]	; (80a07b8 <_GLOBAL__sub_I_logHandler+0x1e4>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0670:	4630      	mov	r0, r6
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0672:	4e52      	ldr	r6, [pc, #328]	; (80a07bc <_GLOBAL__sub_I_logHandler+0x1e8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0674:	4622      	mov	r2, r4
 80a0676:	4629      	mov	r1, r5
 80a0678:	f003 fa8c 	bl	80a3b94 <__aeabi_atexit>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a067c:	4639      	mov	r1, r7
 80a067e:	4630      	mov	r0, r6
 80a0680:	f002 fbab 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0684:	4630      	mov	r0, r6
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0686:	4e4e      	ldr	r6, [pc, #312]	; (80a07c0 <_GLOBAL__sub_I_logHandler+0x1ec>)
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0688:	4622      	mov	r2, r4
 80a068a:	4629      	mov	r1, r5
 80a068c:	f003 fa82 	bl	80a3b94 <__aeabi_atexit>
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0690:	4639      	mov	r1, r7
 80a0692:	4630      	mov	r0, r6
 80a0694:	f002 fba1 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0698:	4630      	mov	r0, r6
const String LIGHT_PATH = "/groups/3/action";
 80a069a:	4e4a      	ldr	r6, [pc, #296]	; (80a07c4 <_GLOBAL__sub_I_logHandler+0x1f0>)
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a069c:	4622      	mov	r2, r4
 80a069e:	4629      	mov	r1, r5
 80a06a0:	f003 fa78 	bl	80a3b94 <__aeabi_atexit>
const String LIGHT_PATH = "/groups/3/action";
 80a06a4:	4630      	mov	r0, r6
 80a06a6:	4948      	ldr	r1, [pc, #288]	; (80a07c8 <_GLOBAL__sub_I_logHandler+0x1f4>)
 80a06a8:	f002 fb97 	bl	80a2dda <_ZN6StringC1EPKc>
 80a06ac:	4630      	mov	r0, r6
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a06ae:	4e47      	ldr	r6, [pc, #284]	; (80a07cc <_GLOBAL__sub_I_logHandler+0x1f8>)
const String LIGHT_PATH = "/groups/3/action";
 80a06b0:	4622      	mov	r2, r4
 80a06b2:	4629      	mov	r1, r5
 80a06b4:	f003 fa6e 	bl	80a3b94 <__aeabi_atexit>
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a06b8:	4630      	mov	r0, r6
 80a06ba:	4945      	ldr	r1, [pc, #276]	; (80a07d0 <_GLOBAL__sub_I_logHandler+0x1fc>)
 80a06bc:	f002 fb8d 	bl	80a2dda <_ZN6StringC1EPKc>
 80a06c0:	4630      	mov	r0, r6
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06c2:	4e44      	ldr	r6, [pc, #272]	; (80a07d4 <_GLOBAL__sub_I_logHandler+0x200>)
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a06c4:	4622      	mov	r2, r4
 80a06c6:	4629      	mov	r1, r5
 80a06c8:	f003 fa64 	bl	80a3b94 <__aeabi_atexit>
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06cc:	4630      	mov	r0, r6
 80a06ce:	4942      	ldr	r1, [pc, #264]	; (80a07d8 <_GLOBAL__sub_I_logHandler+0x204>)
 80a06d0:	f002 fb83 	bl	80a2dda <_ZN6StringC1EPKc>
 80a06d4:	4630      	mov	r0, r6
HttpClient http;
 80a06d6:	4e41      	ldr	r6, [pc, #260]	; (80a07dc <_GLOBAL__sub_I_logHandler+0x208>)
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06d8:	4622      	mov	r2, r4
 80a06da:	4629      	mov	r1, r5
 80a06dc:	f003 fa5a 	bl	80a3b94 <__aeabi_atexit>
HttpClient http;
 80a06e0:	4630      	mov	r0, r6
 80a06e2:	f000 f897 	bl	80a0814 <_ZN10HttpClientC1Ev>
 80a06e6:	4622      	mov	r2, r4
 80a06e8:	4630      	mov	r0, r6
 80a06ea:	493d      	ldr	r1, [pc, #244]	; (80a07e0 <_GLOBAL__sub_I_logHandler+0x20c>)
 80a06ec:	f003 fa52 	bl	80a3b94 <__aeabi_atexit>
IPAddress hueIP(192, 168, 1, 157);
 80a06f0:	239d      	movs	r3, #157	; 0x9d
 80a06f2:	4e3c      	ldr	r6, [pc, #240]	; (80a07e4 <_GLOBAL__sub_I_logHandler+0x210>)
 80a06f4:	9300      	str	r3, [sp, #0]
 80a06f6:	22a8      	movs	r2, #168	; 0xa8
 80a06f8:	2301      	movs	r3, #1
 80a06fa:	21c0      	movs	r1, #192	; 0xc0
 80a06fc:	4630      	mov	r0, r6
 80a06fe:	f001 f829 	bl	80a1754 <_ZN9IPAddressC1Ehhhh>
} http_request_t;
 80a0702:	4f39      	ldr	r7, [pc, #228]	; (80a07e8 <_GLOBAL__sub_I_logHandler+0x214>)
 80a0704:	4630      	mov	r0, r6
 80a0706:	4e39      	ldr	r6, [pc, #228]	; (80a07ec <_GLOBAL__sub_I_logHandler+0x218>)
 80a0708:	4622      	mov	r2, r4
 80a070a:	4939      	ldr	r1, [pc, #228]	; (80a07f0 <_GLOBAL__sub_I_logHandler+0x21c>)
 80a070c:	f003 fa42 	bl	80a3b94 <__aeabi_atexit>
 80a0710:	4639      	mov	r1, r7
 80a0712:	4630      	mov	r0, r6
 80a0714:	f002 fb61 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0718:	f106 0010 	add.w	r0, r6, #16
 80a071c:	f000 ffe4 	bl	80a16e8 <_ZN9IPAddressC1Ev>
 80a0720:	4639      	mov	r1, r7
 80a0722:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80a0726:	f002 fb58 	bl	80a2dda <_ZN6StringC1EPKc>
 80a072a:	4639      	mov	r1, r7
 80a072c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 80a0730:	f002 fb53 	bl	80a2dda <_ZN6StringC1EPKc>
http_request_t request;
 80a0734:	4630      	mov	r0, r6
} http_response_t;
 80a0736:	4e2f      	ldr	r6, [pc, #188]	; (80a07f4 <_GLOBAL__sub_I_logHandler+0x220>)
 80a0738:	4622      	mov	r2, r4
 80a073a:	492f      	ldr	r1, [pc, #188]	; (80a07f8 <_GLOBAL__sub_I_logHandler+0x224>)
 80a073c:	f003 fa2a 	bl	80a3b94 <__aeabi_atexit>
 80a0740:	4639      	mov	r1, r7
 80a0742:	1d30      	adds	r0, r6, #4
 80a0744:	f002 fb49 	bl	80a2dda <_ZN6StringC1EPKc>
http_response_t response;
 80a0748:	4622      	mov	r2, r4
 80a074a:	4630      	mov	r0, r6
 80a074c:	492b      	ldr	r1, [pc, #172]	; (80a07fc <_GLOBAL__sub_I_logHandler+0x228>)
 80a074e:	f003 fa21 	bl	80a3b94 <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a0752:	2332      	movs	r3, #50	; 0x32
 80a0754:	4e2a      	ldr	r6, [pc, #168]	; (80a0800 <_GLOBAL__sub_I_logHandler+0x22c>)
 80a0756:	9300      	str	r3, [sp, #0]
 80a0758:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 80a075c:	f206 432c 	addw	r3, r6, #1068	; 0x42c
 80a0760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0764:	4630      	mov	r0, r6
 80a0766:	f000 f9e5 	bl	80a0b34 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 80a076a:	4b26      	ldr	r3, [pc, #152]	; (80a0804 <_GLOBAL__sub_I_logHandler+0x230>)
JsonParserStatic<1024, 50> parse1;
 80a076c:	4630      	mov	r0, r6
 80a076e:	6033      	str	r3, [r6, #0]
String last = "null";
 80a0770:	4e25      	ldr	r6, [pc, #148]	; (80a0808 <_GLOBAL__sub_I_logHandler+0x234>)
JsonParserStatic<1024, 50> parse1;
 80a0772:	4622      	mov	r2, r4
 80a0774:	4925      	ldr	r1, [pc, #148]	; (80a080c <_GLOBAL__sub_I_logHandler+0x238>)
 80a0776:	f003 fa0d 	bl	80a3b94 <__aeabi_atexit>
String last = "null";
 80a077a:	4630      	mov	r0, r6
 80a077c:	4924      	ldr	r1, [pc, #144]	; (80a0810 <_GLOBAL__sub_I_logHandler+0x23c>)
 80a077e:	f002 fb2c 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0782:	4622      	mov	r2, r4
 80a0784:	4629      	mov	r1, r5
 80a0786:	4630      	mov	r0, r6
 80a0788:	f003 fa04 	bl	80a3b94 <__aeabi_atexit>
 80a078c:	b00f      	add	sp, #60	; 0x3c
 80a078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0790:	200000e8 	.word	0x200000e8
 80a0794:	20000538 	.word	0x20000538
 80a0798:	080a427c 	.word	0x080a427c
 80a079c:	080a4414 	.word	0x080a4414
 80a07a0:	080a4294 	.word	0x080a4294
 80a07a4:	20000084 	.word	0x20000084
 80a07a8:	200000a8 	.word	0x200000a8
 80a07ac:	080a014d 	.word	0x080a014d
 80a07b0:	080a2d47 	.word	0x080a2d47
 80a07b4:	080a420c 	.word	0x080a420c
 80a07b8:	080a4235 	.word	0x080a4235
 80a07bc:	200000b8 	.word	0x200000b8
 80a07c0:	200000c8 	.word	0x200000c8
 80a07c4:	20000088 	.word	0x20000088
 80a07c8:	080a423f 	.word	0x080a423f
 80a07cc:	20000098 	.word	0x20000098
 80a07d0:	080a41cd 	.word	0x080a41cd
 80a07d4:	200000d8 	.word	0x200000d8
 80a07d8:	080a4250 	.word	0x080a4250
 80a07dc:	200000f0 	.word	0x200000f0
 80a07e0:	080a04d5 	.word	0x080a04d5
 80a07e4:	2000050c 	.word	0x2000050c
 80a07e8:	080a42f9 	.word	0x080a42f9
 80a07ec:	20000ca8 	.word	0x20000ca8
 80a07f0:	080a00c9 	.word	0x080a00c9
 80a07f4:	20000cf4 	.word	0x20000cf4
 80a07f8:	080a00e3 	.word	0x080a00e3
 80a07fc:	080a00d5 	.word	0x080a00d5
 80a0800:	2000055c 	.word	0x2000055c
 80a0804:	080a42ac 	.word	0x080a42ac
 80a0808:	20000524 	.word	0x20000524
 80a080c:	080a0101 	.word	0x080a0101
 80a0810:	080a426c 	.word	0x080a426c

080a0814 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a0814:	b510      	push	{r4, lr}
 80a0816:	4604      	mov	r4, r0
 80a0818:	f002 fe1e 	bl	80a3458 <_ZN9TCPClientC1Ev>
{

}
 80a081c:	4620      	mov	r0, r4
 80a081e:	bd10      	pop	{r4, pc}

080a0820 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0820:	b538      	push	{r3, r4, r5, lr}
 80a0822:	4604      	mov	r4, r0
 80a0824:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a0826:	f002 f9ff 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.print(": ");
 80a082a:	4620      	mov	r0, r4
 80a082c:	4904      	ldr	r1, [pc, #16]	; (80a0840 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a082e:	f002 f9fb 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a0832:	4629      	mov	r1, r5
 80a0834:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
 80a083a:	f002 ba08 	b.w	80a2c4e <_ZN5Print7printlnEPKc>
 80a083e:	bf00      	nop
 80a0840:	080a43bf 	.word	0x080a43bf

080a0844 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a0844:	b538      	push	{r3, r4, r5, lr}
 80a0846:	4605      	mov	r5, r0
 80a0848:	4614      	mov	r4, r2
    client.print(aHeaderName);
 80a084a:	f002 f9ed 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.print(": ");
 80a084e:	4628      	mov	r0, r5
 80a0850:	490a      	ldr	r1, [pc, #40]	; (80a087c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
 80a0852:	f002 f9e9 	bl	80a2c28 <_ZN5Print5printEPKc>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0856:	2c00      	cmp	r4, #0
 80a0858:	da0d      	bge.n	80a0876 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
 80a085a:	212d      	movs	r1, #45	; 0x2d
 80a085c:	4628      	mov	r0, r5
 80a085e:	f002 f9e7 	bl	80a2c30 <_ZN5Print5printEc>
            val = -n;
 80a0862:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0864:	4628      	mov	r0, r5
 80a0866:	220a      	movs	r2, #10
 80a0868:	f002 f9fb 	bl	80a2c62 <_ZN5Print11printNumberEmh>
        n += println();
 80a086c:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a086e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0872:	f002 b9e0 	b.w	80a2c36 <_ZN5Print7printlnEv>
            val = n;
 80a0876:	4621      	mov	r1, r4
 80a0878:	e7f4      	b.n	80a0864 <_ZN10HttpClient10sendHeaderEPKci+0x20>
 80a087a:	bf00      	nop
 80a087c:	080a43bf 	.word	0x080a43bf

080a0880 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0884:	460e      	mov	r6, r1
 80a0886:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 80a088c:	b091      	sub	sp, #68	; 0x44
    aResponse.status = -1;
 80a088e:	6013      	str	r3, [r2, #0]
{
 80a0890:	4604      	mov	r4, r0
 80a0892:	2100      	movs	r1, #0
 80a0894:	4630      	mov	r0, r6
 80a0896:	4617      	mov	r7, r2
 80a0898:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80a089c:	f002 fb2a 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
 80a08a0:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a08a4:	4603      	mov	r3, r0
 80a08a6:	b998      	cbnz	r0, 80a08d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
 80a08a8:	f1be 0f00 	cmp.w	lr, #0
 80a08ac:	bf14      	ite	ne
 80a08ae:	4672      	movne	r2, lr
 80a08b0:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a08b2:	4620      	mov	r0, r4
 80a08b4:	6831      	ldr	r1, [r6, #0]
 80a08b6:	b292      	uxth	r2, r2
 80a08b8:	f002 fde6 	bl	80a3488 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a08bc:	1e05      	subs	r5, r0, #0
 80a08be:	bf18      	it	ne
 80a08c0:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a08c2:	b9c5      	cbnz	r5, 80a08f6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	f002 fd17 	bl	80a32f8 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a08ca:	b011      	add	sp, #68	; 0x44
 80a08cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a08d0:	4b74      	ldr	r3, [pc, #464]	; (80a0aa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a08d2:	ad0b      	add	r5, sp, #44	; 0x2c
 80a08d4:	f106 0c14 	add.w	ip, r6, #20
 80a08d8:	930a      	str	r3, [sp, #40]	; 0x28
 80a08da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a08de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a08e0:	f8dc 3000 	ldr.w	r3, [ip]
        connected = client.connect(aRequest.ip, aRequest.port);
 80a08e4:	4620      	mov	r0, r4
 80a08e6:	702b      	strb	r3, [r5, #0]
 80a08e8:	fa1f f28e 	uxth.w	r2, lr
 80a08ec:	2300      	movs	r3, #0
 80a08ee:	a90a      	add	r1, sp, #40	; 0x28
 80a08f0:	f002 fc58 	bl	80a31a4 <_ZN9TCPClient7connectE9IPAddresstm>
 80a08f4:	e7e2      	b.n	80a08bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
 80a08f6:	4649      	mov	r1, r9
 80a08f8:	4620      	mov	r0, r4
 80a08fa:	f002 f995 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.print(" ");
 80a08fe:	496a      	ldr	r1, [pc, #424]	; (80a0aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a0900:	4620      	mov	r0, r4
 80a0902:	f002 f991 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a0906:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80a0908:	4620      	mov	r0, r4
 80a090a:	f002 f98d 	bl	80a2c28 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a090e:	4967      	ldr	r1, [pc, #412]	; (80a0aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0910:	4620      	mov	r0, r4
 80a0912:	f002 f989 	bl	80a2c28 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a0916:	4620      	mov	r0, r4
 80a0918:	4965      	ldr	r1, [pc, #404]	; (80a0ab0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a091a:	4a66      	ldr	r2, [pc, #408]	; (80a0ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a091c:	f7ff ff80 	bl	80a0820 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0920:	2100      	movs	r1, #0
 80a0922:	4630      	mov	r0, r6
 80a0924:	f002 fae6 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a0928:	b920      	cbnz	r0, 80a0934 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a092a:	4620      	mov	r0, r4
 80a092c:	6832      	ldr	r2, [r6, #0]
 80a092e:	4962      	ldr	r1, [pc, #392]	; (80a0ab8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
 80a0930:	f7ff ff76 	bl	80a0820 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
 80a0934:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
 80a0938:	2100      	movs	r1, #0
 80a093a:	4650      	mov	r0, sl
 80a093c:	f002 fada 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
 80a0940:	b928      	cbnz	r0, 80a094e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
 80a0942:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
 80a0944:	4620      	mov	r0, r4
 80a0946:	495d      	ldr	r1, [pc, #372]	; (80a0abc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
 80a0948:	f7ff ff7c 	bl	80a0844 <_ZN10HttpClient10sendHeaderEPKci>
 80a094c:	e006      	b.n	80a095c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a094e:	4648      	mov	r0, r9
 80a0950:	495b      	ldr	r1, [pc, #364]	; (80a0ac0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
 80a0952:	f003 fac2 	bl	80a3eda <strcmp>
 80a0956:	4602      	mov	r2, r0
 80a0958:	2800      	cmp	r0, #0
 80a095a:	d0f3      	beq.n	80a0944 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
 80a095c:	f1b8 0f00 	cmp.w	r8, #0
 80a0960:	d00e      	beq.n	80a0980 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
 80a0962:	f8d8 1000 	ldr.w	r1, [r8]
 80a0966:	b159      	cbz	r1, 80a0980 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
 80a0968:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a096c:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
 80a096e:	b122      	cbz	r2, 80a097a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
 80a0970:	f7ff ff56 	bl	80a0820 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
 80a0974:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
 80a0978:	e7f3      	b.n	80a0962 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
 80a097a:	f002 f968 	bl	80a2c4e <_ZN5Print7printlnEPKc>
}
 80a097e:	e7f9      	b.n	80a0974 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
 80a0980:	4620      	mov	r0, r4
 80a0982:	f002 f958 	bl	80a2c36 <_ZN5Print7printlnEv>
    client.flush();
 80a0986:	4620      	mov	r0, r4
 80a0988:	f002 fb55 	bl	80a3036 <_ZN9TCPClient5flushEv>
 80a098c:	2100      	movs	r1, #0
 80a098e:	4650      	mov	r0, sl
 80a0990:	f002 fab0 	bl	80a2ef4 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
 80a0994:	b918      	cbnz	r0, 80a099e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
 80a0996:	4620      	mov	r0, r4
 80a0998:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80a099a:	f002 f958 	bl	80a2c4e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
 80a099e:	f104 0a1c 	add.w	sl, r4, #28
 80a09a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a09a6:	2100      	movs	r1, #0
 80a09a8:	4650      	mov	r0, sl
 80a09aa:	f003 fa53 	bl	80a3e54 <memset>
    bool error = false;
 80a09ae:	f04f 0800 	mov.w	r8, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a09b2:	f000 f8ff 	bl	80a0bb4 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
 80a09b6:	4646      	mov	r6, r8
 80a09b8:	9001      	str	r0, [sp, #4]
    } while (client.connected() && !timeout && !error);
 80a09ba:	f241 3b88 	movw	fp, #5000	; 0x1388
 80a09be:	f000 f8f9 	bl	80a0bb4 <HAL_Timer_Get_Milli_Seconds>
        while (client.available()) {
 80a09c2:	4620      	mov	r0, r4
 80a09c4:	f002 fc5e 	bl	80a3284 <_ZN9TCPClient9availableEv>
 80a09c8:	b1d8      	cbz	r0, 80a0a02 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	f002 fb9d 	bl	80a310a <_ZN9TCPClient4readEv>
 80a09d0:	4681      	mov	r9, r0
 80a09d2:	f000 f8ef 	bl	80a0bb4 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
 80a09d6:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a09da:	429e      	cmp	r6, r3
 80a09dc:	9001      	str	r0, [sp, #4]
 80a09de:	d804      	bhi.n	80a09ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
 80a09e0:	19a3      	adds	r3, r4, r6
            char c = client.read();
 80a09e2:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
 80a09e6:	3601      	adds	r6, #1
        while (client.available()) {
 80a09e8:	e7eb      	b.n	80a09c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a09ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a09ee:	429e      	cmp	r6, r3
 80a09f0:	d1f9      	bne.n	80a09e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a09f2:	2300      	movs	r3, #0
                client.stop();
 80a09f4:	4620      	mov	r0, r4
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a09f6:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a09fa:	f002 fc7d 	bl	80a32f8 <_ZN9TCPClient4stopEv>
                error = true;
 80a09fe:	46a8      	mov	r8, r5
 80a0a00:	e7f1      	b.n	80a09e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0a02:	19a3      	adds	r3, r4, r6
 80a0a04:	7718      	strb	r0, [r3, #28]
 80a0a06:	f000 f8d5 	bl	80a0bb4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
 80a0a0a:	9b01      	ldr	r3, [sp, #4]
 80a0a0c:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
 80a0a10:	f1b8 0f00 	cmp.w	r8, #0
 80a0a14:	d104      	bne.n	80a0a20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
 80a0a16:	45d9      	cmp	r9, fp
 80a0a18:	d802      	bhi.n	80a0a20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
 80a0a1a:	20c8      	movs	r0, #200	; 0xc8
 80a0a1c:	f000 fb38 	bl	80a1090 <delay>
    } while (client.connected() && !timeout && !error);
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	f002 fcc0 	bl	80a33a6 <_ZN9TCPClient9connectedEv>
 80a0a26:	b120      	cbz	r0, 80a0a32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0a28:	45d9      	cmp	r9, fp
 80a0a2a:	d802      	bhi.n	80a0a32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0a2c:	f1b8 0f00 	cmp.w	r8, #0
 80a0a30:	d0c7      	beq.n	80a09c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	f002 fc60 	bl	80a32f8 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
 80a0a38:	4651      	mov	r1, sl
 80a0a3a:	a802      	add	r0, sp, #8
 80a0a3c:	f002 f9cd 	bl	80a2dda <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
 80a0a40:	230c      	movs	r3, #12
 80a0a42:	2209      	movs	r2, #9
 80a0a44:	a902      	add	r1, sp, #8
 80a0a46:	a806      	add	r0, sp, #24
 80a0a48:	f002 fa78 	bl	80a2f3c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a0a4c:	491d      	ldr	r1, [pc, #116]	; (80a0ac4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
 80a0a4e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a50:	f002 f9c3 	bl	80a2dda <_ZN6StringC1EPKc>
 80a0a54:	a90a      	add	r1, sp, #40	; 0x28
 80a0a56:	a802      	add	r0, sp, #8
 80a0a58:	f002 fa6d 	bl	80a2f36 <_ZNK6String7indexOfERKS_>
 80a0a5c:	4604      	mov	r4, r0
 80a0a5e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a60:	f002 f971 	bl	80a2d46 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a0a64:	1c63      	adds	r3, r4, #1
 80a0a66:	d106      	bne.n	80a0a76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f6>
    String statusCode = raw_response.substring(9,12);
 80a0a68:	a806      	add	r0, sp, #24
 80a0a6a:	f002 f96c 	bl	80a2d46 <_ZN6StringD1Ev>
    String raw_response(buffer);
 80a0a6e:	a802      	add	r0, sp, #8
 80a0a70:	f002 f969 	bl	80a2d46 <_ZN6StringD1Ev>
 80a0a74:	e729      	b.n	80a08ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
 80a0a76:	1d3d      	adds	r5, r7, #4
 80a0a78:	4913      	ldr	r1, [pc, #76]	; (80a0ac8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
 80a0a7a:	4628      	mov	r0, r5
 80a0a7c:	f002 fa02 	bl	80a2e84 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0a80:	1d22      	adds	r2, r4, #4
 80a0a82:	a902      	add	r1, sp, #8
 80a0a84:	a80a      	add	r0, sp, #40	; 0x28
 80a0a86:	f002 fa7b 	bl	80a2f80 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0a8a:	a90a      	add	r1, sp, #40	; 0x28
 80a0a8c:	4628      	mov	r0, r5
 80a0a8e:	f002 fa21 	bl	80a2ed4 <_ZN6String6concatERKS_>
 80a0a92:	a80a      	add	r0, sp, #40	; 0x28
 80a0a94:	f002 f957 	bl	80a2d46 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0a98:	9806      	ldr	r0, [sp, #24]
 80a0a9a:	f003 f99d 	bl	80a3dd8 <atoi>
 80a0a9e:	6038      	str	r0, [r7, #0]
 80a0aa0:	e7e2      	b.n	80a0a68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
 80a0aa2:	bf00      	nop
 80a0aa4:	080a4368 	.word	0x080a4368
 80a0aa8:	080a43bb 	.word	0x080a43bb
 80a0aac:	080a42bf 	.word	0x080a42bf
 80a0ab0:	080a42d1 	.word	0x080a42d1
 80a0ab4:	080a42cb 	.word	0x080a42cb
 80a0ab8:	080a42dc 	.word	0x080a42dc
 80a0abc:	080a42e1 	.word	0x080a42e1
 80a0ac0:	080a42f0 	.word	0x080a42f0
 80a0ac4:	080a42f5 	.word	0x080a42f5
 80a0ac8:	080a42f9 	.word	0x080a42f9

080a0acc <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a0acc:	b510      	push	{r4, lr}
 80a0ace:	4b05      	ldr	r3, [pc, #20]	; (80a0ae4 <_ZN10JsonBufferD1Ev+0x18>)
 80a0ad0:	4604      	mov	r4, r0
 80a0ad2:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a0ad4:	7c03      	ldrb	r3, [r0, #16]
 80a0ad6:	b91b      	cbnz	r3, 80a0ae0 <_ZN10JsonBufferD1Ev+0x14>
 80a0ad8:	6840      	ldr	r0, [r0, #4]
 80a0ada:	b108      	cbz	r0, 80a0ae0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a0adc:	f000 faa8 	bl	80a1030 <free>
	}
}
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	bd10      	pop	{r4, pc}
 80a0ae4:	080a4304 	.word	0x080a4304

080a0ae8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a0ae8:	b510      	push	{r4, lr}
 80a0aea:	4604      	mov	r4, r0
}
 80a0aec:	f7ff ffee 	bl	80a0acc <_ZN10JsonBufferD1Ev>
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	2114      	movs	r1, #20
 80a0af4:	f003 f853 	bl	80a3b9e <_ZdlPvj>
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	bd10      	pop	{r4, pc}

080a0afc <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a0afc:	b510      	push	{r4, lr}
 80a0afe:	4b07      	ldr	r3, [pc, #28]	; (80a0b1c <_ZN10JsonParserD1Ev+0x20>)
 80a0b00:	4604      	mov	r4, r0
 80a0b02:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a0b04:	7c03      	ldrb	r3, [r0, #16]
 80a0b06:	b91b      	cbnz	r3, 80a0b10 <_ZN10JsonParserD1Ev+0x14>
 80a0b08:	6940      	ldr	r0, [r0, #20]
 80a0b0a:	b108      	cbz	r0, 80a0b10 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a0b0c:	f000 fa90 	bl	80a1030 <free>
JsonParser::~JsonParser() {
 80a0b10:	4620      	mov	r0, r4
 80a0b12:	f7ff ffdb 	bl	80a0acc <_ZN10JsonBufferD1Ev>
	}
}
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	bd10      	pop	{r4, pc}
 80a0b1a:	bf00      	nop
 80a0b1c:	080a4314 	.word	0x080a4314

080a0b20 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a0b20:	b510      	push	{r4, lr}
 80a0b22:	4604      	mov	r4, r0
}
 80a0b24:	f7ff ffea 	bl	80a0afc <_ZN10JsonParserD1Ev>
 80a0b28:	4620      	mov	r0, r4
 80a0b2a:	212c      	movs	r1, #44	; 0x2c
 80a0b2c:	f003 f837 	bl	80a3b9e <_ZdlPvj>
 80a0b30:	4620      	mov	r0, r4
 80a0b32:	bd10      	pop	{r4, pc}

080a0b34 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0b34:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a0b38:	2200      	movs	r2, #0
 80a0b3a:	60c2      	str	r2, [r0, #12]
 80a0b3c:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a0b3e:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0b40:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a0b42:	6143      	str	r3, [r0, #20]
 80a0b44:	4a02      	ldr	r2, [pc, #8]	; (80a0b50 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a0b46:	9b02      	ldr	r3, [sp, #8]
 80a0b48:	6002      	str	r2, [r0, #0]
 80a0b4a:	61c3      	str	r3, [r0, #28]
}
 80a0b4c:	bd10      	pop	{r4, pc}
 80a0b4e:	bf00      	nop
 80a0b50:	080a4314 	.word	0x080a4314

080a0b54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <os_mutex_recursive_create+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601d0 	.word	0x080601d0

080a0b64 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <os_mutex_recursive_destroy+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601d0 	.word	0x080601d0

080a0b74 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <os_mutex_recursive_lock+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601d0 	.word	0x080601d0

080a0b84 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <os_mutex_recursive_unlock+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601d0 	.word	0x080601d0

080a0b94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <HAL_RNG_GetRandomNumber+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	685b      	ldr	r3, [r3, #4]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	0806019c 	.word	0x0806019c

080a0ba4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <HAL_Delay_Microseconds+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	68db      	ldr	r3, [r3, #12]
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	0806019c 	.word	0x0806019c

080a0bb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	695b      	ldr	r3, [r3, #20]
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	0806019c 	.word	0x0806019c

080a0bc4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <HAL_Validate_Pin_Function+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	685b      	ldr	r3, [r3, #4]
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601b0 	.word	0x080601b0

080a0bd4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <HAL_Pin_Mode+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	689b      	ldr	r3, [r3, #8]
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601b0 	.word	0x080601b0

080a0be4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <HAL_Get_Pin_Mode+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	68db      	ldr	r3, [r3, #12]
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601b0 	.word	0x080601b0

080a0bf4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <HAL_GPIO_Write+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	691b      	ldr	r3, [r3, #16]
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601b0 	.word	0x080601b0

080a0c04 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <hal_adc_read+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601b0 	.word	0x080601b0

080a0c14 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <hal_i2c_write+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601ac 	.word	0x080601ac

080a0c24 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <hal_i2c_available+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601ac 	.word	0x080601ac

080a0c34 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <hal_i2c_read+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601ac 	.word	0x080601ac

080a0c44 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <hal_i2c_peek+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601ac 	.word	0x080601ac

080a0c54 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <hal_i2c_flush+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601ac 	.word	0x080601ac

080a0c64 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <hal_i2c_is_enabled+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601ac 	.word	0x080601ac

080a0c74 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b03      	ldr	r3, [pc, #12]	; (80a0c84 <hal_i2c_init+0x10>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0c7e:	9301      	str	r3, [sp, #4]
 80a0c80:	bd08      	pop	{r3, pc}
 80a0c82:	0000      	.short	0x0000
 80a0c84:	080601ac 	.word	0x080601ac

080a0c88 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <socket_active_status+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	681b      	ldr	r3, [r3, #0]
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601bc 	.word	0x080601bc

080a0c98 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0c98:	b508      	push	{r3, lr}
 80a0c9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ca4 <socket_handle_valid+0xc>)
 80a0c9c:	681b      	ldr	r3, [r3, #0]
 80a0c9e:	685b      	ldr	r3, [r3, #4]
 80a0ca0:	9301      	str	r3, [sp, #4]
 80a0ca2:	bd08      	pop	{r3, pc}
 80a0ca4:	080601bc 	.word	0x080601bc

080a0ca8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0ca8:	b508      	push	{r3, lr}
 80a0caa:	4b02      	ldr	r3, [pc, #8]	; (80a0cb4 <socket_create+0xc>)
 80a0cac:	681b      	ldr	r3, [r3, #0]
 80a0cae:	689b      	ldr	r3, [r3, #8]
 80a0cb0:	9301      	str	r3, [sp, #4]
 80a0cb2:	bd08      	pop	{r3, pc}
 80a0cb4:	080601bc 	.word	0x080601bc

080a0cb8 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0cb8:	b508      	push	{r3, lr}
 80a0cba:	4b02      	ldr	r3, [pc, #8]	; (80a0cc4 <socket_connect+0xc>)
 80a0cbc:	681b      	ldr	r3, [r3, #0]
 80a0cbe:	68db      	ldr	r3, [r3, #12]
 80a0cc0:	9301      	str	r3, [sp, #4]
 80a0cc2:	bd08      	pop	{r3, pc}
 80a0cc4:	080601bc 	.word	0x080601bc

080a0cc8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0cc8:	b508      	push	{r3, lr}
 80a0cca:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <socket_receive+0xc>)
 80a0ccc:	681b      	ldr	r3, [r3, #0]
 80a0cce:	691b      	ldr	r3, [r3, #16]
 80a0cd0:	9301      	str	r3, [sp, #4]
 80a0cd2:	bd08      	pop	{r3, pc}
 80a0cd4:	080601bc 	.word	0x080601bc

080a0cd8 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0cd8:	b508      	push	{r3, lr}
 80a0cda:	4b02      	ldr	r3, [pc, #8]	; (80a0ce4 <socket_close+0xc>)
 80a0cdc:	681b      	ldr	r3, [r3, #0]
 80a0cde:	6a1b      	ldr	r3, [r3, #32]
 80a0ce0:	9301      	str	r3, [sp, #4]
 80a0ce2:	bd08      	pop	{r3, pc}
 80a0ce4:	080601bc 	.word	0x080601bc

080a0ce8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0ce8:	b508      	push	{r3, lr}
 80a0cea:	4b02      	ldr	r3, [pc, #8]	; (80a0cf4 <socket_handle_invalid+0xc>)
 80a0cec:	681b      	ldr	r3, [r3, #0]
 80a0cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cf0:	9301      	str	r3, [sp, #4]
 80a0cf2:	bd08      	pop	{r3, pc}
 80a0cf4:	080601bc 	.word	0x080601bc

080a0cf8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0cf8:	b508      	push	{r3, lr}
 80a0cfa:	4b02      	ldr	r3, [pc, #8]	; (80a0d04 <socket_send_ex+0xc>)
 80a0cfc:	681b      	ldr	r3, [r3, #0]
 80a0cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d00:	9301      	str	r3, [sp, #4]
 80a0d02:	bd08      	pop	{r3, pc}
 80a0d04:	080601bc 	.word	0x080601bc

080a0d08 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <hal_spi_init+0xc>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	69db      	ldr	r3, [r3, #28]
 80a0d10:	9301      	str	r3, [sp, #4]
 80a0d12:	bd08      	pop	{r3, pc}
 80a0d14:	080601b4 	.word	0x080601b4

080a0d18 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0d18:	b508      	push	{r3, lr}
 80a0d1a:	4b02      	ldr	r3, [pc, #8]	; (80a0d24 <hal_spi_is_enabled+0xc>)
 80a0d1c:	681b      	ldr	r3, [r3, #0]
 80a0d1e:	6a1b      	ldr	r3, [r3, #32]
 80a0d20:	9301      	str	r3, [sp, #4]
 80a0d22:	bd08      	pop	{r3, pc}
 80a0d24:	080601b4 	.word	0x080601b4

080a0d28 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <hal_usart_init+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	699b      	ldr	r3, [r3, #24]
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	080601c4 	.word	0x080601c4

080a0d38 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <hal_usart_end+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	6a1b      	ldr	r3, [r3, #32]
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601c4 	.word	0x080601c4

080a0d48 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <hal_usart_write+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601c4 	.word	0x080601c4

080a0d58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <hal_usart_available+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601c4 	.word	0x080601c4

080a0d68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <hal_usart_read+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601c4 	.word	0x080601c4

080a0d78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	4b02      	ldr	r3, [pc, #8]	; (80a0d84 <hal_usart_peek+0xc>)
 80a0d7c:	681b      	ldr	r3, [r3, #0]
 80a0d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d80:	9301      	str	r3, [sp, #4]
 80a0d82:	bd08      	pop	{r3, pc}
 80a0d84:	080601c4 	.word	0x080601c4

080a0d88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0d88:	b508      	push	{r3, lr}
 80a0d8a:	4b02      	ldr	r3, [pc, #8]	; (80a0d94 <hal_usart_flush+0xc>)
 80a0d8c:	681b      	ldr	r3, [r3, #0]
 80a0d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d90:	9301      	str	r3, [sp, #4]
 80a0d92:	bd08      	pop	{r3, pc}
 80a0d94:	080601c4 	.word	0x080601c4

080a0d98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <hal_usart_is_enabled+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601c4 	.word	0x080601c4

080a0da8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <hal_usart_available_data_for_write+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601c4 	.word	0x080601c4

080a0db8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <hal_usart_begin_config+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601c4 	.word	0x080601c4

080a0dc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <HAL_USB_USART_Init+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	681b      	ldr	r3, [r3, #0]
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	080601d8 	.word	0x080601d8

080a0dd8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <HAL_USB_USART_Begin+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	685b      	ldr	r3, [r3, #4]
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601d8 	.word	0x080601d8

080a0de8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <HAL_USB_USART_End+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	689b      	ldr	r3, [r3, #8]
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601d8 	.word	0x080601d8

080a0df8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <HAL_USB_USART_Available_Data+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	691b      	ldr	r3, [r3, #16]
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601d8 	.word	0x080601d8

080a0e08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	695b      	ldr	r3, [r3, #20]
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601d8 	.word	0x080601d8

080a0e18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <HAL_USB_USART_Receive_Data+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	699b      	ldr	r3, [r3, #24]
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601d8 	.word	0x080601d8

080a0e28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <HAL_USB_USART_Send_Data+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	69db      	ldr	r3, [r3, #28]
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601d8 	.word	0x080601d8

080a0e38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <HAL_USB_USART_Flush_Data+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	6a1b      	ldr	r3, [r3, #32]
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601d8 	.word	0x080601d8

080a0e48 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <HAL_NET_SetNetWatchDog+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601c0 	.word	0x080601c0

080a0e58 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0e58:	b508      	push	{r3, lr}
 80a0e5a:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <inet_gethostbyname+0xc>)
 80a0e5c:	681b      	ldr	r3, [r3, #0]
 80a0e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e60:	9301      	str	r3, [sp, #4]
 80a0e62:	bd08      	pop	{r3, pc}
 80a0e64:	080601c0 	.word	0x080601c0

080a0e68 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <panic_+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080201a8 	.word	0x080201a8

080a0e78 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <log_message+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080201a8 	.word	0x080201a8

080a0e88 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <log_level_name+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080201a8 	.word	0x080201a8

080a0e98 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <log_set_callbacks+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080201a8 	.word	0x080201a8

080a0ea8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <set_system_mode+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	685b      	ldr	r3, [r3, #4]
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601a4 	.word	0x080601a4

080a0eb8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <system_delay_ms+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	695b      	ldr	r3, [r3, #20]
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601a4 	.word	0x080601a4

080a0ec8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <system_thread_set_state+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601a4 	.word	0x080601a4

080a0ed8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <application_thread_current+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601a4 	.word	0x080601a4

080a0ee8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <application_thread_invoke+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601a4 	.word	0x080601a4

080a0ef8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b03      	ldr	r3, [pc, #12]	; (80a0f08 <system_ctrl_set_app_request_handler+0x10>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f02:	9301      	str	r3, [sp, #4]
 80a0f04:	bd08      	pop	{r3, pc}
 80a0f06:	0000      	.short	0x0000
 80a0f08:	080601a4 	.word	0x080601a4

080a0f0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f0c:	b508      	push	{r3, lr}
 80a0f0e:	4b03      	ldr	r3, [pc, #12]	; (80a0f1c <system_ctrl_set_result+0x10>)
 80a0f10:	681b      	ldr	r3, [r3, #0]
 80a0f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f16:	9301      	str	r3, [sp, #4]
 80a0f18:	bd08      	pop	{r3, pc}
 80a0f1a:	0000      	.short	0x0000
 80a0f1c:	080601a4 	.word	0x080601a4

080a0f20 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <spark_variable+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	681b      	ldr	r3, [r3, #0]
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601cc 	.word	0x080601cc

080a0f30 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <spark_cloud_flag_connected+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	695b      	ldr	r3, [r3, #20]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601cc 	.word	0x080601cc

080a0f40 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <spark_send_event+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6a1b      	ldr	r3, [r3, #32]
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601cc 	.word	0x080601cc

080a0f50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601cc 	.word	0x080601cc

080a0f60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <network_connect+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	685b      	ldr	r3, [r3, #4]
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601c8 	.word	0x080601c8

080a0f70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <network_connecting+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	689b      	ldr	r3, [r3, #8]
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601c8 	.word	0x080601c8

080a0f80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <network_disconnect+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	68db      	ldr	r3, [r3, #12]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601c8 	.word	0x080601c8

080a0f90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <network_ready+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	691b      	ldr	r3, [r3, #16]
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601c8 	.word	0x080601c8

080a0fa0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <network_on+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	695b      	ldr	r3, [r3, #20]
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601c8 	.word	0x080601c8

080a0fb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <network_off+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	699b      	ldr	r3, [r3, #24]
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601c8 	.word	0x080601c8

080a0fc0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <network_listen+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	69db      	ldr	r3, [r3, #28]
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	080601c8 	.word	0x080601c8

080a0fd0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <network_listening+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	6a1b      	ldr	r3, [r3, #32]
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	080601c8 	.word	0x080601c8

080a0fe0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <network_set_listen_timeout+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	080601c8 	.word	0x080601c8

080a0ff0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <network_get_listen_timeout+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080601c8 	.word	0x080601c8

080a1000 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <network_is_on+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601c8 	.word	0x080601c8

080a1010 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <network_is_off+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601c8 	.word	0x080601c8

080a1020 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <malloc+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	681b      	ldr	r3, [r3, #0]
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601a0 	.word	0x080601a0

080a1030 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <free+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	685b      	ldr	r3, [r3, #4]
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601a0 	.word	0x080601a0

080a1040 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <realloc+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	689b      	ldr	r3, [r3, #8]
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601a0 	.word	0x080601a0

080a1050 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <vsnprintf+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601a0 	.word	0x080601a0

080a1060 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <abort+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	080601a0 	.word	0x080601a0

080a1070 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <_malloc_r+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601a0 	.word	0x080601a0

080a1080 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <newlib_impure_ptr_callback+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	080601a0 	.word	0x080601a0

080a1090 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1090:	2100      	movs	r1, #0
 80a1092:	f7ff bf11 	b.w	80a0eb8 <system_delay_ms>

080a1096 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1096:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1098:	6883      	ldr	r3, [r0, #8]
 80a109a:	4604      	mov	r4, r0
 80a109c:	b90b      	cbnz	r3, 80a10a2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a109e:	f002 fd84 	bl	80a3baa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a10a2:	68c3      	ldr	r3, [r0, #12]
 80a10a4:	4798      	blx	r3
      if (_M_manager)
 80a10a6:	68a3      	ldr	r3, [r4, #8]
 80a10a8:	b11b      	cbz	r3, 80a10b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a10aa:	2203      	movs	r2, #3
 80a10ac:	4621      	mov	r1, r4
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a10b2:	4620      	mov	r0, r4
}
 80a10b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a10b8:	2110      	movs	r1, #16
 80a10ba:	f002 bd70 	b.w	80a3b9e <_ZdlPvj>

080a10be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a10be:	4770      	bx	lr

080a10c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a10c0:	2000      	movs	r0, #0
 80a10c2:	4770      	bx	lr

080a10c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a10c4:	b510      	push	{r4, lr}
 80a10c6:	4604      	mov	r4, r0
 80a10c8:	2110      	movs	r1, #16
 80a10ca:	f002 fd68 	bl	80a3b9e <_ZdlPvj>
 80a10ce:	4620      	mov	r0, r4
 80a10d0:	bd10      	pop	{r4, pc}

080a10d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a10d2:	b508      	push	{r3, lr}
      { delete this; }
 80a10d4:	f7ff fff6 	bl	80a10c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a10d8:	bd08      	pop	{r3, pc}

080a10da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a10da:	b510      	push	{r4, lr}
      if (_M_manager)
 80a10dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a10de:	4604      	mov	r4, r0
      if (_M_manager)
 80a10e0:	b113      	cbz	r3, 80a10e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a10e2:	2203      	movs	r2, #3
 80a10e4:	4601      	mov	r1, r0
 80a10e6:	4798      	blx	r3
    }
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	bd10      	pop	{r4, pc}

080a10ec <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a10ec:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a10ee:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a10f0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a10f4:	6002      	str	r2, [r0, #0]
 80a10f6:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a10f8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10fa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a10fc:	680c      	ldr	r4, [r1, #0]
 80a10fe:	8085      	strh	r5, [r0, #4]
 80a1100:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1102:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1104:	bd30      	pop	{r4, r5, pc}

080a1106 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1106:	b510      	push	{r4, lr}
 80a1108:	4604      	mov	r4, r0
    free((void*)msg_);
 80a110a:	6800      	ldr	r0, [r0, #0]
 80a110c:	f7ff ff90 	bl	80a1030 <free>
}
 80a1110:	4620      	mov	r0, r4
 80a1112:	bd10      	pop	{r4, pc}

080a1114 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1114:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1116:	68c4      	ldr	r4, [r0, #12]
 80a1118:	b1f4      	cbz	r4, 80a1158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a111a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a111c:	2b02      	cmp	r3, #2
 80a111e:	d103      	bne.n	80a1128 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1120:	f104 000c 	add.w	r0, r4, #12
 80a1124:	f7ff ffef 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1128:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a112a:	b135      	cbz	r5, 80a113a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a112c:	4628      	mov	r0, r5
 80a112e:	f7ff ffd4 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
 80a1132:	2110      	movs	r1, #16
 80a1134:	4628      	mov	r0, r5
 80a1136:	f002 fd32 	bl	80a3b9e <_ZdlPvj>
 80a113a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a113c:	b135      	cbz	r5, 80a114c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a113e:	4628      	mov	r0, r5
 80a1140:	f7ff ffcb 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
 80a1144:	2110      	movs	r1, #16
 80a1146:	4628      	mov	r0, r5
 80a1148:	f002 fd29 	bl	80a3b9e <_ZdlPvj>
 80a114c:	4620      	mov	r0, r4
 80a114e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1152:	2114      	movs	r1, #20
 80a1154:	f002 bd23 	b.w	80a3b9e <_ZdlPvj>
 80a1158:	bd38      	pop	{r3, r4, r5, pc}

080a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a115a:	680b      	ldr	r3, [r1, #0]
 80a115c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a115e:	b113      	cbz	r3, 80a1166 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1160:	685a      	ldr	r2, [r3, #4]
 80a1162:	3201      	adds	r2, #1
 80a1164:	605a      	str	r2, [r3, #4]
      }
 80a1166:	4770      	bx	lr

080a1168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1168:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a116a:	460e      	mov	r6, r1
 80a116c:	4604      	mov	r4, r0
 80a116e:	f856 3b04 	ldr.w	r3, [r6], #4
 80a1172:	460d      	mov	r5, r1
 80a1174:	a801      	add	r0, sp, #4
 80a1176:	4631      	mov	r1, r6
 80a1178:	9300      	str	r3, [sp, #0]
 80a117a:	f7ff ffee 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a117e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1180:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1182:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a1184:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1186:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1188:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a118a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a118c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a118e:	f7ff f8de 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1192:	4630      	mov	r0, r6
 80a1194:	f7ff f8db 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1198:	4628      	mov	r0, r5
 80a119a:	2108      	movs	r1, #8
 80a119c:	f002 fcff 	bl	80a3b9e <_ZdlPvj>
        return p;
    }
 80a11a0:	4620      	mov	r0, r4
 80a11a2:	b002      	add	sp, #8
 80a11a4:	bd70      	pop	{r4, r5, r6, pc}

080a11a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a11a6:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11a8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a11aa:	460b      	mov	r3, r1
 80a11ac:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11ae:	c803      	ldmia	r0, {r0, r1}
 80a11b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a11b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a11b8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a11bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a11c0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a11c4:	b002      	add	sp, #8
 80a11c6:	bd10      	pop	{r4, pc}

080a11c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a11c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a11ca:	b510      	push	{r4, lr}
      if (_M_empty())
 80a11cc:	b90a      	cbnz	r2, 80a11d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a11ce:	f002 fcec 	bl	80a3baa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11d2:	68c3      	ldr	r3, [r0, #12]
    }
 80a11d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11d8:	4718      	bx	r3

080a11da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a11da:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a11dc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a11de:	f100 0110 	add.w	r1, r0, #16
 80a11e2:	f7ff fff1 	bl	80a11c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a11e6:	bd08      	pop	{r3, pc}

080a11e8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a11e8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a11ea:	b510      	push	{r4, lr}
      if (_M_empty())
 80a11ec:	b90a      	cbnz	r2, 80a11f2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a11ee:	f002 fcdc 	bl	80a3baa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11f2:	68c3      	ldr	r3, [r0, #12]
    }
 80a11f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11f8:	4718      	bx	r3

080a11fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a11fa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a11fc:	6800      	ldr	r0, [r0, #0]
 80a11fe:	f100 0110 	add.w	r1, r0, #16
 80a1202:	f7ff fff1 	bl	80a11e8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1206:	bd08      	pop	{r3, pc}

080a1208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1208:	b538      	push	{r3, r4, r5, lr}
 80a120a:	2300      	movs	r3, #0
 80a120c:	4604      	mov	r4, r0
 80a120e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1210:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1212:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1214:	f7fe ff3f 	bl	80a0096 <_Znwj>
 80a1218:	b128      	cbz	r0, 80a1226 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a121a:	2301      	movs	r3, #1
 80a121c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1220:	4b02      	ldr	r3, [pc, #8]	; (80a122c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1222:	60c5      	str	r5, [r0, #12]
 80a1224:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1226:	6020      	str	r0, [r4, #0]
	}
 80a1228:	4620      	mov	r0, r4
 80a122a:	bd38      	pop	{r3, r4, r5, pc}
 80a122c:	080a4324 	.word	0x080a4324

080a1230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1230:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1232:	2300      	movs	r3, #0
 80a1234:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1236:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1238:	4604      	mov	r4, r0
 80a123a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a123c:	b12b      	cbz	r3, 80a124a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a123e:	2202      	movs	r2, #2
 80a1240:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1242:	68eb      	ldr	r3, [r5, #12]
 80a1244:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1246:	68ab      	ldr	r3, [r5, #8]
 80a1248:	60a3      	str	r3, [r4, #8]
    }
 80a124a:	4620      	mov	r0, r4
 80a124c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1250:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1252:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1254:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1256:	4668      	mov	r0, sp
 80a1258:	f7ff ff48 	bl	80a10ec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a125c:	f04f 0302 	mov.w	r3, #2
 80a1260:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1264:	2a00      	cmp	r2, #0
 80a1266:	d103      	bne.n	80a1270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1268:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a126c:	2900      	cmp	r1, #0
 80a126e:	d1f7      	bne.n	80a1260 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1270:	d125      	bne.n	80a12be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1272:	f104 050c 	add.w	r5, r4, #12
 80a1276:	4669      	mov	r1, sp
 80a1278:	4628      	mov	r0, r5
 80a127a:	f7ff ff37 	bl	80a10ec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a127e:	2301      	movs	r3, #1
 80a1280:	f3bf 8f5b 	dmb	ish
 80a1284:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1286:	2000      	movs	r0, #0
 80a1288:	f3bf 8f5b 	dmb	ish
 80a128c:	f104 0308 	add.w	r3, r4, #8
 80a1290:	e853 6f00 	ldrex	r6, [r3]
 80a1294:	e843 0200 	strex	r2, r0, [r3]
 80a1298:	2a00      	cmp	r2, #0
 80a129a:	d1f9      	bne.n	80a1290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a129c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a12a0:	b16e      	cbz	r6, 80a12be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a12a2:	f7ff fe19 	bl	80a0ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a12a6:	b178      	cbz	r0, 80a12c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a12a8:	4629      	mov	r1, r5
 80a12aa:	4630      	mov	r0, r6
 80a12ac:	f7ff ff8c 	bl	80a11c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a12b0:	4630      	mov	r0, r6
 80a12b2:	f7ff ff12 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a12b6:	2110      	movs	r1, #16
 80a12b8:	4630      	mov	r0, r6
 80a12ba:	f002 fc70 	bl	80a3b9e <_ZdlPvj>
        p_->setError(std::move(error));
 80a12be:	4668      	mov	r0, sp
 80a12c0:	f7ff ff21 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
    }
 80a12c4:	b009      	add	sp, #36	; 0x24
 80a12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a12c8:	4631      	mov	r1, r6
 80a12ca:	a802      	add	r0, sp, #8
 80a12cc:	f7ff ffb0 	bl	80a1230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a12d0:	68e0      	ldr	r0, [r4, #12]
 80a12d2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a12d6:	b108      	cbz	r0, 80a12dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a12d8:	f002 fe12 	bl	80a3f00 <strdup>
        type_(type) {
 80a12dc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a12de:	2010      	movs	r0, #16
 80a12e0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a12e4:	f7fe fed7 	bl	80a0096 <_Znwj>
 80a12e8:	4605      	mov	r5, r0
 80a12ea:	b1e8      	cbz	r0, 80a1328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a12ec:	2700      	movs	r7, #0
 80a12ee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a12f0:	2018      	movs	r0, #24
 80a12f2:	f7fe fed0 	bl	80a0096 <_Znwj>
 80a12f6:	4604      	mov	r4, r0
 80a12f8:	b188      	cbz	r0, 80a131e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a12fa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a12fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a12fe:	a802      	add	r0, sp, #8
 80a1300:	f7ff ff51 	bl	80a11a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1304:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1306:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1308:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a130a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a130c:	9204      	str	r2, [sp, #16]
 80a130e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1310:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1312:	60e3      	str	r3, [r4, #12]
 80a1314:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1318:	9205      	str	r2, [sp, #20]
 80a131a:	f7ff fee7 	bl	80a10ec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a131e:	4b08      	ldr	r3, [pc, #32]	; (80a1340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1320:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1322:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1324:	4b07      	ldr	r3, [pc, #28]	; (80a1344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1326:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1328:	a806      	add	r0, sp, #24
 80a132a:	f7ff feec 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a132e:	a802      	add	r0, sp, #8
 80a1330:	f7ff fed3 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1334:	2200      	movs	r2, #0
 80a1336:	4629      	mov	r1, r5
 80a1338:	4803      	ldr	r0, [pc, #12]	; (80a1348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a133a:	f7ff fdd5 	bl	80a0ee8 <application_thread_invoke>
 80a133e:	e7b7      	b.n	80a12b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1340:	080a11db 	.word	0x080a11db
 80a1344:	080a1471 	.word	0x080a1471
 80a1348:	080a1097 	.word	0x080a1097

080a134c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1350:	b08a      	sub	sp, #40	; 0x28
 80a1352:	4605      	mov	r5, r0
 80a1354:	460c      	mov	r4, r1
 80a1356:	4617      	mov	r7, r2
 80a1358:	4698      	mov	r8, r3
 80a135a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a135e:	f7ff fde7 	bl	80a0f30 <spark_cloud_flag_connected>
 80a1362:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1364:	4682      	mov	sl, r0
 80a1366:	bb38      	cbnz	r0, 80a13b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1368:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a136c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a136e:	a905      	add	r1, sp, #20
 80a1370:	4630      	mov	r0, r6
 80a1372:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1376:	f7ff feb9 	bl	80a10ec <_ZN8particle5ErrorC1EOS0_>
 80a137a:	2014      	movs	r0, #20
 80a137c:	f7fe fe8b 	bl	80a0096 <_Znwj>
 80a1380:	4604      	mov	r4, r0
 80a1382:	b148      	cbz	r0, 80a1398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1384:	2302      	movs	r3, #2
 80a1386:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1388:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a138a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a138e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1390:	4631      	mov	r1, r6
 80a1392:	300c      	adds	r0, #12
 80a1394:	f7ff feaa 	bl	80a10ec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1398:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a139a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a139c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a13a0:	f7ff ff32 	bl	80a1208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a13a4:	4630      	mov	r0, r6
 80a13a6:	f7ff feae 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a13aa:	a805      	add	r0, sp, #20
 80a13ac:	f7ff feab 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a13b0:	4628      	mov	r0, r5
 80a13b2:	b00a      	add	sp, #40	; 0x28
 80a13b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a13b8:	230c      	movs	r3, #12
 80a13ba:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a13be:	2014      	movs	r0, #20
 80a13c0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a13c4:	9307      	str	r3, [sp, #28]
 80a13c6:	f7fe fe66 	bl	80a0096 <_Znwj>
 80a13ca:	4601      	mov	r1, r0
 80a13cc:	b128      	cbz	r0, 80a13da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a13ce:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a13d2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a13d6:	f880 a001 	strb.w	sl, [r0, #1]
 80a13da:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a13dc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a13de:	f7ff ff13 	bl	80a1208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a13e2:	4b22      	ldr	r3, [pc, #136]	; (80a146c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a13e4:	2008      	movs	r0, #8
 80a13e6:	9308      	str	r3, [sp, #32]
 80a13e8:	f7fe fe55 	bl	80a0096 <_Znwj>
 80a13ec:	4682      	mov	sl, r0
 80a13ee:	b128      	cbz	r0, 80a13fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a13f0:	9b03      	ldr	r3, [sp, #12]
 80a13f2:	a904      	add	r1, sp, #16
 80a13f4:	f840 3b04 	str.w	r3, [r0], #4
 80a13f8:	f7ff feaf 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a13fc:	4642      	mov	r2, r8
 80a13fe:	4639      	mov	r1, r7
 80a1400:	4620      	mov	r0, r4
 80a1402:	9600      	str	r6, [sp, #0]
 80a1404:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1408:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a140c:	f7ff fd98 	bl	80a0f40 <spark_send_event>
 80a1410:	b9b8      	cbnz	r0, 80a1442 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a1412:	9b03      	ldr	r3, [sp, #12]
 80a1414:	785b      	ldrb	r3, [r3, #1]
 80a1416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a141a:	b993      	cbnz	r3, 80a1442 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a141c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1420:	a905      	add	r1, sp, #20
 80a1422:	a803      	add	r0, sp, #12
 80a1424:	9205      	str	r2, [sp, #20]
 80a1426:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a142a:	f7ff ff11 	bl	80a1250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a142e:	a805      	add	r0, sp, #20
 80a1430:	f7ff fe69 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1434:	a805      	add	r0, sp, #20
 80a1436:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1438:	f7ff fe96 	bl	80a1168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a143c:	a806      	add	r0, sp, #24
 80a143e:	f7fe ff86 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1442:	9b03      	ldr	r3, [sp, #12]
 80a1444:	a904      	add	r1, sp, #16
 80a1446:	a806      	add	r0, sp, #24
 80a1448:	9305      	str	r3, [sp, #20]
 80a144a:	f7ff fe86 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a144e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1450:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1452:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1454:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1456:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1458:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a145a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a145c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a145e:	f7fe ff76 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1462:	a804      	add	r0, sp, #16
 80a1464:	f7fe ff73 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1468:	e7a2      	b.n	80a13b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a146a:	bf00      	nop
 80a146c:	080a1535 	.word	0x080a1535

080a1470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1470:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1474:	4605      	mov	r5, r0
	  switch (__op)
 80a1476:	d007      	beq.n	80a1488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1478:	2a03      	cmp	r2, #3
 80a147a:	d018      	beq.n	80a14ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a147c:	2a01      	cmp	r2, #1
 80a147e:	d101      	bne.n	80a1484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1480:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1482:	6003      	str	r3, [r0, #0]
	}
 80a1484:	2000      	movs	r0, #0
 80a1486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1488:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a148a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a148c:	f7fe fe03 	bl	80a0096 <_Znwj>
 80a1490:	4604      	mov	r4, r0
 80a1492:	b150      	cbz	r0, 80a14aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1494:	4631      	mov	r1, r6
 80a1496:	f7ff fecb 	bl	80a1230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a149a:	6930      	ldr	r0, [r6, #16]
 80a149c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a14a0:	b108      	cbz	r0, 80a14a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a14a2:	f002 fd2d 	bl	80a3f00 <strdup>
        type_(type) {
 80a14a6:	6120      	str	r0, [r4, #16]
 80a14a8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a14aa:	602c      	str	r4, [r5, #0]
	}
 80a14ac:	e7ea      	b.n	80a1484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a14ae:	6804      	ldr	r4, [r0, #0]
 80a14b0:	2c00      	cmp	r4, #0
 80a14b2:	d0e7      	beq.n	80a1484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a14b4:	f104 0010 	add.w	r0, r4, #16
 80a14b8:	f7ff fe25 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a14bc:	4620      	mov	r0, r4
 80a14be:	f7ff fe0c 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a14c2:	2118      	movs	r1, #24
 80a14c4:	4620      	mov	r0, r4
 80a14c6:	f002 fb6a 	bl	80a3b9e <_ZdlPvj>
 80a14ca:	e7db      	b.n	80a1484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a14cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a14cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a14ce:	2300      	movs	r3, #0
 80a14d0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a14d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a14d4:	4604      	mov	r4, r0
 80a14d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a14d8:	b12b      	cbz	r3, 80a14e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a14da:	2202      	movs	r2, #2
 80a14dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a14de:	68eb      	ldr	r3, [r5, #12]
 80a14e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a14e2:	68ab      	ldr	r3, [r5, #8]
 80a14e4:	60a3      	str	r3, [r4, #8]
    }
 80a14e6:	4620      	mov	r0, r4
 80a14e8:	bd38      	pop	{r3, r4, r5, pc}

080a14ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a14ea:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a14ec:	b570      	push	{r4, r5, r6, lr}
 80a14ee:	4604      	mov	r4, r0
	  switch (__op)
 80a14f0:	d007      	beq.n	80a1502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a14f2:	2a03      	cmp	r2, #3
 80a14f4:	d012      	beq.n	80a151c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a14f6:	2a01      	cmp	r2, #1
 80a14f8:	d101      	bne.n	80a14fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a14fa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a14fc:	6003      	str	r3, [r0, #0]
	}
 80a14fe:	2000      	movs	r0, #0
 80a1500:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1502:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1504:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1506:	f7fe fdc6 	bl	80a0096 <_Znwj>
 80a150a:	4605      	mov	r5, r0
 80a150c:	b120      	cbz	r0, 80a1518 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a150e:	4631      	mov	r1, r6
 80a1510:	f7ff ffdc 	bl	80a14cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1514:	7c33      	ldrb	r3, [r6, #16]
 80a1516:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1518:	6025      	str	r5, [r4, #0]
	}
 80a151a:	e7f0      	b.n	80a14fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a151c:	6804      	ldr	r4, [r0, #0]
 80a151e:	2c00      	cmp	r4, #0
 80a1520:	d0ed      	beq.n	80a14fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a1522:	4620      	mov	r0, r4
 80a1524:	f7ff fdd9 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1528:	2114      	movs	r1, #20
 80a152a:	4620      	mov	r0, r4
 80a152c:	f002 fb37 	bl	80a3b9e <_ZdlPvj>
 80a1530:	e7e5      	b.n	80a14fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1534:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1536:	4604      	mov	r4, r0
 80a1538:	b089      	sub	sp, #36	; 0x24
 80a153a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a153c:	a801      	add	r0, sp, #4
 80a153e:	4611      	mov	r1, r2
 80a1540:	f7ff fe12 	bl	80a1168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1544:	b1a4      	cbz	r4, 80a1570 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1546:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1548:	b11d      	cbz	r5, 80a1552 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a154a:	4628      	mov	r0, r5
 80a154c:	f002 fcd8 	bl	80a3f00 <strdup>
 80a1550:	4605      	mov	r5, r0
 80a1552:	a801      	add	r0, sp, #4
 80a1554:	a903      	add	r1, sp, #12
        type_(type) {
 80a1556:	9503      	str	r5, [sp, #12]
 80a1558:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a155c:	f7ff fe78 	bl	80a1250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1560:	a803      	add	r0, sp, #12
 80a1562:	f7ff fdd0 	bl	80a1106 <_ZN8particle5ErrorD1Ev>
 80a1566:	a802      	add	r0, sp, #8
 80a1568:	f7fe fef1 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a156c:	b009      	add	sp, #36	; 0x24
 80a156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1570:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1572:	9d01      	ldr	r5, [sp, #4]
 80a1574:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1578:	2a00      	cmp	r2, #0
 80a157a:	d103      	bne.n	80a1584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a157c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1580:	2900      	cmp	r1, #0
 80a1582:	d1f7      	bne.n	80a1574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1584:	d1ef      	bne.n	80a1566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1586:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1588:	f3bf 8f5b 	dmb	ish
 80a158c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a158e:	f3bf 8f5b 	dmb	ish
 80a1592:	1d2b      	adds	r3, r5, #4
 80a1594:	e853 6f00 	ldrex	r6, [r3]
 80a1598:	e843 4200 	strex	r2, r4, [r3]
 80a159c:	2a00      	cmp	r2, #0
 80a159e:	d1f9      	bne.n	80a1594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a15a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a15a4:	2e00      	cmp	r6, #0
 80a15a6:	d0de      	beq.n	80a1566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a15a8:	4620      	mov	r0, r4
 80a15aa:	f7ff fc95 	bl	80a0ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a15ae:	4607      	mov	r7, r0
 80a15b0:	b160      	cbz	r0, 80a15cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a15b2:	4630      	mov	r0, r6
 80a15b4:	f105 010c 	add.w	r1, r5, #12
 80a15b8:	f7ff fe16 	bl	80a11e8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a15bc:	4630      	mov	r0, r6
 80a15be:	f7ff fd8c 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a15c2:	2110      	movs	r1, #16
 80a15c4:	4630      	mov	r0, r6
 80a15c6:	f002 faea 	bl	80a3b9e <_ZdlPvj>
 80a15ca:	e7cc      	b.n	80a1566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a15cc:	4631      	mov	r1, r6
 80a15ce:	a803      	add	r0, sp, #12
 80a15d0:	f7ff ff7c 	bl	80a14cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a15d4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a15d6:	2010      	movs	r0, #16
 80a15d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a15dc:	f7fe fd5b 	bl	80a0096 <_Znwj>
 80a15e0:	4605      	mov	r5, r0
 80a15e2:	b1d0      	cbz	r0, 80a161a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a15e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a15e6:	2014      	movs	r0, #20
 80a15e8:	f7fe fd55 	bl	80a0096 <_Znwj>
 80a15ec:	4604      	mov	r4, r0
 80a15ee:	b178      	cbz	r0, 80a1610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a15f0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a15f2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a15f4:	a803      	add	r0, sp, #12
 80a15f6:	f7ff fdd6 	bl	80a11a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a15fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a15fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1600:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1602:	9205      	str	r2, [sp, #20]
 80a1604:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1606:	60e3      	str	r3, [r4, #12]
 80a1608:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a160c:	9206      	str	r2, [sp, #24]
 80a160e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1610:	4b06      	ldr	r3, [pc, #24]	; (80a162c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1612:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1614:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1616:	4b06      	ldr	r3, [pc, #24]	; (80a1630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1618:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a161a:	a803      	add	r0, sp, #12
 80a161c:	f7ff fd5d 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1620:	2200      	movs	r2, #0
 80a1622:	4629      	mov	r1, r5
 80a1624:	4803      	ldr	r0, [pc, #12]	; (80a1634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1626:	f7ff fc5f 	bl	80a0ee8 <application_thread_invoke>
 80a162a:	e7c7      	b.n	80a15bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a162c:	080a11fb 	.word	0x080a11fb
 80a1630:	080a14eb 	.word	0x080a14eb
 80a1634:	080a1097 	.word	0x080a1097

080a1638 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1638:	4770      	bx	lr

080a163a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a163c:	4606      	mov	r6, r0
 80a163e:	4615      	mov	r5, r2
 80a1640:	460c      	mov	r4, r1
 80a1642:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1644:	42bc      	cmp	r4, r7
 80a1646:	d006      	beq.n	80a1656 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1648:	6833      	ldr	r3, [r6, #0]
 80a164a:	4630      	mov	r0, r6
 80a164c:	689b      	ldr	r3, [r3, #8]
 80a164e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1652:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1654:	e7f6      	b.n	80a1644 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1656:	4628      	mov	r0, r5
 80a1658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a165a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a165a:	2200      	movs	r2, #0
 80a165c:	7c00      	ldrb	r0, [r0, #16]
 80a165e:	f7ff bad9 	b.w	80a0c14 <hal_i2c_write>

080a1662 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1662:	2100      	movs	r1, #0
 80a1664:	7c00      	ldrb	r0, [r0, #16]
 80a1666:	f7ff badd 	b.w	80a0c24 <hal_i2c_available>

080a166a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a166a:	2100      	movs	r1, #0
 80a166c:	7c00      	ldrb	r0, [r0, #16]
 80a166e:	f7ff bae1 	b.w	80a0c34 <hal_i2c_read>

080a1672 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1672:	2100      	movs	r1, #0
 80a1674:	7c00      	ldrb	r0, [r0, #16]
 80a1676:	f7ff bae5 	b.w	80a0c44 <hal_i2c_peek>

080a167a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a167a:	2100      	movs	r1, #0
 80a167c:	7c00      	ldrb	r0, [r0, #16]
 80a167e:	f7ff bae9 	b.w	80a0c54 <hal_i2c_flush>

080a1682 <_ZN7TwoWireD0Ev>:
 80a1682:	b510      	push	{r4, lr}
 80a1684:	4604      	mov	r4, r0
 80a1686:	2114      	movs	r1, #20
 80a1688:	f002 fa89 	bl	80a3b9e <_ZdlPvj>
 80a168c:	4620      	mov	r0, r4
 80a168e:	bd10      	pop	{r4, pc}

080a1690 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1690:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1696:	4604      	mov	r4, r0
 80a1698:	4608      	mov	r0, r1
 80a169a:	2100      	movs	r1, #0
 80a169c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a16a0:	4b03      	ldr	r3, [pc, #12]	; (80a16b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a16a2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a16a4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a16a6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a16a8:	f7ff fae4 	bl	80a0c74 <hal_i2c_init>
}
 80a16ac:	4620      	mov	r0, r4
 80a16ae:	bd10      	pop	{r4, pc}
 80a16b0:	080a4340 	.word	0x080a4340

080a16b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a16b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16b6:	460e      	mov	r6, r1
 80a16b8:	2400      	movs	r4, #0
 80a16ba:	f100 0708 	add.w	r7, r0, #8
 80a16be:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a16c0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a16c4:	220a      	movs	r2, #10
 80a16c6:	4630      	mov	r0, r6
 80a16c8:	f001 facb 	bl	80a2c62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a16cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a16ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a16d0:	d101      	bne.n	80a16d6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a16d2:	4620      	mov	r0, r4
 80a16d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a16d6:	2c00      	cmp	r4, #0
 80a16d8:	d0f2      	beq.n	80a16c0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a16da:	212e      	movs	r1, #46	; 0x2e
 80a16dc:	4630      	mov	r0, r6
 80a16de:	f001 faa7 	bl	80a2c30 <_ZN5Print5printEc>
 80a16e2:	4404      	add	r4, r0
 80a16e4:	e7ec      	b.n	80a16c0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a16e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a16e8:	b510      	push	{r4, lr}
 80a16ea:	4604      	mov	r4, r0
 80a16ec:	4b04      	ldr	r3, [pc, #16]	; (80a1700 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a16ee:	2211      	movs	r2, #17
 80a16f0:	2100      	movs	r1, #0
 80a16f2:	f840 3b04 	str.w	r3, [r0], #4
 80a16f6:	f002 fbad 	bl	80a3e54 <memset>
}
 80a16fa:	4620      	mov	r0, r4
 80a16fc:	bd10      	pop	{r4, pc}
 80a16fe:	bf00      	nop
 80a1700:	080a4368 	.word	0x080a4368

080a1704 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1704:	4603      	mov	r3, r0
 80a1706:	4a07      	ldr	r2, [pc, #28]	; (80a1724 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1708:	b510      	push	{r4, lr}
 80a170a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a170e:	f101 0210 	add.w	r2, r1, #16
 80a1712:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1716:	4291      	cmp	r1, r2
 80a1718:	f843 4b04 	str.w	r4, [r3], #4
 80a171c:	d1f9      	bne.n	80a1712 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a171e:	780a      	ldrb	r2, [r1, #0]
 80a1720:	701a      	strb	r2, [r3, #0]
}
 80a1722:	bd10      	pop	{r4, pc}
 80a1724:	080a4368 	.word	0x080a4368

080a1728 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1728:	4a02      	ldr	r2, [pc, #8]	; (80a1734 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a172a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a172e:	2204      	movs	r2, #4
 80a1730:	7502      	strb	r2, [r0, #20]
}
 80a1732:	4770      	bx	lr
 80a1734:	080a4368 	.word	0x080a4368

080a1738 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1738:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a173a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a173e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1742:	2304      	movs	r3, #4
 80a1744:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1748:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a174c:	6044      	str	r4, [r0, #4]
 80a174e:	7503      	strb	r3, [r0, #20]
}
 80a1750:	bd10      	pop	{r4, pc}
	...

080a1754 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1756:	4d04      	ldr	r5, [pc, #16]	; (80a1768 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1758:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a175a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a175e:	9500      	str	r5, [sp, #0]
 80a1760:	f7ff ffea 	bl	80a1738 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1764:	b003      	add	sp, #12
 80a1766:	bd30      	pop	{r4, r5, pc}
 80a1768:	080a4368 	.word	0x080a4368

080a176c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a176c:	2201      	movs	r2, #1
 80a176e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a1772:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a1776:	4618      	mov	r0, r3
 80a1778:	2901      	cmp	r1, #1
 80a177a:	d108      	bne.n	80a178e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a177c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a1780:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a1784:	3a01      	subs	r2, #1
 80a1786:	f103 0310 	add.w	r3, r3, #16
 80a178a:	d1f2      	bne.n	80a1772 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a178c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a178e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a1790:	bf04      	itt	eq
 80a1792:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a1796:	1852      	addeq	r2, r2, r1
 80a1798:	e7f4      	b.n	80a1784 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a179a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a179a:	b40e      	push	{r1, r2, r3}
 80a179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a17a0:	b087      	sub	sp, #28
 80a17a2:	af00      	add	r7, sp, #0
 80a17a4:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a17a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80a17ac:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17ae:	462b      	mov	r3, r5
 80a17b0:	4642      	mov	r2, r8
 80a17b2:	2110      	movs	r1, #16
 80a17b4:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a17b8:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17ba:	f7ff fc49 	bl	80a1050 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a17be:	280f      	cmp	r0, #15
 80a17c0:	d91b      	bls.n	80a17fa <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a17c2:	f100 0308 	add.w	r3, r0, #8
 80a17c6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a17ca:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a17cc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17d0:	4642      	mov	r2, r8
 80a17d2:	1c41      	adds	r1, r0, #1
 80a17d4:	462b      	mov	r3, r5
 80a17d6:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a17d8:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17da:	f7ff fc39 	bl	80a1050 <vsnprintf>
        if (n > 0) {
 80a17de:	1e02      	subs	r2, r0, #0
 80a17e0:	dd04      	ble.n	80a17ec <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a17e2:	6823      	ldr	r3, [r4, #0]
 80a17e4:	4669      	mov	r1, sp
 80a17e6:	4620      	mov	r0, r4
 80a17e8:	689b      	ldr	r3, [r3, #8]
 80a17ea:	4798      	blx	r3
 80a17ec:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a17ee:	371c      	adds	r7, #28
 80a17f0:	46bd      	mov	sp, r7
 80a17f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a17f6:	b003      	add	sp, #12
 80a17f8:	4770      	bx	lr
    } else if (n > 0) {
 80a17fa:	2800      	cmp	r0, #0
 80a17fc:	d0f7      	beq.n	80a17ee <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a17fe:	6823      	ldr	r3, [r4, #0]
 80a1800:	4602      	mov	r2, r0
 80a1802:	689b      	ldr	r3, [r3, #8]
 80a1804:	4620      	mov	r0, r4
 80a1806:	f107 0108 	add.w	r1, r7, #8
 80a180a:	4798      	blx	r3
}
 80a180c:	e7ef      	b.n	80a17ee <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a180e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a180e:	b510      	push	{r4, lr}
 80a1810:	4604      	mov	r4, r0
          _M_dispose();
 80a1812:	6803      	ldr	r3, [r0, #0]
 80a1814:	689b      	ldr	r3, [r3, #8]
 80a1816:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1818:	68a3      	ldr	r3, [r4, #8]
 80a181a:	3b01      	subs	r3, #1
 80a181c:	60a3      	str	r3, [r4, #8]
 80a181e:	b92b      	cbnz	r3, 80a182c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1820:	6823      	ldr	r3, [r4, #0]
 80a1822:	4620      	mov	r0, r4
    }
 80a1824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1828:	68db      	ldr	r3, [r3, #12]
 80a182a:	4718      	bx	r3
    }
 80a182c:	bd10      	pop	{r4, pc}

080a182e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a182e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1830:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a1832:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1836:	2201      	movs	r2, #1
 80a1838:	689b      	ldr	r3, [r3, #8]
 80a183a:	f10d 0107 	add.w	r1, sp, #7
 80a183e:	4798      	blx	r3
}
 80a1840:	b003      	add	sp, #12
 80a1842:	f85d fb04 	ldr.w	pc, [sp], #4

080a1846 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a1846:	b538      	push	{r3, r4, r5, lr}
 80a1848:	680b      	ldr	r3, [r1, #0]
 80a184a:	4604      	mov	r4, r0
 80a184c:	6003      	str	r3, [r0, #0]
 80a184e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a1850:	6843      	ldr	r3, [r0, #4]
 80a1852:	429d      	cmp	r5, r3
 80a1854:	d00c      	beq.n	80a1870 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a1856:	b115      	cbz	r5, 80a185e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a1858:	686b      	ldr	r3, [r5, #4]
 80a185a:	3301      	adds	r3, #1
 80a185c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a185e:	6860      	ldr	r0, [r4, #4]
 80a1860:	b128      	cbz	r0, 80a186e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a1862:	6843      	ldr	r3, [r0, #4]
 80a1864:	3b01      	subs	r3, #1
 80a1866:	6043      	str	r3, [r0, #4]
 80a1868:	b90b      	cbnz	r3, 80a186e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a186a:	f7ff ffd0 	bl	80a180e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a186e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a1870:	4620      	mov	r0, r4
 80a1872:	bd38      	pop	{r3, r4, r5, pc}

080a1874 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1874:	460b      	mov	r3, r1
 80a1876:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1878:	2200      	movs	r2, #0
 80a187a:	b510      	push	{r4, lr}
 80a187c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a187e:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a1882:	6083      	str	r3, [r0, #8]
    if (t) {
 80a1884:	b90b      	cbnz	r3, 80a188a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a1886:	4620      	mov	r0, r4
 80a1888:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a188a:	f7ff ffdc 	bl	80a1846 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a188e:	e7fa      	b.n	80a1886 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a1890 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a1890:	4603      	mov	r3, r0
    if (!t_) {
 80a1892:	6880      	ldr	r0, [r0, #8]
 80a1894:	b320      	cbz	r0, 80a18e0 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a1896:	7802      	ldrb	r2, [r0, #0]
 80a1898:	2a03      	cmp	r2, #3
 80a189a:	d81a      	bhi.n	80a18d2 <_ZNK5spark9JSONValue4typeEv+0x42>
 80a189c:	e8df f002 	tbb	[pc, r2]
 80a18a0:	1b021704 	.word	0x1b021704
 80a18a4:	2005      	movs	r0, #5
 80a18a6:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	685a      	ldr	r2, [r3, #4]
 80a18ac:	6843      	ldr	r3, [r0, #4]
 80a18ae:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a18b0:	282d      	cmp	r0, #45	; 0x2d
 80a18b2:	d012      	beq.n	80a18da <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a18b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a18b8:	2b09      	cmp	r3, #9
 80a18ba:	d90e      	bls.n	80a18da <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a18bc:	2874      	cmp	r0, #116	; 0x74
 80a18be:	d00e      	beq.n	80a18de <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a18c0:	2866      	cmp	r0, #102	; 0x66
 80a18c2:	d00c      	beq.n	80a18de <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a18c4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a18c8:	4258      	negs	r0, r3
 80a18ca:	4158      	adcs	r0, r3
 80a18cc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a18ce:	2006      	movs	r0, #6
 80a18d0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a18d2:	2000      	movs	r0, #0
 80a18d4:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a18d6:	2004      	movs	r0, #4
 80a18d8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a18da:	2003      	movs	r0, #3
 80a18dc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a18de:	2002      	movs	r0, #2
}
 80a18e0:	4770      	bx	lr

080a18e2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a18e2:	b510      	push	{r4, lr}
 80a18e4:	4604      	mov	r4, r0
    switch (type()) {
 80a18e6:	f7ff ffd3 	bl	80a1890 <_ZNK5spark9JSONValue4typeEv>
 80a18ea:	2802      	cmp	r0, #2
 80a18ec:	d00e      	beq.n	80a190c <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a18ee:	1ec3      	subs	r3, r0, #3
 80a18f0:	b2db      	uxtb	r3, r3
 80a18f2:	2b01      	cmp	r3, #1
 80a18f4:	d814      	bhi.n	80a1920 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a18f6:	6822      	ldr	r2, [r4, #0]
 80a18f8:	68a3      	ldr	r3, [r4, #8]
 80a18fa:	6850      	ldr	r0, [r2, #4]
 80a18fc:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a18fe:	220a      	movs	r2, #10
}
 80a1900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a1904:	2100      	movs	r1, #0
 80a1906:	4418      	add	r0, r3
 80a1908:	f002 bbd4 	b.w	80a40b4 <strtol>
        const char* const s = d_->json + t_->start;
 80a190c:	6822      	ldr	r2, [r4, #0]
 80a190e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a1910:	6852      	ldr	r2, [r2, #4]
 80a1912:	685b      	ldr	r3, [r3, #4]
 80a1914:	5cd0      	ldrb	r0, [r2, r3]
 80a1916:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a191a:	4258      	negs	r0, r3
 80a191c:	4158      	adcs	r0, r3
}
 80a191e:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a1920:	2000      	movs	r0, #0
 80a1922:	e7fc      	b.n	80a191e <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a1924 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1924:	460b      	mov	r3, r1
 80a1926:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1928:	2200      	movs	r2, #0
 80a192a:	b510      	push	{r4, lr}
 80a192c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a192e:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a1932:	480d      	ldr	r0, [pc, #52]	; (80a1968 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a1934:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1938:	b1a3      	cbz	r3, 80a1964 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a193a:	781a      	ldrb	r2, [r3, #0]
 80a193c:	2a03      	cmp	r2, #3
 80a193e:	d006      	beq.n	80a194e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a1940:	b982      	cbnz	r2, 80a1964 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a1942:	680a      	ldr	r2, [r1, #0]
 80a1944:	6850      	ldr	r0, [r2, #4]
 80a1946:	685a      	ldr	r2, [r3, #4]
 80a1948:	5c82      	ldrb	r2, [r0, r2]
 80a194a:	2a6e      	cmp	r2, #110	; 0x6e
 80a194c:	d007      	beq.n	80a195e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a194e:	680a      	ldr	r2, [r1, #0]
 80a1950:	6858      	ldr	r0, [r3, #4]
 80a1952:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a1954:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a1956:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1958:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a195a:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a195c:	60e3      	str	r3, [r4, #12]
 80a195e:	4620      	mov	r0, r4
 80a1960:	f7ff ff71 	bl	80a1846 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1964:	4620      	mov	r0, r4
 80a1966:	bd10      	pop	{r4, pc}
 80a1968:	080a42f9 	.word	0x080a42f9

080a196c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a196c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a196e:	2500      	movs	r5, #0
 80a1970:	460b      	mov	r3, r1
 80a1972:	4604      	mov	r4, r0
 80a1974:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1976:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a197a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a197e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a1982:	b14b      	cbz	r3, 80a1998 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a1984:	781a      	ldrb	r2, [r3, #0]
 80a1986:	2a01      	cmp	r2, #1
 80a1988:	d106      	bne.n	80a1998 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a198a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a198e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a1990:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a1992:	6143      	str	r3, [r0, #20]
 80a1994:	f7ff ff57 	bl	80a1846 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1998:	4620      	mov	r0, r4
 80a199a:	bd38      	pop	{r3, r4, r5, pc}

080a199c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a199c:	b510      	push	{r4, lr}
    if (!n_) {
 80a199e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a19a0:	4604      	mov	r4, r0
    if (!n_) {
 80a19a2:	b163      	cbz	r3, 80a19be <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a19a4:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a19a6:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a19a8:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a19aa:	3010      	adds	r0, #16
 80a19ac:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a19ae:	6120      	str	r0, [r4, #16]
    --n_;
 80a19b0:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a19b2:	b113      	cbz	r3, 80a19ba <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a19b4:	f7ff feda 	bl	80a176c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a19b8:	60a0      	str	r0, [r4, #8]
    return true;
 80a19ba:	2001      	movs	r0, #1
 80a19bc:	e000      	b.n	80a19c0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a19be:	4618      	mov	r0, r3
}
 80a19c0:	bd10      	pop	{r4, pc}

080a19c2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a19c2:	b510      	push	{r4, lr}
    write('}');
 80a19c4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a19c6:	4604      	mov	r4, r0
    write('}');
 80a19c8:	f7ff ff31 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a19cc:	2301      	movs	r3, #1
}
 80a19ce:	4620      	mov	r0, r4
    state_ = NEXT;
 80a19d0:	7123      	strb	r3, [r4, #4]
}
 80a19d2:	bd10      	pop	{r4, pc}

080a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a19d4:	b508      	push	{r3, lr}
    switch (state_) {
 80a19d6:	7903      	ldrb	r3, [r0, #4]
 80a19d8:	2b01      	cmp	r3, #1
 80a19da:	d002      	beq.n	80a19e2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a19dc:	2b02      	cmp	r3, #2
 80a19de:	d004      	beq.n	80a19ea <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a19e0:	bd08      	pop	{r3, pc}
        write(',');
 80a19e2:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a19e4:	f7ff ff23 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
}
 80a19e8:	e7fa      	b.n	80a19e0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a19ea:	213a      	movs	r1, #58	; 0x3a
 80a19ec:	e7fa      	b.n	80a19e4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a19ee <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a19ee:	b510      	push	{r4, lr}
 80a19f0:	4604      	mov	r4, r0
    writeSeparator();
 80a19f2:	f7ff ffef 	bl	80a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a19f6:	4620      	mov	r0, r4
 80a19f8:	217b      	movs	r1, #123	; 0x7b
 80a19fa:	f7ff ff18 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a19fe:	2300      	movs	r3, #0
}
 80a1a00:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a1a02:	7123      	strb	r3, [r4, #4]
}
 80a1a04:	bd10      	pop	{r4, pc}
	...

080a1a08 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a1a08:	b538      	push	{r3, r4, r5, lr}
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	460d      	mov	r5, r1
    writeSeparator();
 80a1a0e:	f7ff ffe1 	bl	80a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a1a12:	6823      	ldr	r3, [r4, #0]
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	462a      	mov	r2, r5
 80a1a18:	68db      	ldr	r3, [r3, #12]
 80a1a1a:	4903      	ldr	r1, [pc, #12]	; (80a1a28 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a1a1c:	4798      	blx	r3
    state_ = NEXT;
 80a1a1e:	2301      	movs	r3, #1
}
 80a1a20:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a22:	7123      	strb	r3, [r4, #4]
}
 80a1a24:	bd38      	pop	{r3, r4, r5, pc}
 80a1a26:	bf00      	nop
 80a1a28:	080a4374 	.word	0x080a4374

080a1a2c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a1a2c:	b538      	push	{r3, r4, r5, lr}
 80a1a2e:	4604      	mov	r4, r0
 80a1a30:	460d      	mov	r5, r1
    writeSeparator();
 80a1a32:	f7ff ffcf 	bl	80a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a1a36:	6823      	ldr	r3, [r4, #0]
 80a1a38:	4620      	mov	r0, r4
 80a1a3a:	462a      	mov	r2, r5
 80a1a3c:	68db      	ldr	r3, [r3, #12]
 80a1a3e:	4903      	ldr	r1, [pc, #12]	; (80a1a4c <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a1a40:	4798      	blx	r3
    state_ = NEXT;
 80a1a42:	2301      	movs	r3, #1
}
 80a1a44:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a46:	7123      	strb	r3, [r4, #4]
}
 80a1a48:	bd38      	pop	{r3, r4, r5, pc}
 80a1a4a:	bf00      	nop
 80a1a4c:	080a4377 	.word	0x080a4377

080a1a50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a54:	460d      	mov	r5, r1
 80a1a56:	4617      	mov	r7, r2
    write('"');
 80a1a58:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a5a:	4604      	mov	r4, r0
    write('"');
 80a1a5c:	f7ff fee7 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a1a60:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a1a62:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a1afc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a1a66:	442f      	add	r7, r5
    while (s != end) {
 80a1a68:	42bd      	cmp	r5, r7
 80a1a6a:	462a      	mov	r2, r5
 80a1a6c:	d038      	beq.n	80a1ae0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a1a6e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a1a72:	2e22      	cmp	r6, #34	; 0x22
 80a1a74:	d003      	beq.n	80a1a7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a76:	2e5c      	cmp	r6, #92	; 0x5c
 80a1a78:	d001      	beq.n	80a1a7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a7a:	2e1f      	cmp	r6, #31
 80a1a7c:	d8f4      	bhi.n	80a1a68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a1a7e:	6823      	ldr	r3, [r4, #0]
 80a1a80:	1a52      	subs	r2, r2, r1
 80a1a82:	4620      	mov	r0, r4
 80a1a84:	689b      	ldr	r3, [r3, #8]
 80a1a86:	4798      	blx	r3
            write('\\');
 80a1a88:	215c      	movs	r1, #92	; 0x5c
 80a1a8a:	4620      	mov	r0, r4
 80a1a8c:	f7ff fecf 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a1a90:	2e0d      	cmp	r6, #13
 80a1a92:	d80a      	bhi.n	80a1aaa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a1a94:	2e07      	cmp	r6, #7
 80a1a96:	d91c      	bls.n	80a1ad2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1a98:	f1a6 0308 	sub.w	r3, r6, #8
 80a1a9c:	2b05      	cmp	r3, #5
 80a1a9e:	d818      	bhi.n	80a1ad2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1aa0:	e8df f003 	tbb	[pc, r3]
 80a1aa4:	17110f0d 	.word	0x17110f0d
 80a1aa8:	1513      	.short	0x1513
 80a1aaa:	2e22      	cmp	r6, #34	; 0x22
 80a1aac:	d001      	beq.n	80a1ab2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a1aae:	2e5c      	cmp	r6, #92	; 0x5c
 80a1ab0:	d10f      	bne.n	80a1ad2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a1ab2:	4631      	mov	r1, r6
                write('b');
 80a1ab4:	4620      	mov	r0, r4
 80a1ab6:	f7ff feba 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a1aba:	4629      	mov	r1, r5
    while (s != end) {
 80a1abc:	e7d4      	b.n	80a1a68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a1abe:	2162      	movs	r1, #98	; 0x62
 80a1ac0:	e7f8      	b.n	80a1ab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a1ac2:	2174      	movs	r1, #116	; 0x74
 80a1ac4:	e7f6      	b.n	80a1ab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a1ac6:	216e      	movs	r1, #110	; 0x6e
 80a1ac8:	e7f4      	b.n	80a1ab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a1aca:	2166      	movs	r1, #102	; 0x66
 80a1acc:	e7f2      	b.n	80a1ab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a1ace:	2172      	movs	r1, #114	; 0x72
 80a1ad0:	e7f0      	b.n	80a1ab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a1ad2:	6823      	ldr	r3, [r4, #0]
 80a1ad4:	4632      	mov	r2, r6
 80a1ad6:	4641      	mov	r1, r8
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	68db      	ldr	r3, [r3, #12]
 80a1adc:	4798      	blx	r3
                break;
 80a1ade:	e7ec      	b.n	80a1aba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a1ae0:	428d      	cmp	r5, r1
 80a1ae2:	d004      	beq.n	80a1aee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a1ae4:	6823      	ldr	r3, [r4, #0]
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	689b      	ldr	r3, [r3, #8]
 80a1aea:	1a6a      	subs	r2, r5, r1
 80a1aec:	4798      	blx	r3
    }
    write('"');
 80a1aee:	2122      	movs	r1, #34	; 0x22
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	f7ff fe9c 	bl	80a182e <_ZN5spark10JSONWriter5writeEc>
}
 80a1af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1afa:	bf00      	nop
 80a1afc:	080a437a 	.word	0x080a437a

080a1b00 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a1b00:	b570      	push	{r4, r5, r6, lr}
 80a1b02:	4604      	mov	r4, r0
 80a1b04:	460d      	mov	r5, r1
 80a1b06:	4616      	mov	r6, r2
    writeSeparator();
 80a1b08:	f7ff ff64 	bl	80a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a1b0c:	4620      	mov	r0, r4
 80a1b0e:	4632      	mov	r2, r6
 80a1b10:	4629      	mov	r1, r5
 80a1b12:	f7ff ff9d 	bl	80a1a50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a1b16:	2302      	movs	r3, #2
}
 80a1b18:	4620      	mov	r0, r4
    state_ = VALUE;
 80a1b1a:	7123      	strb	r3, [r4, #4]
}
 80a1b1c:	bd70      	pop	{r4, r5, r6, pc}

080a1b1e <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a1b1e:	b570      	push	{r4, r5, r6, lr}
 80a1b20:	4604      	mov	r4, r0
 80a1b22:	460d      	mov	r5, r1
 80a1b24:	4616      	mov	r6, r2
    writeSeparator();
 80a1b26:	f7ff ff55 	bl	80a19d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	4632      	mov	r2, r6
 80a1b2e:	4629      	mov	r1, r5
 80a1b30:	f7ff ff8e 	bl	80a1a50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1b34:	2301      	movs	r3, #1
}
 80a1b36:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1b38:	7123      	strb	r3, [r4, #4]
}
 80a1b3a:	bd70      	pop	{r4, r5, r6, pc}

080a1b3c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1b3c:	6880      	ldr	r0, [r0, #8]
 80a1b3e:	6803      	ldr	r3, [r0, #0]
 80a1b40:	68db      	ldr	r3, [r3, #12]
 80a1b42:	4718      	bx	r3

080a1b44 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1b44:	4770      	bx	lr

080a1b46 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1b46:	4608      	mov	r0, r1
 80a1b48:	b111      	cbz	r1, 80a1b50 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1b4a:	680b      	ldr	r3, [r1, #0]
 80a1b4c:	685b      	ldr	r3, [r3, #4]
 80a1b4e:	4718      	bx	r3
}
 80a1b50:	4770      	bx	lr

080a1b52 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b52:	4770      	bx	lr

080a1b54 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1b54:	4770      	bx	lr

080a1b56 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1b56:	4770      	bx	lr

080a1b58 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1b58:	b538      	push	{r3, r4, r5, lr}
 80a1b5a:	4604      	mov	r4, r0
 80a1b5c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1b5e:	6800      	ldr	r0, [r0, #0]
 80a1b60:	212e      	movs	r1, #46	; 0x2e
 80a1b62:	f002 f9b0 	bl	80a3ec6 <strchrnul>
    size = s - category;
 80a1b66:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1b68:	4602      	mov	r2, r0
    size = s - category;
 80a1b6a:	1ac0      	subs	r0, r0, r3
 80a1b6c:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1b6e:	b120      	cbz	r0, 80a1b7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1b70:	7813      	ldrb	r3, [r2, #0]
 80a1b72:	b103      	cbz	r3, 80a1b76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1b74:	3201      	adds	r2, #1
 80a1b76:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b78:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a1b7a:	bd38      	pop	{r3, r4, r5, pc}

080a1b7c <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1b7c:	b510      	push	{r4, lr}
 80a1b7e:	4604      	mov	r4, r0
 80a1b80:	210c      	movs	r1, #12
 80a1b82:	f002 f80c 	bl	80a3b9e <_ZdlPvj>
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	bd10      	pop	{r4, pc}

080a1b8a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1b8a:	b510      	push	{r4, lr}
 80a1b8c:	4604      	mov	r4, r0
 80a1b8e:	2104      	movs	r1, #4
 80a1b90:	f002 f805 	bl	80a3b9e <_ZdlPvj>
 80a1b94:	4620      	mov	r0, r4
 80a1b96:	bd10      	pop	{r4, pc}

080a1b98 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b98:	b510      	push	{r4, lr}
 80a1b9a:	4604      	mov	r4, r0
 80a1b9c:	2104      	movs	r1, #4
 80a1b9e:	f001 fffe 	bl	80a3b9e <_ZdlPvj>
 80a1ba2:	4620      	mov	r0, r4
 80a1ba4:	bd10      	pop	{r4, pc}

080a1ba6 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1ba6:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1ba8:	f002 f997 	bl	80a3eda <strcmp>
}
 80a1bac:	fab0 f080 	clz	r0, r0
 80a1bb0:	0940      	lsrs	r0, r0, #5
 80a1bb2:	bd08      	pop	{r3, pc}

080a1bb4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1bb4:	b510      	push	{r4, lr}
 80a1bb6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1bb8:	f001 fd98 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a1bbc:	4284      	cmp	r4, r0
 80a1bbe:	d105      	bne.n	80a1bcc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a1bc0:	f001 fd94 	bl	80a36ec <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1bc8:	f001 bd76 	b.w	80a36b8 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a1bcc:	f001 fdcc 	bl	80a3768 <_Z17_fetch_usbserial1v>
 80a1bd0:	4284      	cmp	r4, r0
 80a1bd2:	d102      	bne.n	80a1bda <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1bd4:	f001 fdc8 	bl	80a3768 <_Z17_fetch_usbserial1v>
 80a1bd8:	e7f4      	b.n	80a1bc4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1bda:	f001 fcf1 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
 80a1bde:	4284      	cmp	r4, r0
 80a1be0:	d105      	bne.n	80a1bee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1be2:	f001 fced 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
}
 80a1be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1bea:	f001 bce6 	b.w	80a35ba <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1bee:	b12c      	cbz	r4, 80a1bfc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a1bf0:	6823      	ldr	r3, [r4, #0]
 80a1bf2:	4620      	mov	r0, r4
}
 80a1bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1bf8:	685b      	ldr	r3, [r3, #4]
 80a1bfa:	4718      	bx	r3
 80a1bfc:	bd10      	pop	{r4, pc}

080a1bfe <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1bfe:	b538      	push	{r3, r4, r5, lr}
 80a1c00:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1c02:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1c04:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1c06:	f002 f996 	bl	80a3f36 <strlen>
 80a1c0a:	4621      	mov	r1, r4
 80a1c0c:	4602      	mov	r2, r0
 80a1c0e:	4628      	mov	r0, r5
}
 80a1c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1c14:	f7ff bf83 	b.w	80a1b1e <_ZN5spark10JSONWriter5valueEPKcj>

080a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c18:	b570      	push	{r4, r5, r6, lr}
 80a1c1a:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1c1c:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c1e:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1c20:	f002 f989 	bl	80a3f36 <strlen>
 80a1c24:	6823      	ldr	r3, [r4, #0]
 80a1c26:	4602      	mov	r2, r0
 80a1c28:	4629      	mov	r1, r5
 80a1c2a:	4620      	mov	r0, r4
}
 80a1c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a1c30:	68db      	ldr	r3, [r3, #12]
 80a1c32:	4718      	bx	r3

080a1c34 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1c34:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1c36:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1c38:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1c3c:	2201      	movs	r2, #1
 80a1c3e:	68db      	ldr	r3, [r3, #12]
 80a1c40:	f10d 0107 	add.w	r1, sp, #7
 80a1c44:	4798      	blx	r3
}
 80a1c46:	b003      	add	sp, #12
 80a1c48:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c4c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a1c4c:	b40e      	push	{r1, r2, r3}
 80a1c4e:	b503      	push	{r0, r1, lr}
 80a1c50:	ab03      	add	r3, sp, #12
 80a1c52:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1c56:	2100      	movs	r1, #0
 80a1c58:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1c5a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a1c5c:	f001 f81e 	bl	80a2c9c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a1c60:	b002      	add	sp, #8
 80a1c62:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1c66:	b003      	add	sp, #12
 80a1c68:	4770      	bx	lr
	...

080a1c6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a1c70:	f04f 0814 	mov.w	r8, #20
 80a1c74:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a1c78:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1c7a:	464c      	mov	r4, r9
 80a1c7c:	fb08 f505 	mul.w	r5, r8, r5
 80a1c80:	9300      	str	r3, [sp, #0]
 80a1c82:	10ab      	asrs	r3, r5, #2
 80a1c84:	4d17      	ldr	r5, [pc, #92]	; (80a1ce4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1c86:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1c88:	2d00      	cmp	r5, #0
 80a1c8a:	dd23      	ble.n	80a1cd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a1c8c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a1c8e:	fb08 f006 	mul.w	r0, r8, r6
 80a1c92:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1c96:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a1c9a:	463a      	mov	r2, r7
 80a1c9c:	455f      	cmp	r7, fp
 80a1c9e:	bf28      	it	cs
 80a1ca0:	465a      	movcs	r2, fp
 80a1ca2:	5820      	ldr	r0, [r4, r0]
 80a1ca4:	9101      	str	r1, [sp, #4]
 80a1ca6:	f002 f94e 	bl	80a3f46 <strncmp>
                if (cmp == 0) {
 80a1caa:	2301      	movs	r3, #1
 80a1cac:	9901      	ldr	r1, [sp, #4]
 80a1cae:	b978      	cbnz	r0, 80a1cd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a1cb0:	455f      	cmp	r7, fp
 80a1cb2:	d103      	bne.n	80a1cbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1cb4:	9a00      	ldr	r2, [sp, #0]
 80a1cb6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1cb8:	4635      	mov	r5, r6
 80a1cba:	e7e5      	b.n	80a1c88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a1cbc:	bf8c      	ite	hi
 80a1cbe:	2001      	movhi	r0, #1
 80a1cc0:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1cc2:	2800      	cmp	r0, #0
 80a1cc4:	d0f8      	beq.n	80a1cb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1cc6:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a1cc8:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a1ccc:	3e01      	subs	r6, #1
 80a1cce:	e7f3      	b.n	80a1cb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a1cd0:	0fc0      	lsrs	r0, r0, #31
 80a1cd2:	e7f6      	b.n	80a1cc2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a1cd4:	eba4 0409 	sub.w	r4, r4, r9
}
 80a1cd8:	4802      	ldr	r0, [pc, #8]	; (80a1ce4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1cda:	10a4      	asrs	r4, r4, #2
 80a1cdc:	4360      	muls	r0, r4
 80a1cde:	b003      	add	sp, #12
 80a1ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1ce4:	cccccccd 	.word	0xcccccccd

080a1ce8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a1cea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a1cec:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1cee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a1cf0:	b303      	cbz	r3, 80a1d34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a1cf2:	b1f9      	cbz	r1, 80a1d34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1cf4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1cf6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a1cfa:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a1cfc:	a903      	add	r1, sp, #12
 80a1cfe:	a801      	add	r0, sp, #4
 80a1d00:	f7ff ff2a 	bl	80a1b58 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1d04:	4601      	mov	r1, r0
 80a1d06:	b1a8      	cbz	r0, 80a1d34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d08:	f10d 030b 	add.w	r3, sp, #11
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a1d10:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d14:	f7ff ffaa 	bl	80a1c6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1d18:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1d1c:	b153      	cbz	r3, 80a1d34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a1d1e:	2314      	movs	r3, #20
 80a1d20:	6824      	ldr	r4, [r4, #0]
 80a1d22:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1d26:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1d2a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1d2c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1d2e:	bfa8      	it	ge
 80a1d30:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a1d32:	e7e3      	b.n	80a1cfc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1d34:	4630      	mov	r0, r6
 80a1d36:	b004      	add	sp, #16
 80a1d38:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1d3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1d3c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1d3e:	4c0a      	ldr	r4, [pc, #40]	; (80a1d68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1d40:	7823      	ldrb	r3, [r4, #0]
 80a1d42:	f3bf 8f5b 	dmb	ish
 80a1d46:	07db      	lsls	r3, r3, #31
 80a1d48:	d40b      	bmi.n	80a1d62 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1d4a:	4620      	mov	r0, r4
 80a1d4c:	f7fe f9b4 	bl	80a00b8 <__cxa_guard_acquire>
 80a1d50:	b138      	cbz	r0, 80a1d62 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1d52:	4620      	mov	r0, r4
 80a1d54:	f7fe f9b5 	bl	80a00c2 <__cxa_guard_release>
 80a1d58:	4a04      	ldr	r2, [pc, #16]	; (80a1d6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1d5a:	4905      	ldr	r1, [pc, #20]	; (80a1d70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1d5c:	4805      	ldr	r0, [pc, #20]	; (80a1d74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1d5e:	f001 ff19 	bl	80a3b94 <__aeabi_atexit>
}
 80a1d62:	4804      	ldr	r0, [pc, #16]	; (80a1d74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1d64:	bd10      	pop	{r4, pc}
 80a1d66:	bf00      	nop
 80a1d68:	20000d10 	.word	0x20000d10
 80a1d6c:	20000084 	.word	0x20000084
 80a1d70:	080a1b55 	.word	0x080a1b55
 80a1d74:	20000014 	.word	0x20000014

080a1d78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1d78:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1d7a:	4c0a      	ldr	r4, [pc, #40]	; (80a1da4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1d7c:	7823      	ldrb	r3, [r4, #0]
 80a1d7e:	f3bf 8f5b 	dmb	ish
 80a1d82:	07db      	lsls	r3, r3, #31
 80a1d84:	d40b      	bmi.n	80a1d9e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	f7fe f996 	bl	80a00b8 <__cxa_guard_acquire>
 80a1d8c:	b138      	cbz	r0, 80a1d9e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	f7fe f997 	bl	80a00c2 <__cxa_guard_release>
 80a1d94:	4a04      	ldr	r2, [pc, #16]	; (80a1da8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1d96:	4905      	ldr	r1, [pc, #20]	; (80a1dac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1d98:	4805      	ldr	r0, [pc, #20]	; (80a1db0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1d9a:	f001 fefb 	bl	80a3b94 <__aeabi_atexit>
    return &factory;
}
 80a1d9e:	4804      	ldr	r0, [pc, #16]	; (80a1db0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1da0:	bd10      	pop	{r4, pc}
 80a1da2:	bf00      	nop
 80a1da4:	20000d14 	.word	0x20000d14
 80a1da8:	20000084 	.word	0x20000084
 80a1dac:	080a1b53 	.word	0x080a1b53
 80a1db0:	20000018 	.word	0x20000018

080a1db4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1db4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1db6:	2500      	movs	r5, #0
 80a1db8:	4604      	mov	r4, r0
 80a1dba:	e9c0 5500 	strd	r5, r5, [r0]
 80a1dbe:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a1dc2:	6085      	str	r5, [r0, #8]
 80a1dc4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1dc6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1dca:	f7fe fec3 	bl	80a0b54 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1dce:	f7ff ffb5 	bl	80a1d3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1dd2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dd4:	f7ff ffd0 	bl	80a1d78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1dd8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dda:	6220      	str	r0, [r4, #32]
}
 80a1ddc:	4620      	mov	r0, r4
 80a1dde:	bd38      	pop	{r3, r4, r5, pc}

080a1de0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1de0:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1de2:	4c0b      	ldr	r4, [pc, #44]	; (80a1e10 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1de4:	7823      	ldrb	r3, [r4, #0]
 80a1de6:	f3bf 8f5b 	dmb	ish
 80a1dea:	07db      	lsls	r3, r3, #31
 80a1dec:	d40e      	bmi.n	80a1e0c <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	f7fe f962 	bl	80a00b8 <__cxa_guard_acquire>
 80a1df4:	b150      	cbz	r0, 80a1e0c <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1df6:	4807      	ldr	r0, [pc, #28]	; (80a1e14 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1df8:	f7ff ffdc 	bl	80a1db4 <_ZN5spark10LogManagerC1Ev>
 80a1dfc:	4620      	mov	r0, r4
 80a1dfe:	f7fe f960 	bl	80a00c2 <__cxa_guard_release>
 80a1e02:	4a05      	ldr	r2, [pc, #20]	; (80a1e18 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a1e04:	4905      	ldr	r1, [pc, #20]	; (80a1e1c <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a1e06:	4803      	ldr	r0, [pc, #12]	; (80a1e14 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1e08:	f001 fec4 	bl	80a3b94 <__aeabi_atexit>
    return &mgr;
}
 80a1e0c:	4801      	ldr	r0, [pc, #4]	; (80a1e14 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1e0e:	bd10      	pop	{r4, pc}
 80a1e10:	20000d0c 	.word	0x20000d0c
 80a1e14:	20000d1c 	.word	0x20000d1c
 80a1e18:	20000084 	.word	0x20000084
 80a1e1c:	080a2293 	.word	0x080a2293

080a1e20 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1e20:	2300      	movs	r3, #0
 80a1e22:	4a02      	ldr	r2, [pc, #8]	; (80a1e2c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1e24:	4902      	ldr	r1, [pc, #8]	; (80a1e30 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1e26:	4803      	ldr	r0, [pc, #12]	; (80a1e34 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1e28:	f7ff b836 	b.w	80a0e98 <log_set_callbacks>
 80a1e2c:	080a2171 	.word	0x080a2171
 80a1e30:	080a20fd 	.word	0x080a20fd
 80a1e34:	080a207d 	.word	0x080a207d

080a1e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1e38:	2300      	movs	r3, #0
 80a1e3a:	461a      	mov	r2, r3
 80a1e3c:	4619      	mov	r1, r3
 80a1e3e:	4618      	mov	r0, r3
 80a1e40:	f7ff b82a 	b.w	80a0e98 <log_set_callbacks>

080a1e44 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e46:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1e48:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e4a:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e4e:	a801      	add	r0, sp, #4
 80a1e50:	9300      	str	r3, [sp, #0]
 80a1e52:	f7ff f982 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e56:	466a      	mov	r2, sp
 80a1e58:	4629      	mov	r1, r5
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7ff fd0a 	bl	80a1874 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e60:	a801      	add	r0, sp, #4
 80a1e62:	f7fe fa74 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e66:	4620      	mov	r0, r4
 80a1e68:	b003      	add	sp, #12
 80a1e6a:	bd30      	pop	{r4, r5, pc}

080a1e6c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e6e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1e70:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e72:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e76:	a801      	add	r0, sp, #4
 80a1e78:	9300      	str	r3, [sp, #0]
 80a1e7a:	f7ff f96e 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e7e:	466a      	mov	r2, sp
 80a1e80:	4629      	mov	r1, r5
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff fd72 	bl	80a196c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e88:	a801      	add	r0, sp, #4
 80a1e8a:	f7fe fa60 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	b003      	add	sp, #12
 80a1e92:	bd30      	pop	{r4, r5, pc}

080a1e94 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e96:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a1e98:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e9a:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e9e:	a801      	add	r0, sp, #4
 80a1ea0:	9300      	str	r3, [sp, #0]
 80a1ea2:	f7ff f95a 	bl	80a115a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1ea6:	466a      	mov	r2, sp
 80a1ea8:	4629      	mov	r1, r5
 80a1eaa:	4620      	mov	r0, r4
 80a1eac:	f7ff fd3a 	bl	80a1924 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1eb0:	a801      	add	r0, sp, #4
 80a1eb2:	f7fe fa4c 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1eb6:	4620      	mov	r0, r4
 80a1eb8:	b003      	add	sp, #12
 80a1eba:	bd30      	pop	{r4, r5, pc}

080a1ebc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1ebc:	b570      	push	{r4, r5, r6, lr}
 80a1ebe:	b08a      	sub	sp, #40	; 0x28
 80a1ec0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a1ec2:	4601      	mov	r1, r0
 80a1ec4:	a804      	add	r0, sp, #16
 80a1ec6:	f7ff ffd1 	bl	80a1e6c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a1eca:	4e14      	ldr	r6, [pc, #80]	; (80a1f1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a1ecc:	a804      	add	r0, sp, #16
 80a1ece:	f7ff fd65 	bl	80a199c <_ZN5spark18JSONObjectIterator4nextEv>
 80a1ed2:	b1e8      	cbz	r0, 80a1f10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a1ed4:	4668      	mov	r0, sp
 80a1ed6:	a904      	add	r1, sp, #16
 80a1ed8:	f7ff ffdc 	bl	80a1e94 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1edc:	4631      	mov	r1, r6
 80a1ede:	9802      	ldr	r0, [sp, #8]
 80a1ee0:	f7ff fe61 	bl	80a1ba6 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a1ee4:	4604      	mov	r4, r0
 80a1ee6:	b110      	cbz	r0, 80a1eee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a1ee8:	1e2c      	subs	r4, r5, #0
 80a1eea:	bf18      	it	ne
 80a1eec:	2401      	movne	r4, #1
 80a1eee:	a801      	add	r0, sp, #4
 80a1ef0:	f7fe fa2d 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ef4:	2c00      	cmp	r4, #0
 80a1ef6:	d0e9      	beq.n	80a1ecc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a1ef8:	4668      	mov	r0, sp
 80a1efa:	a904      	add	r1, sp, #16
 80a1efc:	f7ff ffa2 	bl	80a1e44 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1f00:	4668      	mov	r0, sp
 80a1f02:	f7ff fcee 	bl	80a18e2 <_ZNK5spark9JSONValue5toIntEv>
 80a1f06:	6028      	str	r0, [r5, #0]
 80a1f08:	a801      	add	r0, sp, #4
 80a1f0a:	f7fe fa20 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f0e:	e7dd      	b.n	80a1ecc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1f10:	a805      	add	r0, sp, #20
 80a1f12:	f7fe fa1c 	bl	80a034e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1f16:	b00a      	add	sp, #40	; 0x28
 80a1f18:	bd70      	pop	{r4, r5, r6, pc}
 80a1f1a:	bf00      	nop
 80a1f1c:	080a4380 	.word	0x080a4380

080a1f20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f22:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1f24:	4919      	ldr	r1, [pc, #100]	; (80a1f8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a1f26:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f28:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a1f2a:	f001 ffd6 	bl	80a3eda <strcmp>
 80a1f2e:	b948      	cbnz	r0, 80a1f44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a1f30:	f001 fbdc 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a1f34:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f38:	f001 fbba 	bl	80a36b0 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1f3c:	f001 fbd6 	bl	80a36ec <_Z16_fetch_usbserialv>
}
 80a1f40:	b003      	add	sp, #12
 80a1f42:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a1f44:	4620      	mov	r0, r4
 80a1f46:	4912      	ldr	r1, [pc, #72]	; (80a1f90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1f48:	f001 ffc7 	bl	80a3eda <strcmp>
 80a1f4c:	b940      	cbnz	r0, 80a1f60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a1f4e:	f001 fc0b 	bl	80a3768 <_Z17_fetch_usbserial1v>
 80a1f52:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f56:	f001 fbab 	bl	80a36b0 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1f5a:	f001 fc05 	bl	80a3768 <_Z17_fetch_usbserial1v>
 80a1f5e:	e7ef      	b.n	80a1f40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a1f60:	4620      	mov	r0, r4
 80a1f62:	490c      	ldr	r1, [pc, #48]	; (80a1f94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1f64:	f001 ffb9 	bl	80a3eda <strcmp>
 80a1f68:	b970      	cbnz	r0, 80a1f88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1f6a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a1f6e:	a901      	add	r1, sp, #4
 80a1f70:	4628      	mov	r0, r5
        int baud = 9600;
 80a1f72:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a1f74:	f7ff ffa2 	bl	80a1ebc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1f78:	f001 fb22 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
 80a1f7c:	9901      	ldr	r1, [sp, #4]
 80a1f7e:	f001 fb19 	bl	80a35b4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a1f82:	f001 fb1d 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
 80a1f86:	e7db      	b.n	80a1f40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1f88:	2000      	movs	r0, #0
 80a1f8a:	e7d9      	b.n	80a1f40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1f8c:	080a4385 	.word	0x080a4385
 80a1f90:	080a438c 	.word	0x080a438c
 80a1f94:	080a438f 	.word	0x080a438f

080a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1f98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1f9a:	2614      	movs	r6, #20
 80a1f9c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1fa0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1fa2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1fa6:	42ae      	cmp	r6, r5
 80a1fa8:	d005      	beq.n	80a1fb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1faa:	f105 0008 	add.w	r0, r5, #8
 80a1fae:	f7ff fff3 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1fb2:	3514      	adds	r5, #20
 80a1fb4:	e7f7      	b.n	80a1fa6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a1fb6:	6820      	ldr	r0, [r4, #0]
 80a1fb8:	f7ff f83a 	bl	80a1030 <free>
}
 80a1fbc:	4620      	mov	r0, r4
 80a1fbe:	bd70      	pop	{r4, r5, r6, pc}

080a1fc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1fc0:	b570      	push	{r4, r5, r6, lr}
 80a1fc2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1fc4:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a1fc8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a1fcc:	42ae      	cmp	r6, r5
 80a1fce:	d004      	beq.n	80a1fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a1fd0:	4628      	mov	r0, r5
 80a1fd2:	f000 feb8 	bl	80a2d46 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a1fd6:	3510      	adds	r5, #16
 80a1fd8:	e7f8      	b.n	80a1fcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a1fda:	6820      	ldr	r0, [r4, #0]
 80a1fdc:	f7ff f828 	bl	80a1030 <free>
}
 80a1fe0:	4620      	mov	r0, r4
 80a1fe2:	bd70      	pop	{r4, r5, r6, pc}

080a1fe4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a1fe4:	b510      	push	{r4, lr}
 80a1fe6:	4604      	mov	r4, r0
 80a1fe8:	300c      	adds	r0, #12
 80a1fea:	f7ff ffd5 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	f7ff ffe6 	bl	80a1fc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	bd10      	pop	{r4, pc}

080a1ff8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a1ff8:	b510      	push	{r4, lr}
 80a1ffa:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1ffc:	4b03      	ldr	r3, [pc, #12]	; (80a200c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1ffe:	f840 3b04 	str.w	r3, [r0], #4
 80a2002:	f7ff ffef 	bl	80a1fe4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a2006:	4620      	mov	r0, r4
 80a2008:	bd10      	pop	{r4, pc}
 80a200a:	bf00      	nop
 80a200c:	080a427c 	.word	0x080a427c

080a2010 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a2010:	b510      	push	{r4, lr}
 80a2012:	4604      	mov	r4, r0
 80a2014:	f7ff fff0 	bl	80a1ff8 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2018:	4620      	mov	r0, r4
 80a201a:	2124      	movs	r1, #36	; 0x24
 80a201c:	f001 fdbf 	bl	80a3b9e <_ZdlPvj>
 80a2020:	4620      	mov	r0, r4
 80a2022:	bd10      	pop	{r4, pc}

080a2024 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a2024:	b510      	push	{r4, lr}
 80a2026:	4604      	mov	r4, r0
 80a2028:	4b02      	ldr	r3, [pc, #8]	; (80a2034 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a202a:	6003      	str	r3, [r0, #0]
 80a202c:	f7ff ffe4 	bl	80a1ff8 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2030:	4620      	mov	r0, r4
 80a2032:	bd10      	pop	{r4, pc}
 80a2034:	080a442c 	.word	0x080a442c

080a2038 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a2038:	b510      	push	{r4, lr}
 80a203a:	4604      	mov	r4, r0
 80a203c:	f7ff fff2 	bl	80a2024 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a2040:	4620      	mov	r0, r4
 80a2042:	2124      	movs	r1, #36	; 0x24
 80a2044:	f001 fdab 	bl	80a3b9e <_ZdlPvj>
 80a2048:	4620      	mov	r0, r4
 80a204a:	bd10      	pop	{r4, pc}

080a204c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a204c:	2200      	movs	r2, #0
 80a204e:	e9c0 2200 	strd	r2, r2, [r0]
 80a2052:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a2054:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a2056:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2058:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a205a:	6004      	str	r4, [r0, #0]
 80a205c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a205e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2060:	6044      	str	r4, [r0, #4]
 80a2062:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2064:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2066:	6084      	str	r4, [r0, #8]
}
 80a2068:	bd10      	pop	{r4, pc}

080a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a206a:	b510      	push	{r4, lr}
 80a206c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a206e:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2070:	6818      	ldr	r0, [r3, #0]
 80a2072:	f7fe fd87 	bl	80a0b84 <os_mutex_recursive_unlock>
 80a2076:	4620      	mov	r0, r4
 80a2078:	bd10      	pop	{r4, pc}
	...

080a207c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2080:	b087      	sub	sp, #28
 80a2082:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a2084:	4b1c      	ldr	r3, [pc, #112]	; (80a20f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a2086:	4680      	mov	r8, r0
 80a2088:	685b      	ldr	r3, [r3, #4]
 80a208a:	4689      	mov	r9, r1
 80a208c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a2090:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a2092:	b96b      	cbnz	r3, 80a20b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a2094:	f7ff fea4 	bl	80a1de0 <_ZN5spark10LogManager8instanceEv>
 80a2098:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a209a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a209e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a20a0:	9305      	str	r3, [sp, #20]
 80a20a2:	f7fe fd67 	bl	80a0b74 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a20a6:	7b23      	ldrb	r3, [r4, #12]
 80a20a8:	b12b      	cbz	r3, 80a20b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a20aa:	a805      	add	r0, sp, #20
 80a20ac:	f7ff ffdd 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a20b0:	b007      	add	sp, #28
 80a20b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a20b6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a20b8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a20bc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a20be:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a20c2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a20c6:	45aa      	cmp	sl, r5
 80a20c8:	d012      	beq.n	80a20f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a20ca:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a20ce:	4631      	mov	r1, r6
 80a20d0:	1d38      	adds	r0, r7, #4
 80a20d2:	f7ff fe09 	bl	80a1ce8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a20d6:	4581      	cmp	r9, r0
 80a20d8:	d3f5      	bcc.n	80a20c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a20da:	9a03      	ldr	r2, [sp, #12]
 80a20dc:	683b      	ldr	r3, [r7, #0]
 80a20de:	9200      	str	r2, [sp, #0]
 80a20e0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a20e4:	464a      	mov	r2, r9
 80a20e6:	4633      	mov	r3, r6
 80a20e8:	4641      	mov	r1, r8
 80a20ea:	4638      	mov	r0, r7
 80a20ec:	47d8      	blx	fp
 80a20ee:	e7ea      	b.n	80a20c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a20f0:	2300      	movs	r3, #0
 80a20f2:	7323      	strb	r3, [r4, #12]
 80a20f4:	e7d9      	b.n	80a20aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a20f6:	bf00      	nop
 80a20f8:	e000ed00 	.word	0xe000ed00

080a20fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a20fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2100:	469b      	mov	fp, r3
 80a2102:	4b1a      	ldr	r3, [pc, #104]	; (80a216c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a2104:	4680      	mov	r8, r0
 80a2106:	685b      	ldr	r3, [r3, #4]
 80a2108:	4689      	mov	r9, r1
 80a210a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a210e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a2110:	b96b      	cbnz	r3, 80a212e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a2112:	f7ff fe65 	bl	80a1de0 <_ZN5spark10LogManager8instanceEv>
 80a2116:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2118:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a211c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a211e:	9301      	str	r3, [sp, #4]
 80a2120:	f7fe fd28 	bl	80a0b74 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a2124:	7b23      	ldrb	r3, [r4, #12]
 80a2126:	b12b      	cbz	r3, 80a2134 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a2128:	a801      	add	r0, sp, #4
 80a212a:	f7ff ff9e 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a212e:	b003      	add	sp, #12
 80a2130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a2134:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a2136:	b2f6      	uxtb	r6, r6
 80a2138:	7323      	strb	r3, [r4, #12]
 80a213a:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a213e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2142:	4555      	cmp	r5, sl
 80a2144:	d00e      	beq.n	80a2164 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a2146:	f855 7b04 	ldr.w	r7, [r5], #4
 80a214a:	4659      	mov	r1, fp
 80a214c:	1d38      	adds	r0, r7, #4
 80a214e:	f7ff fdcb 	bl	80a1ce8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a2152:	4286      	cmp	r6, r0
 80a2154:	d3f5      	bcc.n	80a2142 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a2156:	683b      	ldr	r3, [r7, #0]
 80a2158:	464a      	mov	r2, r9
 80a215a:	4641      	mov	r1, r8
 80a215c:	4638      	mov	r0, r7
 80a215e:	68db      	ldr	r3, [r3, #12]
 80a2160:	4798      	blx	r3
 80a2162:	e7ee      	b.n	80a2142 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a2164:	2300      	movs	r3, #0
 80a2166:	7323      	strb	r3, [r4, #12]
 80a2168:	e7de      	b.n	80a2128 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a216a:	bf00      	nop
 80a216c:	e000ed00 	.word	0xe000ed00

080a2170 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a2170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2174:	4b16      	ldr	r3, [pc, #88]	; (80a21d0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a2176:	4605      	mov	r5, r0
 80a2178:	685b      	ldr	r3, [r3, #4]
 80a217a:	460f      	mov	r7, r1
 80a217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a2180:	bb1b      	cbnz	r3, 80a21ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a2182:	f7ff fe2d 	bl	80a1de0 <_ZN5spark10LogManager8instanceEv>
 80a2186:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2188:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a218c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a218e:	9301      	str	r3, [sp, #4]
 80a2190:	f7fe fcf0 	bl	80a0b74 <os_mutex_recursive_lock>
 80a2194:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a2198:	2446      	movs	r4, #70	; 0x46
 80a219a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a219e:	45b0      	cmp	r8, r6
 80a21a0:	d109      	bne.n	80a21b6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a21a2:	a801      	add	r0, sp, #4
 80a21a4:	f7ff ff61 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a21a8:	42a5      	cmp	r5, r4
 80a21aa:	bfb4      	ite	lt
 80a21ac:	2000      	movlt	r0, #0
 80a21ae:	2001      	movge	r0, #1
}
 80a21b0:	b002      	add	sp, #8
 80a21b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a21b6:	f856 0b04 	ldr.w	r0, [r6], #4
 80a21ba:	4639      	mov	r1, r7
 80a21bc:	3004      	adds	r0, #4
 80a21be:	f7ff fd93 	bl	80a1ce8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a21c2:	4284      	cmp	r4, r0
 80a21c4:	bfa8      	it	ge
 80a21c6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a21c8:	e7e9      	b.n	80a219e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a21ca:	2000      	movs	r0, #0
 80a21cc:	e7f0      	b.n	80a21b0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a21ce:	bf00      	nop
 80a21d0:	e000ed00 	.word	0xe000ed00

080a21d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a21d4:	460b      	mov	r3, r1
 80a21d6:	b570      	push	{r4, r5, r6, lr}
 80a21d8:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a21da:	c805      	ldmia	r0, {r0, r2}
 80a21dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a21e0:	4282      	cmp	r2, r0
 80a21e2:	d007      	beq.n	80a21f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a21e4:	4601      	mov	r1, r0
            if (*p == value) {
 80a21e6:	681d      	ldr	r5, [r3, #0]
 80a21e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80a21ec:	42ae      	cmp	r6, r5
 80a21ee:	d003      	beq.n	80a21f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a21f0:	4608      	mov	r0, r1
 80a21f2:	e7f5      	b.n	80a21e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a21f4:	2000      	movs	r0, #0
}
 80a21f6:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a21f8:	1a52      	subs	r2, r2, r1
 80a21fa:	f001 fe11 	bl	80a3e20 <memmove>
    --size_;
 80a21fe:	6863      	ldr	r3, [r4, #4]
    return true;
 80a2200:	2001      	movs	r0, #1
    --size_;
 80a2202:	3b01      	subs	r3, #1
 80a2204:	6063      	str	r3, [r4, #4]
    return true;
 80a2206:	e7f6      	b.n	80a21f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a2208 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a2208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a220a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a220c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2210:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a2212:	9101      	str	r1, [sp, #4]
 80a2214:	9303      	str	r3, [sp, #12]
 80a2216:	f7fe fcad 	bl	80a0b74 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a221a:	4620      	mov	r0, r4
 80a221c:	a901      	add	r1, sp, #4
 80a221e:	f7ff ffd9 	bl	80a21d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a2222:	b118      	cbz	r0, 80a222c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a2224:	6863      	ldr	r3, [r4, #4]
 80a2226:	b90b      	cbnz	r3, 80a222c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a2228:	f7ff fe06 	bl	80a1e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a222c:	a803      	add	r0, sp, #12
 80a222e:	f7ff ff1c 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2232:	b004      	add	sp, #16
 80a2234:	bd10      	pop	{r4, pc}

080a2236 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a2236:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a2238:	b570      	push	{r4, r5, r6, lr}
 80a223a:	4604      	mov	r4, r0
 80a223c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a2240:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2244:	42ae      	cmp	r6, r5
 80a2246:	d015      	beq.n	80a2274 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a2248:	4620      	mov	r0, r4
 80a224a:	f105 0110 	add.w	r1, r5, #16
 80a224e:	f7ff ffc1 	bl	80a21d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a2252:	6863      	ldr	r3, [r4, #4]
 80a2254:	b90b      	cbnz	r3, 80a225a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a2256:	f7ff fdef 	bl	80a1e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a225a:	69e0      	ldr	r0, [r4, #28]
 80a225c:	6929      	ldr	r1, [r5, #16]
 80a225e:	6803      	ldr	r3, [r0, #0]
 80a2260:	68db      	ldr	r3, [r3, #12]
 80a2262:	4798      	blx	r3
        if (h.stream) {
 80a2264:	6969      	ldr	r1, [r5, #20]
 80a2266:	b119      	cbz	r1, 80a2270 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a2268:	6a20      	ldr	r0, [r4, #32]
 80a226a:	6803      	ldr	r3, [r0, #0]
 80a226c:	68db      	ldr	r3, [r3, #12]
 80a226e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2270:	3518      	adds	r5, #24
 80a2272:	e7e7      	b.n	80a2244 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a2274:	2618      	movs	r6, #24
 80a2276:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a227a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a227e:	42ae      	cmp	r6, r5
 80a2280:	d004      	beq.n	80a228c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a2282:	4628      	mov	r0, r5
 80a2284:	f000 fd5f 	bl	80a2d46 <_ZN6StringD1Ev>
 80a2288:	3518      	adds	r5, #24
 80a228a:	e7f8      	b.n	80a227e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a228c:	2300      	movs	r3, #0
 80a228e:	6163      	str	r3, [r4, #20]
}
 80a2290:	bd70      	pop	{r4, r5, r6, pc}

080a2292 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a2292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a2294:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a2296:	f7ff fdcf 	bl	80a1e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a229a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a229e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a22a0:	9301      	str	r3, [sp, #4]
 80a22a2:	f7fe fc67 	bl	80a0b74 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	f7ff ffc5 	bl	80a2236 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a22ac:	a801      	add	r0, sp, #4
 80a22ae:	f7ff fedc 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a22b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a22b4:	b108      	cbz	r0, 80a22ba <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a22b6:	f7fe fc55 	bl	80a0b64 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a22ba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a22be:	2618      	movs	r6, #24
 80a22c0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a22c4:	42ae      	cmp	r6, r5
 80a22c6:	d004      	beq.n	80a22d2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a22c8:	4628      	mov	r0, r5
 80a22ca:	f000 fd3c 	bl	80a2d46 <_ZN6StringD1Ev>
 80a22ce:	3518      	adds	r5, #24
 80a22d0:	e7f8      	b.n	80a22c4 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a22d2:	6920      	ldr	r0, [r4, #16]
 80a22d4:	f7fe feac 	bl	80a1030 <free>
 80a22d8:	6820      	ldr	r0, [r4, #0]
 80a22da:	f7fe fea9 	bl	80a1030 <free>
}
 80a22de:	4620      	mov	r0, r4
 80a22e0:	b002      	add	sp, #8
 80a22e2:	bd70      	pop	{r4, r5, r6, pc}

080a22e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a22e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a22e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22e8:	4606      	mov	r6, r0
 80a22ea:	460c      	mov	r4, r1
 80a22ec:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a22ee:	d927      	bls.n	80a2340 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a22f0:	4290      	cmp	r0, r2
 80a22f2:	d226      	bcs.n	80a2342 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a22f4:	2600      	movs	r6, #0
            --end;
 80a22f6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a22fa:	1a6c      	subs	r4, r5, r1
 80a22fc:	f1a1 0714 	sub.w	r7, r1, #20
 80a2300:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a2302:	42af      	cmp	r7, r5
 80a2304:	d03d      	beq.n	80a2382 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a2306:	b1a4      	cbz	r4, 80a2332 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a2308:	682b      	ldr	r3, [r5, #0]
 80a230a:	6023      	str	r3, [r4, #0]
 80a230c:	88ab      	ldrh	r3, [r5, #4]
 80a230e:	80a3      	strh	r3, [r4, #4]
 80a2310:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a2314:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a2318:	6126      	str	r6, [r4, #16]
 80a231a:	80e3      	strh	r3, [r4, #6]
 80a231c:	68ab      	ldr	r3, [r5, #8]
 80a231e:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2320:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2322:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2324:	68ea      	ldr	r2, [r5, #12]
 80a2326:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2328:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a232a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a232c:	692a      	ldr	r2, [r5, #16]
 80a232e:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2330:	612b      	str	r3, [r5, #16]
 80a2332:	f105 0008 	add.w	r0, r5, #8
 80a2336:	f7ff fe2f 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a233a:	3d14      	subs	r5, #20
 80a233c:	3c14      	subs	r4, #20
 80a233e:	e7e0      	b.n	80a2302 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a2340:	d01f      	beq.n	80a2382 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a2342:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a2344:	42ac      	cmp	r4, r5
 80a2346:	d01c      	beq.n	80a2382 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a2348:	b1a6      	cbz	r6, 80a2374 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a234a:	6823      	ldr	r3, [r4, #0]
 80a234c:	6033      	str	r3, [r6, #0]
 80a234e:	88a3      	ldrh	r3, [r4, #4]
 80a2350:	80b3      	strh	r3, [r6, #4]
 80a2352:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a2356:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a235a:	6137      	str	r7, [r6, #16]
 80a235c:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a235e:	68a3      	ldr	r3, [r4, #8]
 80a2360:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2362:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2364:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2366:	68e2      	ldr	r2, [r4, #12]
 80a2368:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a236a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a236c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a236e:	6922      	ldr	r2, [r4, #16]
 80a2370:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2372:	6123      	str	r3, [r4, #16]
 80a2374:	f104 0008 	add.w	r0, r4, #8
 80a2378:	f7ff fe0e 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a237c:	3414      	adds	r4, #20
 80a237e:	3614      	adds	r6, #20
 80a2380:	e7e0      	b.n	80a2344 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a2382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2384 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2386:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a238a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a238c:	4604      	mov	r4, r0
 80a238e:	460e      	mov	r6, r1
 80a2390:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2392:	db0d      	blt.n	80a23b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a2394:	3501      	adds	r5, #1
        if (n > 0) {
 80a2396:	2d00      	cmp	r5, #0
 80a2398:	6800      	ldr	r0, [r0, #0]
 80a239a:	dd04      	ble.n	80a23a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a239c:	00a9      	lsls	r1, r5, #2
 80a239e:	f7fe fe4f 	bl	80a1040 <realloc>
            if (!d) {
 80a23a2:	b918      	cbnz	r0, 80a23ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a23a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a23a6:	f7fe fe43 	bl	80a1030 <free>
        T* d = nullptr;
 80a23aa:	2000      	movs	r0, #0
        data_ = d;
 80a23ac:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a23ae:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a23b0:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a23b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a23b4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a23b8:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a23ba:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a23be:	1d08      	adds	r0, r1, #4
 80a23c0:	f001 fd2e 	bl	80a3e20 <memmove>
    new(p) T(std::move(value));
 80a23c4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a23c8:	6863      	ldr	r3, [r4, #4]
    return true;
 80a23ca:	2001      	movs	r0, #1
    ++size_;
 80a23cc:	3301      	adds	r3, #1
 80a23ce:	6063      	str	r3, [r4, #4]
    return true;
 80a23d0:	e7e8      	b.n	80a23a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a23d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23d4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a23d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a23da:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23dc:	460d      	mov	r5, r1
 80a23de:	9301      	str	r3, [sp, #4]
 80a23e0:	f7fe fbc8 	bl	80a0b74 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a23e4:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a23e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a23ec:	4283      	cmp	r3, r0
 80a23ee:	461a      	mov	r2, r3
 80a23f0:	d00a      	beq.n	80a2408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a23f2:	6812      	ldr	r2, [r2, #0]
 80a23f4:	3304      	adds	r3, #4
 80a23f6:	42aa      	cmp	r2, r5
 80a23f8:	d1f8      	bne.n	80a23ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a23fa:	a801      	add	r0, sp, #4
 80a23fc:	f7ff fe35 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a2400:	2500      	movs	r5, #0
}
 80a2402:	4628      	mov	r0, r5
 80a2404:	b003      	add	sp, #12
 80a2406:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a2408:	462a      	mov	r2, r5
 80a240a:	4620      	mov	r0, r4
 80a240c:	f7ff ffba 	bl	80a2384 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a2410:	4605      	mov	r5, r0
 80a2412:	2800      	cmp	r0, #0
 80a2414:	d0f1      	beq.n	80a23fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a2416:	6863      	ldr	r3, [r4, #4]
 80a2418:	2b01      	cmp	r3, #1
 80a241a:	d101      	bne.n	80a2420 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a241c:	f7ff fd00 	bl	80a1e20 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2420:	a801      	add	r0, sp, #4
 80a2422:	f7ff fe22 	bl	80a206a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a2426:	e7ec      	b.n	80a2402 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a2428 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a2428:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a242a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a242c:	4604      	mov	r4, r0
 80a242e:	460d      	mov	r5, r1
 80a2430:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a2432:	d914      	bls.n	80a245e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a2434:	4290      	cmp	r0, r2
 80a2436:	d213      	bcs.n	80a2460 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a2438:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a243c:	1a75      	subs	r5, r6, r1
 80a243e:	f1a1 0710 	sub.w	r7, r1, #16
 80a2442:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a2444:	42b7      	cmp	r7, r6
 80a2446:	d018      	beq.n	80a247a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a2448:	b11c      	cbz	r4, 80a2452 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a244a:	4631      	mov	r1, r6
 80a244c:	4620      	mov	r0, r4
 80a244e:	f000 fcf4 	bl	80a2e3a <_ZN6StringC1EOS_>
                end->~T();
 80a2452:	4630      	mov	r0, r6
 80a2454:	f000 fc77 	bl	80a2d46 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a2458:	3e10      	subs	r6, #16
 80a245a:	3c10      	subs	r4, #16
 80a245c:	e7f2      	b.n	80a2444 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a245e:	d00c      	beq.n	80a247a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a2460:	42b5      	cmp	r5, r6
 80a2462:	d00a      	beq.n	80a247a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a2464:	b11c      	cbz	r4, 80a246e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a2466:	4629      	mov	r1, r5
 80a2468:	4620      	mov	r0, r4
 80a246a:	f000 fce6 	bl	80a2e3a <_ZN6StringC1EOS_>
                p->~T();
 80a246e:	4628      	mov	r0, r5
 80a2470:	f000 fc69 	bl	80a2d46 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a2474:	3510      	adds	r5, #16
 80a2476:	3410      	adds	r4, #16
 80a2478:	e7f2      	b.n	80a2460 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a247c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a247c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a247e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a2480:	4605      	mov	r5, r0
        if (n > 0) {
 80a2482:	dd11      	ble.n	80a24a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a2484:	0130      	lsls	r0, r6, #4
 80a2486:	f7fe fdcb 	bl	80a1020 <malloc>
            if (!d) {
 80a248a:	4604      	mov	r4, r0
 80a248c:	b158      	cbz	r0, 80a24a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a248e:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a2492:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a2496:	f7ff ffc7 	bl	80a2428 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a249a:	6828      	ldr	r0, [r5, #0]
 80a249c:	f7fe fdc8 	bl	80a1030 <free>
        return true;
 80a24a0:	2001      	movs	r0, #1
        data_ = d;
 80a24a2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a24a4:	60ae      	str	r6, [r5, #8]
    }
 80a24a6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a24a8:	2400      	movs	r4, #0
 80a24aa:	e7f6      	b.n	80a249a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a24ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a24b0:	4691      	mov	r9, r2
        capacity_(0) {
 80a24b2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a24b4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24b6:	b097      	sub	sp, #92	; 0x5c
 80a24b8:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a24ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24be:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a24c0:	4299      	cmp	r1, r3
        capacity_(0) {
 80a24c2:	e9c0 3300 	strd	r3, r3, [r0]
 80a24c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a24ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a24ce:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a24d2:	7602      	strb	r2, [r0, #24]
 80a24d4:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a24d6:	dc23      	bgt.n	80a2520 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a24d8:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a24dc:	2314      	movs	r3, #20
 80a24de:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a24e2:	42af      	cmp	r7, r5
 80a24e4:	d03b      	beq.n	80a255e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a24e6:	4629      	mov	r1, r5
 80a24e8:	a80d      	add	r0, sp, #52	; 0x34
 80a24ea:	f000 fca6 	bl	80a2e3a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a24ee:	a90d      	add	r1, sp, #52	; 0x34
 80a24f0:	a811      	add	r0, sp, #68	; 0x44
 80a24f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a24f4:	f000 fca1 	bl	80a2e3a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a24f8:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a24fc:	4299      	cmp	r1, r3
 80a24fe:	da1b      	bge.n	80a2538 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a2500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a2502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a2504:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a2508:	4631      	mov	r1, r6
 80a250a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a250e:	f106 0010 	add.w	r0, r6, #16
 80a2512:	f7ff ff89 	bl	80a2428 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a2516:	b9ee      	cbnz	r6, 80a2554 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a2518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a251a:	3301      	adds	r3, #1
 80a251c:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a251e:	e011      	b.n	80a2544 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a2520:	a80a      	add	r0, sp, #40	; 0x28
 80a2522:	f7ff ffab 	bl	80a247c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2526:	2800      	cmp	r0, #0
 80a2528:	d1d6      	bne.n	80a24d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a252a:	a80a      	add	r0, sp, #40	; 0x28
 80a252c:	f7ff fd48 	bl	80a1fc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a2530:	4620      	mov	r0, r4
 80a2532:	b017      	add	sp, #92	; 0x5c
 80a2534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2538:	3101      	adds	r1, #1
 80a253a:	a80a      	add	r0, sp, #40	; 0x28
 80a253c:	f7ff ff9e 	bl	80a247c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2540:	2800      	cmp	r0, #0
 80a2542:	d1dd      	bne.n	80a2500 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a2544:	a811      	add	r0, sp, #68	; 0x44
 80a2546:	f000 fbfe 	bl	80a2d46 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a254a:	a80d      	add	r0, sp, #52	; 0x34
 80a254c:	f000 fbfb 	bl	80a2d46 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a2550:	3514      	adds	r5, #20
 80a2552:	e7c6      	b.n	80a24e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a2554:	4630      	mov	r0, r6
 80a2556:	a911      	add	r1, sp, #68	; 0x44
 80a2558:	f000 fc6f 	bl	80a2e3a <_ZN6StringC1EOS_>
 80a255c:	e7dc      	b.n	80a2518 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a255e:	2600      	movs	r6, #0
 80a2560:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a2564:	4637      	mov	r7, r6
 80a2566:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a256a:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a256c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a2570:	429e      	cmp	r6, r3
 80a2572:	f280 8097 	bge.w	80a26a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a2576:	0133      	lsls	r3, r6, #4
 80a2578:	58d3      	ldr	r3, [r2, r3]
 80a257a:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a257c:	b90b      	cbnz	r3, 80a2582 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a257e:	3601      	adds	r6, #1
 80a2580:	e7f4      	b.n	80a256c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a2582:	fb0a f306 	mul.w	r3, sl, r6
 80a2586:	9709      	str	r7, [sp, #36]	; 0x24
 80a2588:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a258a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a258c:	a909      	add	r1, sp, #36	; 0x24
 80a258e:	a808      	add	r0, sp, #32
 80a2590:	f7ff fae2 	bl	80a1b58 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a2594:	4683      	mov	fp, r0
 80a2596:	2800      	cmp	r0, #0
 80a2598:	d0f1      	beq.n	80a257e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a259a:	4601      	mov	r1, r0
 80a259c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a259e:	4628      	mov	r0, r5
 80a25a0:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a25a4:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a25a8:	f7ff fb60 	bl	80a1c6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a25ac:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a25b0:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a25b2:	f1b8 0f00 	cmp.w	r8, #0
 80a25b6:	d166      	bne.n	80a2686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a25b8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a25bc:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a25c0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a25c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a25c8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a25cc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a25d0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25d4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a25d8:	4293      	cmp	r3, r2
 80a25da:	db1a      	blt.n	80a2612 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a25dc:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a25e0:	f1bb 0f00 	cmp.w	fp, #0
 80a25e4:	dd4a      	ble.n	80a267c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a25e6:	fb0a f00b 	mul.w	r0, sl, fp
 80a25ea:	f7fe fd19 	bl	80a1020 <malloc>
            if (!d) {
 80a25ee:	9004      	str	r0, [sp, #16]
 80a25f0:	2800      	cmp	r0, #0
 80a25f2:	d045      	beq.n	80a2680 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a25f4:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a25f8:	fb0a 1202 	mla	r2, sl, r2, r1
 80a25fc:	f7ff fe72 	bl	80a22e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a2600:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a2602:	6828      	ldr	r0, [r5, #0]
 80a2604:	9304      	str	r3, [sp, #16]
 80a2606:	f7fe fd13 	bl	80a1030 <free>
        data_ = d;
 80a260a:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a260c:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a2610:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a2612:	9b01      	ldr	r3, [sp, #4]
 80a2614:	f8d5 b000 	ldr.w	fp, [r5]
 80a2618:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a261c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a261e:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a2622:	f101 0014 	add.w	r0, r1, #20
 80a2626:	fb0a b202 	mla	r2, sl, r2, fp
 80a262a:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a262c:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a262e:	f7ff fe59 	bl	80a22e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a2632:	9904      	ldr	r1, [sp, #16]
 80a2634:	b1a9      	cbz	r1, 80a2662 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a2636:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a2638:	9b05      	ldr	r3, [sp, #20]
 80a263a:	f84b 2003 	str.w	r2, [fp, r3]
 80a263e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a2642:	808b      	strh	r3, [r1, #4]
 80a2644:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a2648:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a264c:	610f      	str	r7, [r1, #16]
 80a264e:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a2650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a2652:	608b      	str	r3, [r1, #8]
 80a2654:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a2656:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a2658:	60cb      	str	r3, [r1, #12]
 80a265a:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a265c:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a265e:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2660:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a2662:	686b      	ldr	r3, [r5, #4]
 80a2664:	3301      	adds	r3, #1
 80a2666:	606b      	str	r3, [r5, #4]
 80a2668:	a813      	add	r0, sp, #76	; 0x4c
 80a266a:	f7ff fc95 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a266e:	f1b8 0f00 	cmp.w	r8, #0
 80a2672:	d008      	beq.n	80a2686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a2674:	a80d      	add	r0, sp, #52	; 0x34
 80a2676:	f7ff fc8f 	bl	80a1f98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a267a:	e756      	b.n	80a252a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a267c:	4643      	mov	r3, r8
 80a267e:	e7c0      	b.n	80a2602 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2680:	f04f 0801 	mov.w	r8, #1
 80a2684:	e7f0      	b.n	80a2668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a2686:	9b01      	ldr	r3, [sp, #4]
 80a2688:	682d      	ldr	r5, [r5, #0]
 80a268a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a268e:	9b08      	ldr	r3, [sp, #32]
 80a2690:	781b      	ldrb	r3, [r3, #0]
 80a2692:	b92b      	cbnz	r3, 80a26a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a2694:	f8d9 3000 	ldr.w	r3, [r9]
 80a2698:	9a02      	ldr	r2, [sp, #8]
 80a269a:	4413      	add	r3, r2
 80a269c:	7c1b      	ldrb	r3, [r3, #16]
 80a269e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a26a0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a26a2:	e773      	b.n	80a258c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a26a6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a26aa:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26ac:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26ae:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a26b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a26b2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26b4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a26b6:	60a2      	str	r2, [r4, #8]
 80a26b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a26ba:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26bc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a26be:	60e2      	str	r2, [r4, #12]
 80a26c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a26c2:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26c4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a26c6:	6122      	str	r2, [r4, #16]
 80a26c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a26ca:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a26cc:	9b03      	ldr	r3, [sp, #12]
 80a26ce:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a26d0:	6162      	str	r2, [r4, #20]
 80a26d2:	7623      	strb	r3, [r4, #24]
 80a26d4:	e7ce      	b.n	80a2674 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a26d8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a26da:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26dc:	460e      	mov	r6, r1
 80a26de:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a26e0:	4b08      	ldr	r3, [pc, #32]	; (80a2704 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a26e2:	4611      	mov	r1, r2
 80a26e4:	f845 3b04 	str.w	r3, [r5], #4
 80a26e8:	a801      	add	r0, sp, #4
 80a26ea:	f7fd ff40 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a26ee:	4631      	mov	r1, r6
 80a26f0:	aa01      	add	r2, sp, #4
 80a26f2:	4628      	mov	r0, r5
 80a26f4:	f7ff feda 	bl	80a24ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a26f8:	a801      	add	r0, sp, #4
 80a26fa:	f7fd fef7 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a26fe:	4620      	mov	r0, r4
 80a2700:	b004      	add	sp, #16
 80a2702:	bd70      	pop	{r4, r5, r6, pc}
 80a2704:	080a427c 	.word	0x080a427c

080a2708 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a2708:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a270a:	460f      	mov	r7, r1
 80a270c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a270e:	4638      	mov	r0, r7
 80a2710:	4925      	ldr	r1, [pc, #148]	; (80a27a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a2712:	4616      	mov	r6, r2
 80a2714:	461d      	mov	r5, r3
 80a2716:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2718:	f001 fbdf 	bl	80a3eda <strcmp>
 80a271c:	bb00      	cbnz	r0, 80a2760 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a271e:	b1e4      	cbz	r4, 80a275a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a2720:	4629      	mov	r1, r5
 80a2722:	4668      	mov	r0, sp
 80a2724:	f7ff fc92 	bl	80a204c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2728:	2024      	movs	r0, #36	; 0x24
 80a272a:	4920      	ldr	r1, [pc, #128]	; (80a27ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a272c:	f001 fa39 	bl	80a3ba2 <_ZnwjRKSt9nothrow_t>
 80a2730:	4605      	mov	r5, r0
 80a2732:	b170      	cbz	r0, 80a2752 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2734:	4669      	mov	r1, sp
 80a2736:	a803      	add	r0, sp, #12
 80a2738:	f7fd ff19 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a273c:	4631      	mov	r1, r6
 80a273e:	aa03      	add	r2, sp, #12
 80a2740:	4628      	mov	r0, r5
 80a2742:	f7ff ffc9 	bl	80a26d8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2746:	a803      	add	r0, sp, #12
 80a2748:	f7fd fed0 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a274c:	4b18      	ldr	r3, [pc, #96]	; (80a27b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a274e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a2750:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a2752:	4668      	mov	r0, sp
 80a2754:	f7fd feca 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2758:	462c      	mov	r4, r5
}
 80a275a:	4620      	mov	r0, r4
 80a275c:	b007      	add	sp, #28
 80a275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a2760:	4638      	mov	r0, r7
 80a2762:	4914      	ldr	r1, [pc, #80]	; (80a27b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a2764:	f001 fbb9 	bl	80a3eda <strcmp>
 80a2768:	b9e0      	cbnz	r0, 80a27a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a276a:	2c00      	cmp	r4, #0
 80a276c:	d0f5      	beq.n	80a275a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a276e:	4629      	mov	r1, r5
 80a2770:	4668      	mov	r0, sp
 80a2772:	f7ff fc6b 	bl	80a204c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2776:	2024      	movs	r0, #36	; 0x24
 80a2778:	490c      	ldr	r1, [pc, #48]	; (80a27ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a277a:	f001 fa12 	bl	80a3ba2 <_ZnwjRKSt9nothrow_t>
 80a277e:	4605      	mov	r5, r0
 80a2780:	2800      	cmp	r0, #0
 80a2782:	d0e6      	beq.n	80a2752 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2784:	4669      	mov	r1, sp
 80a2786:	a803      	add	r0, sp, #12
 80a2788:	f7fd fef1 	bl	80a056e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a278c:	4631      	mov	r1, r6
 80a278e:	aa03      	add	r2, sp, #12
 80a2790:	4628      	mov	r0, r5
 80a2792:	f7ff ffa1 	bl	80a26d8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2796:	a803      	add	r0, sp, #12
 80a2798:	f7fd fea8 	bl	80a04ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a279c:	4b06      	ldr	r3, [pc, #24]	; (80a27b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a279e:	622c      	str	r4, [r5, #32]
 80a27a0:	602b      	str	r3, [r5, #0]
}
 80a27a2:	e7d6      	b.n	80a2752 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a27a4:	2400      	movs	r4, #0
 80a27a6:	e7d8      	b.n	80a275a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a27a8:	080a4397 	.word	0x080a4397
 80a27ac:	080a45ec 	.word	0x080a45ec
 80a27b0:	080a442c 	.word	0x080a442c
 80a27b4:	080a439b 	.word	0x080a439b
 80a27b8:	080a4414 	.word	0x080a4414

080a27bc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a27bc:	4b01      	ldr	r3, [pc, #4]	; (80a27c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a27be:	4a02      	ldr	r2, [pc, #8]	; (80a27c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a27c0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a27c2:	4770      	bx	lr
 80a27c4:	20000d18 	.word	0x20000d18
 80a27c8:	080a43ac 	.word	0x080a43ac

080a27cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a27d0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a27d2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27d6:	4604      	mov	r4, r0
 80a27d8:	460e      	mov	r6, r1
 80a27da:	4617      	mov	r7, r2
 80a27dc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a27de:	f000 ff85 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a27e2:	4581      	cmp	r9, r0
 80a27e4:	d04d      	beq.n	80a2882 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a27e6:	792b      	ldrb	r3, [r5, #4]
 80a27e8:	0719      	lsls	r1, r3, #28
 80a27ea:	d504      	bpl.n	80a27f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a27ec:	4620      	mov	r0, r4
 80a27ee:	696a      	ldr	r2, [r5, #20]
 80a27f0:	4954      	ldr	r1, [pc, #336]	; (80a2944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a27f2:	f7ff fa2b 	bl	80a1c4c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a27f6:	f1b8 0f00 	cmp.w	r8, #0
 80a27fa:	d00d      	beq.n	80a2818 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a27fc:	215b      	movs	r1, #91	; 0x5b
 80a27fe:	4620      	mov	r0, r4
 80a2800:	f7ff fa18 	bl	80a1c34 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a2804:	4641      	mov	r1, r8
 80a2806:	4620      	mov	r0, r4
 80a2808:	f7ff fa06 	bl	80a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a280c:	6823      	ldr	r3, [r4, #0]
 80a280e:	2202      	movs	r2, #2
 80a2810:	4620      	mov	r0, r4
 80a2812:	68db      	ldr	r3, [r3, #12]
 80a2814:	494c      	ldr	r1, [pc, #304]	; (80a2948 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a2816:	4798      	blx	r3
    if (attr.has_file) {
 80a2818:	792b      	ldrb	r3, [r5, #4]
 80a281a:	07da      	lsls	r2, r3, #31
 80a281c:	d524      	bpl.n	80a2868 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a281e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a2822:	212f      	movs	r1, #47	; 0x2f
 80a2824:	4640      	mov	r0, r8
 80a2826:	f001 fba0 	bl	80a3f6a <strrchr>
    if (s1) {
 80a282a:	b108      	cbz	r0, 80a2830 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a282c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a2830:	4641      	mov	r1, r8
 80a2832:	4620      	mov	r0, r4
 80a2834:	f7ff f9f0 	bl	80a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a2838:	792b      	ldrb	r3, [r5, #4]
 80a283a:	079b      	lsls	r3, r3, #30
 80a283c:	d508      	bpl.n	80a2850 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a283e:	213a      	movs	r1, #58	; 0x3a
 80a2840:	4620      	mov	r0, r4
 80a2842:	f7ff f9f7 	bl	80a1c34 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a2846:	4620      	mov	r0, r4
 80a2848:	68ea      	ldr	r2, [r5, #12]
 80a284a:	4940      	ldr	r1, [pc, #256]	; (80a294c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a284c:	f7ff f9fe 	bl	80a1c4c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a2850:	792a      	ldrb	r2, [r5, #4]
 80a2852:	6823      	ldr	r3, [r4, #0]
 80a2854:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a2858:	4620      	mov	r0, r4
            write(", ", 2);
 80a285a:	f04f 0202 	mov.w	r2, #2
 80a285e:	68db      	ldr	r3, [r3, #12]
 80a2860:	bf14      	ite	ne
 80a2862:	493b      	ldrne	r1, [pc, #236]	; (80a2950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a2864:	493b      	ldreq	r1, [pc, #236]	; (80a2954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2866:	4798      	blx	r3
    if (attr.has_function) {
 80a2868:	792b      	ldrb	r3, [r5, #4]
 80a286a:	0758      	lsls	r0, r3, #29
 80a286c:	d51d      	bpl.n	80a28aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a286e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2870:	460b      	mov	r3, r1
 80a2872:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a2874:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a2878:	b160      	cbz	r0, 80a2894 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a287a:	2820      	cmp	r0, #32
 80a287c:	d108      	bne.n	80a2890 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a287e:	4619      	mov	r1, r3
 80a2880:	e7f7      	b.n	80a2872 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a2882:	4835      	ldr	r0, [pc, #212]	; (80a2958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a2884:	f000 f967 	bl	80a2b56 <_ZN5spark12NetworkClass9listeningEv>
 80a2888:	2800      	cmp	r0, #0
 80a288a:	d0ac      	beq.n	80a27e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a288c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a2890:	2828      	cmp	r0, #40	; 0x28
 80a2892:	d1ee      	bne.n	80a2872 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a2894:	6823      	ldr	r3, [r4, #0]
 80a2896:	1a52      	subs	r2, r2, r1
 80a2898:	4620      	mov	r0, r4
 80a289a:	68db      	ldr	r3, [r3, #12]
 80a289c:	4798      	blx	r3
        write("(): ", 4);
 80a289e:	6823      	ldr	r3, [r4, #0]
 80a28a0:	2204      	movs	r2, #4
 80a28a2:	4620      	mov	r0, r4
 80a28a4:	68db      	ldr	r3, [r3, #12]
 80a28a6:	492d      	ldr	r1, [pc, #180]	; (80a295c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a28a8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a28aa:	2100      	movs	r1, #0
 80a28ac:	4638      	mov	r0, r7
 80a28ae:	f7fe faeb 	bl	80a0e88 <log_level_name>
 80a28b2:	4601      	mov	r1, r0
    write(s);
 80a28b4:	4620      	mov	r0, r4
 80a28b6:	f7ff f9af 	bl	80a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a28ba:	6823      	ldr	r3, [r4, #0]
 80a28bc:	2202      	movs	r2, #2
 80a28be:	4620      	mov	r0, r4
 80a28c0:	68db      	ldr	r3, [r3, #12]
 80a28c2:	4924      	ldr	r1, [pc, #144]	; (80a2954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a28c4:	4798      	blx	r3
    if (msg) {
 80a28c6:	b11e      	cbz	r6, 80a28d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a28c8:	4631      	mov	r1, r6
 80a28ca:	4620      	mov	r0, r4
 80a28cc:	f7ff f9a4 	bl	80a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a28d0:	792b      	ldrb	r3, [r5, #4]
 80a28d2:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a28d6:	d02c      	beq.n	80a2932 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a28d8:	6823      	ldr	r3, [r4, #0]
 80a28da:	4921      	ldr	r1, [pc, #132]	; (80a2960 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a28dc:	68db      	ldr	r3, [r3, #12]
 80a28de:	2202      	movs	r2, #2
 80a28e0:	4620      	mov	r0, r4
 80a28e2:	4798      	blx	r3
        if (attr.has_code) {
 80a28e4:	792b      	ldrb	r3, [r5, #4]
 80a28e6:	06d9      	lsls	r1, r3, #27
 80a28e8:	d50a      	bpl.n	80a2900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a28ea:	6823      	ldr	r3, [r4, #0]
 80a28ec:	2207      	movs	r2, #7
 80a28ee:	4620      	mov	r0, r4
 80a28f0:	491c      	ldr	r1, [pc, #112]	; (80a2964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a28f2:	68db      	ldr	r3, [r3, #12]
 80a28f4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	69aa      	ldr	r2, [r5, #24]
 80a28fa:	491b      	ldr	r1, [pc, #108]	; (80a2968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a28fc:	f7ff f9a6 	bl	80a1c4c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a2900:	792b      	ldrb	r3, [r5, #4]
 80a2902:	069a      	lsls	r2, r3, #26
 80a2904:	d511      	bpl.n	80a292a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a2906:	06db      	lsls	r3, r3, #27
 80a2908:	d505      	bpl.n	80a2916 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a290a:	6823      	ldr	r3, [r4, #0]
 80a290c:	2202      	movs	r2, #2
 80a290e:	4620      	mov	r0, r4
 80a2910:	68db      	ldr	r3, [r3, #12]
 80a2912:	490f      	ldr	r1, [pc, #60]	; (80a2950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a2914:	4798      	blx	r3
            write("details = ", 10);
 80a2916:	6823      	ldr	r3, [r4, #0]
 80a2918:	4620      	mov	r0, r4
 80a291a:	4914      	ldr	r1, [pc, #80]	; (80a296c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a291c:	220a      	movs	r2, #10
 80a291e:	68db      	ldr	r3, [r3, #12]
 80a2920:	4798      	blx	r3
            write(attr.details);
 80a2922:	4620      	mov	r0, r4
 80a2924:	69e9      	ldr	r1, [r5, #28]
 80a2926:	f7ff f977 	bl	80a1c18 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a292a:	215d      	movs	r1, #93	; 0x5d
 80a292c:	4620      	mov	r0, r4
 80a292e:	f7ff f981 	bl	80a1c34 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a2932:	6823      	ldr	r3, [r4, #0]
 80a2934:	4620      	mov	r0, r4
}
 80a2936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a293a:	2202      	movs	r2, #2
 80a293c:	68db      	ldr	r3, [r3, #12]
 80a293e:	490c      	ldr	r1, [pc, #48]	; (80a2970 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a2940:	4718      	bx	r3
 80a2942:	bf00      	nop
 80a2944:	080a43b0 	.word	0x080a43b0
 80a2948:	080a43b7 	.word	0x080a43b7
 80a294c:	080a4374 	.word	0x080a4374
 80a2950:	080a43ba 	.word	0x080a43ba
 80a2954:	080a43bf 	.word	0x080a43bf
 80a2958:	20000d44 	.word	0x20000d44
 80a295c:	080a43bd 	.word	0x080a43bd
 80a2960:	080a43c2 	.word	0x080a43c2
 80a2964:	080a43c5 	.word	0x080a43c5
 80a2968:	080a43cd 	.word	0x080a43cd
 80a296c:	080a43d0 	.word	0x080a43d0
 80a2970:	080a42f7 	.word	0x080a42f7

080a2974 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2978:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a297a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a297e:	4605      	mov	r5, r0
 80a2980:	460f      	mov	r7, r1
 80a2982:	4690      	mov	r8, r2
 80a2984:	461e      	mov	r6, r3
 80a2986:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2988:	f000 feb0 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a298c:	4581      	cmp	r9, r0
 80a298e:	d105      	bne.n	80a299c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a2990:	4849      	ldr	r0, [pc, #292]	; (80a2ab8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a2992:	f000 f8e0 	bl	80a2b56 <_ZN5spark12NetworkClass9listeningEv>
 80a2996:	2800      	cmp	r0, #0
 80a2998:	f040 808a 	bne.w	80a2ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a299c:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a29a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a29a2:	4a46      	ldr	r2, [pc, #280]	; (80a2abc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a29a4:	a801      	add	r0, sp, #4
 80a29a6:	9201      	str	r2, [sp, #4]
 80a29a8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a29aa:	f88d 9008 	strb.w	r9, [sp, #8]
 80a29ae:	f7ff f81e 	bl	80a19ee <_ZN5spark10JSONWriter11beginObjectEv>
 80a29b2:	4649      	mov	r1, r9
 80a29b4:	4640      	mov	r0, r8
 80a29b6:	f7fe fa67 	bl	80a0e88 <log_level_name>
 80a29ba:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a29bc:	4940      	ldr	r1, [pc, #256]	; (80a2ac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a29be:	2201      	movs	r2, #1
 80a29c0:	a801      	add	r0, sp, #4
 80a29c2:	f7ff f89d 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29c6:	4641      	mov	r1, r8
 80a29c8:	f7ff f919 	bl	80a1bfe <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a29cc:	b13f      	cbz	r7, 80a29de <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a29ce:	493d      	ldr	r1, [pc, #244]	; (80a2ac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a29d0:	2201      	movs	r2, #1
 80a29d2:	a801      	add	r0, sp, #4
 80a29d4:	f7ff f894 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29d8:	4639      	mov	r1, r7
 80a29da:	f7ff f910 	bl	80a1bfe <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a29de:	b13e      	cbz	r6, 80a29f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a29e0:	4939      	ldr	r1, [pc, #228]	; (80a2ac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a29e2:	2201      	movs	r2, #1
 80a29e4:	a801      	add	r0, sp, #4
 80a29e6:	f7ff f88b 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29ea:	4631      	mov	r1, r6
 80a29ec:	f7ff f907 	bl	80a1bfe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a29f0:	7923      	ldrb	r3, [r4, #4]
 80a29f2:	07df      	lsls	r7, r3, #31
 80a29f4:	d50e      	bpl.n	80a2a14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a29f6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a29f8:	212f      	movs	r1, #47	; 0x2f
 80a29fa:	4630      	mov	r0, r6
 80a29fc:	f001 fab5 	bl	80a3f6a <strrchr>
    if (s1) {
 80a2a00:	b100      	cbz	r0, 80a2a04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a2a02:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a2a04:	4931      	ldr	r1, [pc, #196]	; (80a2acc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a2a06:	2201      	movs	r2, #1
 80a2a08:	a801      	add	r0, sp, #4
 80a2a0a:	f7ff f879 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a0e:	4631      	mov	r1, r6
 80a2a10:	f7ff f8f5 	bl	80a1bfe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a2a14:	7923      	ldrb	r3, [r4, #4]
 80a2a16:	079e      	lsls	r6, r3, #30
 80a2a18:	d507      	bpl.n	80a2a2a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2a1a:	492d      	ldr	r1, [pc, #180]	; (80a2ad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2a1c:	2202      	movs	r2, #2
 80a2a1e:	a801      	add	r0, sp, #4
 80a2a20:	f7ff f86e 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a24:	68e1      	ldr	r1, [r4, #12]
 80a2a26:	f7fe ffef 	bl	80a1a08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a2a2a:	7923      	ldrb	r3, [r4, #4]
 80a2a2c:	0758      	lsls	r0, r3, #29
 80a2a2e:	d514      	bpl.n	80a2a5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2a30:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2a32:	4633      	mov	r3, r6
 80a2a34:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a2a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2a3a:	b12a      	cbz	r2, 80a2a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a2a3c:	2a20      	cmp	r2, #32
 80a2a3e:	d101      	bne.n	80a2a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a2a40:	461e      	mov	r6, r3
 80a2a42:	e7f7      	b.n	80a2a34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a2a44:	2a28      	cmp	r2, #40	; 0x28
 80a2a46:	d1f5      	bne.n	80a2a34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a2a48:	2202      	movs	r2, #2
 80a2a4a:	4922      	ldr	r1, [pc, #136]	; (80a2ad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2a4c:	a801      	add	r0, sp, #4
 80a2a4e:	f7ff f857 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a52:	4631      	mov	r1, r6
 80a2a54:	1bba      	subs	r2, r7, r6
 80a2a56:	f7ff f862 	bl	80a1b1e <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a2a5a:	7923      	ldrb	r3, [r4, #4]
 80a2a5c:	0719      	lsls	r1, r3, #28
 80a2a5e:	d507      	bpl.n	80a2a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a2a60:	491d      	ldr	r1, [pc, #116]	; (80a2ad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a2a62:	2201      	movs	r2, #1
 80a2a64:	a801      	add	r0, sp, #4
 80a2a66:	f7ff f84b 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a6a:	6961      	ldr	r1, [r4, #20]
 80a2a6c:	f7fe ffde 	bl	80a1a2c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a2a70:	7923      	ldrb	r3, [r4, #4]
 80a2a72:	06da      	lsls	r2, r3, #27
 80a2a74:	d508      	bpl.n	80a2a88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a2a76:	2204      	movs	r2, #4
 80a2a78:	4918      	ldr	r1, [pc, #96]	; (80a2adc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a2a7a:	eb0d 0002 	add.w	r0, sp, r2
 80a2a7e:	f7ff f83f 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a82:	69a1      	ldr	r1, [r4, #24]
 80a2a84:	f7fe ffc0 	bl	80a1a08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2a88:	7923      	ldrb	r3, [r4, #4]
 80a2a8a:	069b      	lsls	r3, r3, #26
 80a2a8c:	d507      	bpl.n	80a2a9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2a8e:	4914      	ldr	r1, [pc, #80]	; (80a2ae0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2a90:	2206      	movs	r2, #6
 80a2a92:	a801      	add	r0, sp, #4
 80a2a94:	f7ff f834 	bl	80a1b00 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a98:	69e1      	ldr	r1, [r4, #28]
 80a2a9a:	f7ff f8b0 	bl	80a1bfe <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2a9e:	a801      	add	r0, sp, #4
 80a2aa0:	f7fe ff8f 	bl	80a19c2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2aa4:	6a28      	ldr	r0, [r5, #32]
 80a2aa6:	2202      	movs	r2, #2
 80a2aa8:	6803      	ldr	r3, [r0, #0]
 80a2aaa:	490e      	ldr	r1, [pc, #56]	; (80a2ae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2aac:	68db      	ldr	r3, [r3, #12]
 80a2aae:	4798      	blx	r3
}
 80a2ab0:	b005      	add	sp, #20
 80a2ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2ab6:	bf00      	nop
 80a2ab8:	20000d44 	.word	0x20000d44
 80a2abc:	080a43fc 	.word	0x080a43fc
 80a2ac0:	080a438a 	.word	0x080a438a
 80a2ac4:	080a43db 	.word	0x080a43db
 80a2ac8:	080a43dd 	.word	0x080a43dd
 80a2acc:	080a43df 	.word	0x080a43df
 80a2ad0:	080a43e1 	.word	0x080a43e1
 80a2ad4:	080a43e4 	.word	0x080a43e4
 80a2ad8:	080a4184 	.word	0x080a4184
 80a2adc:	080a43e7 	.word	0x080a43e7
 80a2ae0:	080a43ec 	.word	0x080a43ec
 80a2ae4:	080a42f7 	.word	0x080a42f7

080a2ae8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ae8:	2300      	movs	r3, #0
 80a2aea:	6840      	ldr	r0, [r0, #4]
 80a2aec:	461a      	mov	r2, r3
 80a2aee:	f7fe ba37 	b.w	80a0f60 <network_connect>

080a2af2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2af2:	2200      	movs	r2, #0
 80a2af4:	2102      	movs	r1, #2
 80a2af6:	6840      	ldr	r0, [r0, #4]
 80a2af8:	f7fe ba42 	b.w	80a0f80 <network_disconnect>

080a2afc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2afc:	2200      	movs	r2, #0
 80a2afe:	6840      	ldr	r0, [r0, #4]
 80a2b00:	4611      	mov	r1, r2
 80a2b02:	f7fe ba35 	b.w	80a0f70 <network_connecting>

080a2b06 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2b06:	2200      	movs	r2, #0
 80a2b08:	6840      	ldr	r0, [r0, #4]
 80a2b0a:	4611      	mov	r1, r2
 80a2b0c:	f7fe ba40 	b.w	80a0f90 <network_ready>

080a2b10 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2b10:	2300      	movs	r3, #0
 80a2b12:	6840      	ldr	r0, [r0, #4]
 80a2b14:	461a      	mov	r2, r3
 80a2b16:	4619      	mov	r1, r3
 80a2b18:	f7fe ba42 	b.w	80a0fa0 <network_on>

080a2b1c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2b1c:	2300      	movs	r3, #0
 80a2b1e:	6840      	ldr	r0, [r0, #4]
 80a2b20:	461a      	mov	r2, r3
 80a2b22:	4619      	mov	r1, r3
 80a2b24:	f7fe ba44 	b.w	80a0fb0 <network_off>

080a2b28 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2b28:	2100      	movs	r1, #0
 80a2b2a:	6840      	ldr	r0, [r0, #4]
 80a2b2c:	f7fe ba68 	b.w	80a1000 <network_is_on>

080a2b30 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2b30:	2100      	movs	r1, #0
 80a2b32:	6840      	ldr	r0, [r0, #4]
 80a2b34:	f7fe ba6c 	b.w	80a1010 <network_is_off>

080a2b38 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2b38:	2200      	movs	r2, #0
 80a2b3a:	6840      	ldr	r0, [r0, #4]
 80a2b3c:	f081 0101 	eor.w	r1, r1, #1
 80a2b40:	f7fe ba3e 	b.w	80a0fc0 <network_listen>

080a2b44 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2b44:	2200      	movs	r2, #0
 80a2b46:	6840      	ldr	r0, [r0, #4]
 80a2b48:	f7fe ba4a 	b.w	80a0fe0 <network_set_listen_timeout>

080a2b4c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2b4c:	2200      	movs	r2, #0
 80a2b4e:	6840      	ldr	r0, [r0, #4]
 80a2b50:	4611      	mov	r1, r2
 80a2b52:	f7fe ba4d 	b.w	80a0ff0 <network_get_listen_timeout>

080a2b56 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2b56:	2200      	movs	r2, #0
 80a2b58:	6840      	ldr	r0, [r0, #4]
 80a2b5a:	4611      	mov	r1, r2
 80a2b5c:	f7fe ba38 	b.w	80a0fd0 <network_listening>

080a2b60 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2b60:	b570      	push	{r4, r5, r6, lr}
 80a2b62:	4615      	mov	r5, r2
 80a2b64:	b08e      	sub	sp, #56	; 0x38
 80a2b66:	4604      	mov	r4, r0
    IPAddress addr;
 80a2b68:	a808      	add	r0, sp, #32
 80a2b6a:	f7fe fdbd 	bl	80a16e8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2b6e:	2211      	movs	r2, #17
 80a2b70:	2100      	movs	r1, #0
 80a2b72:	a803      	add	r0, sp, #12
 80a2b74:	f001 f96e 	bl	80a3e54 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2b78:	2600      	movs	r6, #0
 80a2b7a:	4628      	mov	r0, r5
 80a2b7c:	f001 f9db 	bl	80a3f36 <strlen>
 80a2b80:	4b0a      	ldr	r3, [pc, #40]	; (80a2bac <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2b82:	9600      	str	r6, [sp, #0]
 80a2b84:	b281      	uxth	r1, r0
 80a2b86:	685b      	ldr	r3, [r3, #4]
 80a2b88:	4628      	mov	r0, r5
 80a2b8a:	aa03      	add	r2, sp, #12
 80a2b8c:	f7fe f964 	bl	80a0e58 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b90:	b130      	cbz	r0, 80a2ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2b92:	4631      	mov	r1, r6
 80a2b94:	4620      	mov	r0, r4
 80a2b96:	f7fe fdc7 	bl	80a1728 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2b9a:	4620      	mov	r0, r4
 80a2b9c:	b00e      	add	sp, #56	; 0x38
 80a2b9e:	bd70      	pop	{r4, r5, r6, pc}
 80a2ba0:	4620      	mov	r0, r4
 80a2ba2:	a903      	add	r1, sp, #12
 80a2ba4:	f7fe fdae 	bl	80a1704 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2ba8:	e7f7      	b.n	80a2b9a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2baa:	bf00      	nop
 80a2bac:	200011c4 	.word	0x200011c4

080a2bb0 <_ZN5spark12NetworkClass4fromEm>:
}
 80a2bb0:	4a03      	ldr	r2, [pc, #12]	; (80a2bc0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2bb2:	4b04      	ldr	r3, [pc, #16]	; (80a2bc4 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2bb4:	2804      	cmp	r0, #4
 80a2bb6:	bf14      	ite	ne
 80a2bb8:	4610      	movne	r0, r2
 80a2bba:	4618      	moveq	r0, r3
 80a2bbc:	4770      	bx	lr
 80a2bbe:	bf00      	nop
 80a2bc0:	20000d44 	.word	0x20000d44
 80a2bc4:	200011c4 	.word	0x200011c4

080a2bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2bc8:	4b02      	ldr	r3, [pc, #8]	; (80a2bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2bca:	4a03      	ldr	r2, [pc, #12]	; (80a2bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2bcc:	601a      	str	r2, [r3, #0]
 80a2bce:	2200      	movs	r2, #0
 80a2bd0:	605a      	str	r2, [r3, #4]

} // spark
 80a2bd2:	4770      	bx	lr
 80a2bd4:	20000d44 	.word	0x20000d44
 80a2bd8:	080a4474 	.word	0x080a4474

080a2bdc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2bde:	4606      	mov	r6, r0
 80a2be0:	460d      	mov	r5, r1
  size_t n = 0;
 80a2be2:	2400      	movs	r4, #0
 80a2be4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2be6:	42bd      	cmp	r5, r7
 80a2be8:	d00c      	beq.n	80a2c04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2bea:	6833      	ldr	r3, [r6, #0]
 80a2bec:	4630      	mov	r0, r6
 80a2bee:	689b      	ldr	r3, [r3, #8]
 80a2bf0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2bf4:	4798      	blx	r3
     if (chunk>=0)
 80a2bf6:	1e03      	subs	r3, r0, #0
 80a2bf8:	db01      	blt.n	80a2bfe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2bfa:	441c      	add	r4, r3
  while (size--) {
 80a2bfc:	e7f3      	b.n	80a2be6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2bfe:	2c00      	cmp	r4, #0
 80a2c00:	bf08      	it	eq
 80a2c02:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2c08 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2c08:	b570      	push	{r4, r5, r6, lr}
 80a2c0a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2c0c:	460c      	mov	r4, r1
    }
 80a2c0e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2c10:	b149      	cbz	r1, 80a2c26 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2c12:	f001 f990 	bl	80a3f36 <strlen>
 80a2c16:	682b      	ldr	r3, [r5, #0]
 80a2c18:	4602      	mov	r2, r0
 80a2c1a:	4621      	mov	r1, r4
 80a2c1c:	4628      	mov	r0, r5
    }
 80a2c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2c22:	68db      	ldr	r3, [r3, #12]
 80a2c24:	4718      	bx	r3
    }
 80a2c26:	bd70      	pop	{r4, r5, r6, pc}

080a2c28 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2c28:	b508      	push	{r3, lr}
  return write(str);
 80a2c2a:	f7ff ffed 	bl	80a2c08 <_ZN5Print5writeEPKc>
}
 80a2c2e:	bd08      	pop	{r3, pc}

080a2c30 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2c30:	6803      	ldr	r3, [r0, #0]
 80a2c32:	689b      	ldr	r3, [r3, #8]
 80a2c34:	4718      	bx	r3

080a2c36 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2c38:	210d      	movs	r1, #13
{
 80a2c3a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2c3c:	f7ff fff8 	bl	80a2c30 <_ZN5Print5printEc>
  n += print('\n');
 80a2c40:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2c42:	4604      	mov	r4, r0
  n += print('\n');
 80a2c44:	4628      	mov	r0, r5
 80a2c46:	f7ff fff3 	bl	80a2c30 <_ZN5Print5printEc>
  return n;
}
 80a2c4a:	4420      	add	r0, r4
 80a2c4c:	bd38      	pop	{r3, r4, r5, pc}

080a2c4e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2c4e:	b538      	push	{r3, r4, r5, lr}
 80a2c50:	4605      	mov	r5, r0
  return write(str);
 80a2c52:	f7ff ffd9 	bl	80a2c08 <_ZN5Print5writeEPKc>
 80a2c56:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2c58:	4628      	mov	r0, r5
 80a2c5a:	f7ff ffec 	bl	80a2c36 <_ZN5Print7printlnEv>
  return n;
}
 80a2c5e:	4420      	add	r0, r4
 80a2c60:	bd38      	pop	{r3, r4, r5, pc}

080a2c62 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2c62:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2c64:	2a01      	cmp	r2, #1
 80a2c66:	bf98      	it	ls
 80a2c68:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2c6a:	b530      	push	{r4, r5, lr}
 80a2c6c:	b08b      	sub	sp, #44	; 0x2c
 80a2c6e:	460c      	mov	r4, r1
  *str = '\0';
 80a2c70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2c74:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2c76:	4625      	mov	r5, r4
 80a2c78:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2c7c:	fb04 5312 	mls	r3, r4, r2, r5
 80a2c80:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c82:	2b09      	cmp	r3, #9
 80a2c84:	bf94      	ite	ls
 80a2c86:	3330      	addls	r3, #48	; 0x30
 80a2c88:	3337      	addhi	r3, #55	; 0x37
 80a2c8a:	b2db      	uxtb	r3, r3
  } while(n);
 80a2c8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c8e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2c92:	d9f0      	bls.n	80a2c76 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2c94:	f7ff ffb8 	bl	80a2c08 <_ZN5Print5writeEPKc>
}
 80a2c98:	b00b      	add	sp, #44	; 0x2c
 80a2c9a:	bd30      	pop	{r4, r5, pc}

080a2c9c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ca0:	b086      	sub	sp, #24
 80a2ca2:	af00      	add	r7, sp, #0
 80a2ca4:	4605      	mov	r5, r0
 80a2ca6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2ca8:	1d38      	adds	r0, r7, #4
 80a2caa:	2114      	movs	r1, #20
{
 80a2cac:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2cae:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2cb0:	f7fe f9ce 	bl	80a1050 <vsnprintf>

    if (n<bufsize)
 80a2cb4:	2813      	cmp	r0, #19
 80a2cb6:	d80e      	bhi.n	80a2cd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2cb8:	4628      	mov	r0, r5
 80a2cba:	1d39      	adds	r1, r7, #4
 80a2cbc:	f7ff ffa4 	bl	80a2c08 <_ZN5Print5writeEPKc>
 80a2cc0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2cc2:	b11e      	cbz	r6, 80a2ccc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2cc4:	4628      	mov	r0, r5
 80a2cc6:	f7ff ffb6 	bl	80a2c36 <_ZN5Print7printlnEv>
 80a2cca:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2ccc:	4620      	mov	r0, r4
 80a2cce:	3718      	adds	r7, #24
 80a2cd0:	46bd      	mov	sp, r7
 80a2cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2cd6:	f100 0308 	add.w	r3, r0, #8
 80a2cda:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2cde:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2ce0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2ce4:	4622      	mov	r2, r4
 80a2ce6:	1c41      	adds	r1, r0, #1
 80a2ce8:	683b      	ldr	r3, [r7, #0]
 80a2cea:	4668      	mov	r0, sp
 80a2cec:	f7fe f9b0 	bl	80a1050 <vsnprintf>
  return write(str);
 80a2cf0:	4669      	mov	r1, sp
 80a2cf2:	4628      	mov	r0, r5
 80a2cf4:	f7ff ff88 	bl	80a2c08 <_ZN5Print5writeEPKc>
 80a2cf8:	4604      	mov	r4, r0
 80a2cfa:	46c5      	mov	sp, r8
 80a2cfc:	e7e1      	b.n	80a2cc2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2cfe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2cfe:	b510      	push	{r4, lr}
 80a2d00:	4604      	mov	r4, r0
 80a2d02:	f7fe f9ea 	bl	80a10da <_ZNSt14_Function_baseD1Ev>
 80a2d06:	4620      	mov	r0, r4
 80a2d08:	bd10      	pop	{r4, pc}
	...

080a2d0c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2d0c:	2300      	movs	r3, #0
 80a2d0e:	4803      	ldr	r0, [pc, #12]	; (80a2d1c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2d10:	4a03      	ldr	r2, [pc, #12]	; (80a2d20 <_GLOBAL__sub_I_RGB+0x14>)
 80a2d12:	4904      	ldr	r1, [pc, #16]	; (80a2d24 <_GLOBAL__sub_I_RGB+0x18>)
 80a2d14:	6083      	str	r3, [r0, #8]
 80a2d16:	f000 bf3d 	b.w	80a3b94 <__aeabi_atexit>
 80a2d1a:	bf00      	nop
 80a2d1c:	20000d4c 	.word	0x20000d4c
 80a2d20:	20000084 	.word	0x20000084
 80a2d24:	080a2cff 	.word	0x080a2cff

080a2d28 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2d28:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2d2a:	2600      	movs	r6, #0
 80a2d2c:	4604      	mov	r4, r0
 80a2d2e:	460d      	mov	r5, r1
 80a2d30:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2d34:	f7fd ff0e 	bl	80a0b54 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2d38:	4628      	mov	r0, r5
    _spi = spi;
 80a2d3a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2d3c:	f7fd ffe4 	bl	80a0d08 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2d40:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2d42:	6066      	str	r6, [r4, #4]
}
 80a2d44:	bd70      	pop	{r4, r5, r6, pc}

080a2d46 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2d46:	b510      	push	{r4, lr}
 80a2d48:	4604      	mov	r4, r0
{
	free(buffer);
 80a2d4a:	6800      	ldr	r0, [r0, #0]
 80a2d4c:	f7fe f970 	bl	80a1030 <free>
}
 80a2d50:	4620      	mov	r0, r4
 80a2d52:	bd10      	pop	{r4, pc}

080a2d54 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2d54:	b510      	push	{r4, lr}
 80a2d56:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2d58:	6800      	ldr	r0, [r0, #0]
 80a2d5a:	b108      	cbz	r0, 80a2d60 <_ZN6String10invalidateEv+0xc>
 80a2d5c:	f7fe f968 	bl	80a1030 <free>
	buffer = NULL;
 80a2d60:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2d62:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2d66:	6023      	str	r3, [r4, #0]
}
 80a2d68:	bd10      	pop	{r4, pc}

080a2d6a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2d6a:	b538      	push	{r3, r4, r5, lr}
 80a2d6c:	4604      	mov	r4, r0
 80a2d6e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2d70:	6800      	ldr	r0, [r0, #0]
 80a2d72:	3101      	adds	r1, #1
 80a2d74:	f7fe f964 	bl	80a1040 <realloc>
	if (newbuffer) {
 80a2d78:	b110      	cbz	r0, 80a2d80 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2d7a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2d7e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2d80:	bd38      	pop	{r3, r4, r5, pc}

080a2d82 <_ZN6String7reserveEj>:
{
 80a2d82:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2d84:	6803      	ldr	r3, [r0, #0]
{
 80a2d86:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2d88:	b123      	cbz	r3, 80a2d94 <_ZN6String7reserveEj+0x12>
 80a2d8a:	6843      	ldr	r3, [r0, #4]
 80a2d8c:	428b      	cmp	r3, r1
 80a2d8e:	d301      	bcc.n	80a2d94 <_ZN6String7reserveEj+0x12>
 80a2d90:	2001      	movs	r0, #1
}
 80a2d92:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2d94:	4620      	mov	r0, r4
 80a2d96:	f7ff ffe8 	bl	80a2d6a <_ZN6String12changeBufferEj>
 80a2d9a:	2800      	cmp	r0, #0
 80a2d9c:	d0f9      	beq.n	80a2d92 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2d9e:	68a3      	ldr	r3, [r4, #8]
 80a2da0:	2b00      	cmp	r3, #0
 80a2da2:	d1f5      	bne.n	80a2d90 <_ZN6String7reserveEj+0xe>
 80a2da4:	6822      	ldr	r2, [r4, #0]
 80a2da6:	7013      	strb	r3, [r2, #0]
 80a2da8:	e7f2      	b.n	80a2d90 <_ZN6String7reserveEj+0xe>

080a2daa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2daa:	b570      	push	{r4, r5, r6, lr}
 80a2dac:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2dae:	4611      	mov	r1, r2
{
 80a2db0:	4604      	mov	r4, r0
 80a2db2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2db4:	f7ff ffe5 	bl	80a2d82 <_ZN6String7reserveEj>
 80a2db8:	b920      	cbnz	r0, 80a2dc4 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2dba:	4620      	mov	r0, r4
 80a2dbc:	f7ff ffca 	bl	80a2d54 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2dc0:	4620      	mov	r0, r4
 80a2dc2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2dc4:	462a      	mov	r2, r5
 80a2dc6:	4631      	mov	r1, r6
 80a2dc8:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2dca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2dcc:	f001 f81a 	bl	80a3e04 <memcpy>
	buffer[len] = 0;
 80a2dd0:	2100      	movs	r1, #0
 80a2dd2:	6822      	ldr	r2, [r4, #0]
 80a2dd4:	68a3      	ldr	r3, [r4, #8]
 80a2dd6:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2dd8:	e7f2      	b.n	80a2dc0 <_ZN6String4copyEPKcj+0x16>

080a2dda <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2dda:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2ddc:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a2dde:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2de0:	460d      	mov	r5, r1
	capacity = 0;
 80a2de2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2de6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2de8:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2dea:	b139      	cbz	r1, 80a2dfc <_ZN6StringC1EPKc+0x22>
 80a2dec:	4608      	mov	r0, r1
 80a2dee:	f001 f8a2 	bl	80a3f36 <strlen>
 80a2df2:	4629      	mov	r1, r5
 80a2df4:	4602      	mov	r2, r0
 80a2df6:	4620      	mov	r0, r4
 80a2df8:	f7ff ffd7 	bl	80a2daa <_ZN6String4copyEPKcj>
}
 80a2dfc:	4620      	mov	r0, r4
 80a2dfe:	bd38      	pop	{r3, r4, r5, pc}

080a2e00 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2e00:	b538      	push	{r3, r4, r5, lr}
 80a2e02:	4605      	mov	r5, r0
	if (buffer) {
 80a2e04:	6800      	ldr	r0, [r0, #0]
{
 80a2e06:	460c      	mov	r4, r1
	if (buffer) {
 80a2e08:	b168      	cbz	r0, 80a2e26 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a2e0a:	686a      	ldr	r2, [r5, #4]
 80a2e0c:	688b      	ldr	r3, [r1, #8]
 80a2e0e:	429a      	cmp	r2, r3
 80a2e10:	d307      	bcc.n	80a2e22 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a2e12:	6809      	ldr	r1, [r1, #0]
 80a2e14:	f001 f86b 	bl	80a3eee <strcpy>
			len = rhs.len;
 80a2e18:	68a3      	ldr	r3, [r4, #8]
 80a2e1a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2e1c:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a2e1e:	60a3      	str	r3, [r4, #8]
}
 80a2e20:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a2e22:	f7fe f905 	bl	80a1030 <free>
	buffer = rhs.buffer;
 80a2e26:	6823      	ldr	r3, [r4, #0]
 80a2e28:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2e2a:	6863      	ldr	r3, [r4, #4]
 80a2e2c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2e2e:	68a3      	ldr	r3, [r4, #8]
 80a2e30:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2e32:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a2e34:	e9c4 3300 	strd	r3, r3, [r4]
 80a2e38:	e7f1      	b.n	80a2e1e <_ZN6String4moveERS_+0x1e>

080a2e3a <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a2e3a:	2300      	movs	r3, #0
String::String(String &&rval)
 80a2e3c:	b510      	push	{r4, lr}
 80a2e3e:	4604      	mov	r4, r0
	capacity = 0;
 80a2e40:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2e44:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e46:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a2e48:	f7ff ffda 	bl	80a2e00 <_ZN6String4moveERS_>
}
 80a2e4c:	4620      	mov	r0, r4
 80a2e4e:	bd10      	pop	{r4, pc}

080a2e50 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2e50:	4288      	cmp	r0, r1
{
 80a2e52:	b510      	push	{r4, lr}
 80a2e54:	460b      	mov	r3, r1
 80a2e56:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2e58:	d004      	beq.n	80a2e64 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2e5a:	6809      	ldr	r1, [r1, #0]
 80a2e5c:	b121      	cbz	r1, 80a2e68 <_ZN6StringaSERKS_+0x18>
 80a2e5e:	689a      	ldr	r2, [r3, #8]
 80a2e60:	f7ff ffa3 	bl	80a2daa <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e64:	4620      	mov	r0, r4
 80a2e66:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2e68:	f7ff ff74 	bl	80a2d54 <_ZN6String10invalidateEv>
 80a2e6c:	e7fa      	b.n	80a2e64 <_ZN6StringaSERKS_+0x14>

080a2e6e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2e6e:	2300      	movs	r3, #0
String::String(const String &value)
 80a2e70:	b510      	push	{r4, lr}
 80a2e72:	4604      	mov	r4, r0
	capacity = 0;
 80a2e74:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2e78:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e7a:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2e7c:	f7ff ffe8 	bl	80a2e50 <_ZN6StringaSERKS_>
}
 80a2e80:	4620      	mov	r0, r4
 80a2e82:	bd10      	pop	{r4, pc}

080a2e84 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2e84:	b538      	push	{r3, r4, r5, lr}
 80a2e86:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2e88:	460c      	mov	r4, r1
 80a2e8a:	b149      	cbz	r1, 80a2ea0 <_ZN6StringaSEPKc+0x1c>
 80a2e8c:	4608      	mov	r0, r1
 80a2e8e:	f001 f852 	bl	80a3f36 <strlen>
 80a2e92:	4621      	mov	r1, r4
 80a2e94:	4602      	mov	r2, r0
 80a2e96:	4628      	mov	r0, r5
 80a2e98:	f7ff ff87 	bl	80a2daa <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e9c:	4628      	mov	r0, r5
 80a2e9e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2ea0:	f7ff ff58 	bl	80a2d54 <_ZN6String10invalidateEv>
 80a2ea4:	e7fa      	b.n	80a2e9c <_ZN6StringaSEPKc+0x18>

080a2ea6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2ea6:	b570      	push	{r4, r5, r6, lr}
 80a2ea8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a2eaa:	460e      	mov	r6, r1
 80a2eac:	b909      	cbnz	r1, 80a2eb2 <_ZN6String6concatEPKcj+0xc>
 80a2eae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2eb0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2eb2:	b16a      	cbz	r2, 80a2ed0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2eb4:	6884      	ldr	r4, [r0, #8]
 80a2eb6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2eb8:	4621      	mov	r1, r4
 80a2eba:	f7ff ff62 	bl	80a2d82 <_ZN6String7reserveEj>
 80a2ebe:	2800      	cmp	r0, #0
 80a2ec0:	d0f5      	beq.n	80a2eae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2ec2:	6828      	ldr	r0, [r5, #0]
 80a2ec4:	68ab      	ldr	r3, [r5, #8]
 80a2ec6:	4631      	mov	r1, r6
 80a2ec8:	4418      	add	r0, r3
 80a2eca:	f001 f810 	bl	80a3eee <strcpy>
	len = newlen;
 80a2ece:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2ed0:	2001      	movs	r0, #1
 80a2ed2:	e7ed      	b.n	80a2eb0 <_ZN6String6concatEPKcj+0xa>

080a2ed4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a2ed4:	688a      	ldr	r2, [r1, #8]
 80a2ed6:	6809      	ldr	r1, [r1, #0]
 80a2ed8:	f7ff bfe5 	b.w	80a2ea6 <_ZN6String6concatEPKcj>

080a2edc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2edc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2ede:	688a      	ldr	r2, [r1, #8]
 80a2ee0:	6809      	ldr	r1, [r1, #0]
{
 80a2ee2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2ee4:	f7ff ffdf 	bl	80a2ea6 <_ZN6String6concatEPKcj>
 80a2ee8:	b910      	cbnz	r0, 80a2ef0 <_ZplRK15StringSumHelperRK6String+0x14>
 80a2eea:	4620      	mov	r0, r4
 80a2eec:	f7ff ff32 	bl	80a2d54 <_ZN6String10invalidateEv>
	return a;
}
 80a2ef0:	4620      	mov	r0, r4
 80a2ef2:	bd10      	pop	{r4, pc}

080a2ef4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2ef4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2ef6:	6882      	ldr	r2, [r0, #8]
 80a2ef8:	b93a      	cbnz	r2, 80a2f0a <_ZNK6String6equalsEPKc+0x16>
 80a2efa:	b121      	cbz	r1, 80a2f06 <_ZNK6String6equalsEPKc+0x12>
 80a2efc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a2efe:	fab0 f080 	clz	r0, r0
 80a2f02:	0940      	lsrs	r0, r0, #5
 80a2f04:	e000      	b.n	80a2f08 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2f06:	2001      	movs	r0, #1
}
 80a2f08:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2f0a:	6800      	ldr	r0, [r0, #0]
 80a2f0c:	b909      	cbnz	r1, 80a2f12 <_ZNK6String6equalsEPKc+0x1e>
 80a2f0e:	7800      	ldrb	r0, [r0, #0]
 80a2f10:	e7f5      	b.n	80a2efe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a2f12:	f000 ffe2 	bl	80a3eda <strcmp>
 80a2f16:	e7f2      	b.n	80a2efe <_ZNK6String6equalsEPKc+0xa>

080a2f18 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a2f18:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a2f1a:	6883      	ldr	r3, [r0, #8]
 80a2f1c:	4293      	cmp	r3, r2
 80a2f1e:	d907      	bls.n	80a2f30 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a2f20:	6804      	ldr	r4, [r0, #0]
 80a2f22:	6809      	ldr	r1, [r1, #0]
 80a2f24:	18a0      	adds	r0, r4, r2
 80a2f26:	f001 f834 	bl	80a3f92 <strstr>
	if (found == NULL) return -1;
 80a2f2a:	b108      	cbz	r0, 80a2f30 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a2f2c:	1b00      	subs	r0, r0, r4
}
 80a2f2e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a2f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2f34:	e7fb      	b.n	80a2f2e <_ZNK6String7indexOfERKS_j+0x16>

080a2f36 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a2f36:	2200      	movs	r2, #0
 80a2f38:	f7ff bfee 	b.w	80a2f18 <_ZNK6String7indexOfERKS_j>

080a2f3c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f3e:	461d      	mov	r5, r3
	if (left > right) {
 80a2f40:	429a      	cmp	r2, r3
 80a2f42:	bf88      	it	hi
 80a2f44:	4613      	movhi	r3, r2
{
 80a2f46:	460f      	mov	r7, r1
 80a2f48:	4614      	mov	r4, r2
	if (left > right) {
 80a2f4a:	bf88      	it	hi
 80a2f4c:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a2f4e:	490b      	ldr	r1, [pc, #44]	; (80a2f7c <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a2f50:	bf88      	it	hi
 80a2f52:	461d      	movhi	r5, r3
{
 80a2f54:	4606      	mov	r6, r0
	String out;
 80a2f56:	f7ff ff40 	bl	80a2dda <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a2f5a:	68ba      	ldr	r2, [r7, #8]
 80a2f5c:	42a2      	cmp	r2, r4
 80a2f5e:	d30a      	bcc.n	80a2f76 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a2f60:	6839      	ldr	r1, [r7, #0]
 80a2f62:	42aa      	cmp	r2, r5
 80a2f64:	bf94      	ite	ls
 80a2f66:	ebc4 0202 	rsbls	r2, r4, r2
 80a2f6a:	ebc4 0205 	rsbhi	r2, r4, r5
 80a2f6e:	4630      	mov	r0, r6
 80a2f70:	4421      	add	r1, r4
 80a2f72:	f7ff ff1a 	bl	80a2daa <_ZN6String4copyEPKcj>
	return out;
}
 80a2f76:	4630      	mov	r0, r6
 80a2f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2f7a:	bf00      	nop
 80a2f7c:	080a42f9 	.word	0x080a42f9

080a2f80 <_ZNK6String9substringEj>:
{
 80a2f80:	b510      	push	{r4, lr}
 80a2f82:	4604      	mov	r4, r0
	return substring(left, len);
 80a2f84:	688b      	ldr	r3, [r1, #8]
 80a2f86:	f7ff ffd9 	bl	80a2f3c <_ZNK6String9substringEjj>
}
 80a2f8a:	4620      	mov	r0, r4
 80a2f8c:	bd10      	pop	{r4, pc}

080a2f8e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a2f8e:	6800      	ldr	r0, [r0, #0]
 80a2f90:	b108      	cbz	r0, 80a2f96 <_ZNK6String5toIntEv+0x8>
 80a2f92:	f000 bf25 	b.w	80a3de0 <atol>
	return 0;
}
 80a2f96:	4770      	bx	lr

080a2f98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a2f98:	b510      	push	{r4, lr}
 80a2f9a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2f9c:	6800      	ldr	r0, [r0, #0]
 80a2f9e:	b118      	cbz	r0, 80a2fa8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a2fa0:	f7fe f846 	bl	80a1030 <free>
            wakeupSource_ = nullptr;
 80a2fa4:	2300      	movs	r3, #0
 80a2fa6:	6023      	str	r3, [r4, #0]
        }
    }
 80a2fa8:	bd10      	pop	{r4, pc}

080a2faa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2faa:	b510      	push	{r4, lr}
 80a2fac:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a2fae:	f7ff fff3 	bl	80a2f98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a2fb2:	4620      	mov	r0, r4
 80a2fb4:	bd10      	pop	{r4, pc}
	...

080a2fb8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2fb8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a2fba:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2fbc:	b510      	push	{r4, lr}
 80a2fbe:	4b08      	ldr	r3, [pc, #32]	; (80a2fe0 <_GLOBAL__sub_I_System+0x28>)
 80a2fc0:	4c08      	ldr	r4, [pc, #32]	; (80a2fe4 <_GLOBAL__sub_I_System+0x2c>)
 80a2fc2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a2fc4:	4b08      	ldr	r3, [pc, #32]	; (80a2fe8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a2fc6:	6020      	str	r0, [r4, #0]
 80a2fc8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a2fca:	71a0      	strb	r0, [r4, #6]
 80a2fcc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2fce:	f7fd ff6b 	bl	80a0ea8 <set_system_mode>
SystemClass System;
 80a2fd2:	4620      	mov	r0, r4
 80a2fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a2fd8:	4a04      	ldr	r2, [pc, #16]	; (80a2fec <_GLOBAL__sub_I_System+0x34>)
 80a2fda:	4905      	ldr	r1, [pc, #20]	; (80a2ff0 <_GLOBAL__sub_I_System+0x38>)
 80a2fdc:	f000 bdda 	b.w	80a3b94 <__aeabi_atexit>
 80a2fe0:	20000d68 	.word	0x20000d68
 80a2fe4:	20000d5c 	.word	0x20000d5c
 80a2fe8:	ffff0000 	.word	0xffff0000
 80a2fec:	20000084 	.word	0x20000084
 80a2ff0:	080a2fab 	.word	0x080a2fab

080a2ff4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2ff4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2ff6:	6803      	ldr	r3, [r0, #0]
{
 80a2ff8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2ffc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2ffe:	2201      	movs	r2, #1
 80a3000:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3004:	f10d 0107 	add.w	r1, sp, #7
 80a3008:	47a0      	blx	r4
}
 80a300a:	b002      	add	sp, #8
 80a300c:	bd10      	pop	{r4, pc}

080a300e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a300e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3010:	6803      	ldr	r3, [r0, #0]
 80a3012:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3014:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3018:	46a4      	mov	ip, r4
}
 80a301a:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a301c:	4760      	bx	ip

080a301e <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a301e:	b513      	push	{r0, r1, r4, lr}
 80a3020:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3022:	6802      	ldr	r2, [r0, #0]
{
 80a3024:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3028:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a302a:	f10d 0107 	add.w	r1, sp, #7
 80a302e:	2201      	movs	r2, #1
 80a3030:	47a0      	blx	r4
}
 80a3032:	b002      	add	sp, #8
 80a3034:	bd10      	pop	{r4, pc}

080a3036 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3036:	4770      	bx	lr

080a3038 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3038:	4770      	bx	lr
	...

080a303c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a303c:	b510      	push	{r4, lr}
 80a303e:	4604      	mov	r4, r0
	    ||
 80a3040:	4b06      	ldr	r3, [pc, #24]	; (80a305c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3042:	4608      	mov	r0, r1
	    ||
 80a3044:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3046:	f104 040c 	add.w	r4, r4, #12
 80a304a:	d004      	beq.n	80a3056 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a304c:	f000 fdb0 	bl	80a3bb0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3050:	2800      	cmp	r0, #0
	return nullptr;
 80a3052:	bf08      	it	eq
 80a3054:	2400      	moveq	r4, #0
      }
 80a3056:	4620      	mov	r0, r4
 80a3058:	bd10      	pop	{r4, pc}
 80a305a:	bf00      	nop
 80a305c:	080a44e0 	.word	0x080a44e0

080a3060 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3060:	b510      	push	{r4, lr}
 80a3062:	4604      	mov	r4, r0
 80a3064:	21ac      	movs	r1, #172	; 0xac
 80a3066:	f000 fd9a 	bl	80a3b9e <_ZdlPvj>
 80a306a:	4620      	mov	r0, r4
 80a306c:	bd10      	pop	{r4, pc}

080a306e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a306e:	f7fd b816 	b.w	80a009e <_ZdlPv>
	...

080a3074 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3074:	b538      	push	{r3, r4, r5, lr}
 80a3076:	4b0b      	ldr	r3, [pc, #44]	; (80a30a4 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3078:	6984      	ldr	r4, [r0, #24]
 80a307a:	4605      	mov	r5, r0
 80a307c:	6003      	str	r3, [r0, #0]
 80a307e:	b17c      	cbz	r4, 80a30a0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3080:	6863      	ldr	r3, [r4, #4]
 80a3082:	3b01      	subs	r3, #1
 80a3084:	6063      	str	r3, [r4, #4]
 80a3086:	b95b      	cbnz	r3, 80a30a0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3088:	6823      	ldr	r3, [r4, #0]
 80a308a:	4620      	mov	r0, r4
 80a308c:	689b      	ldr	r3, [r3, #8]
 80a308e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3090:	68a3      	ldr	r3, [r4, #8]
 80a3092:	3b01      	subs	r3, #1
 80a3094:	60a3      	str	r3, [r4, #8]
 80a3096:	b91b      	cbnz	r3, 80a30a0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3098:	6823      	ldr	r3, [r4, #0]
 80a309a:	4620      	mov	r0, r4
 80a309c:	68db      	ldr	r3, [r3, #12]
 80a309e:	4798      	blx	r3
 80a30a0:	4628      	mov	r0, r5
 80a30a2:	bd38      	pop	{r3, r4, r5, pc}
 80a30a4:	080a44f0 	.word	0x080a44f0

080a30a8 <_ZN9TCPClientD0Ev>:
 80a30a8:	b510      	push	{r4, lr}
 80a30aa:	4604      	mov	r4, r0
 80a30ac:	f7ff ffe2 	bl	80a3074 <_ZN9TCPClientD1Ev>
 80a30b0:	4620      	mov	r0, r4
 80a30b2:	211c      	movs	r1, #28
 80a30b4:	f000 fd73 	bl	80a3b9e <_ZdlPvj>
 80a30b8:	4620      	mov	r0, r4
 80a30ba:	bd10      	pop	{r4, pc}

080a30bc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a30bc:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a30be:	4604      	mov	r4, r0
 80a30c0:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a30c2:	694d      	ldr	r5, [r1, #20]
 80a30c4:	4b04      	ldr	r3, [pc, #16]	; (80a30d8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a30c6:	358c      	adds	r5, #140	; 0x8c
 80a30c8:	f844 3b04 	str.w	r3, [r4], #4
 80a30cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a30ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a30d0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a30d2:	4630      	mov	r0, r6
 80a30d4:	7023      	strb	r3, [r4, #0]
 80a30d6:	bd70      	pop	{r4, r5, r6, pc}
 80a30d8:	080a4368 	.word	0x080a4368

080a30dc <_ZN9TCPClient4peekEv>:
{
 80a30dc:	b510      	push	{r4, lr}
 80a30de:	6943      	ldr	r3, [r0, #20]
 80a30e0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a30e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a30e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a30ea:	429a      	cmp	r2, r3
 80a30ec:	d005      	beq.n	80a30fa <_ZN9TCPClient4peekEv+0x1e>
 80a30ee:	6963      	ldr	r3, [r4, #20]
 80a30f0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a30f4:	4413      	add	r3, r2
 80a30f6:	7918      	ldrb	r0, [r3, #4]
}
 80a30f8:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a30fa:	6803      	ldr	r3, [r0, #0]
 80a30fc:	691b      	ldr	r3, [r3, #16]
 80a30fe:	4798      	blx	r3
 80a3100:	2800      	cmp	r0, #0
 80a3102:	d1f4      	bne.n	80a30ee <_ZN9TCPClient4peekEv+0x12>
 80a3104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3108:	e7f6      	b.n	80a30f8 <_ZN9TCPClient4peekEv+0x1c>

080a310a <_ZN9TCPClient4readEv>:
{
 80a310a:	b510      	push	{r4, lr}
 80a310c:	6943      	ldr	r3, [r0, #20]
 80a310e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3110:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3114:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3118:	429a      	cmp	r2, r3
 80a311a:	d008      	beq.n	80a312e <_ZN9TCPClient4readEv+0x24>
 80a311c:	6963      	ldr	r3, [r4, #20]
 80a311e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3122:	1c51      	adds	r1, r2, #1
 80a3124:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3128:	4413      	add	r3, r2
 80a312a:	7918      	ldrb	r0, [r3, #4]
}
 80a312c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a312e:	6803      	ldr	r3, [r0, #0]
 80a3130:	691b      	ldr	r3, [r3, #16]
 80a3132:	4798      	blx	r3
 80a3134:	2800      	cmp	r0, #0
 80a3136:	d1f1      	bne.n	80a311c <_ZN9TCPClient4readEv+0x12>
 80a3138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a313c:	e7f6      	b.n	80a312c <_ZN9TCPClient4readEv+0x22>

080a313e <_ZN9TCPClient4readEPhj>:
{
 80a313e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3140:	6943      	ldr	r3, [r0, #20]
 80a3142:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3144:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3148:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a314c:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a314e:	429a      	cmp	r2, r3
{
 80a3150:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3152:	d016      	beq.n	80a3182 <_ZN9TCPClient4readEPhj+0x44>
 80a3154:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3156:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3158:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a315c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3160:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3162:	42bc      	cmp	r4, r7
 80a3164:	bf28      	it	cs
 80a3166:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3168:	3304      	adds	r3, #4
 80a316a:	4622      	mov	r2, r4
 80a316c:	4419      	add	r1, r3
 80a316e:	f000 fe49 	bl	80a3e04 <memcpy>
 80a3172:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3174:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3178:	4423      	add	r3, r4
 80a317a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a317e:	4620      	mov	r0, r4
 80a3180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3182:	6803      	ldr	r3, [r0, #0]
 80a3184:	691b      	ldr	r3, [r3, #16]
 80a3186:	4798      	blx	r3
 80a3188:	2800      	cmp	r0, #0
 80a318a:	d1e3      	bne.n	80a3154 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a318c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a3190:	e7f5      	b.n	80a317e <_ZN9TCPClient4readEPhj+0x40>

080a3192 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3192:	2300      	movs	r3, #0
 80a3194:	6942      	ldr	r2, [r0, #20]
 80a3196:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a319a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a319c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a31a0:	4770      	bx	lr
	...

080a31a4 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a31a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a31a8:	461f      	mov	r7, r3
    stop();
 80a31aa:	6803      	ldr	r3, [r0, #0]
{
 80a31ac:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a31ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a31b0:	4605      	mov	r5, r0
 80a31b2:	460c      	mov	r4, r1
 80a31b4:	4616      	mov	r6, r2
    stop();
 80a31b6:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a31b8:	4638      	mov	r0, r7
 80a31ba:	f7ff fcf9 	bl	80a2bb0 <_ZN5spark12NetworkClass4fromEm>
 80a31be:	6803      	ldr	r3, [r0, #0]
 80a31c0:	68db      	ldr	r3, [r3, #12]
 80a31c2:	4798      	blx	r3
 80a31c4:	2800      	cmp	r0, #0
 80a31c6:	d054      	beq.n	80a3272 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a31c8:	4633      	mov	r3, r6
 80a31ca:	2206      	movs	r2, #6
 80a31cc:	2101      	movs	r1, #1
 80a31ce:	2002      	movs	r0, #2
 80a31d0:	9700      	str	r7, [sp, #0]
 80a31d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a31d6:	f7fd fd67 	bl	80a0ca8 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a31da:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a31dc:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a31e0:	f04f 0800 	mov.w	r8, #0
 80a31e4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a31e8:	696b      	ldr	r3, [r5, #20]
 80a31ea:	2001      	movs	r0, #1
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	4923      	ldr	r1, [pc, #140]	; (80a327c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	4b23      	ldr	r3, [pc, #140]	; (80a3280 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a31f4:	aa02      	add	r2, sp, #8
 80a31f6:	9300      	str	r3, [sp, #0]
 80a31f8:	4643      	mov	r3, r8
 80a31fa:	f7fd fe3d 	bl	80a0e78 <log_message>
          if (socket_handle_valid(d_->sock))
 80a31fe:	696b      	ldr	r3, [r5, #20]
 80a3200:	6818      	ldr	r0, [r3, #0]
 80a3202:	f7fd fd49 	bl	80a0c98 <socket_handle_valid>
 80a3206:	2800      	cmp	r0, #0
 80a3208:	d033      	beq.n	80a3272 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a320a:	4628      	mov	r0, r5
 80a320c:	f7ff ffc1 	bl	80a3192 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3210:	2302      	movs	r3, #2
 80a3212:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3216:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3218:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a321a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a321e:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3220:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3224:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3228:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a322a:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a322e:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3232:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3236:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a323a:	f7fd fe05 	bl	80a0e48 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a323e:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3240:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3242:	2210      	movs	r2, #16
 80a3244:	6818      	ldr	r0, [r3, #0]
 80a3246:	a902      	add	r1, sp, #8
 80a3248:	f7fd fd36 	bl	80a0cb8 <socket_connect>
 80a324c:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a324e:	4630      	mov	r0, r6
 80a3250:	f7fd fdfa 	bl	80a0e48 <HAL_NET_SetNetWatchDog>
 80a3254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3256:	696e      	ldr	r6, [r5, #20]
 80a3258:	368c      	adds	r6, #140	; 0x8c
 80a325a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a325c:	6823      	ldr	r3, [r4, #0]
 80a325e:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3260:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3262:	f1b9 0f00 	cmp.w	r9, #0
 80a3266:	d007      	beq.n	80a3278 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3268:	682b      	ldr	r3, [r5, #0]
 80a326a:	4628      	mov	r0, r5
 80a326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a326e:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3270:	4640      	mov	r0, r8
}
 80a3272:	b00b      	add	sp, #44	; 0x2c
 80a3274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3278:	2001      	movs	r0, #1
        return connected;
 80a327a:	e7fa      	b.n	80a3272 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a327c:	080a44a8 	.word	0x080a44a8
 80a3280:	080a44af 	.word	0x080a44af

080a3284 <_ZN9TCPClient9availableEv>:
{
 80a3284:	b538      	push	{r3, r4, r5, lr}
 80a3286:	6942      	ldr	r2, [r0, #20]
 80a3288:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a328a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a328e:	b12b      	cbz	r3, 80a329c <_ZN9TCPClient9availableEv+0x18>
 80a3290:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3294:	429a      	cmp	r2, r3
 80a3296:	d101      	bne.n	80a329c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3298:	f7ff ff7b 	bl	80a3192 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a329c:	6920      	ldr	r0, [r4, #16]
 80a329e:	f7ff fc87 	bl	80a2bb0 <_ZN5spark12NetworkClass4fromEm>
 80a32a2:	6803      	ldr	r3, [r0, #0]
 80a32a4:	68db      	ldr	r3, [r3, #12]
 80a32a6:	4798      	blx	r3
 80a32a8:	b1f8      	cbz	r0, 80a32ea <_ZN9TCPClient9availableEv+0x66>
 80a32aa:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a32ac:	6818      	ldr	r0, [r3, #0]
 80a32ae:	f7fd fcf3 	bl	80a0c98 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a32b2:	b1d0      	cbz	r0, 80a32ea <_ZN9TCPClient9availableEv+0x66>
 80a32b4:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a32b6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a32ba:	297f      	cmp	r1, #127	; 0x7f
 80a32bc:	d815      	bhi.n	80a32ea <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a32be:	1d05      	adds	r5, r0, #4
 80a32c0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a32c4:	2300      	movs	r3, #0
 80a32c6:	6800      	ldr	r0, [r0, #0]
 80a32c8:	4429      	add	r1, r5
 80a32ca:	f7fd fcfd 	bl	80a0cc8 <socket_receive>
            if (ret > 0)
 80a32ce:	2800      	cmp	r0, #0
 80a32d0:	dd0b      	ble.n	80a32ea <_ZN9TCPClient9availableEv+0x66>
 80a32d2:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a32d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a32d8:	b90a      	cbnz	r2, 80a32de <_ZN9TCPClient9availableEv+0x5a>
 80a32da:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a32de:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a32e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a32e4:	4410      	add	r0, r2
 80a32e6:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a32ea:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a32ec:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a32f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a32f4:	1ac0      	subs	r0, r0, r3
 80a32f6:	bd38      	pop	{r3, r4, r5, pc}

080a32f8 <_ZN9TCPClient4stopEv>:
{
 80a32f8:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a32fa:	6943      	ldr	r3, [r0, #20]
{
 80a32fc:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a32fe:	6818      	ldr	r0, [r3, #0]
 80a3300:	f7fd fcca 	bl	80a0c98 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3304:	b118      	cbz	r0, 80a330e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3306:	6963      	ldr	r3, [r4, #20]
 80a3308:	6818      	ldr	r0, [r3, #0]
 80a330a:	f7fd fce5 	bl	80a0cd8 <socket_close>
 80a330e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3310:	f7fd fcea 	bl	80a0ce8 <socket_handle_invalid>
 80a3314:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a3316:	6960      	ldr	r0, [r4, #20]
 80a3318:	2211      	movs	r2, #17
 80a331a:	2100      	movs	r1, #0
 80a331c:	308c      	adds	r0, #140	; 0x8c
 80a331e:	f000 fd99 	bl	80a3e54 <memset>
  flush_buffer();
 80a3322:	4620      	mov	r0, r4
}
 80a3324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3328:	f7ff bf33 	b.w	80a3192 <_ZN9TCPClient12flush_bufferEv>

080a332c <_ZN9TCPClient6statusEv>:
{
 80a332c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a332e:	6943      	ldr	r3, [r0, #20]
{
 80a3330:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3332:	6818      	ldr	r0, [r3, #0]
 80a3334:	f7fd fcb0 	bl	80a0c98 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3338:	b908      	cbnz	r0, 80a333e <_ZN9TCPClient6statusEv+0x12>
 80a333a:	2000      	movs	r0, #0
}
 80a333c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a333e:	6920      	ldr	r0, [r4, #16]
 80a3340:	f7ff fc36 	bl	80a2bb0 <_ZN5spark12NetworkClass4fromEm>
 80a3344:	6803      	ldr	r3, [r0, #0]
 80a3346:	68db      	ldr	r3, [r3, #12]
 80a3348:	4798      	blx	r3
 80a334a:	2800      	cmp	r0, #0
 80a334c:	d0f5      	beq.n	80a333a <_ZN9TCPClient6statusEv+0xe>
 80a334e:	6963      	ldr	r3, [r4, #20]
 80a3350:	6818      	ldr	r0, [r3, #0]
 80a3352:	f7fd fc99 	bl	80a0c88 <socket_active_status>
 80a3356:	fab0 f080 	clz	r0, r0
 80a335a:	0940      	lsrs	r0, r0, #5
 80a335c:	e7ee      	b.n	80a333c <_ZN9TCPClient6statusEv+0x10>

080a335e <_ZN9TCPClientcvbEv>:
{
 80a335e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3360:	f7ff ffe4 	bl	80a332c <_ZN9TCPClient6statusEv>
}
 80a3364:	3800      	subs	r0, #0
 80a3366:	bf18      	it	ne
 80a3368:	2001      	movne	r0, #1
 80a336a:	bd08      	pop	{r3, pc}

080a336c <_ZN9TCPClient5writeEPKhjm>:
{
 80a336c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a3370:	2700      	movs	r7, #0
 80a3372:	6047      	str	r7, [r0, #4]
 80a3374:	4604      	mov	r4, r0
 80a3376:	460d      	mov	r5, r1
 80a3378:	4616      	mov	r6, r2
 80a337a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a337c:	f7ff ffd6 	bl	80a332c <_ZN9TCPClient6statusEv>
 80a3380:	b170      	cbz	r0, 80a33a0 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3382:	e9cd 8700 	strd	r8, r7, [sp]
 80a3386:	6960      	ldr	r0, [r4, #20]
 80a3388:	463b      	mov	r3, r7
 80a338a:	4632      	mov	r2, r6
 80a338c:	4629      	mov	r1, r5
 80a338e:	6800      	ldr	r0, [r0, #0]
 80a3390:	f7fd fcb2 	bl	80a0cf8 <socket_send_ex>
    if (ret < 0) {
 80a3394:	2800      	cmp	r0, #0
 80a3396:	da00      	bge.n	80a339a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3398:	6060      	str	r0, [r4, #4]
}
 80a339a:	b002      	add	sp, #8
 80a339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a33a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a33a4:	e7f8      	b.n	80a3398 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a33a6 <_ZN9TCPClient9connectedEv>:
{
 80a33a6:	b570      	push	{r4, r5, r6, lr}
 80a33a8:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a33aa:	f7ff ffbf 	bl	80a332c <_ZN9TCPClient6statusEv>
 80a33ae:	b9e8      	cbnz	r0, 80a33ec <_ZN9TCPClient9connectedEv+0x46>
 80a33b0:	696b      	ldr	r3, [r5, #20]
 80a33b2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a33b6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a33ba:	4291      	cmp	r1, r2
 80a33bc:	d116      	bne.n	80a33ec <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a33be:	6818      	ldr	r0, [r3, #0]
 80a33c0:	f7fd fc6a 	bl	80a0c98 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a33c4:	b908      	cbnz	r0, 80a33ca <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a33c6:	2000      	movs	r0, #0
}
 80a33c8:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a33ca:	696b      	ldr	r3, [r5, #20]
 80a33cc:	6818      	ldr	r0, [r3, #0]
 80a33ce:	f7fd fc5b 	bl	80a0c88 <socket_active_status>
 80a33d2:	2801      	cmp	r0, #1
 80a33d4:	4604      	mov	r4, r0
 80a33d6:	d1f6      	bne.n	80a33c6 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a33d8:	682b      	ldr	r3, [r5, #0]
 80a33da:	4628      	mov	r0, r5
 80a33dc:	691b      	ldr	r3, [r3, #16]
 80a33de:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a33e0:	b930      	cbnz	r0, 80a33f0 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a33e2:	682b      	ldr	r3, [r5, #0]
 80a33e4:	4628      	mov	r0, r5
 80a33e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a33e8:	4798      	blx	r3
 80a33ea:	e7ec      	b.n	80a33c6 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a33ec:	2001      	movs	r0, #1
 80a33ee:	e7eb      	b.n	80a33c8 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a33f0:	4620      	mov	r0, r4
 80a33f2:	e7e9      	b.n	80a33c8 <_ZN9TCPClient9connectedEv+0x22>

080a33f4 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a33f4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a33f6:	b510      	push	{r4, lr}
 80a33f8:	4604      	mov	r4, r0
          total(0) {
 80a33fa:	6001      	str	r1, [r0, #0]
 80a33fc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3400:	3088      	adds	r0, #136	; 0x88
 80a3402:	f7fe f971 	bl	80a16e8 <_ZN9IPAddressC1Ev>
}
 80a3406:	4620      	mov	r0, r4
 80a3408:	bd10      	pop	{r4, pc}
	...

080a340c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a340e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3412:	2300      	movs	r3, #0
 80a3414:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3418:	4a0d      	ldr	r2, [pc, #52]	; (80a3450 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a341a:	6103      	str	r3, [r0, #16]
 80a341c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a341e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3420:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3422:	20ac      	movs	r0, #172	; 0xac
 80a3424:	460e      	mov	r6, r1
 80a3426:	f7fc fe36 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a342a:	1e05      	subs	r5, r0, #0
 80a342c:	f105 070c 	add.w	r7, r5, #12
 80a3430:	d008      	beq.n	80a3444 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3432:	2301      	movs	r3, #1
 80a3434:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3438:	4b06      	ldr	r3, [pc, #24]	; (80a3454 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a343a:	4631      	mov	r1, r6
 80a343c:	4638      	mov	r0, r7
 80a343e:	602b      	str	r3, [r5, #0]
 80a3440:	f7ff ffd8 	bl	80a33f4 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3444:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3446:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a344a:	f7ff fea2 	bl	80a3192 <_ZN9TCPClient12flush_bufferEv>
}
 80a344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3450:	080a44f0 	.word	0x080a44f0
 80a3454:	080a44cc 	.word	0x080a44cc

080a3458 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3458:	b510      	push	{r4, lr}
 80a345a:	4604      	mov	r4, r0
 80a345c:	f7fd fc44 	bl	80a0ce8 <socket_handle_invalid>
 80a3460:	4601      	mov	r1, r0
 80a3462:	4620      	mov	r0, r4
 80a3464:	f7ff ffd2 	bl	80a340c <_ZN9TCPClientC1Em>
}
 80a3468:	4620      	mov	r0, r4
 80a346a:	bd10      	pop	{r4, pc}

080a346c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a346c:	b510      	push	{r4, lr}
 80a346e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3470:	6800      	ldr	r0, [r0, #0]
 80a3472:	f7fd fc11 	bl	80a0c98 <socket_handle_valid>
 80a3476:	b110      	cbz	r0, 80a347e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3478:	6820      	ldr	r0, [r4, #0]
 80a347a:	f7fd fc2d 	bl	80a0cd8 <socket_close>
    }
}
 80a347e:	4620      	mov	r0, r4
 80a3480:	bd10      	pop	{r4, pc}

080a3482 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a3482:	300c      	adds	r0, #12
 80a3484:	f7ff bff2 	b.w	80a346c <_ZN9TCPClient4DataD1Ev>

080a3488 <_ZN9TCPClient7connectEPKctm>:
{
 80a3488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a348c:	461f      	mov	r7, r3
    stop();
 80a348e:	6803      	ldr	r3, [r0, #0]
{
 80a3490:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3494:	4606      	mov	r6, r0
 80a3496:	460d      	mov	r5, r1
 80a3498:	4690      	mov	r8, r2
    stop();
 80a349a:	4798      	blx	r3
    if (Network.ready())
 80a349c:	4813      	ldr	r0, [pc, #76]	; (80a34ec <_ZN9TCPClient7connectEPKctm+0x64>)
 80a349e:	f7ff fb32 	bl	80a2b06 <_ZN5spark12NetworkClass5readyEv>
 80a34a2:	b1f0      	cbz	r0, 80a34e2 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a34a4:	a802      	add	r0, sp, #8
 80a34a6:	f7fe f91f 	bl	80a16e8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a34aa:	4628      	mov	r0, r5
 80a34ac:	f000 fd43 	bl	80a3f36 <strlen>
 80a34b0:	2400      	movs	r4, #0
 80a34b2:	b281      	uxth	r1, r0
 80a34b4:	463b      	mov	r3, r7
 80a34b6:	4628      	mov	r0, r5
 80a34b8:	9400      	str	r4, [sp, #0]
 80a34ba:	aa03      	add	r2, sp, #12
 80a34bc:	f7fd fccc 	bl	80a0e58 <inet_gethostbyname>
 80a34c0:	b990      	cbnz	r0, 80a34e8 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a34c2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a34c4:	ad09      	add	r5, sp, #36	; 0x24
 80a34c6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a34ca:	4b09      	ldr	r3, [pc, #36]	; (80a34f0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a34cc:	ac03      	add	r4, sp, #12
 80a34ce:	9308      	str	r3, [sp, #32]
 80a34d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a34d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a34d4:	6823      	ldr	r3, [r4, #0]
 80a34d6:	4642      	mov	r2, r8
 80a34d8:	702b      	strb	r3, [r5, #0]
 80a34da:	4630      	mov	r0, r6
 80a34dc:	463b      	mov	r3, r7
 80a34de:	a908      	add	r1, sp, #32
 80a34e0:	47c8      	blx	r9
}
 80a34e2:	b00f      	add	sp, #60	; 0x3c
 80a34e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a34e8:	4620      	mov	r0, r4
 80a34ea:	e7fa      	b.n	80a34e2 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a34ec:	20000d44 	.word	0x20000d44
 80a34f0:	080a4368 	.word	0x080a4368

080a34f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a34f4:	4b02      	ldr	r3, [pc, #8]	; (80a3500 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a34f6:	681a      	ldr	r2, [r3, #0]
 80a34f8:	4b02      	ldr	r3, [pc, #8]	; (80a3504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a34fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a34fc:	4770      	bx	lr
 80a34fe:	bf00      	nop
 80a3500:	2000001c 	.word	0x2000001c
 80a3504:	20000d6c 	.word	0x20000d6c

080a3508 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3508:	4770      	bx	lr

080a350a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a350a:	7441      	strb	r1, [r0, #17]
}
 80a350c:	4770      	bx	lr

080a350e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a350e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3510:	7c00      	ldrb	r0, [r0, #16]
 80a3512:	f7fd fc49 	bl	80a0da8 <hal_usart_available_data_for_write>
}
 80a3516:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a351a:	bd08      	pop	{r3, pc}

080a351c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a351c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a351e:	7c00      	ldrb	r0, [r0, #16]
 80a3520:	f7fd fc1a 	bl	80a0d58 <hal_usart_available>
}
 80a3524:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3528:	bd08      	pop	{r3, pc}

080a352a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a352a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a352c:	7c00      	ldrb	r0, [r0, #16]
 80a352e:	f7fd fc23 	bl	80a0d78 <hal_usart_peek>
}
 80a3532:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3536:	bd08      	pop	{r3, pc}

080a3538 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3538:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a353a:	7c00      	ldrb	r0, [r0, #16]
 80a353c:	f7fd fc14 	bl	80a0d68 <hal_usart_read>
}
 80a3540:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3544:	bd08      	pop	{r3, pc}

080a3546 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3546:	7c00      	ldrb	r0, [r0, #16]
 80a3548:	f7fd bc1e 	b.w	80a0d88 <hal_usart_flush>

080a354c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a354c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a354e:	7c46      	ldrb	r6, [r0, #17]
{
 80a3550:	4604      	mov	r4, r0
 80a3552:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3554:	b12e      	cbz	r6, 80a3562 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3556:	4629      	mov	r1, r5
 80a3558:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a355a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a355e:	f7fd bbf3 	b.w	80a0d48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3562:	7c00      	ldrb	r0, [r0, #16]
 80a3564:	f7fd fc20 	bl	80a0da8 <hal_usart_available_data_for_write>
 80a3568:	2800      	cmp	r0, #0
 80a356a:	dcf4      	bgt.n	80a3556 <_ZN11USARTSerial5writeEh+0xa>
}
 80a356c:	4630      	mov	r0, r6
 80a356e:	bd70      	pop	{r4, r5, r6, pc}

080a3570 <_ZN11USARTSerialD0Ev>:
 80a3570:	b510      	push	{r4, lr}
 80a3572:	4604      	mov	r4, r0
 80a3574:	2114      	movs	r1, #20
 80a3576:	f000 fb12 	bl	80a3b9e <_ZdlPvj>
 80a357a:	4620      	mov	r0, r4
 80a357c:	bd10      	pop	{r4, pc}
	...

080a3580 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3580:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3584:	b510      	push	{r4, lr}
 80a3586:	4604      	mov	r4, r0
 80a3588:	4608      	mov	r0, r1
 80a358a:	4611      	mov	r1, r2
 80a358c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3590:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a3594:	4a04      	ldr	r2, [pc, #16]	; (80a35a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a3596:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3598:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a359a:	2201      	movs	r2, #1
 80a359c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a359e:	461a      	mov	r2, r3
 80a35a0:	f7fd fbc2 	bl	80a0d28 <hal_usart_init>
}
 80a35a4:	4620      	mov	r0, r4
 80a35a6:	bd10      	pop	{r4, pc}
 80a35a8:	080a4558 	.word	0x080a4558

080a35ac <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a35ac:	2300      	movs	r3, #0
 80a35ae:	7c00      	ldrb	r0, [r0, #16]
 80a35b0:	f7fd bc02 	b.w	80a0db8 <hal_usart_begin_config>

080a35b4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a35b4:	2200      	movs	r2, #0
 80a35b6:	f7ff bff9 	b.w	80a35ac <_ZN11USARTSerial5beginEmm>

080a35ba <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a35ba:	7c00      	ldrb	r0, [r0, #16]
 80a35bc:	f7fd bbbc 	b.w	80a0d38 <hal_usart_end>

080a35c0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a35c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a35c2:	4d0d      	ldr	r5, [pc, #52]	; (80a35f8 <_Z22__fetch_global_Serial1v+0x38>)
 80a35c4:	7829      	ldrb	r1, [r5, #0]
 80a35c6:	f3bf 8f5b 	dmb	ish
 80a35ca:	f011 0401 	ands.w	r4, r1, #1
 80a35ce:	d111      	bne.n	80a35f4 <_Z22__fetch_global_Serial1v+0x34>
 80a35d0:	4628      	mov	r0, r5
 80a35d2:	f7fc fd71 	bl	80a00b8 <__cxa_guard_acquire>
 80a35d6:	b168      	cbz	r0, 80a35f4 <_Z22__fetch_global_Serial1v+0x34>
 80a35d8:	4621      	mov	r1, r4
 80a35da:	4a08      	ldr	r2, [pc, #32]	; (80a35fc <_Z22__fetch_global_Serial1v+0x3c>)
 80a35dc:	4b08      	ldr	r3, [pc, #32]	; (80a3600 <_Z22__fetch_global_Serial1v+0x40>)
 80a35de:	4809      	ldr	r0, [pc, #36]	; (80a3604 <_Z22__fetch_global_Serial1v+0x44>)
 80a35e0:	f7ff ffce 	bl	80a3580 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a35e4:	4628      	mov	r0, r5
 80a35e6:	f7fc fd6c 	bl	80a00c2 <__cxa_guard_release>
 80a35ea:	4a07      	ldr	r2, [pc, #28]	; (80a3608 <_Z22__fetch_global_Serial1v+0x48>)
 80a35ec:	4907      	ldr	r1, [pc, #28]	; (80a360c <_Z22__fetch_global_Serial1v+0x4c>)
 80a35ee:	4805      	ldr	r0, [pc, #20]	; (80a3604 <_Z22__fetch_global_Serial1v+0x44>)
 80a35f0:	f000 fad0 	bl	80a3b94 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a35f4:	4803      	ldr	r0, [pc, #12]	; (80a3604 <_Z22__fetch_global_Serial1v+0x44>)
 80a35f6:	bd38      	pop	{r3, r4, r5, pc}
 80a35f8:	20000d70 	.word	0x20000d70
 80a35fc:	20000d74 	.word	0x20000d74
 80a3600:	20000df8 	.word	0x20000df8
 80a3604:	20000e7c 	.word	0x20000e7c
 80a3608:	20000084 	.word	0x20000084
 80a360c:	080a3509 	.word	0x080a3509

080a3610 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3610:	7441      	strb	r1, [r0, #17]
}
 80a3612:	4770      	bx	lr

080a3614 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3614:	4770      	bx	lr

080a3616 <_ZN9USBSerial4readEv>:
{
 80a3616:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3618:	2100      	movs	r1, #0
 80a361a:	7c00      	ldrb	r0, [r0, #16]
 80a361c:	f7fd fbfc 	bl	80a0e18 <HAL_USB_USART_Receive_Data>
}
 80a3620:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3624:	bd08      	pop	{r3, pc}

080a3626 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a3626:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3628:	2101      	movs	r1, #1
 80a362a:	7c00      	ldrb	r0, [r0, #16]
 80a362c:	f7fd fbf4 	bl	80a0e18 <HAL_USB_USART_Receive_Data>
}
 80a3630:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3634:	bd08      	pop	{r3, pc}

080a3636 <_ZN9USBSerial17availableForWriteEv>:
{
 80a3636:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3638:	7c00      	ldrb	r0, [r0, #16]
 80a363a:	f7fd fbe5 	bl	80a0e08 <HAL_USB_USART_Available_Data_For_Write>
}
 80a363e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3642:	bd08      	pop	{r3, pc}

080a3644 <_ZN9USBSerial9availableEv>:
{
 80a3644:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3646:	7c00      	ldrb	r0, [r0, #16]
 80a3648:	f7fd fbd6 	bl	80a0df8 <HAL_USB_USART_Available_Data>
}
 80a364c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3650:	bd08      	pop	{r3, pc}

080a3652 <_ZN9USBSerial5writeEh>:
{
 80a3652:	b538      	push	{r3, r4, r5, lr}
 80a3654:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3656:	7c00      	ldrb	r0, [r0, #16]
{
 80a3658:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a365a:	f7fd fbd5 	bl	80a0e08 <HAL_USB_USART_Available_Data_For_Write>
 80a365e:	2800      	cmp	r0, #0
 80a3660:	dc01      	bgt.n	80a3666 <_ZN9USBSerial5writeEh+0x14>
 80a3662:	7c60      	ldrb	r0, [r4, #17]
 80a3664:	b128      	cbz	r0, 80a3672 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3666:	4629      	mov	r1, r5
 80a3668:	7c20      	ldrb	r0, [r4, #16]
 80a366a:	f7fd fbdd 	bl	80a0e28 <HAL_USB_USART_Send_Data>
 80a366e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3672:	bd38      	pop	{r3, r4, r5, pc}

080a3674 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3674:	7c00      	ldrb	r0, [r0, #16]
 80a3676:	f7fd bbdf 	b.w	80a0e38 <HAL_USB_USART_Flush_Data>

080a367a <_ZN9USBSerialD0Ev>:
 80a367a:	b510      	push	{r4, lr}
 80a367c:	4604      	mov	r4, r0
 80a367e:	2114      	movs	r1, #20
 80a3680:	f000 fa8d 	bl	80a3b9e <_ZdlPvj>
 80a3684:	4620      	mov	r0, r4
 80a3686:	bd10      	pop	{r4, pc}

080a3688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3688:	b510      	push	{r4, lr}
 80a368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a368e:	4604      	mov	r4, r0
 80a3690:	4608      	mov	r0, r1
 80a3692:	2100      	movs	r1, #0
 80a3694:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3698:	4b04      	ldr	r3, [pc, #16]	; (80a36ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a369a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a369c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a369e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a36a0:	4611      	mov	r1, r2
  _blocking = true;
 80a36a2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a36a4:	f7fd fb90 	bl	80a0dc8 <HAL_USB_USART_Init>
}
 80a36a8:	4620      	mov	r0, r4
 80a36aa:	bd10      	pop	{r4, pc}
 80a36ac:	080a4588 	.word	0x080a4588

080a36b0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a36b0:	2200      	movs	r2, #0
 80a36b2:	7c00      	ldrb	r0, [r0, #16]
 80a36b4:	f7fd bb90 	b.w	80a0dd8 <HAL_USB_USART_Begin>

080a36b8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a36b8:	7c00      	ldrb	r0, [r0, #16]
 80a36ba:	f7fd bb95 	b.w	80a0de8 <HAL_USB_USART_End>
	...

080a36c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a36c0:	b510      	push	{r4, lr}
 80a36c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a36c4:	2214      	movs	r2, #20
 80a36c6:	2100      	movs	r1, #0
 80a36c8:	f000 fbc4 	bl	80a3e54 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a36cc:	4b05      	ldr	r3, [pc, #20]	; (80a36e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a36ce:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a36d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a36d2:	4b05      	ldr	r3, [pc, #20]	; (80a36e8 <_Z19acquireSerialBufferv+0x28>)
 80a36d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a36d6:	f240 1301 	movw	r3, #257	; 0x101
 80a36da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a36dc:	2381      	movs	r3, #129	; 0x81
 80a36de:	8223      	strh	r3, [r4, #16]
}
 80a36e0:	bd10      	pop	{r4, pc}
 80a36e2:	bf00      	nop
 80a36e4:	20000ec0 	.word	0x20000ec0
 80a36e8:	20000fc1 	.word	0x20000fc1

080a36ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a36ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a36ee:	4d0f      	ldr	r5, [pc, #60]	; (80a372c <_Z16_fetch_usbserialv+0x40>)
{
 80a36f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a36f2:	a801      	add	r0, sp, #4
 80a36f4:	f7ff ffe4 	bl	80a36c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a36f8:	7829      	ldrb	r1, [r5, #0]
 80a36fa:	f3bf 8f5b 	dmb	ish
 80a36fe:	f011 0401 	ands.w	r4, r1, #1
 80a3702:	d110      	bne.n	80a3726 <_Z16_fetch_usbserialv+0x3a>
 80a3704:	4628      	mov	r0, r5
 80a3706:	f7fc fcd7 	bl	80a00b8 <__cxa_guard_acquire>
 80a370a:	b160      	cbz	r0, 80a3726 <_Z16_fetch_usbserialv+0x3a>
 80a370c:	4621      	mov	r1, r4
 80a370e:	aa01      	add	r2, sp, #4
 80a3710:	4807      	ldr	r0, [pc, #28]	; (80a3730 <_Z16_fetch_usbserialv+0x44>)
 80a3712:	f7ff ffb9 	bl	80a3688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3716:	4628      	mov	r0, r5
 80a3718:	f7fc fcd3 	bl	80a00c2 <__cxa_guard_release>
 80a371c:	4a05      	ldr	r2, [pc, #20]	; (80a3734 <_Z16_fetch_usbserialv+0x48>)
 80a371e:	4906      	ldr	r1, [pc, #24]	; (80a3738 <_Z16_fetch_usbserialv+0x4c>)
 80a3720:	4803      	ldr	r0, [pc, #12]	; (80a3730 <_Z16_fetch_usbserialv+0x44>)
 80a3722:	f000 fa37 	bl	80a3b94 <__aeabi_atexit>
	return _usbserial;
}
 80a3726:	4802      	ldr	r0, [pc, #8]	; (80a3730 <_Z16_fetch_usbserialv+0x44>)
 80a3728:	b007      	add	sp, #28
 80a372a:	bd30      	pop	{r4, r5, pc}
 80a372c:	20000e90 	.word	0x20000e90
 80a3730:	20000e98 	.word	0x20000e98
 80a3734:	20000084 	.word	0x20000084
 80a3738:	080a3615 	.word	0x080a3615

080a373c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a373c:	b510      	push	{r4, lr}
 80a373e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3740:	2214      	movs	r2, #20
 80a3742:	2100      	movs	r1, #0
 80a3744:	f000 fb86 	bl	80a3e54 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3748:	4b05      	ldr	r3, [pc, #20]	; (80a3760 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a374a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a374c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a374e:	4b05      	ldr	r3, [pc, #20]	; (80a3764 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3750:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3752:	f240 1301 	movw	r3, #257	; 0x101
 80a3756:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3758:	2381      	movs	r3, #129	; 0x81
 80a375a:	8223      	strh	r3, [r4, #16]
}
 80a375c:	bd10      	pop	{r4, pc}
 80a375e:	bf00      	nop
 80a3760:	20001042 	.word	0x20001042
 80a3764:	20001143 	.word	0x20001143

080a3768 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3768:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a376a:	4c0f      	ldr	r4, [pc, #60]	; (80a37a8 <_Z17_fetch_usbserial1v+0x40>)
{
 80a376c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a376e:	a801      	add	r0, sp, #4
 80a3770:	f7ff ffe4 	bl	80a373c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3774:	7823      	ldrb	r3, [r4, #0]
 80a3776:	f3bf 8f5b 	dmb	ish
 80a377a:	07db      	lsls	r3, r3, #31
 80a377c:	d410      	bmi.n	80a37a0 <_Z17_fetch_usbserial1v+0x38>
 80a377e:	4620      	mov	r0, r4
 80a3780:	f7fc fc9a 	bl	80a00b8 <__cxa_guard_acquire>
 80a3784:	b160      	cbz	r0, 80a37a0 <_Z17_fetch_usbserial1v+0x38>
 80a3786:	2101      	movs	r1, #1
 80a3788:	aa01      	add	r2, sp, #4
 80a378a:	4808      	ldr	r0, [pc, #32]	; (80a37ac <_Z17_fetch_usbserial1v+0x44>)
 80a378c:	f7ff ff7c 	bl	80a3688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3790:	4620      	mov	r0, r4
 80a3792:	f7fc fc96 	bl	80a00c2 <__cxa_guard_release>
 80a3796:	4a06      	ldr	r2, [pc, #24]	; (80a37b0 <_Z17_fetch_usbserial1v+0x48>)
 80a3798:	4906      	ldr	r1, [pc, #24]	; (80a37b4 <_Z17_fetch_usbserial1v+0x4c>)
 80a379a:	4804      	ldr	r0, [pc, #16]	; (80a37ac <_Z17_fetch_usbserial1v+0x44>)
 80a379c:	f000 f9fa 	bl	80a3b94 <__aeabi_atexit>
  return _usbserial1;
}
 80a37a0:	4802      	ldr	r0, [pc, #8]	; (80a37ac <_Z17_fetch_usbserial1v+0x44>)
 80a37a2:	b006      	add	sp, #24
 80a37a4:	bd10      	pop	{r4, pc}
 80a37a6:	bf00      	nop
 80a37a8:	20000e94 	.word	0x20000e94
 80a37ac:	20000eac 	.word	0x20000eac
 80a37b0:	20000084 	.word	0x20000084
 80a37b4:	080a3615 	.word	0x080a3615

080a37b8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a37b8:	2200      	movs	r2, #0
 80a37ba:	6840      	ldr	r0, [r0, #4]
 80a37bc:	4611      	mov	r1, r2
 80a37be:	f7fd bbe7 	b.w	80a0f90 <network_ready>

080a37c2 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a37c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a37c4:	4615      	mov	r5, r2
 80a37c6:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a37c8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a37ca:	460e      	mov	r6, r1
 80a37cc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a37ce:	2100      	movs	r1, #0
 80a37d0:	a803      	add	r0, sp, #12
 80a37d2:	f000 fb3f 	bl	80a3e54 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a37d6:	4628      	mov	r0, r5
 80a37d8:	f000 fbad 	bl	80a3f36 <strlen>
 80a37dc:	2700      	movs	r7, #0
 80a37de:	b281      	uxth	r1, r0
 80a37e0:	6873      	ldr	r3, [r6, #4]
 80a37e2:	4628      	mov	r0, r5
 80a37e4:	9700      	str	r7, [sp, #0]
 80a37e6:	aa03      	add	r2, sp, #12
 80a37e8:	f7fd fb36 	bl	80a0e58 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a37ec:	b130      	cbz	r0, 80a37fc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a37ee:	4639      	mov	r1, r7
 80a37f0:	4620      	mov	r0, r4
 80a37f2:	f7fd ff99 	bl	80a1728 <_ZN9IPAddressC1Em>
    }
 80a37f6:	4620      	mov	r0, r4
 80a37f8:	b009      	add	sp, #36	; 0x24
 80a37fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a37fc:	4620      	mov	r0, r4
 80a37fe:	a903      	add	r1, sp, #12
 80a3800:	f7fd ff80 	bl	80a1704 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3804:	e7f7      	b.n	80a37f6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3806 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3806:	2200      	movs	r2, #0
 80a3808:	6840      	ldr	r0, [r0, #4]
 80a380a:	4611      	mov	r1, r2
 80a380c:	f7fd bbe0 	b.w	80a0fd0 <network_listening>

080a3810 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3810:	2200      	movs	r2, #0
 80a3812:	6840      	ldr	r0, [r0, #4]
 80a3814:	4611      	mov	r1, r2
 80a3816:	f7fd bbeb 	b.w	80a0ff0 <network_get_listen_timeout>

080a381a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a381a:	2200      	movs	r2, #0
 80a381c:	6840      	ldr	r0, [r0, #4]
 80a381e:	f7fd bbdf 	b.w	80a0fe0 <network_set_listen_timeout>

080a3822 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3822:	2200      	movs	r2, #0
 80a3824:	6840      	ldr	r0, [r0, #4]
 80a3826:	f081 0101 	eor.w	r1, r1, #1
 80a382a:	f7fd bbc9 	b.w	80a0fc0 <network_listen>

080a382e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a382e:	2300      	movs	r3, #0
 80a3830:	6840      	ldr	r0, [r0, #4]
 80a3832:	461a      	mov	r2, r3
 80a3834:	4619      	mov	r1, r3
 80a3836:	f7fd bbbb 	b.w	80a0fb0 <network_off>

080a383a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a383a:	2300      	movs	r3, #0
 80a383c:	6840      	ldr	r0, [r0, #4]
 80a383e:	461a      	mov	r2, r3
 80a3840:	4619      	mov	r1, r3
 80a3842:	f7fd bbad 	b.w	80a0fa0 <network_on>

080a3846 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a3846:	2200      	movs	r2, #0
 80a3848:	6840      	ldr	r0, [r0, #4]
 80a384a:	4611      	mov	r1, r2
 80a384c:	f7fd bb90 	b.w	80a0f70 <network_connecting>

080a3850 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3850:	2200      	movs	r2, #0
 80a3852:	2102      	movs	r1, #2
 80a3854:	6840      	ldr	r0, [r0, #4]
 80a3856:	f7fd bb93 	b.w	80a0f80 <network_disconnect>

080a385a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a385a:	2300      	movs	r3, #0
 80a385c:	6840      	ldr	r0, [r0, #4]
 80a385e:	461a      	mov	r2, r3
 80a3860:	f7fd bb7e 	b.w	80a0f60 <network_connect>

080a3864 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3864:	2204      	movs	r2, #4
 80a3866:	4b02      	ldr	r3, [pc, #8]	; (80a3870 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3868:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a386a:	4a02      	ldr	r2, [pc, #8]	; (80a3874 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a386c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a386e:	4770      	bx	lr
 80a3870:	200011c4 	.word	0x200011c4
 80a3874:	080a45b8 	.word	0x080a45b8

080a3878 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a3878:	4b01      	ldr	r3, [pc, #4]	; (80a3880 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a387a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a387c:	4770      	bx	lr
 80a387e:	bf00      	nop
 80a3880:	20000020 	.word	0x20000020

080a3884 <serialEventRun>:
{
 80a3884:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3886:	4b13      	ldr	r3, [pc, #76]	; (80a38d4 <serialEventRun+0x50>)
 80a3888:	b143      	cbz	r3, 80a389c <serialEventRun+0x18>
 80a388a:	f7ff ff2f 	bl	80a36ec <_Z16_fetch_usbserialv>
 80a388e:	6803      	ldr	r3, [r0, #0]
 80a3890:	691b      	ldr	r3, [r3, #16]
 80a3892:	4798      	blx	r3
 80a3894:	2800      	cmp	r0, #0
 80a3896:	dd01      	ble.n	80a389c <serialEventRun+0x18>
        serialEvent();
 80a3898:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a389c:	4b0e      	ldr	r3, [pc, #56]	; (80a38d8 <serialEventRun+0x54>)
 80a389e:	b143      	cbz	r3, 80a38b2 <serialEventRun+0x2e>
 80a38a0:	f7ff fe8e 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
 80a38a4:	6803      	ldr	r3, [r0, #0]
 80a38a6:	691b      	ldr	r3, [r3, #16]
 80a38a8:	4798      	blx	r3
 80a38aa:	2800      	cmp	r0, #0
 80a38ac:	dd01      	ble.n	80a38b2 <serialEventRun+0x2e>
        serialEvent1();
 80a38ae:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a38b2:	4b0a      	ldr	r3, [pc, #40]	; (80a38dc <serialEventRun+0x58>)
 80a38b4:	b10b      	cbz	r3, 80a38ba <serialEventRun+0x36>
 80a38b6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a38ba:	4b09      	ldr	r3, [pc, #36]	; (80a38e0 <serialEventRun+0x5c>)
 80a38bc:	b143      	cbz	r3, 80a38d0 <serialEventRun+0x4c>
 80a38be:	f7ff ff53 	bl	80a3768 <_Z17_fetch_usbserial1v>
 80a38c2:	6803      	ldr	r3, [r0, #0]
 80a38c4:	691b      	ldr	r3, [r3, #16]
 80a38c6:	4798      	blx	r3
 80a38c8:	2800      	cmp	r0, #0
 80a38ca:	dd01      	ble.n	80a38d0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a38cc:	f3af 8000 	nop.w
}
 80a38d0:	bd08      	pop	{r3, pc}
 80a38d2:	bf00      	nop
	...

080a38e4 <_post_loop>:
{
 80a38e4:	b508      	push	{r3, lr}
	serialEventRun();
 80a38e6:	f7ff ffcd 	bl	80a3884 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a38ea:	f7fd f963 	bl	80a0bb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a38ee:	4b01      	ldr	r3, [pc, #4]	; (80a38f4 <_post_loop+0x10>)
 80a38f0:	6018      	str	r0, [r3, #0]
}
 80a38f2:	bd08      	pop	{r3, pc}
 80a38f4:	200011e4 	.word	0x200011e4

080a38f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a38f8:	4802      	ldr	r0, [pc, #8]	; (80a3904 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a38fa:	4a03      	ldr	r2, [pc, #12]	; (80a3908 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a38fc:	4903      	ldr	r1, [pc, #12]	; (80a390c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a38fe:	1a12      	subs	r2, r2, r0
 80a3900:	f000 ba80 	b.w	80a3e04 <memcpy>
 80a3904:	40024000 	.word	0x40024000
 80a3908:	40024004 	.word	0x40024004
 80a390c:	080a4810 	.word	0x080a4810

080a3910 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3910:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3912:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3914:	461a      	mov	r2, r3
 80a3916:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a391a:	9300      	str	r3, [sp, #0]
 80a391c:	f7fd faf6 	bl	80a0f0c <system_ctrl_set_result>
}
 80a3920:	b003      	add	sp, #12
 80a3922:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3928 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3928:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a392a:	8843      	ldrh	r3, [r0, #2]
 80a392c:	2b0a      	cmp	r3, #10
 80a392e:	d008      	beq.n	80a3942 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3930:	2b50      	cmp	r3, #80	; 0x50
 80a3932:	d10b      	bne.n	80a394c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a3934:	4b09      	ldr	r3, [pc, #36]	; (80a395c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3936:	681b      	ldr	r3, [r3, #0]
 80a3938:	b14b      	cbz	r3, 80a394e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a393a:	b003      	add	sp, #12
 80a393c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3940:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a3942:	f7ff ffe5 	bl	80a3910 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3946:	b003      	add	sp, #12
 80a3948:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a394c:	2300      	movs	r3, #0
 80a394e:	461a      	mov	r2, r3
 80a3950:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3954:	9300      	str	r3, [sp, #0]
 80a3956:	f7fd fad9 	bl	80a0f0c <system_ctrl_set_result>
}
 80a395a:	e7f4      	b.n	80a3946 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a395c:	200011d0 	.word	0x200011d0

080a3960 <module_user_init_hook>:
{
 80a3960:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3962:	4c12      	ldr	r4, [pc, #72]	; (80a39ac <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3964:	2100      	movs	r1, #0
 80a3966:	4812      	ldr	r0, [pc, #72]	; (80a39b0 <module_user_init_hook+0x50>)
 80a3968:	f7fd fb8a 	bl	80a1080 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a396c:	4d11      	ldr	r5, [pc, #68]	; (80a39b4 <module_user_init_hook+0x54>)
 80a396e:	6823      	ldr	r3, [r4, #0]
 80a3970:	42ab      	cmp	r3, r5
 80a3972:	bf0c      	ite	eq
 80a3974:	2201      	moveq	r2, #1
 80a3976:	2200      	movne	r2, #0
 80a3978:	4b0f      	ldr	r3, [pc, #60]	; (80a39b8 <module_user_init_hook+0x58>)
 80a397a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a397c:	d002      	beq.n	80a3984 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a397e:	f7ff ffbb 	bl	80a38f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3982:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3984:	f7fd f906 	bl	80a0b94 <HAL_RNG_GetRandomNumber>
 80a3988:	4604      	mov	r4, r0
    srand(seed);
 80a398a:	f000 fa6b 	bl	80a3e64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a398e:	4b0b      	ldr	r3, [pc, #44]	; (80a39bc <module_user_init_hook+0x5c>)
 80a3990:	b113      	cbz	r3, 80a3998 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a3992:	4620      	mov	r0, r4
 80a3994:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3998:	2100      	movs	r1, #0
 80a399a:	4808      	ldr	r0, [pc, #32]	; (80a39bc <module_user_init_hook+0x5c>)
 80a399c:	f7fd fad8 	bl	80a0f50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a39a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a39a4:	2100      	movs	r1, #0
 80a39a6:	4806      	ldr	r0, [pc, #24]	; (80a39c0 <module_user_init_hook+0x60>)
 80a39a8:	f7fd baa6 	b.w	80a0ef8 <system_ctrl_set_app_request_handler>
 80a39ac:	40024000 	.word	0x40024000
 80a39b0:	080a3879 	.word	0x080a3879
 80a39b4:	9a271c1e 	.word	0x9a271c1e
 80a39b8:	200011cc 	.word	0x200011cc
 80a39bc:	00000000 	.word	0x00000000
 80a39c0:	080a3929 	.word	0x080a3929

080a39c4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a39c4:	b510      	push	{r4, lr}
 80a39c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a39c8:	6880      	ldr	r0, [r0, #8]
 80a39ca:	b108      	cbz	r0, 80a39d0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a39cc:	f7fd f8ca 	bl	80a0b64 <os_mutex_recursive_destroy>
 80a39d0:	4620      	mov	r0, r4
 80a39d2:	bd10      	pop	{r4, pc}

080a39d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a39d4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a39d6:	b570      	push	{r4, r5, r6, lr}
 80a39d8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a39da:	d901      	bls.n	80a39e0 <pinAvailable+0xc>
    return false;
 80a39dc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a39de:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a39e0:	f1a0 030d 	sub.w	r3, r0, #13
 80a39e4:	2b02      	cmp	r3, #2
 80a39e6:	d90b      	bls.n	80a3a00 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a39e8:	2801      	cmp	r0, #1
 80a39ea:	d826      	bhi.n	80a3a3a <pinAvailable+0x66>
 80a39ec:	f000 f892 	bl	80a3b14 <_Z19__fetch_global_Wirev>
 80a39f0:	2100      	movs	r1, #0
 80a39f2:	7c00      	ldrb	r0, [r0, #16]
 80a39f4:	f7fd f936 	bl	80a0c64 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a39f8:	f080 0001 	eor.w	r0, r0, #1
 80a39fc:	b2c0      	uxtb	r0, r0
 80a39fe:	e7ee      	b.n	80a39de <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3a00:	4e13      	ldr	r6, [pc, #76]	; (80a3a50 <pinAvailable+0x7c>)
 80a3a02:	7831      	ldrb	r1, [r6, #0]
 80a3a04:	f3bf 8f5b 	dmb	ish
 80a3a08:	f011 0501 	ands.w	r5, r1, #1
 80a3a0c:	d10f      	bne.n	80a3a2e <pinAvailable+0x5a>
 80a3a0e:	4630      	mov	r0, r6
 80a3a10:	f7fc fb52 	bl	80a00b8 <__cxa_guard_acquire>
 80a3a14:	b158      	cbz	r0, 80a3a2e <pinAvailable+0x5a>
 80a3a16:	4629      	mov	r1, r5
 80a3a18:	480e      	ldr	r0, [pc, #56]	; (80a3a54 <pinAvailable+0x80>)
 80a3a1a:	f7ff f985 	bl	80a2d28 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3a1e:	4630      	mov	r0, r6
 80a3a20:	f7fc fb4f 	bl	80a00c2 <__cxa_guard_release>
 80a3a24:	4a0c      	ldr	r2, [pc, #48]	; (80a3a58 <pinAvailable+0x84>)
 80a3a26:	490d      	ldr	r1, [pc, #52]	; (80a3a5c <pinAvailable+0x88>)
 80a3a28:	480a      	ldr	r0, [pc, #40]	; (80a3a54 <pinAvailable+0x80>)
 80a3a2a:	f000 f8b3 	bl	80a3b94 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3a2e:	4b09      	ldr	r3, [pc, #36]	; (80a3a54 <pinAvailable+0x80>)
 80a3a30:	7818      	ldrb	r0, [r3, #0]
 80a3a32:	f7fd f971 	bl	80a0d18 <hal_spi_is_enabled>
 80a3a36:	2800      	cmp	r0, #0
 80a3a38:	d1d0      	bne.n	80a39dc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3a3a:	3c12      	subs	r4, #18
 80a3a3c:	2c01      	cmp	r4, #1
 80a3a3e:	d805      	bhi.n	80a3a4c <pinAvailable+0x78>
 80a3a40:	f7ff fdbe 	bl	80a35c0 <_Z22__fetch_global_Serial1v>
 80a3a44:	7c00      	ldrb	r0, [r0, #16]
 80a3a46:	f7fd f9a7 	bl	80a0d98 <hal_usart_is_enabled>
 80a3a4a:	e7d5      	b.n	80a39f8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3a4c:	2001      	movs	r0, #1
 80a3a4e:	e7c6      	b.n	80a39de <pinAvailable+0xa>
 80a3a50:	200011d4 	.word	0x200011d4
 80a3a54:	200011d8 	.word	0x200011d8
 80a3a58:	20000084 	.word	0x20000084
 80a3a5c:	080a39c5 	.word	0x080a39c5

080a3a60 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a60:	2817      	cmp	r0, #23
{
 80a3a62:	b538      	push	{r3, r4, r5, lr}
 80a3a64:	4604      	mov	r4, r0
 80a3a66:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a68:	d80a      	bhi.n	80a3a80 <pinMode+0x20>
 80a3a6a:	29ff      	cmp	r1, #255	; 0xff
 80a3a6c:	d008      	beq.n	80a3a80 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3a6e:	f7ff ffb1 	bl	80a39d4 <pinAvailable>
 80a3a72:	b128      	cbz	r0, 80a3a80 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3a74:	4629      	mov	r1, r5
 80a3a76:	4620      	mov	r0, r4
}
 80a3a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3a7c:	f7fd b8aa 	b.w	80a0bd4 <HAL_Pin_Mode>
}
 80a3a80:	bd38      	pop	{r3, r4, r5, pc}

080a3a82 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3a82:	b538      	push	{r3, r4, r5, lr}
 80a3a84:	4604      	mov	r4, r0
 80a3a86:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3a88:	f7fd f8ac 	bl	80a0be4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3a8c:	28ff      	cmp	r0, #255	; 0xff
 80a3a8e:	d010      	beq.n	80a3ab2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3a90:	2806      	cmp	r0, #6
 80a3a92:	d804      	bhi.n	80a3a9e <digitalWrite+0x1c>
 80a3a94:	234d      	movs	r3, #77	; 0x4d
 80a3a96:	fa23 f000 	lsr.w	r0, r3, r0
 80a3a9a:	07c3      	lsls	r3, r0, #31
 80a3a9c:	d409      	bmi.n	80a3ab2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3a9e:	4620      	mov	r0, r4
 80a3aa0:	f7ff ff98 	bl	80a39d4 <pinAvailable>
 80a3aa4:	b128      	cbz	r0, 80a3ab2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3aa6:	4629      	mov	r1, r5
 80a3aa8:	4620      	mov	r0, r4
}
 80a3aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3aae:	f7fd b8a1 	b.w	80a0bf4 <HAL_GPIO_Write>
}
 80a3ab2:	bd38      	pop	{r3, r4, r5, pc}

080a3ab4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3ab4:	b510      	push	{r4, lr}
 80a3ab6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3ab8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3aba:	bf9c      	itt	ls
 80a3abc:	340a      	addls	r4, #10
 80a3abe:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3ac0:	4620      	mov	r0, r4
 80a3ac2:	f7ff ff87 	bl	80a39d4 <pinAvailable>
 80a3ac6:	b150      	cbz	r0, 80a3ade <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3ac8:	2103      	movs	r1, #3
 80a3aca:	4620      	mov	r0, r4
 80a3acc:	f7fd f87a 	bl	80a0bc4 <HAL_Validate_Pin_Function>
 80a3ad0:	2803      	cmp	r0, #3
 80a3ad2:	d104      	bne.n	80a3ade <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a3ad4:	4620      	mov	r0, r4
}
 80a3ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3ada:	f7fd b893 	b.w	80a0c04 <hal_adc_read>
}
 80a3ade:	2000      	movs	r0, #0
 80a3ae0:	bd10      	pop	{r4, pc}
	...

080a3ae4 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3ae4:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3ae6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3ae8:	2520      	movs	r5, #32
 80a3aea:	8043      	strh	r3, [r0, #2]
 80a3aec:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3aee:	4e08      	ldr	r6, [pc, #32]	; (80a3b10 <_Z17acquireWireBufferv+0x2c>)
{
 80a3af0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3af2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3af4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3af6:	6085      	str	r5, [r0, #8]
 80a3af8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3afa:	4628      	mov	r0, r5
 80a3afc:	f000 f853 	bl	80a3ba6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b00:	4631      	mov	r1, r6
	};
 80a3b02:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3b04:	4628      	mov	r0, r5
 80a3b06:	f000 f84e 	bl	80a3ba6 <_ZnajRKSt9nothrow_t>
	};
 80a3b0a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3b0c:	4620      	mov	r0, r4
 80a3b0e:	bd70      	pop	{r4, r5, r6, pc}
 80a3b10:	080a45ec 	.word	0x080a45ec

080a3b14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3b14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b16:	4d0f      	ldr	r5, [pc, #60]	; (80a3b54 <_Z19__fetch_global_Wirev+0x40>)
{
 80a3b18:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b1a:	7829      	ldrb	r1, [r5, #0]
 80a3b1c:	f3bf 8f5b 	dmb	ish
 80a3b20:	f011 0401 	ands.w	r4, r1, #1
 80a3b24:	d113      	bne.n	80a3b4e <_Z19__fetch_global_Wirev+0x3a>
 80a3b26:	4628      	mov	r0, r5
 80a3b28:	f7fc fac6 	bl	80a00b8 <__cxa_guard_acquire>
 80a3b2c:	b178      	cbz	r0, 80a3b4e <_Z19__fetch_global_Wirev+0x3a>
 80a3b2e:	a801      	add	r0, sp, #4
 80a3b30:	f7ff ffd8 	bl	80a3ae4 <_Z17acquireWireBufferv>
 80a3b34:	4621      	mov	r1, r4
 80a3b36:	aa01      	add	r2, sp, #4
 80a3b38:	4807      	ldr	r0, [pc, #28]	; (80a3b58 <_Z19__fetch_global_Wirev+0x44>)
 80a3b3a:	f7fd fda9 	bl	80a1690 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3b3e:	4628      	mov	r0, r5
 80a3b40:	f7fc fabf 	bl	80a00c2 <__cxa_guard_release>
 80a3b44:	4a05      	ldr	r2, [pc, #20]	; (80a3b5c <_Z19__fetch_global_Wirev+0x48>)
 80a3b46:	4906      	ldr	r1, [pc, #24]	; (80a3b60 <_Z19__fetch_global_Wirev+0x4c>)
 80a3b48:	4803      	ldr	r0, [pc, #12]	; (80a3b58 <_Z19__fetch_global_Wirev+0x44>)
 80a3b4a:	f000 f823 	bl	80a3b94 <__aeabi_atexit>
	return wire;
}
 80a3b4e:	4802      	ldr	r0, [pc, #8]	; (80a3b58 <_Z19__fetch_global_Wirev+0x44>)
 80a3b50:	b007      	add	sp, #28
 80a3b52:	bd30      	pop	{r4, r5, pc}
 80a3b54:	200011e8 	.word	0x200011e8
 80a3b58:	200011ec 	.word	0x200011ec
 80a3b5c:	20000084 	.word	0x20000084
 80a3b60:	080a1639 	.word	0x080a1639

080a3b64 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3b64:	2300      	movs	r3, #0
 80a3b66:	b513      	push	{r0, r1, r4, lr}
 80a3b68:	4c07      	ldr	r4, [pc, #28]	; (80a3b88 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3b6a:	461a      	mov	r2, r3
 80a3b6c:	4619      	mov	r1, r3
 80a3b6e:	4620      	mov	r0, r4
 80a3b70:	9300      	str	r3, [sp, #0]
 80a3b72:	f7fd fdef 	bl	80a1754 <_ZN9IPAddressC1Ehhhh>
 80a3b76:	4620      	mov	r0, r4
 80a3b78:	4a04      	ldr	r2, [pc, #16]	; (80a3b8c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3b7a:	4905      	ldr	r1, [pc, #20]	; (80a3b90 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3b7c:	b002      	add	sp, #8
 80a3b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3b82:	f000 b807 	b.w	80a3b94 <__aeabi_atexit>
 80a3b86:	bf00      	nop
 80a3b88:	20001200 	.word	0x20001200
 80a3b8c:	20000084 	.word	0x20000084
 80a3b90:	080a00c9 	.word	0x080a00c9

080a3b94 <__aeabi_atexit>:
 80a3b94:	460b      	mov	r3, r1
 80a3b96:	4601      	mov	r1, r0
 80a3b98:	4618      	mov	r0, r3
 80a3b9a:	f000 b925 	b.w	80a3de8 <__cxa_atexit>

080a3b9e <_ZdlPvj>:
 80a3b9e:	f7fc ba7e 	b.w	80a009e <_ZdlPv>

080a3ba2 <_ZnwjRKSt9nothrow_t>:
 80a3ba2:	f7fc ba78 	b.w	80a0096 <_Znwj>

080a3ba6 <_ZnajRKSt9nothrow_t>:
 80a3ba6:	f7fc ba78 	b.w	80a009a <_Znaj>

080a3baa <_ZSt25__throw_bad_function_callv>:
 80a3baa:	b508      	push	{r3, lr}
 80a3bac:	f7fd fa58 	bl	80a1060 <abort>

080a3bb0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a3bb0:	4901      	ldr	r1, [pc, #4]	; (80a3bb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a3bb2:	f000 b8fb 	b.w	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3bb6:	bf00      	nop
 80a3bb8:	080a4608 	.word	0x080a4608

080a3bbc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3bbe:	2400      	movs	r4, #0
 80a3bc0:	2310      	movs	r3, #16
 80a3bc2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3bc6:	6803      	ldr	r3, [r0, #0]
 80a3bc8:	4615      	mov	r5, r2
 80a3bca:	699e      	ldr	r6, [r3, #24]
 80a3bcc:	6812      	ldr	r2, [r2, #0]
 80a3bce:	466b      	mov	r3, sp
 80a3bd0:	9400      	str	r4, [sp, #0]
 80a3bd2:	f88d 4004 	strb.w	r4, [sp, #4]
 80a3bd6:	47b0      	blx	r6
 80a3bd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3bdc:	f003 0306 	and.w	r3, r3, #6
 80a3be0:	2b06      	cmp	r3, #6
 80a3be2:	bf09      	itett	eq
 80a3be4:	2001      	moveq	r0, #1
 80a3be6:	4620      	movne	r0, r4
 80a3be8:	9b00      	ldreq	r3, [sp, #0]
 80a3bea:	602b      	streq	r3, [r5, #0]
 80a3bec:	b004      	add	sp, #16
 80a3bee:	bd70      	pop	{r4, r5, r6, pc}

080a3bf0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a3bf0:	9800      	ldr	r0, [sp, #0]
 80a3bf2:	4290      	cmp	r0, r2
 80a3bf4:	bf14      	ite	ne
 80a3bf6:	2001      	movne	r0, #1
 80a3bf8:	2006      	moveq	r0, #6
 80a3bfa:	4770      	bx	lr

080a3bfc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3bfc:	b510      	push	{r4, lr}
 80a3bfe:	4604      	mov	r4, r0
 80a3c00:	4b02      	ldr	r3, [pc, #8]	; (80a3c0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a3c02:	6003      	str	r3, [r0, #0]
 80a3c04:	f000 f8cf 	bl	80a3da6 <_ZNSt9type_infoD1Ev>
 80a3c08:	4620      	mov	r0, r4
 80a3c0a:	bd10      	pop	{r4, pc}
 80a3c0c:	080a4648 	.word	0x080a4648

080a3c10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a3c10:	b510      	push	{r4, lr}
 80a3c12:	4604      	mov	r4, r0
 80a3c14:	f7ff fff2 	bl	80a3bfc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3c18:	4620      	mov	r0, r4
 80a3c1a:	2108      	movs	r1, #8
 80a3c1c:	f7ff ffbf 	bl	80a3b9e <_ZdlPvj>
 80a3c20:	4620      	mov	r0, r4
 80a3c22:	bd10      	pop	{r4, pc}

080a3c24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a3c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3c2c:	461f      	mov	r7, r3
 80a3c2e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a3c32:	4598      	cmp	r8, r3
 80a3c34:	4606      	mov	r6, r0
 80a3c36:	4615      	mov	r5, r2
 80a3c38:	d107      	bne.n	80a3c4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3c3a:	9907      	ldr	r1, [sp, #28]
 80a3c3c:	f000 f8b6 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3c40:	b118      	cbz	r0, 80a3c4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3c42:	7165      	strb	r5, [r4, #5]
 80a3c44:	2000      	movs	r0, #0
 80a3c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3c4a:	4639      	mov	r1, r7
 80a3c4c:	4630      	mov	r0, r6
 80a3c4e:	f000 f8ad 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3c52:	2800      	cmp	r0, #0
 80a3c54:	d0f6      	beq.n	80a3c44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a3c56:	2301      	movs	r3, #1
 80a3c58:	f8c4 8000 	str.w	r8, [r4]
 80a3c5c:	7125      	strb	r5, [r4, #4]
 80a3c5e:	71a3      	strb	r3, [r4, #6]
 80a3c60:	e7f0      	b.n	80a3c44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a3c62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a3c62:	b538      	push	{r3, r4, r5, lr}
 80a3c64:	4615      	mov	r5, r2
 80a3c66:	461c      	mov	r4, r3
 80a3c68:	f000 f8a0 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3c6c:	b120      	cbz	r0, 80a3c78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a3c6e:	2308      	movs	r3, #8
 80a3c70:	60e3      	str	r3, [r4, #12]
 80a3c72:	2306      	movs	r3, #6
 80a3c74:	6025      	str	r5, [r4, #0]
 80a3c76:	7123      	strb	r3, [r4, #4]
 80a3c78:	bd38      	pop	{r3, r4, r5, pc}

080a3c7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a3c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c7e:	4605      	mov	r5, r0
 80a3c80:	460c      	mov	r4, r1
 80a3c82:	4616      	mov	r6, r2
 80a3c84:	461f      	mov	r7, r3
 80a3c86:	f000 f891 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3c8a:	b948      	cbnz	r0, 80a3ca0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3c8c:	2f03      	cmp	r7, #3
 80a3c8e:	d807      	bhi.n	80a3ca0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3c90:	6823      	ldr	r3, [r4, #0]
 80a3c92:	4632      	mov	r2, r6
 80a3c94:	4629      	mov	r1, r5
 80a3c96:	4620      	mov	r0, r4
 80a3c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c9c:	695b      	ldr	r3, [r3, #20]
 80a3c9e:	4718      	bx	r3
 80a3ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3ca4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a3ca4:	b510      	push	{r4, lr}
 80a3ca6:	4604      	mov	r4, r0
 80a3ca8:	4b02      	ldr	r3, [pc, #8]	; (80a3cb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a3caa:	6003      	str	r3, [r0, #0]
 80a3cac:	f7ff ffa6 	bl	80a3bfc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3cb0:	4620      	mov	r0, r4
 80a3cb2:	bd10      	pop	{r4, pc}
 80a3cb4:	080a46a8 	.word	0x080a46a8

080a3cb8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a3cb8:	b510      	push	{r4, lr}
 80a3cba:	4604      	mov	r4, r0
 80a3cbc:	f7ff fff2 	bl	80a3ca4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a3cc0:	4620      	mov	r0, r4
 80a3cc2:	210c      	movs	r1, #12
 80a3cc4:	f7ff ff6b 	bl	80a3b9e <_ZdlPvj>
 80a3cc8:	4620      	mov	r0, r4
 80a3cca:	bd10      	pop	{r4, pc}

080a3ccc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a3ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3cd0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3cd4:	4606      	mov	r6, r0
 80a3cd6:	4590      	cmp	r8, r2
 80a3cd8:	460f      	mov	r7, r1
 80a3cda:	4615      	mov	r5, r2
 80a3cdc:	461c      	mov	r4, r3
 80a3cde:	d00b      	beq.n	80a3cf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a3ce0:	68b0      	ldr	r0, [r6, #8]
 80a3ce2:	462a      	mov	r2, r5
 80a3ce4:	6803      	ldr	r3, [r0, #0]
 80a3ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3cea:	6a1e      	ldr	r6, [r3, #32]
 80a3cec:	4639      	mov	r1, r7
 80a3cee:	4623      	mov	r3, r4
 80a3cf0:	46b4      	mov	ip, r6
 80a3cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3cf6:	4760      	bx	ip
 80a3cf8:	4619      	mov	r1, r3
 80a3cfa:	f000 f857 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3cfe:	2800      	cmp	r0, #0
 80a3d00:	d0ee      	beq.n	80a3ce0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a3d02:	2006      	movs	r0, #6
 80a3d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3d08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d0c:	460d      	mov	r5, r1
 80a3d0e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a3d12:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3d16:	4619      	mov	r1, r3
 80a3d18:	4681      	mov	r9, r0
 80a3d1a:	4617      	mov	r7, r2
 80a3d1c:	4698      	mov	r8, r3
 80a3d1e:	f000 f845 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3d22:	b190      	cbz	r0, 80a3d4a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3d24:	2d00      	cmp	r5, #0
 80a3d26:	6034      	str	r4, [r6, #0]
 80a3d28:	7137      	strb	r7, [r6, #4]
 80a3d2a:	db09      	blt.n	80a3d40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3d2c:	442c      	add	r4, r5
 80a3d2e:	45a2      	cmp	sl, r4
 80a3d30:	bf0c      	ite	eq
 80a3d32:	2406      	moveq	r4, #6
 80a3d34:	2401      	movne	r4, #1
 80a3d36:	71b4      	strb	r4, [r6, #6]
 80a3d38:	2000      	movs	r0, #0
 80a3d3a:	b001      	add	sp, #4
 80a3d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d40:	3502      	adds	r5, #2
 80a3d42:	d1f9      	bne.n	80a3d38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d44:	2301      	movs	r3, #1
 80a3d46:	71b3      	strb	r3, [r6, #6]
 80a3d48:	e7f6      	b.n	80a3d38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d4a:	4554      	cmp	r4, sl
 80a3d4c:	d106      	bne.n	80a3d5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3d4e:	4659      	mov	r1, fp
 80a3d50:	4648      	mov	r0, r9
 80a3d52:	f000 f82b 	bl	80a3dac <_ZNKSt9type_infoeqERKS_>
 80a3d56:	b108      	cbz	r0, 80a3d5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3d58:	7177      	strb	r7, [r6, #5]
 80a3d5a:	e7ed      	b.n	80a3d38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d5c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a3d60:	463a      	mov	r2, r7
 80a3d62:	6803      	ldr	r3, [r0, #0]
 80a3d64:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a3d68:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a3d6c:	69dc      	ldr	r4, [r3, #28]
 80a3d6e:	4629      	mov	r1, r5
 80a3d70:	4643      	mov	r3, r8
 80a3d72:	46a4      	mov	ip, r4
 80a3d74:	b001      	add	sp, #4
 80a3d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d7a:	4760      	bx	ip

080a3d7c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a3d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d80:	4607      	mov	r7, r0
 80a3d82:	460c      	mov	r4, r1
 80a3d84:	4615      	mov	r5, r2
 80a3d86:	461e      	mov	r6, r3
 80a3d88:	f7ff ff6b 	bl	80a3c62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a3d8c:	b948      	cbnz	r0, 80a3da2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a3d8e:	68b8      	ldr	r0, [r7, #8]
 80a3d90:	462a      	mov	r2, r5
 80a3d92:	6803      	ldr	r3, [r0, #0]
 80a3d94:	4621      	mov	r1, r4
 80a3d96:	699f      	ldr	r7, [r3, #24]
 80a3d98:	4633      	mov	r3, r6
 80a3d9a:	46bc      	mov	ip, r7
 80a3d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3da0:	4760      	bx	ip
 80a3da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3da6 <_ZNSt9type_infoD1Ev>:
 80a3da6:	4770      	bx	lr

080a3da8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a3da8:	2000      	movs	r0, #0
 80a3daa:	4770      	bx	lr

080a3dac <_ZNKSt9type_infoeqERKS_>:
 80a3dac:	4281      	cmp	r1, r0
 80a3dae:	b508      	push	{r3, lr}
 80a3db0:	d00e      	beq.n	80a3dd0 <_ZNKSt9type_infoeqERKS_+0x24>
 80a3db2:	6840      	ldr	r0, [r0, #4]
 80a3db4:	7803      	ldrb	r3, [r0, #0]
 80a3db6:	2b2a      	cmp	r3, #42	; 0x2a
 80a3db8:	d00c      	beq.n	80a3dd4 <_ZNKSt9type_infoeqERKS_+0x28>
 80a3dba:	6849      	ldr	r1, [r1, #4]
 80a3dbc:	780b      	ldrb	r3, [r1, #0]
 80a3dbe:	2b2a      	cmp	r3, #42	; 0x2a
 80a3dc0:	bf08      	it	eq
 80a3dc2:	3101      	addeq	r1, #1
 80a3dc4:	f000 f889 	bl	80a3eda <strcmp>
 80a3dc8:	fab0 f080 	clz	r0, r0
 80a3dcc:	0940      	lsrs	r0, r0, #5
 80a3dce:	bd08      	pop	{r3, pc}
 80a3dd0:	2001      	movs	r0, #1
 80a3dd2:	e7fc      	b.n	80a3dce <_ZNKSt9type_infoeqERKS_+0x22>
 80a3dd4:	2000      	movs	r0, #0
 80a3dd6:	e7fa      	b.n	80a3dce <_ZNKSt9type_infoeqERKS_+0x22>

080a3dd8 <atoi>:
 80a3dd8:	220a      	movs	r2, #10
 80a3dda:	2100      	movs	r1, #0
 80a3ddc:	f000 b96a 	b.w	80a40b4 <strtol>

080a3de0 <atol>:
 80a3de0:	220a      	movs	r2, #10
 80a3de2:	2100      	movs	r1, #0
 80a3de4:	f000 b966 	b.w	80a40b4 <strtol>

080a3de8 <__cxa_atexit>:
 80a3de8:	b510      	push	{r4, lr}
 80a3dea:	4604      	mov	r4, r0
 80a3dec:	4804      	ldr	r0, [pc, #16]	; (80a3e00 <__cxa_atexit+0x18>)
 80a3dee:	4613      	mov	r3, r2
 80a3df0:	b120      	cbz	r0, 80a3dfc <__cxa_atexit+0x14>
 80a3df2:	460a      	mov	r2, r1
 80a3df4:	2002      	movs	r0, #2
 80a3df6:	4621      	mov	r1, r4
 80a3df8:	f3af 8000 	nop.w
 80a3dfc:	bd10      	pop	{r4, pc}
 80a3dfe:	bf00      	nop
 80a3e00:	00000000 	.word	0x00000000

080a3e04 <memcpy>:
 80a3e04:	440a      	add	r2, r1
 80a3e06:	4291      	cmp	r1, r2
 80a3e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3e0c:	d100      	bne.n	80a3e10 <memcpy+0xc>
 80a3e0e:	4770      	bx	lr
 80a3e10:	b510      	push	{r4, lr}
 80a3e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3e16:	4291      	cmp	r1, r2
 80a3e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3e1c:	d1f9      	bne.n	80a3e12 <memcpy+0xe>
 80a3e1e:	bd10      	pop	{r4, pc}

080a3e20 <memmove>:
 80a3e20:	4288      	cmp	r0, r1
 80a3e22:	b510      	push	{r4, lr}
 80a3e24:	eb01 0402 	add.w	r4, r1, r2
 80a3e28:	d902      	bls.n	80a3e30 <memmove+0x10>
 80a3e2a:	4284      	cmp	r4, r0
 80a3e2c:	4623      	mov	r3, r4
 80a3e2e:	d807      	bhi.n	80a3e40 <memmove+0x20>
 80a3e30:	1e43      	subs	r3, r0, #1
 80a3e32:	42a1      	cmp	r1, r4
 80a3e34:	d008      	beq.n	80a3e48 <memmove+0x28>
 80a3e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3e3e:	e7f8      	b.n	80a3e32 <memmove+0x12>
 80a3e40:	4601      	mov	r1, r0
 80a3e42:	4402      	add	r2, r0
 80a3e44:	428a      	cmp	r2, r1
 80a3e46:	d100      	bne.n	80a3e4a <memmove+0x2a>
 80a3e48:	bd10      	pop	{r4, pc}
 80a3e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3e52:	e7f7      	b.n	80a3e44 <memmove+0x24>

080a3e54 <memset>:
 80a3e54:	4603      	mov	r3, r0
 80a3e56:	4402      	add	r2, r0
 80a3e58:	4293      	cmp	r3, r2
 80a3e5a:	d100      	bne.n	80a3e5e <memset+0xa>
 80a3e5c:	4770      	bx	lr
 80a3e5e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3e62:	e7f9      	b.n	80a3e58 <memset+0x4>

080a3e64 <srand>:
 80a3e64:	b538      	push	{r3, r4, r5, lr}
 80a3e66:	4b0d      	ldr	r3, [pc, #52]	; (80a3e9c <srand+0x38>)
 80a3e68:	4604      	mov	r4, r0
 80a3e6a:	681d      	ldr	r5, [r3, #0]
 80a3e6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3e6e:	b97b      	cbnz	r3, 80a3e90 <srand+0x2c>
 80a3e70:	2018      	movs	r0, #24
 80a3e72:	f7fd f8d5 	bl	80a1020 <malloc>
 80a3e76:	4a0a      	ldr	r2, [pc, #40]	; (80a3ea0 <srand+0x3c>)
 80a3e78:	4b0a      	ldr	r3, [pc, #40]	; (80a3ea4 <srand+0x40>)
 80a3e7a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3e7c:	e9c0 2300 	strd	r2, r3, [r0]
 80a3e80:	4b09      	ldr	r3, [pc, #36]	; (80a3ea8 <srand+0x44>)
 80a3e82:	2201      	movs	r2, #1
 80a3e84:	6083      	str	r3, [r0, #8]
 80a3e86:	230b      	movs	r3, #11
 80a3e88:	8183      	strh	r3, [r0, #12]
 80a3e8a:	2300      	movs	r3, #0
 80a3e8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3e90:	2200      	movs	r2, #0
 80a3e92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3e94:	611c      	str	r4, [r3, #16]
 80a3e96:	615a      	str	r2, [r3, #20]
 80a3e98:	bd38      	pop	{r3, r4, r5, pc}
 80a3e9a:	bf00      	nop
 80a3e9c:	20000020 	.word	0x20000020
 80a3ea0:	abcd330e 	.word	0xabcd330e
 80a3ea4:	e66d1234 	.word	0xe66d1234
 80a3ea8:	0005deec 	.word	0x0005deec

080a3eac <strchr>:
 80a3eac:	4603      	mov	r3, r0
 80a3eae:	b2c9      	uxtb	r1, r1
 80a3eb0:	4618      	mov	r0, r3
 80a3eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3eb6:	b112      	cbz	r2, 80a3ebe <strchr+0x12>
 80a3eb8:	428a      	cmp	r2, r1
 80a3eba:	d1f9      	bne.n	80a3eb0 <strchr+0x4>
 80a3ebc:	4770      	bx	lr
 80a3ebe:	2900      	cmp	r1, #0
 80a3ec0:	bf18      	it	ne
 80a3ec2:	2000      	movne	r0, #0
 80a3ec4:	4770      	bx	lr

080a3ec6 <strchrnul>:
 80a3ec6:	b510      	push	{r4, lr}
 80a3ec8:	4604      	mov	r4, r0
 80a3eca:	f7ff ffef 	bl	80a3eac <strchr>
 80a3ece:	b918      	cbnz	r0, 80a3ed8 <strchrnul+0x12>
 80a3ed0:	4620      	mov	r0, r4
 80a3ed2:	f000 f830 	bl	80a3f36 <strlen>
 80a3ed6:	4420      	add	r0, r4
 80a3ed8:	bd10      	pop	{r4, pc}

080a3eda <strcmp>:
 80a3eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3ee2:	2a01      	cmp	r2, #1
 80a3ee4:	bf28      	it	cs
 80a3ee6:	429a      	cmpcs	r2, r3
 80a3ee8:	d0f7      	beq.n	80a3eda <strcmp>
 80a3eea:	1ad0      	subs	r0, r2, r3
 80a3eec:	4770      	bx	lr

080a3eee <strcpy>:
 80a3eee:	4603      	mov	r3, r0
 80a3ef0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3ef4:	f803 2b01 	strb.w	r2, [r3], #1
 80a3ef8:	2a00      	cmp	r2, #0
 80a3efa:	d1f9      	bne.n	80a3ef0 <strcpy+0x2>
 80a3efc:	4770      	bx	lr
	...

080a3f00 <strdup>:
 80a3f00:	4b02      	ldr	r3, [pc, #8]	; (80a3f0c <strdup+0xc>)
 80a3f02:	4601      	mov	r1, r0
 80a3f04:	6818      	ldr	r0, [r3, #0]
 80a3f06:	f000 b803 	b.w	80a3f10 <_strdup_r>
 80a3f0a:	bf00      	nop
 80a3f0c:	20000020 	.word	0x20000020

080a3f10 <_strdup_r>:
 80a3f10:	b570      	push	{r4, r5, r6, lr}
 80a3f12:	4604      	mov	r4, r0
 80a3f14:	4608      	mov	r0, r1
 80a3f16:	460d      	mov	r5, r1
 80a3f18:	f000 f80d 	bl	80a3f36 <strlen>
 80a3f1c:	1c46      	adds	r6, r0, #1
 80a3f1e:	4631      	mov	r1, r6
 80a3f20:	4620      	mov	r0, r4
 80a3f22:	f7fd f8a5 	bl	80a1070 <_malloc_r>
 80a3f26:	4604      	mov	r4, r0
 80a3f28:	b118      	cbz	r0, 80a3f32 <_strdup_r+0x22>
 80a3f2a:	4632      	mov	r2, r6
 80a3f2c:	4629      	mov	r1, r5
 80a3f2e:	f7ff ff69 	bl	80a3e04 <memcpy>
 80a3f32:	4620      	mov	r0, r4
 80a3f34:	bd70      	pop	{r4, r5, r6, pc}

080a3f36 <strlen>:
 80a3f36:	4603      	mov	r3, r0
 80a3f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3f3c:	2a00      	cmp	r2, #0
 80a3f3e:	d1fb      	bne.n	80a3f38 <strlen+0x2>
 80a3f40:	1a18      	subs	r0, r3, r0
 80a3f42:	3801      	subs	r0, #1
 80a3f44:	4770      	bx	lr

080a3f46 <strncmp>:
 80a3f46:	b510      	push	{r4, lr}
 80a3f48:	b16a      	cbz	r2, 80a3f66 <strncmp+0x20>
 80a3f4a:	3901      	subs	r1, #1
 80a3f4c:	1884      	adds	r4, r0, r2
 80a3f4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a3f52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a3f56:	4293      	cmp	r3, r2
 80a3f58:	d103      	bne.n	80a3f62 <strncmp+0x1c>
 80a3f5a:	42a0      	cmp	r0, r4
 80a3f5c:	d001      	beq.n	80a3f62 <strncmp+0x1c>
 80a3f5e:	2b00      	cmp	r3, #0
 80a3f60:	d1f5      	bne.n	80a3f4e <strncmp+0x8>
 80a3f62:	1a98      	subs	r0, r3, r2
 80a3f64:	bd10      	pop	{r4, pc}
 80a3f66:	4610      	mov	r0, r2
 80a3f68:	e7fc      	b.n	80a3f64 <strncmp+0x1e>

080a3f6a <strrchr>:
 80a3f6a:	b538      	push	{r3, r4, r5, lr}
 80a3f6c:	4603      	mov	r3, r0
 80a3f6e:	460c      	mov	r4, r1
 80a3f70:	b969      	cbnz	r1, 80a3f8e <strrchr+0x24>
 80a3f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3f76:	f7ff bf99 	b.w	80a3eac <strchr>
 80a3f7a:	4605      	mov	r5, r0
 80a3f7c:	1c43      	adds	r3, r0, #1
 80a3f7e:	4621      	mov	r1, r4
 80a3f80:	4618      	mov	r0, r3
 80a3f82:	f7ff ff93 	bl	80a3eac <strchr>
 80a3f86:	2800      	cmp	r0, #0
 80a3f88:	d1f7      	bne.n	80a3f7a <strrchr+0x10>
 80a3f8a:	4628      	mov	r0, r5
 80a3f8c:	bd38      	pop	{r3, r4, r5, pc}
 80a3f8e:	2500      	movs	r5, #0
 80a3f90:	e7f5      	b.n	80a3f7e <strrchr+0x14>

080a3f92 <strstr>:
 80a3f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3f94:	780c      	ldrb	r4, [r1, #0]
 80a3f96:	b164      	cbz	r4, 80a3fb2 <strstr+0x20>
 80a3f98:	4603      	mov	r3, r0
 80a3f9a:	781a      	ldrb	r2, [r3, #0]
 80a3f9c:	4618      	mov	r0, r3
 80a3f9e:	1c5e      	adds	r6, r3, #1
 80a3fa0:	b90a      	cbnz	r2, 80a3fa6 <strstr+0x14>
 80a3fa2:	4610      	mov	r0, r2
 80a3fa4:	e005      	b.n	80a3fb2 <strstr+0x20>
 80a3fa6:	4294      	cmp	r4, r2
 80a3fa8:	d108      	bne.n	80a3fbc <strstr+0x2a>
 80a3faa:	460d      	mov	r5, r1
 80a3fac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a3fb0:	b902      	cbnz	r2, 80a3fb4 <strstr+0x22>
 80a3fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3fb4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a3fb8:	4297      	cmp	r7, r2
 80a3fba:	d0f7      	beq.n	80a3fac <strstr+0x1a>
 80a3fbc:	4633      	mov	r3, r6
 80a3fbe:	e7ec      	b.n	80a3f9a <strstr+0x8>

080a3fc0 <_strtol_l.isra.0>:
 80a3fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3fc4:	468c      	mov	ip, r1
 80a3fc6:	4686      	mov	lr, r0
 80a3fc8:	4e39      	ldr	r6, [pc, #228]	; (80a40b0 <_strtol_l.isra.0+0xf0>)
 80a3fca:	4660      	mov	r0, ip
 80a3fcc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3fd0:	5da5      	ldrb	r5, [r4, r6]
 80a3fd2:	f015 0508 	ands.w	r5, r5, #8
 80a3fd6:	d1f8      	bne.n	80a3fca <_strtol_l.isra.0+0xa>
 80a3fd8:	2c2d      	cmp	r4, #45	; 0x2d
 80a3fda:	d133      	bne.n	80a4044 <_strtol_l.isra.0+0x84>
 80a3fdc:	f04f 0801 	mov.w	r8, #1
 80a3fe0:	f89c 4000 	ldrb.w	r4, [ip]
 80a3fe4:	f100 0c02 	add.w	ip, r0, #2
 80a3fe8:	2b00      	cmp	r3, #0
 80a3fea:	d05c      	beq.n	80a40a6 <_strtol_l.isra.0+0xe6>
 80a3fec:	2b10      	cmp	r3, #16
 80a3fee:	d10c      	bne.n	80a400a <_strtol_l.isra.0+0x4a>
 80a3ff0:	2c30      	cmp	r4, #48	; 0x30
 80a3ff2:	d10a      	bne.n	80a400a <_strtol_l.isra.0+0x4a>
 80a3ff4:	f89c 0000 	ldrb.w	r0, [ip]
 80a3ff8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3ffc:	2858      	cmp	r0, #88	; 0x58
 80a3ffe:	d14d      	bne.n	80a409c <_strtol_l.isra.0+0xdc>
 80a4000:	2310      	movs	r3, #16
 80a4002:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a4006:	f10c 0c02 	add.w	ip, ip, #2
 80a400a:	2600      	movs	r6, #0
 80a400c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a4010:	3f01      	subs	r7, #1
 80a4012:	fbb7 f9f3 	udiv	r9, r7, r3
 80a4016:	4630      	mov	r0, r6
 80a4018:	fb03 7a19 	mls	sl, r3, r9, r7
 80a401c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a4020:	2d09      	cmp	r5, #9
 80a4022:	d818      	bhi.n	80a4056 <_strtol_l.isra.0+0x96>
 80a4024:	462c      	mov	r4, r5
 80a4026:	42a3      	cmp	r3, r4
 80a4028:	dd24      	ble.n	80a4074 <_strtol_l.isra.0+0xb4>
 80a402a:	1c75      	adds	r5, r6, #1
 80a402c:	d007      	beq.n	80a403e <_strtol_l.isra.0+0x7e>
 80a402e:	4581      	cmp	r9, r0
 80a4030:	d31d      	bcc.n	80a406e <_strtol_l.isra.0+0xae>
 80a4032:	d101      	bne.n	80a4038 <_strtol_l.isra.0+0x78>
 80a4034:	45a2      	cmp	sl, r4
 80a4036:	db1a      	blt.n	80a406e <_strtol_l.isra.0+0xae>
 80a4038:	2601      	movs	r6, #1
 80a403a:	fb00 4003 	mla	r0, r0, r3, r4
 80a403e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a4042:	e7eb      	b.n	80a401c <_strtol_l.isra.0+0x5c>
 80a4044:	2c2b      	cmp	r4, #43	; 0x2b
 80a4046:	bf08      	it	eq
 80a4048:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a404c:	46a8      	mov	r8, r5
 80a404e:	bf08      	it	eq
 80a4050:	f100 0c02 	addeq.w	ip, r0, #2
 80a4054:	e7c8      	b.n	80a3fe8 <_strtol_l.isra.0+0x28>
 80a4056:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a405a:	2d19      	cmp	r5, #25
 80a405c:	d801      	bhi.n	80a4062 <_strtol_l.isra.0+0xa2>
 80a405e:	3c37      	subs	r4, #55	; 0x37
 80a4060:	e7e1      	b.n	80a4026 <_strtol_l.isra.0+0x66>
 80a4062:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a4066:	2d19      	cmp	r5, #25
 80a4068:	d804      	bhi.n	80a4074 <_strtol_l.isra.0+0xb4>
 80a406a:	3c57      	subs	r4, #87	; 0x57
 80a406c:	e7db      	b.n	80a4026 <_strtol_l.isra.0+0x66>
 80a406e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a4072:	e7e4      	b.n	80a403e <_strtol_l.isra.0+0x7e>
 80a4074:	1c73      	adds	r3, r6, #1
 80a4076:	d106      	bne.n	80a4086 <_strtol_l.isra.0+0xc6>
 80a4078:	2322      	movs	r3, #34	; 0x22
 80a407a:	4638      	mov	r0, r7
 80a407c:	f8ce 3000 	str.w	r3, [lr]
 80a4080:	b942      	cbnz	r2, 80a4094 <_strtol_l.isra.0+0xd4>
 80a4082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4086:	f1b8 0f00 	cmp.w	r8, #0
 80a408a:	d000      	beq.n	80a408e <_strtol_l.isra.0+0xce>
 80a408c:	4240      	negs	r0, r0
 80a408e:	2a00      	cmp	r2, #0
 80a4090:	d0f7      	beq.n	80a4082 <_strtol_l.isra.0+0xc2>
 80a4092:	b10e      	cbz	r6, 80a4098 <_strtol_l.isra.0+0xd8>
 80a4094:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a4098:	6011      	str	r1, [r2, #0]
 80a409a:	e7f2      	b.n	80a4082 <_strtol_l.isra.0+0xc2>
 80a409c:	2430      	movs	r4, #48	; 0x30
 80a409e:	2b00      	cmp	r3, #0
 80a40a0:	d1b3      	bne.n	80a400a <_strtol_l.isra.0+0x4a>
 80a40a2:	2308      	movs	r3, #8
 80a40a4:	e7b1      	b.n	80a400a <_strtol_l.isra.0+0x4a>
 80a40a6:	2c30      	cmp	r4, #48	; 0x30
 80a40a8:	d0a4      	beq.n	80a3ff4 <_strtol_l.isra.0+0x34>
 80a40aa:	230a      	movs	r3, #10
 80a40ac:	e7ad      	b.n	80a400a <_strtol_l.isra.0+0x4a>
 80a40ae:	bf00      	nop
 80a40b0:	080a46e2 	.word	0x080a46e2

080a40b4 <strtol>:
 80a40b4:	4613      	mov	r3, r2
 80a40b6:	460a      	mov	r2, r1
 80a40b8:	4601      	mov	r1, r0
 80a40ba:	4802      	ldr	r0, [pc, #8]	; (80a40c4 <strtol+0x10>)
 80a40bc:	6800      	ldr	r0, [r0, #0]
 80a40be:	f7ff bf7f 	b.w	80a3fc0 <_strtol_l.isra.0>
 80a40c2:	bf00      	nop
 80a40c4:	20000020 	.word	0x20000020

080a40c8 <dynalib_user>:
 80a40c8:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a40d8:	00000000 6c616e61 6176676f 0065756c     ....analogvalue.
 80a40e8:	6970612f 4547002f 55500054 75440054     /api/.GET.PUT.Du
 80a40f8:	7b006b73 226e6f22 7274203a 202c6575     sk.{"on": true, 
 80a4108:	65637322 3a22656e 70642220 53716152     "scene": "dpRaqS
 80a4118:	36487644 786e306d 202c2232 61727422     DvH6m0nx2", "tra
 80a4128:	7469736e 746e6f69 22656d69 3033203a     nsitiontime": 30
 80a4138:	7544007d 32206b73 6f227b00 203a226e     }.Dusk 2.{"on": 
 80a4148:	65757274 7322202c 656e6563 22203a22     true, "scene": "
 80a4158:	7750324f 446c5852 796c734c 22644941     O2PwRXlDLslyAId"
 80a4168:	7422202c 736e6172 6f697469 6d69746e     , "transitiontim
 80a4178:	203a2265 007d3033 6867694e 227b0074     e": 30}.Night.{"
 80a4188:	3a226e6f 75727420 22202c65 6e656373     on": true, "scen
 80a4198:	203a2265 49626222 3747412d 56586472     e": "bbI-AG7rdXV
 80a41a8:	49787956 22202c22 6e617274 69746973     VyxI", "transiti
 80a41b8:	69746e6f 3a22656d 7d303320 79614400     ontime": 30}.Day
 80a41c8:	59414400 6f227b00 203a226e 65757274     .DAY.{"on": true
 80a41d8:	7322202c 656e6563 22203a22 616d5976     , "scene": "vYma
 80a41e8:	52435975 46557a67 222d337a 7422202c     uYCRgzUFz3-", "t
 80a41f8:	736e6172 6f697469 6d69746e 203a2265     ransitiontime": 
 80a4208:	007d3033 6a486b61 72615879 647a5349     30}.akHjyXarISzd
 80a4218:	65364e6d 4c6a7234 7870356e 56497063     mN6e4rjLn5pxcpIV
 80a4228:	7a416967 5a47334f 6f312d6c 696c2f00     giAzO3GZl-1o./li
 80a4238:	73746867 2f00352f 756f7267 332f7370     ghts/5./groups/3
 80a4248:	7463612f 006e6f69 7473227b 22657461     /action.{"state"
 80a4258:	227b203a 22657568 3122203a 30303030     : {"hue": "10000
 80a4268:	007d7d22 6c6c756e 00000000              "}}.null....

080a4274 <_ZTVN5spark10LogHandlerE>:
	...
 80a4284:	080a00a5 080a00cb                       ........

080a428c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a4294:	080a014d 080a0181 080a27cd 080a00cd     M........'......

080a42a4 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
 80a42ac:	080a0101 080a0115 65636341 2a007470     ........Accept.*
 80a42bc:	20002a2f 50545448 302e312f 63000a0d     /*. HTTP/1.0...c
 80a42cc:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
 80a42dc:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
 80a42ec:	00687467 54534f50 0d0a0d00 0000000a     gth.POST........

080a42fc <_ZTV10JsonBuffer>:
	...
 80a4304:	080a0acd 080a0ae9                       ........

080a430c <_ZTV10JsonParser>:
	...
 80a4314:	080a0afd 080a0b21                       ....!...

080a431c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4324:	080a10bf 080a10c5 080a1115 080a10d3     ................
 80a4334:	080a10c1                                ....

080a4338 <_ZTV7TwoWire>:
	...
 80a4340:	080a1639 080a1683 080a165b 080a163b     9.......[...;...
 80a4350:	080a1663 080a166b 080a1673 080a167b     c...k...s...{...

080a4360 <_ZTV9IPAddress>:
	...
 80a4368:	080a16b5 080a00c9 080a0195 25006425     ............%d.%
 80a4378:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 80a4388:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 80a4398:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a43a8:	0072656c 00707061 30313025 5d002075     ler.app.%010u .]
 80a43b8:	202c0020 3a292800 5b200020 646f6300      ., .(): . [.cod
 80a43c8:	203d2065 00692500 61746564 20736c69     e = .%i.details 
 80a43d8:	6d00203d 66006300 006e6c00 63006e66     = .m.c.f.ln.fn.c
 80a43e8:	0065646f 61746564 00006c69              ode.detail..

080a43f4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a43fc:	080a1b57 080a1b7d 080a1b3d 080a179b     W...}...=.......

080a440c <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a4414:	080a1ff9 080a2011 080a27cd 080a00cd     ..... ...'......

080a4424 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a442c:	080a2025 080a2039 080a2975 080a1b45     % ..9 ..u)..E...

080a443c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a4444:	080a1b55 080a1b8b 080a2709 080a1b47     U........'..G...

080a4454 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a445c:	080a1b53 080a1b99 080a1f21 080a1bb5     S.......!.......

080a446c <_ZTVN5spark12NetworkClassE>:
	...
 80a4474:	080a2ae9 080a2af3 080a2afd 080a2b07     .*...*...*...+..
 80a4484:	080a2b11 080a2b1d 080a2b29 080a2b31     .+...+..)+..1+..
 80a4494:	080a2b39 080a2b45 080a2b4d 080a2b57     9+..E+..M+..W+..
 80a44a4:	080a2b61 69726977 5400676e 6c435043     a+..wiring.TCPCl
 80a44b4:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a44c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a44cc:	080a3039 080a3061 080a3483 080a306f     90..a0...4..o0..
 80a44dc:	080a303d                                =0..

080a44e0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a44e8 <_ZTV9TCPClient>:
	...
 80a44f0:	080a3075 080a30a9 080a2ff5 080a300f     u0...0.../...0..
 80a4500:	080a3285 080a310b 080a30dd 080a3037     .2...1...0..70..
 80a4510:	080a31a5 080a3489 080a313f 080a32f9     .1...4..?1...2..
 80a4520:	080a33a7 080a335f 080a301f 080a336d     .3.._3...0..m3..
 80a4530:	080a30bd 252d5925 64252d6d 3a482554     .0..%Y-%m-%dT%H:
 80a4540:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a4550 <_ZTV11USARTSerial>:
	...
 80a4558:	080a3509 080a3571 080a354d 080a2bdd     .5..q5..M5...+..
 80a4568:	080a351d 080a3539 080a352b 080a3547     .5..95..+5..G5..
 80a4578:	080a350b 080a350f                       .5...5..

080a4580 <_ZTV9USBSerial>:
	...
 80a4588:	080a3615 080a367b 080a3653 080a2bdd     .6..{6..S6...+..
 80a4598:	080a3645 080a3617 080a3627 080a3675     E6...6..'6..u6..
 80a45a8:	080a3637 080a3611                       76...6..

080a45b0 <_ZTVN5spark9WiFiClassE>:
	...
 80a45b8:	080a385b 080a3851 080a3847 080a37b9     [8..Q8..G8...7..
 80a45c8:	080a383b 080a382f 080a2b29 080a2b31     ;8../8..)+..1+..
 80a45d8:	080a3823 080a381b 080a3811 080a3807     #8...8...8...8..
 80a45e8:	080a37c3                                .7..

080a45ec <_ZSt7nothrow>:
	...

080a45ed <_ZTSSt19_Sp_make_shared_tag>:
 80a45ed:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a45fd:	5f646572 00676174                        red_tag....

080a4608 <_ZTISt19_Sp_make_shared_tag>:
 80a4608:	080a4648 080a45ed                       HF...E..

080a4610 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a4610:	080a46a8 080a461c 080a46cc              .F...F...F..

080a461c <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a461c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a462c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a463c:	00000045                                E...

080a4640 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a4640:	00000000 080a4610 080a3bfd 080a3c11     .....F...;...<..
 80a4650:	080a3da9 080a3da9 080a3c7b 080a3bbd     .=...=..{<...;..
 80a4660:	080a3c63 080a3c25 080a3bf1              c<..%<...;..

080a466c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a466c:	080a46a8 080a4678 080a4610              .F..xF...F..

080a4678 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a4678:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a4688:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a4698:	456f666e 00000000                       nfoE....

080a46a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a46a0:	00000000 080a466c 080a3ca5 080a3cb9     ....lF...<...<..
 80a46b0:	080a3da9 080a3da9 080a3c7b 080a3bbd     .=...=..{<...;..
 80a46c0:	080a3d7d 080a3d09 080a3ccd              }=...=...<..

080a46cc <_ZTISt9type_info>:
 80a46cc:	080a4648 080a46d4                       HF...F..

080a46d4 <_ZTSSt9type_info>:
 80a46d4:	74397453 5f657079 6f666e69               St9type_info.

080a46e1 <_ctype_>:
 80a46e1:	20202000 20202020 28282020 20282828     .         ((((( 
 80a46f1:	20202020 20202020 20202020 20202020                     
 80a4701:	10108820 10101010 10101010 10101010      ...............
 80a4711:	04040410 04040404 10040404 10101010     ................
 80a4721:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4731:	01010101 01010101 01010101 10101010     ................
 80a4741:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4751:	02020202 02020202 02020202 10101010     ................
 80a4761:	00000020 00000000 00000000 00000000      ...............
	...

080a47e2 <link_const_variable_data_end>:
	...

080a47e4 <link_constructors_location>:
 80a47e4:	080a05d5 	.word	0x080a05d5
 80a47e8:	080a27bd 	.word	0x080a27bd
 80a47ec:	080a2bc9 	.word	0x080a2bc9
 80a47f0:	080a2d0d 	.word	0x080a2d0d
 80a47f4:	080a2fb9 	.word	0x080a2fb9
 80a47f8:	080a34f5 	.word	0x080a34f5
 80a47fc:	080a3865 	.word	0x080a3865
 80a4800:	080a3b65 	.word	0x080a3b65

080a4804 <link_constructors_end>:
	...
