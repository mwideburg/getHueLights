
/Users/michaelwideburg/Desktop/getHueLights/getHueLights/target/2.1.0/photon/getHueLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004c94  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4cb0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a4cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000011c0  20000080  20000080  00040080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4d34  080a4d34  00034d34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4d5c  080a4d5c  00034d5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00144701  00000000  00000000  00034d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000177f7  00000000  00000000  00179461  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023b31  00000000  00000000  00190c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027b8  00000000  00000000  001b4789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000066c8  00000000  00000000  001b6f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029aa2  00000000  00000000  001bd609  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035ec7  00000000  00000000  001e70ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bb449  00000000  00000000  0021cf72  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006bf0  00000000  00000000  002d83bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f8ef 	bl	80a4210 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f911 	bl	80a4260 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4cb4 	.word	0x080a4cb4
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	20001240 	.word	0x20001240
 80a0058:	20001240 	.word	0x20001240

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fe85 	bl	80a3d6c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a4c90 	.word	0x080a4c90
 80a0080:	080a4cb0 	.word	0x080a4cb0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b89c 	b.w	80a01c0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 faa7 	bl	80a05dc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f003 be2d 	b.w	80a3cf0 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 b9ad 	b.w	80a13f4 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 b9ab 	b.w	80a13f4 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 b9b1 	b.w	80a1404 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f001 f8c6 	bl	80a123c <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0f79 	.word	0x080a0f79

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00cc:	6a00      	ldr	r0, [r0, #32]
 80a00ce:	6803      	ldr	r3, [r0, #0]
 80a00d0:	68db      	ldr	r3, [r3, #12]
 80a00d2:	4718      	bx	r3

080a00d4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	3004      	adds	r0, #4
 80a00da:	f003 f81e 	bl	80a311a <_ZN6StringD1Ev>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN14http_request_tD1Ev>:
} http_request_t;
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	303c      	adds	r0, #60	; 0x3c
 80a00e8:	f003 f817 	bl	80a311a <_ZN6StringD1Ev>
 80a00ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00f0:	f003 f813 	bl	80a311a <_ZN6StringD1Ev>
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f003 f810 	bl	80a311a <_ZN6StringD1Ev>
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	bd10      	pop	{r4, pc}
	...

080a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	4b02      	ldr	r3, [pc, #8]	; (80a0110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
 80a0106:	6003      	str	r3, [r0, #0]
 80a0108:	f000 fee2 	bl	80a0ed0 <_ZN10JsonParserD1Ev>
 80a010c:	4620      	mov	r0, r4
 80a010e:	bd10      	pop	{r4, pc}
 80a0110:	080a4758 	.word	0x080a4758

080a0114 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	f7ff fff2 	bl	80a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
 80a011c:	4620      	mov	r0, r4
 80a011e:	f240 714c 	movw	r1, #1868	; 0x74c
 80a0122:	f003 ff42 	bl	80a3faa <_ZdlPvj>
 80a0126:	4620      	mov	r0, r4
 80a0128:	bd10      	pop	{r4, pc}
	...

080a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a012c:	b513      	push	{r0, r1, r4, lr}
 80a012e:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0130:	4b04      	ldr	r3, [pc, #16]	; (80a0144 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a0132:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0134:	f88d 3000 	strb.w	r3, [sp]
 80a0138:	233c      	movs	r3, #60	; 0x3c
 80a013a:	f001 faf1 	bl	80a1720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a013e:	4620      	mov	r0, r4
 80a0140:	b002      	add	sp, #8
 80a0142:	bd10      	pop	{r4, pc}
 80a0144:	200000e4 	.word	0x200000e4

080a0148 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0148:	b510      	push	{r4, lr}
 80a014a:	4604      	mov	r4, r0
 80a014c:	4b09      	ldr	r3, [pc, #36]	; (80a0174 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a014e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0150:	f002 f830 	bl	80a21b4 <_ZN5spark10LogManager8instanceEv>
 80a0154:	4621      	mov	r1, r4
 80a0156:	f002 fa41 	bl	80a25dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a015a:	f003 fccd 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a015e:	f003 fcb1 	bl	80a3ac4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a0162:	4620      	mov	r0, r4
 80a0164:	4b04      	ldr	r3, [pc, #16]	; (80a0178 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a0166:	f840 3b04 	str.w	r3, [r0], #4
 80a016a:	f002 f925 	bl	80a23b8 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a016e:	4620      	mov	r0, r4
 80a0170:	bd10      	pop	{r4, pc}
 80a0172:	bf00      	nop
 80a0174:	080a4740 	.word	0x080a4740
 80a0178:	080a4728 	.word	0x080a4728

080a017c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a017c:	b510      	push	{r4, lr}
 80a017e:	4604      	mov	r4, r0
    }
 80a0180:	f7ff ffe2 	bl	80a0148 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0184:	4620      	mov	r0, r4
 80a0186:	2124      	movs	r1, #36	; 0x24
 80a0188:	f003 ff0f 	bl	80a3faa <_ZdlPvj>
 80a018c:	4620      	mov	r0, r4
 80a018e:	bd10      	pop	{r4, pc}

080a0190 <_ZN10CloudClass7publishEPKc.isra.0>:
inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a0190:	b513      	push	{r0, r1, r4, lr}
 80a0192:	4604      	mov	r4, r0
 80a0194:	4b05      	ldr	r3, [pc, #20]	; (80a01ac <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0196:	2200      	movs	r2, #0
 80a0198:	781b      	ldrb	r3, [r3, #0]
 80a019a:	f88d 3000 	strb.w	r3, [sp]
 80a019e:	233c      	movs	r3, #60	; 0x3c
 80a01a0:	f001 fabe 	bl	80a1720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	b002      	add	sp, #8
 80a01a8:	bd10      	pop	{r4, pc}
 80a01aa:	bf00      	nop
 80a01ac:	200000e4 	.word	0x200000e4

080a01b0 <_ZN9IPAddressD0Ev>:
 80a01b0:	b510      	push	{r4, lr}
 80a01b2:	4604      	mov	r4, r0
 80a01b4:	2118      	movs	r1, #24
 80a01b6:	f003 fef8 	bl	80a3faa <_ZdlPvj>
 80a01ba:	4620      	mov	r0, r4
 80a01bc:	bd10      	pop	{r4, pc}
	...

080a01c0 <setup>:
String hue2;
String reachableString;

    void
    setup()
{
 80a01c0:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a01c2:	4e10      	ldr	r6, [pc, #64]	; (80a0204 <setup+0x44>)
 80a01c4:	4d10      	ldr	r5, [pc, #64]	; (80a0208 <setup+0x48>)
 80a01c6:	f106 0414 	add.w	r4, r6, #20
 80a01ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01ce:	682b      	ldr	r3, [r5, #0]
 80a01d0:	7023      	strb	r3, [r4, #0]
  // Put initialization like pinMode and begin functions here.
  request.ip = hueIP;
  request.port = 80;
 80a01d2:	2350      	movs	r3, #80	; 0x50
 80a01d4:	63b3      	str	r3, [r6, #56]	; 0x38
  Serial.begin(9600);
 80a01d6:	f003 fc8f 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a01da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01de:	f003 fc6d 	bl	80a3abc <_ZN9USBSerial5beginEl>
  // First, declare all of our pins. This lets our device know which ones
  // will be used for outputting voltage, and which ones will read
  // incoming voltage.
  pinMode(LED_PIN, OUTPUT); // Our LED pin is output (lighting up the LED)
 80a01e2:	2101      	movs	r1, #1
 80a01e4:	2006      	movs	r0, #6
 80a01e6:	f003 fe41 	bl	80a3e6c <pinMode>
  digitalWrite(LED_PIN, LOW);
 80a01ea:	2100      	movs	r1, #0
 80a01ec:	2006      	movs	r0, #6
 80a01ee:	f003 fe4e 	bl	80a3e8e <digitalWrite>

  // We are going to declare a Particle.variable() here so that we can
  // access the value of the photosensor from the cloud.
  Particle.variable("analogvalue", analogvalue);
}
 80a01f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a01f6:	2300      	movs	r3, #0
 80a01f8:	2202      	movs	r2, #2
 80a01fa:	4904      	ldr	r1, [pc, #16]	; (80a020c <setup+0x4c>)
 80a01fc:	4804      	ldr	r0, [pc, #16]	; (80a0210 <setup+0x50>)
 80a01fe:	f001 b879 	b.w	80a12f4 <spark_variable>
 80a0202:	bf00      	nop
 80a0204:	20000cd0 	.word	0x20000cd0
 80a0208:	20000524 	.word	0x20000524
 80a020c:	200000e8 	.word	0x200000e8
 80a0210:	080a44e8 	.word	0x080a44e8

080a0214 <_Z12setHueLights6String>:
  Serial.println("count");
  Serial.println(count);
  Serial.println("------------------");
}

void setHueLights(String command){
 80a0214:	b530      	push	{r4, r5, lr}
 80a0216:	b087      	sub	sp, #28
 80a0218:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a021a:	4911      	ldr	r1, [pc, #68]	; (80a0260 <_Z12setHueLights6String+0x4c>)
 80a021c:	a802      	add	r0, sp, #8
 80a021e:	f002 ffc6 	bl	80a31ae <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + LIGHT_PATH;
 80a0222:	4910      	ldr	r1, [pc, #64]	; (80a0264 <_Z12setHueLights6String+0x50>)
 80a0224:	a802      	add	r0, sp, #8
 80a0226:	f003 f84b 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a022a:	490f      	ldr	r1, [pc, #60]	; (80a0268 <_Z12setHueLights6String+0x54>)
 80a022c:	f003 f848 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a0230:	4c0e      	ldr	r4, [pc, #56]	; (80a026c <_Z12setHueLights6String+0x58>)
 80a0232:	4601      	mov	r1, r0
 80a0234:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0238:	f002 fff4 	bl	80a3224 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a023c:	a802      	add	r0, sp, #8
 80a023e:	f002 ff6c 	bl	80a311a <_ZN6StringD1Ev>
  request.body = command;
 80a0242:	4629      	mov	r1, r5
 80a0244:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0248:	f002 ffec 	bl	80a3224 <_ZN6StringaSERKS_>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
 80a024c:	4b08      	ldr	r3, [pc, #32]	; (80a0270 <_Z12setHueLights6String+0x5c>)
 80a024e:	4621      	mov	r1, r4
 80a0250:	9300      	str	r3, [sp, #0]
 80a0252:	4a08      	ldr	r2, [pc, #32]	; (80a0274 <_Z12setHueLights6String+0x60>)
 80a0254:	4b08      	ldr	r3, [pc, #32]	; (80a0278 <_Z12setHueLights6String+0x64>)
 80a0256:	4809      	ldr	r0, [pc, #36]	; (80a027c <_Z12setHueLights6String+0x68>)
 80a0258:	f000 fcfc 	bl	80a0c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  http.put(request, response, headers);

}
 80a025c:	b007      	add	sp, #28
 80a025e:	bd30      	pop	{r4, r5, pc}
 80a0260:	080a44f4 	.word	0x080a44f4
 80a0264:	200000a4 	.word	0x200000a4
 80a0268:	20000084 	.word	0x20000084
 80a026c:	20000cd0 	.word	0x20000cd0
 80a0270:	080a44fa 	.word	0x080a44fa
 80a0274:	20000d1c 	.word	0x20000d1c
 80a0278:	20000000 	.word	0x20000000
 80a027c:	200000f0 	.word	0x200000f0

080a0280 <_Z19numTimesLoopCommand6String>:

void numTimesLoopCommand(String command)
{
 80a0280:	b530      	push	{r4, r5, lr}
 80a0282:	4605      	mov	r5, r0
 80a0284:	2405      	movs	r4, #5
 80a0286:	b085      	sub	sp, #20
  for (int i = 0; i < 5; i++)
  {
    setHueLights(command);
 80a0288:	4629      	mov	r1, r5
 80a028a:	4668      	mov	r0, sp
 80a028c:	f002 ffd9 	bl	80a3242 <_ZN6StringC1ERKS_>
 80a0290:	4668      	mov	r0, sp
 80a0292:	f7ff ffbf 	bl	80a0214 <_Z12setHueLights6String>
 80a0296:	4668      	mov	r0, sp
 80a0298:	f002 ff3f 	bl	80a311a <_ZN6StringD1Ev>
    delay(200);
 80a029c:	20c8      	movs	r0, #200	; 0xc8
 80a029e:	f001 f8e1 	bl	80a1464 <delay>
  for (int i = 0; i < 5; i++)
 80a02a2:	3c01      	subs	r4, #1
 80a02a4:	d1f0      	bne.n	80a0288 <_Z19numTimesLoopCommand6String+0x8>
  }
 80a02a6:	b005      	add	sp, #20
 80a02a8:	bd30      	pop	{r4, r5, pc}

080a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a02aa:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a02ac:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a02ae:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a02b0:	b17c      	cbz	r4, 80a02d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a02b2:	6863      	ldr	r3, [r4, #4]
 80a02b4:	3b01      	subs	r3, #1
 80a02b6:	6063      	str	r3, [r4, #4]
 80a02b8:	b95b      	cbnz	r3, 80a02d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a02ba:	6823      	ldr	r3, [r4, #0]
 80a02bc:	4620      	mov	r0, r4
 80a02be:	689b      	ldr	r3, [r3, #8]
 80a02c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02c2:	68a3      	ldr	r3, [r4, #8]
 80a02c4:	3b01      	subs	r3, #1
 80a02c6:	60a3      	str	r3, [r4, #8]
 80a02c8:	b91b      	cbnz	r3, 80a02d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a02ca:	6823      	ldr	r3, [r4, #0]
 80a02cc:	4620      	mov	r0, r4
 80a02ce:	68db      	ldr	r3, [r3, #12]
 80a02d0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a02d2:	4628      	mov	r0, r5
 80a02d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02d8 <_ZN10HttpClientD1Ev>:
class HttpClient {
 80a02d8:	b510      	push	{r4, lr}
 80a02da:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a02dc:	4b03      	ldr	r3, [pc, #12]	; (80a02ec <_ZN10HttpClientD1Ev+0x14>)
 80a02de:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a02e2:	f7ff ffe2 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02e6:	4620      	mov	r0, r4
 80a02e8:	bd10      	pop	{r4, pc}
 80a02ea:	bf00      	nop
 80a02ec:	080a499c 	.word	0x080a499c

080a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a02f2:	2614      	movs	r6, #20
 80a02f4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a02fa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a02fe:	42ae      	cmp	r6, r5
 80a0300:	d004      	beq.n	80a030c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a0302:	4628      	mov	r0, r5
 80a0304:	f002 ff09 	bl	80a311a <_ZN6StringD1Ev>
 80a0308:	3514      	adds	r5, #20
 80a030a:	e7f8      	b.n	80a02fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a030c:	6820      	ldr	r0, [r4, #0]
 80a030e:	f001 f879 	bl	80a1404 <free>
    AllocatorT::free(data_);
}
 80a0312:	4620      	mov	r0, r4
 80a0314:	bd70      	pop	{r4, r5, r6, pc}

080a0316 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 80a0316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0318:	4605      	mov	r5, r0
 80a031a:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a031c:	4616      	mov	r6, r2
 80a031e:	b94a      	cbnz	r2, 80a0334 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
 80a0320:	6803      	ldr	r3, [r0, #0]
 80a0322:	b2c9      	uxtb	r1, r1
 80a0324:	689b      	ldr	r3, [r3, #8]
 80a0326:	4798      	blx	r3
 80a0328:	4607      	mov	r7, r0
        n += println();
 80a032a:	4628      	mov	r0, r5
 80a032c:	f002 fe6d 	bl	80a300a <_ZN5Print7printlnEv>
    }
 80a0330:	4438      	add	r0, r7
 80a0332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0334:	2900      	cmp	r1, #0
 80a0336:	da0c      	bge.n	80a0352 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
 80a0338:	2a0a      	cmp	r2, #10
 80a033a:	d10a      	bne.n	80a0352 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
 80a033c:	212d      	movs	r1, #45	; 0x2d
 80a033e:	f002 fe61 	bl	80a3004 <_ZN5Print5printEc>
 80a0342:	4607      	mov	r7, r0
            val = -n;
 80a0344:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0346:	4628      	mov	r0, r5
 80a0348:	b2f2      	uxtb	r2, r6
 80a034a:	f002 fe74 	bl	80a3036 <_ZN5Print11printNumberEmh>
 80a034e:	4407      	add	r7, r0
 80a0350:	e7eb      	b.n	80a032a <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
 80a0352:	4621      	mov	r1, r4
        size_t t = 0;
 80a0354:	2700      	movs	r7, #0
 80a0356:	e7f6      	b.n	80a0346 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

080a0358 <_ZN5Print7printlnIbLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80a0358:	b538      	push	{r3, r4, r5, lr}
 80a035a:	4605      	mov	r5, r0
    if (base == 0) {
 80a035c:	b942      	cbnz	r2, 80a0370 <_ZN5Print7printlnIbLi0EEEjT_i+0x18>
        return write(n);
 80a035e:	6803      	ldr	r3, [r0, #0]
 80a0360:	689b      	ldr	r3, [r3, #8]
 80a0362:	4798      	blx	r3
        return printNumber(val, base) + t;
 80a0364:	4604      	mov	r4, r0
        n += println();
 80a0366:	4628      	mov	r0, r5
 80a0368:	f002 fe4f 	bl	80a300a <_ZN5Print7printlnEv>
    }
 80a036c:	4420      	add	r0, r4
 80a036e:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80a0370:	b2d2      	uxtb	r2, r2
 80a0372:	f002 fe60 	bl	80a3036 <_ZN5Print11printNumberEmh>
 80a0376:	e7f5      	b.n	80a0364 <_ZN5Print7printlnIbLi0EEEjT_i+0xc>

080a0378 <_Z9getLightsv>:
void getLights(){
 80a0378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a037c:	b08d      	sub	sp, #52	; 0x34
	StringSumHelper(const char *p) : String(p) {}
 80a037e:	4980      	ldr	r1, [pc, #512]	; (80a0580 <_Z9getLightsv+0x208>)
 80a0380:	a808      	add	r0, sp, #32
 80a0382:	f002 ff14 	bl	80a31ae <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + BEDROOM_PATH;
 80a0386:	497f      	ldr	r1, [pc, #508]	; (80a0584 <_Z9getLightsv+0x20c>)
 80a0388:	a808      	add	r0, sp, #32
 80a038a:	f002 ff99 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a038e:	497e      	ldr	r1, [pc, #504]	; (80a0588 <_Z9getLightsv+0x210>)
 80a0390:	f002 ff96 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a0394:	4d7d      	ldr	r5, [pc, #500]	; (80a058c <_Z9getLightsv+0x214>)
 80a0396:	4601      	mov	r1, r0
 80a0398:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80a039c:	f002 ff42 	bl	80a3224 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a03a0:	a808      	add	r0, sp, #32
 80a03a2:	f002 feba 	bl	80a311a <_ZN6StringD1Ev>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
 80a03a6:	4c7a      	ldr	r4, [pc, #488]	; (80a0590 <_Z9getLightsv+0x218>)
 80a03a8:	4b7a      	ldr	r3, [pc, #488]	; (80a0594 <_Z9getLightsv+0x21c>)
 80a03aa:	4622      	mov	r2, r4
 80a03ac:	4629      	mov	r1, r5
 80a03ae:	9300      	str	r3, [sp, #0]
 80a03b0:	4879      	ldr	r0, [pc, #484]	; (80a0598 <_Z9getLightsv+0x220>)
 80a03b2:	4b7a      	ldr	r3, [pc, #488]	; (80a059c <_Z9getLightsv+0x224>)
 80a03b4:	f000 fc4e 	bl	80a0c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  Serial.println(lightStatus);
 80a03b8:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80a05d4 <_Z9getLightsv+0x25c>
  String data = response.body.c_str();
 80a03bc:	6861      	ldr	r1, [r4, #4]
 80a03be:	a804      	add	r0, sp, #16
 80a03c0:	f002 fef5 	bl	80a31ae <_ZN6StringC1EPKc>
  Serial.println("Full Data");
 80a03c4:	f003 fb98 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a03c8:	4975      	ldr	r1, [pc, #468]	; (80a05a0 <_Z9getLightsv+0x228>)
 80a03ca:	f002 fe2a 	bl	80a3022 <_ZN5Print7printlnEPKc>
  Serial.println(lightStatus);
 80a03ce:	f003 fb93 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a03d2:	220a      	movs	r2, #10
 80a03d4:	f898 1000 	ldrb.w	r1, [r8]
 80a03d8:	f7ff ffbe 	bl	80a0358 <_ZN5Print7printlnIbLi0EEEjT_i>
  count ++;
 80a03dc:	4d71      	ldr	r5, [pc, #452]	; (80a05a4 <_Z9getLightsv+0x22c>)
  Serial.println(data);
 80a03de:	f003 fb8b 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a03e2:	9904      	ldr	r1, [sp, #16]
 80a03e4:	f002 fe1d 	bl	80a3022 <_ZN5Print7printlnEPKc>
  Serial.println();
 80a03e8:	f003 fb86 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a03ec:	f002 fe0d 	bl	80a300a <_ZN5Print7printlnEv>
  count ++;
 80a03f0:	682b      	ldr	r3, [r5, #0]
  Serial.println("count");
 80a03f2:	4f6d      	ldr	r7, [pc, #436]	; (80a05a8 <_Z9getLightsv+0x230>)
  count ++;
 80a03f4:	3301      	adds	r3, #1
 80a03f6:	602b      	str	r3, [r5, #0]
  Serial.println("------------------");
 80a03f8:	4e6c      	ldr	r6, [pc, #432]	; (80a05ac <_Z9getLightsv+0x234>)
  Serial.println("count");
 80a03fa:	f003 fb7d 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a03fe:	4639      	mov	r1, r7
 80a0400:	f002 fe0f 	bl	80a3022 <_ZN5Print7printlnEPKc>
  Serial.println(count);
 80a0404:	f003 fb78 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0408:	220a      	movs	r2, #10
 80a040a:	6829      	ldr	r1, [r5, #0]
 80a040c:	f7ff ff83 	bl	80a0316 <_ZN5Print7printlnIiLi0EEEjT_i>
  Serial.println("------------------");
 80a0410:	f003 fb72 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0414:	4631      	mov	r1, r6
 80a0416:	f002 fe04 	bl	80a3022 <_ZN5Print7printlnEPKc>
  int pos = data.indexOf("h") + 5;
 80a041a:	4965      	ldr	r1, [pc, #404]	; (80a05b0 <_Z9getLightsv+0x238>)
 80a041c:	a808      	add	r0, sp, #32
 80a041e:	f002 fec6 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0422:	a908      	add	r1, sp, #32
 80a0424:	a804      	add	r0, sp, #16
 80a0426:	f002 ff8c 	bl	80a3342 <_ZNK6String7indexOfERKS_>
 80a042a:	4604      	mov	r4, r0
 80a042c:	a808      	add	r0, sp, #32
 80a042e:	f104 0905 	add.w	r9, r4, #5
  hue = data.substring(pos, pos + 4).toInt();
 80a0432:	3409      	adds	r4, #9
  int pos = data.indexOf("h") + 5;
 80a0434:	f002 fe71 	bl	80a311a <_ZN6StringD1Ev>
  hue = data.substring(pos, pos + 4).toInt();
 80a0438:	464a      	mov	r2, r9
 80a043a:	a904      	add	r1, sp, #16
 80a043c:	4623      	mov	r3, r4
 80a043e:	a808      	add	r0, sp, #32
 80a0440:	f002 ff82 	bl	80a3348 <_ZNK6String9substringEjj>
 80a0444:	a808      	add	r0, sp, #32
 80a0446:	f002 ffa8 	bl	80a339a <_ZNK6String5toIntEv>
 80a044a:	4b5a      	ldr	r3, [pc, #360]	; (80a05b4 <_Z9getLightsv+0x23c>)
  int reachIdx = data.indexOf("reachable") + 11;
 80a044c:	f8df a188 	ldr.w	sl, [pc, #392]	; 80a05d8 <_Z9getLightsv+0x260>
  hue = data.substring(pos, pos + 4).toInt();
 80a0450:	6018      	str	r0, [r3, #0]
 80a0452:	a808      	add	r0, sp, #32
 80a0454:	f002 fe61 	bl	80a311a <_ZN6StringD1Ev>
  Particle.publish("HUE", data.substring(pos, pos + 4));
 80a0458:	4623      	mov	r3, r4
 80a045a:	464a      	mov	r2, r9
 80a045c:	a904      	add	r1, sp, #16
 80a045e:	a808      	add	r0, sp, #32
 80a0460:	f002 ff72 	bl	80a3348 <_ZNK6String9substringEjj>
 80a0464:	9a08      	ldr	r2, [sp, #32]
 80a0466:	4954      	ldr	r1, [pc, #336]	; (80a05b8 <_Z9getLightsv+0x240>)
 80a0468:	a802      	add	r0, sp, #8
 80a046a:	f7ff fe5f 	bl	80a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a046e:	a803      	add	r0, sp, #12
 80a0470:	f7ff ff1b 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0474:	a808      	add	r0, sp, #32
 80a0476:	f002 fe50 	bl	80a311a <_ZN6StringD1Ev>
  hue2 = data.substring(pos, pos + 4);
 80a047a:	4623      	mov	r3, r4
 80a047c:	4c4f      	ldr	r4, [pc, #316]	; (80a05bc <_Z9getLightsv+0x244>)
 80a047e:	464a      	mov	r2, r9
 80a0480:	a904      	add	r1, sp, #16
 80a0482:	a808      	add	r0, sp, #32
 80a0484:	f002 ff60 	bl	80a3348 <_ZNK6String9substringEjj>
 80a0488:	a908      	add	r1, sp, #32
 80a048a:	4620      	mov	r0, r4
 80a048c:	f002 fee4 	bl	80a3258 <_ZN6StringaSEOS_>
 80a0490:	a808      	add	r0, sp, #32
 80a0492:	f002 fe42 	bl	80a311a <_ZN6StringD1Ev>
  Particle.publish("HUE2", hue2);
 80a0496:	6822      	ldr	r2, [r4, #0]
 80a0498:	4949      	ldr	r1, [pc, #292]	; (80a05c0 <_Z9getLightsv+0x248>)
 80a049a:	a808      	add	r0, sp, #32
 80a049c:	f7ff fe46 	bl	80a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a04a0:	a809      	add	r0, sp, #36	; 0x24
 80a04a2:	f7ff ff02 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  int reachIdx = data.indexOf("reachable") + 11;
 80a04a6:	4651      	mov	r1, sl
 80a04a8:	a808      	add	r0, sp, #32
 80a04aa:	f002 fe80 	bl	80a31ae <_ZN6StringC1EPKc>
 80a04ae:	a908      	add	r1, sp, #32
 80a04b0:	a804      	add	r0, sp, #16
 80a04b2:	f002 ff46 	bl	80a3342 <_ZNK6String7indexOfERKS_>
 80a04b6:	4604      	mov	r4, r0
 80a04b8:	a808      	add	r0, sp, #32
 80a04ba:	f104 090b 	add.w	r9, r4, #11
  reachableString = data.substring(reachIdx, reachIdx + 5);
 80a04be:	f104 0b10 	add.w	fp, r4, #16
  int reachIdx = data.indexOf("reachable") + 11;
 80a04c2:	f002 fe2a 	bl	80a311a <_ZN6StringD1Ev>
  reachableString = data.substring(reachIdx, reachIdx + 5);
 80a04c6:	465b      	mov	r3, fp
 80a04c8:	464a      	mov	r2, r9
 80a04ca:	a904      	add	r1, sp, #16
 80a04cc:	a808      	add	r0, sp, #32
 80a04ce:	f002 ff3b 	bl	80a3348 <_ZNK6String9substringEjj>
 80a04d2:	a908      	add	r1, sp, #32
 80a04d4:	483b      	ldr	r0, [pc, #236]	; (80a05c4 <_Z9getLightsv+0x24c>)
 80a04d6:	f002 febf 	bl	80a3258 <_ZN6StringaSEOS_>
 80a04da:	a808      	add	r0, sp, #32
 80a04dc:	f002 fe1d 	bl	80a311a <_ZN6StringD1Ev>
  reachable = data.substring(reachIdx, reachIdx + 5) == "true";
 80a04e0:	464a      	mov	r2, r9
 80a04e2:	465b      	mov	r3, fp
 80a04e4:	a904      	add	r1, sp, #16
 80a04e6:	a808      	add	r0, sp, #32
 80a04e8:	f002 ff2e 	bl	80a3348 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a04ec:	4936      	ldr	r1, [pc, #216]	; (80a05c8 <_Z9getLightsv+0x250>)
 80a04ee:	a808      	add	r0, sp, #32
 80a04f0:	f002 ff06 	bl	80a3300 <_ZNK6String6equalsEPKc>
 80a04f4:	3800      	subs	r0, #0
 80a04f6:	bf18      	it	ne
 80a04f8:	2001      	movne	r0, #1
 80a04fa:	4b34      	ldr	r3, [pc, #208]	; (80a05cc <_Z9getLightsv+0x254>)
 80a04fc:	7018      	strb	r0, [r3, #0]
 80a04fe:	a808      	add	r0, sp, #32
 80a0500:	f002 fe0b 	bl	80a311a <_ZN6StringD1Ev>
  Particle.publish("reachable", data.substring(reachIdx, reachIdx + 4));
 80a0504:	f104 030f 	add.w	r3, r4, #15
 80a0508:	464a      	mov	r2, r9
 80a050a:	a904      	add	r1, sp, #16
 80a050c:	a808      	add	r0, sp, #32
 80a050e:	f002 ff1b 	bl	80a3348 <_ZNK6String9substringEjj>
 80a0512:	9a08      	ldr	r2, [sp, #32]
 80a0514:	4651      	mov	r1, sl
 80a0516:	a802      	add	r0, sp, #8
 80a0518:	f7ff fe08 	bl	80a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a051c:	a803      	add	r0, sp, #12
 80a051e:	f7ff fec4 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0522:	a808      	add	r0, sp, #32
 80a0524:	f002 fdf9 	bl	80a311a <_ZN6StringD1Ev>
  delay(1000);
 80a0528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a052c:	f000 ff9a 	bl	80a1464 <delay>
  lightStatus = true;
 80a0530:	2301      	movs	r3, #1
 80a0532:	f888 3000 	strb.w	r3, [r8]
  Serial.println("2 seconds");
 80a0536:	f003 fadf 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a053a:	4925      	ldr	r1, [pc, #148]	; (80a05d0 <_Z9getLightsv+0x258>)
 80a053c:	f002 fd71 	bl	80a3022 <_ZN5Print7printlnEPKc>
  Serial.println(lightStatus);
 80a0540:	f003 fada 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0544:	220a      	movs	r2, #10
 80a0546:	f898 1000 	ldrb.w	r1, [r8]
 80a054a:	f7ff ff05 	bl	80a0358 <_ZN5Print7printlnIbLi0EEEjT_i>
  count++ ;
 80a054e:	682b      	ldr	r3, [r5, #0]
 80a0550:	3301      	adds	r3, #1
 80a0552:	602b      	str	r3, [r5, #0]
  Serial.println("count");
 80a0554:	f003 fad0 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0558:	4639      	mov	r1, r7
 80a055a:	f002 fd62 	bl	80a3022 <_ZN5Print7printlnEPKc>
  Serial.println(count);
 80a055e:	f003 facb 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0562:	220a      	movs	r2, #10
 80a0564:	6829      	ldr	r1, [r5, #0]
 80a0566:	f7ff fed6 	bl	80a0316 <_ZN5Print7printlnIiLi0EEEjT_i>
  Serial.println("------------------");
 80a056a:	f003 fac5 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a056e:	4631      	mov	r1, r6
 80a0570:	f002 fd57 	bl	80a3022 <_ZN5Print7printlnEPKc>
  String data = response.body.c_str();
 80a0574:	a804      	add	r0, sp, #16
 80a0576:	f002 fdd0 	bl	80a311a <_ZN6StringD1Ev>
}
 80a057a:	b00d      	add	sp, #52	; 0x34
 80a057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0580:	080a44f4 	.word	0x080a44f4
 80a0584:	200000a4 	.word	0x200000a4
 80a0588:	200000b4 	.word	0x200000b4
 80a058c:	20000cd0 	.word	0x20000cd0
 80a0590:	20000d1c 	.word	0x20000d1c
 80a0594:	080a44fe 	.word	0x080a44fe
 80a0598:	200000f0 	.word	0x200000f0
 80a059c:	20000000 	.word	0x20000000
 80a05a0:	080a4502 	.word	0x080a4502
 80a05a4:	200000ec 	.word	0x200000ec
 80a05a8:	080a450c 	.word	0x080a450c
 80a05ac:	080a4512 	.word	0x080a4512
 80a05b0:	080a479a 	.word	0x080a479a
 80a05b4:	2000050c 	.word	0x2000050c
 80a05b8:	080a4525 	.word	0x080a4525
 80a05bc:	20000510 	.word	0x20000510
 80a05c0:	080a4529 	.word	0x080a4529
 80a05c4:	20000cc0 	.word	0x20000cc0
 80a05c8:	080a4538 	.word	0x080a4538
 80a05cc:	20000cbc 	.word	0x20000cbc
 80a05d0:	080a453d 	.word	0x080a453d
 80a05d4:	20000548 	.word	0x20000548
 80a05d8:	080a452e 	.word	0x080a452e

080a05dc <loop>:
void loop() {
 80a05dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    analogvalue = analogRead(SENSOR_PIN);
 80a05e0:	200a      	movs	r0, #10
void loop() {
 80a05e2:	b095      	sub	sp, #84	; 0x54
    analogvalue = analogRead(SENSOR_PIN);
 80a05e4:	f003 fc6c 	bl	80a3ec0 <analogRead>
    lightStatus = false;
 80a05e8:	2300      	movs	r3, #0
    analogvalue = analogRead(SENSOR_PIN);
 80a05ea:	4e96      	ldr	r6, [pc, #600]	; (80a0844 <loop+0x268>)
    lightStatus = false;
 80a05ec:	4f96      	ldr	r7, [pc, #600]	; (80a0848 <loop+0x26c>)
    Serial.println(hue);
 80a05ee:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 80a08ac <loop+0x2d0>
    lightStatus = false;
 80a05f2:	703b      	strb	r3, [r7, #0]
    analogvalue = analogRead(SENSOR_PIN);
 80a05f4:	6030      	str	r0, [r6, #0]
    getLights();
 80a05f6:	f7ff febf 	bl	80a0378 <_Z9getLightsv>
    Serial.println("HUE DATA");
 80a05fa:	f003 fa7d 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a05fe:	4993      	ldr	r1, [pc, #588]	; (80a084c <loop+0x270>)
 80a0600:	f002 fd0f 	bl	80a3022 <_ZN5Print7printlnEPKc>
    Serial.println(hue);
 80a0604:	f003 fa78 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0608:	220a      	movs	r2, #10
 80a060a:	f8d8 1000 	ldr.w	r1, [r8]
 80a060e:	f7ff fe82 	bl	80a0316 <_ZN5Print7printlnIiLi0EEEjT_i>
    count++;
 80a0612:	4c8f      	ldr	r4, [pc, #572]	; (80a0850 <loop+0x274>)
    Serial.println();
 80a0614:	f003 fa70 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0618:	f002 fcf7 	bl	80a300a <_ZN5Print7printlnEv>
    Serial.println(lightStatus);
 80a061c:	f003 fa6c 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0620:	220a      	movs	r2, #10
 80a0622:	7839      	ldrb	r1, [r7, #0]
 80a0624:	f7ff fe98 	bl	80a0358 <_ZN5Print7printlnIbLi0EEEjT_i>
    count++;
 80a0628:	6823      	ldr	r3, [r4, #0]
 80a062a:	46b1      	mov	r9, r6
 80a062c:	3301      	adds	r3, #1
 80a062e:	6023      	str	r3, [r4, #0]
    Serial.println("count");
 80a0630:	f003 fa62 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a0634:	4987      	ldr	r1, [pc, #540]	; (80a0854 <loop+0x278>)
 80a0636:	f002 fcf4 	bl	80a3022 <_ZN5Print7printlnEPKc>
    Serial.println(count);
 80a063a:	f003 fa5d 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a063e:	220a      	movs	r2, #10
 80a0640:	6821      	ldr	r1, [r4, #0]
 80a0642:	f7ff fe68 	bl	80a0316 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("------------------");
 80a0646:	f003 fa57 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a064a:	4983      	ldr	r1, [pc, #524]	; (80a0858 <loop+0x27c>)
 80a064c:	f002 fce9 	bl	80a3022 <_ZN5Print7printlnEPKc>
      if (analogvalue < 18)
 80a0650:	6833      	ldr	r3, [r6, #0]
 80a0652:	2b11      	cmp	r3, #17
 80a0654:	dc7d      	bgt.n	80a0752 <loop+0x176>
        String hueString = (hue == 8418 )? "true" : "false";
 80a0656:	f242 0ae2 	movw	sl, #8418	; 0x20e2
        Particle.publish("Hit conditional");
 80a065a:	4980      	ldr	r1, [pc, #512]	; (80a085c <loop+0x280>)
 80a065c:	a810      	add	r0, sp, #64	; 0x40
 80a065e:	f7ff fd97 	bl	80a0190 <_ZN10CloudClass7publishEPKc.isra.0>
 80a0662:	a811      	add	r0, sp, #68	; 0x44
 80a0664:	f7ff fe21 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        operator const char*() const { return c_str(); }
 80a0668:	4b7d      	ldr	r3, [pc, #500]	; (80a0860 <loop+0x284>)
        Particle.publish("reach check", reachableString);
 80a066a:	497e      	ldr	r1, [pc, #504]	; (80a0864 <loop+0x288>)
 80a066c:	681a      	ldr	r2, [r3, #0]
        String reach = (reachable == true )? "true" : "false";
 80a066e:	f8df b240 	ldr.w	fp, [pc, #576]	; 80a08b0 <loop+0x2d4>
        Particle.publish("reach check", reachableString);
 80a0672:	a810      	add	r0, sp, #64	; 0x40
 80a0674:	f7ff fd5a 	bl	80a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0678:	a811      	add	r0, sp, #68	; 0x44
 80a067a:	f7ff fe16 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        String reach = (reachable == true )? "true" : "false";
 80a067e:	4e7a      	ldr	r6, [pc, #488]	; (80a0868 <loop+0x28c>)
        getLights();
 80a0680:	f7ff fe7a 	bl	80a0378 <_Z9getLightsv>
        String reach = (reachable == true )? "true" : "false";
 80a0684:	4d79      	ldr	r5, [pc, #484]	; (80a086c <loop+0x290>)
 80a0686:	f89b 1000 	ldrb.w	r1, [fp]
 80a068a:	4668      	mov	r0, sp
 80a068c:	2900      	cmp	r1, #0
 80a068e:	bf14      	ite	ne
 80a0690:	4631      	movne	r1, r6
 80a0692:	4629      	moveq	r1, r5
 80a0694:	f002 fd8b 	bl	80a31ae <_ZN6StringC1EPKc>
        String hueString = (hue == 8418 )? "true" : "false";
 80a0698:	f8d8 1000 	ldr.w	r1, [r8]
 80a069c:	a804      	add	r0, sp, #16
 80a069e:	4551      	cmp	r1, sl
 80a06a0:	bf0c      	ite	eq
 80a06a2:	4631      	moveq	r1, r6
 80a06a4:	4629      	movne	r1, r5
 80a06a6:	f002 fd82 	bl	80a31ae <_ZN6StringC1EPKc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a06aa:	4971      	ldr	r1, [pc, #452]	; (80a0870 <loop+0x294>)
 80a06ac:	4871      	ldr	r0, [pc, #452]	; (80a0874 <loop+0x298>)
 80a06ae:	f002 fe27 	bl	80a3300 <_ZNK6String6equalsEPKc>
        String hue2String = (hue2 == "376,") ? "true" : "false";
 80a06b2:	2800      	cmp	r0, #0
 80a06b4:	bf14      	ite	ne
 80a06b6:	4631      	movne	r1, r6
 80a06b8:	4629      	moveq	r1, r5
 80a06ba:	a808      	add	r0, sp, #32
 80a06bc:	f002 fd77 	bl	80a31ae <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 80a06c0:	4669      	mov	r1, sp
 80a06c2:	a810      	add	r0, sp, #64	; 0x40
 80a06c4:	f002 fdbd 	bl	80a3242 <_ZN6StringC1ERKS_>
        Particle.publish("Reachable, hueString, hue2 String", reach + " " + hueString + " " + hue2String);
 80a06c8:	496b      	ldr	r1, [pc, #428]	; (80a0878 <loop+0x29c>)
 80a06ca:	a810      	add	r0, sp, #64	; 0x40
 80a06cc:	f002 fe04 	bl	80a32d8 <_ZplRK15StringSumHelperPKc>
 80a06d0:	a904      	add	r1, sp, #16
 80a06d2:	f002 fdf5 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a06d6:	4968      	ldr	r1, [pc, #416]	; (80a0878 <loop+0x29c>)
 80a06d8:	f002 fdfe 	bl	80a32d8 <_ZplRK15StringSumHelperPKc>
 80a06dc:	a908      	add	r1, sp, #32
 80a06de:	f002 fdef 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a06e2:	4966      	ldr	r1, [pc, #408]	; (80a087c <loop+0x2a0>)
 80a06e4:	6802      	ldr	r2, [r0, #0]
 80a06e6:	a80c      	add	r0, sp, #48	; 0x30
 80a06e8:	f7ff fd20 	bl	80a012c <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a06ec:	a80d      	add	r0, sp, #52	; 0x34
 80a06ee:	f7ff fddc 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class StringSumHelper : public String
 80a06f2:	a810      	add	r0, sp, #64	; 0x40
 80a06f4:	f002 fd11 	bl	80a311a <_ZN6StringD1Ev>
        if (reachable == true && hue != 8418 && hue2 != "376,")
 80a06f8:	f89b 3000 	ldrb.w	r3, [fp]
 80a06fc:	b303      	cbz	r3, 80a0740 <loop+0x164>
 80a06fe:	f8d8 3000 	ldr.w	r3, [r8]
 80a0702:	4553      	cmp	r3, sl
 80a0704:	d01c      	beq.n	80a0740 <loop+0x164>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0706:	495a      	ldr	r1, [pc, #360]	; (80a0870 <loop+0x294>)
 80a0708:	485a      	ldr	r0, [pc, #360]	; (80a0874 <loop+0x298>)
 80a070a:	f002 fdf9 	bl	80a3300 <_ZNK6String6equalsEPKc>
 80a070e:	b9b8      	cbnz	r0, 80a0740 <loop+0x164>
          Particle.publish("Hit conditional");
 80a0710:	4952      	ldr	r1, [pc, #328]	; (80a085c <loop+0x280>)
 80a0712:	a810      	add	r0, sp, #64	; 0x40
 80a0714:	f7ff fd3c 	bl	80a0190 <_ZN10CloudClass7publishEPKc.isra.0>
 80a0718:	a811      	add	r0, sp, #68	; 0x44
 80a071a:	f7ff fdc6 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"bbI-AG7rdXVVyxI\", \"transitiontime\": 30}";
 80a071e:	4958      	ldr	r1, [pc, #352]	; (80a0880 <loop+0x2a4>)
 80a0720:	a80c      	add	r0, sp, #48	; 0x30
 80a0722:	f002 fd44 	bl	80a31ae <_ZN6StringC1EPKc>
          numTimesLoopCommand(command);
 80a0726:	a90c      	add	r1, sp, #48	; 0x30
 80a0728:	a810      	add	r0, sp, #64	; 0x40
 80a072a:	f002 fd8a 	bl	80a3242 <_ZN6StringC1ERKS_>
 80a072e:	a810      	add	r0, sp, #64	; 0x40
 80a0730:	f7ff fda6 	bl	80a0280 <_Z19numTimesLoopCommand6String>
 80a0734:	a810      	add	r0, sp, #64	; 0x40
 80a0736:	f002 fcf0 	bl	80a311a <_ZN6StringD1Ev>
          String command = "{\"on\": true, \"scene\": \"bbI-AG7rdXVVyxI\", \"transitiontime\": 30}";
 80a073a:	a80c      	add	r0, sp, #48	; 0x30
 80a073c:	f002 fced 	bl	80a311a <_ZN6StringD1Ev>
        String hue2String = (hue2 == "376,") ? "true" : "false";
 80a0740:	a808      	add	r0, sp, #32
 80a0742:	f002 fcea 	bl	80a311a <_ZN6StringD1Ev>
        String hueString = (hue == 8418 )? "true" : "false";
 80a0746:	a804      	add	r0, sp, #16
 80a0748:	f002 fce7 	bl	80a311a <_ZN6StringD1Ev>
        String reach = (reachable == true )? "true" : "false";
 80a074c:	4668      	mov	r0, sp
 80a074e:	f002 fce4 	bl	80a311a <_ZN6StringD1Ev>
      if (analogvalue >= 30 && analogvalue < 50)
 80a0752:	f8d9 3000 	ldr.w	r3, [r9]
 80a0756:	f1a3 021e 	sub.w	r2, r3, #30
 80a075a:	2a13      	cmp	r2, #19
 80a075c:	d84e      	bhi.n	80a07fc <loop+0x220>
          Particle.publish("Dusk");
 80a075e:	4949      	ldr	r1, [pc, #292]	; (80a0884 <loop+0x2a8>)
 80a0760:	a810      	add	r0, sp, #64	; 0x40
 80a0762:	f7ff fd15 	bl	80a0190 <_ZN10CloudClass7publishEPKc.isra.0>
 80a0766:	a811      	add	r0, sp, #68	; 0x44
 80a0768:	f7ff fd9f 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          last = "Dusk";
 80a076c:	4945      	ldr	r1, [pc, #276]	; (80a0884 <loop+0x2a8>)
 80a076e:	4846      	ldr	r0, [pc, #280]	; (80a0888 <loop+0x2ac>)
 80a0770:	f002 fd7a 	bl	80a3268 <_ZN6StringaSEPKc>
          String command = "{\"on\": true, \"scene\": \"dpRaqSDvH6m0nx2\", \"transitiontime\": 30}";
 80a0774:	4945      	ldr	r1, [pc, #276]	; (80a088c <loop+0x2b0>)
 80a0776:	a80c      	add	r0, sp, #48	; 0x30
 80a0778:	f002 fd19 	bl	80a31ae <_ZN6StringC1EPKc>
          numTimesLoopCommand(command);
 80a077c:	a90c      	add	r1, sp, #48	; 0x30
 80a077e:	a810      	add	r0, sp, #64	; 0x40
 80a0780:	f002 fd5f 	bl	80a3242 <_ZN6StringC1ERKS_>
 80a0784:	a810      	add	r0, sp, #64	; 0x40
 80a0786:	f7ff fd7b 	bl	80a0280 <_Z19numTimesLoopCommand6String>
 80a078a:	a810      	add	r0, sp, #64	; 0x40
 80a078c:	f002 fcc5 	bl	80a311a <_ZN6StringD1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0790:	a80c      	add	r0, sp, #48	; 0x30
 80a0792:	f002 fcc2 	bl	80a311a <_ZN6StringD1Ev>
          Serial.println("------------------");
 80a0796:	f003 f9af 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a079a:	492f      	ldr	r1, [pc, #188]	; (80a0858 <loop+0x27c>)
 80a079c:	f002 fc41 	bl	80a3022 <_ZN5Print7printlnEPKc>
        Serial.println("This is main loop");
 80a07a0:	f003 f9aa 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a07a4:	493a      	ldr	r1, [pc, #232]	; (80a0890 <loop+0x2b4>)
 80a07a6:	f002 fc3c 	bl	80a3022 <_ZN5Print7printlnEPKc>
        Serial.println(lightStatus);
 80a07aa:	f003 f9a5 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a07ae:	220a      	movs	r2, #10
 80a07b0:	7839      	ldrb	r1, [r7, #0]
 80a07b2:	f7ff fdd1 	bl	80a0358 <_ZN5Print7printlnIbLi0EEEjT_i>
        count++;
 80a07b6:	6823      	ldr	r3, [r4, #0]
 80a07b8:	3301      	adds	r3, #1
 80a07ba:	6023      	str	r3, [r4, #0]
        Serial.println("count");
 80a07bc:	f003 f99c 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a07c0:	4924      	ldr	r1, [pc, #144]	; (80a0854 <loop+0x278>)
 80a07c2:	f002 fc2e 	bl	80a3022 <_ZN5Print7printlnEPKc>
        Serial.println(count);
 80a07c6:	f003 f997 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a07ca:	220a      	movs	r2, #10
 80a07cc:	6821      	ldr	r1, [r4, #0]
 80a07ce:	f7ff fda2 	bl	80a0316 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("------------------");
 80a07d2:	f003 f991 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a07d6:	4920      	ldr	r1, [pc, #128]	; (80a0858 <loop+0x27c>)
 80a07d8:	f002 fc23 	bl	80a3022 <_ZN5Print7printlnEPKc>
        delay(500);
 80a07dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a07e0:	f000 fe40 	bl	80a1464 <delay>
        if (trigger > 3)
 80a07e4:	4b2b      	ldr	r3, [pc, #172]	; (80a0894 <loop+0x2b8>)
 80a07e6:	681a      	ldr	r2, [r3, #0]
 80a07e8:	2a03      	cmp	r2, #3
          trigger = 0;
 80a07ea:	bfc4      	itt	gt
 80a07ec:	2200      	movgt	r2, #0
 80a07ee:	601a      	strgt	r2, [r3, #0]
    trigger ++;
 80a07f0:	681a      	ldr	r2, [r3, #0]
 80a07f2:	3201      	adds	r2, #1
 80a07f4:	601a      	str	r2, [r3, #0]
}
 80a07f6:	b015      	add	sp, #84	; 0x54
 80a07f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (analogvalue >= 18 && analogvalue < 30)
 80a07fc:	f1a3 0212 	sub.w	r2, r3, #18
 80a0800:	2a0b      	cmp	r2, #11
 80a0802:	d80f      	bhi.n	80a0824 <loop+0x248>
          Particle.publish("Dusk 2");
 80a0804:	4924      	ldr	r1, [pc, #144]	; (80a0898 <loop+0x2bc>)
 80a0806:	a810      	add	r0, sp, #64	; 0x40
 80a0808:	f7ff fcc2 	bl	80a0190 <_ZN10CloudClass7publishEPKc.isra.0>
 80a080c:	a811      	add	r0, sp, #68	; 0x44
 80a080e:	f7ff fd4c 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"O2PwRXlDLslyAId\", \"transitiontime\": 30}";
 80a0812:	4922      	ldr	r1, [pc, #136]	; (80a089c <loop+0x2c0>)
 80a0814:	a80c      	add	r0, sp, #48	; 0x30
 80a0816:	f002 fcca 	bl	80a31ae <_ZN6StringC1EPKc>
          last = "Dusk 2";
 80a081a:	491f      	ldr	r1, [pc, #124]	; (80a0898 <loop+0x2bc>)
          last = "Day";
 80a081c:	481a      	ldr	r0, [pc, #104]	; (80a0888 <loop+0x2ac>)
 80a081e:	f002 fd23 	bl	80a3268 <_ZN6StringaSEPKc>
 80a0822:	e7ab      	b.n	80a077c <loop+0x1a0>
        else if (analogvalue >= 50)
 80a0824:	2b31      	cmp	r3, #49	; 0x31
 80a0826:	ddb6      	ble.n	80a0796 <loop+0x1ba>
          Particle.publish("DAY");
 80a0828:	491d      	ldr	r1, [pc, #116]	; (80a08a0 <loop+0x2c4>)
 80a082a:	a810      	add	r0, sp, #64	; 0x40
 80a082c:	f7ff fcb0 	bl	80a0190 <_ZN10CloudClass7publishEPKc.isra.0>
 80a0830:	a811      	add	r0, sp, #68	; 0x44
 80a0832:	f7ff fd3a 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0836:	491b      	ldr	r1, [pc, #108]	; (80a08a4 <loop+0x2c8>)
 80a0838:	a80c      	add	r0, sp, #48	; 0x30
 80a083a:	f002 fcb8 	bl	80a31ae <_ZN6StringC1EPKc>
          last = "Day";
 80a083e:	491a      	ldr	r1, [pc, #104]	; (80a08a8 <loop+0x2cc>)
 80a0840:	e7ec      	b.n	80a081c <loop+0x240>
 80a0842:	bf00      	nop
 80a0844:	200000e8 	.word	0x200000e8
 80a0848:	20000548 	.word	0x20000548
 80a084c:	080a454d 	.word	0x080a454d
 80a0850:	200000ec 	.word	0x200000ec
 80a0854:	080a450c 	.word	0x080a450c
 80a0858:	080a4512 	.word	0x080a4512
 80a085c:	080a4556 	.word	0x080a4556
 80a0860:	20000cc0 	.word	0x20000cc0
 80a0864:	080a4566 	.word	0x080a4566
 80a0868:	080a4538 	.word	0x080a4538
 80a086c:	080a4547 	.word	0x080a4547
 80a0870:	080a4572 	.word	0x080a4572
 80a0874:	20000510 	.word	0x20000510
 80a0878:	080a4867 	.word	0x080a4867
 80a087c:	080a4577 	.word	0x080a4577
 80a0880:	080a4599 	.word	0x080a4599
 80a0884:	080a45d8 	.word	0x080a45d8
 80a0888:	20000538 	.word	0x20000538
 80a088c:	080a45dd 	.word	0x080a45dd
 80a0890:	080a46a9 	.word	0x080a46a9
 80a0894:	20000d30 	.word	0x20000d30
 80a0898:	080a461c 	.word	0x080a461c
 80a089c:	080a4623 	.word	0x080a4623
 80a08a0:	080a4662 	.word	0x080a4662
 80a08a4:	080a4666 	.word	0x080a4666
 80a08a8:	080a46a5 	.word	0x080a46a5
 80a08ac:	2000050c 	.word	0x2000050c
 80a08b0:	20000cbc 	.word	0x20000cbc

080a08b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a08b4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a08b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08b8:	4604      	mov	r4, r0
 80a08ba:	460d      	mov	r5, r1
 80a08bc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a08be:	d916      	bls.n	80a08ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a08c0:	4290      	cmp	r0, r2
 80a08c2:	d215      	bcs.n	80a08f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a08c4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a08c8:	1a75      	subs	r5, r6, r1
 80a08ca:	f1a1 0714 	sub.w	r7, r1, #20
 80a08ce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a08d0:	42b7      	cmp	r7, r6
 80a08d2:	d01c      	beq.n	80a090e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a08d4:	b12c      	cbz	r4, 80a08e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a08d6:	4631      	mov	r1, r6
 80a08d8:	4620      	mov	r0, r4
 80a08da:	f002 fc98 	bl	80a320e <_ZN6StringC1EOS_>
 80a08de:	7c33      	ldrb	r3, [r6, #16]
 80a08e0:	7423      	strb	r3, [r4, #16]
 80a08e2:	4630      	mov	r0, r6
 80a08e4:	f002 fc19 	bl	80a311a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a08e8:	3e14      	subs	r6, #20
 80a08ea:	3c14      	subs	r4, #20
 80a08ec:	e7f0      	b.n	80a08d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a08ee:	d00e      	beq.n	80a090e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a08f0:	42b5      	cmp	r5, r6
 80a08f2:	d00c      	beq.n	80a090e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a08f4:	b12c      	cbz	r4, 80a0902 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a08f6:	4629      	mov	r1, r5
 80a08f8:	4620      	mov	r0, r4
 80a08fa:	f002 fc88 	bl	80a320e <_ZN6StringC1EOS_>
 80a08fe:	7c2b      	ldrb	r3, [r5, #16]
 80a0900:	7423      	strb	r3, [r4, #16]
 80a0902:	4628      	mov	r0, r5
 80a0904:	f002 fc09 	bl	80a311a <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a0908:	3514      	adds	r5, #20
 80a090a:	3414      	adds	r4, #20
 80a090c:	e7f0      	b.n	80a08f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a0910:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0916:	e9c0 3300 	strd	r3, r3, [r0]
 80a091a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a091c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a091e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0920:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0922:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0924:	dd24      	ble.n	80a0970 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a0926:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a092a:	fb08 f007 	mul.w	r0, r8, r7
 80a092e:	f000 fd61 	bl	80a13f4 <malloc>
            if (!d) {
 80a0932:	4605      	mov	r5, r0
 80a0934:	b1e0      	cbz	r0, 80a0970 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a0936:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a093a:	fb08 1202 	mla	r2, r8, r2, r1
 80a093e:	f7ff ffb9 	bl	80a08b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a0942:	6820      	ldr	r0, [r4, #0]
 80a0944:	f000 fd5e 	bl	80a1404 <free>
        data_ = d;
 80a0948:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a094a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a094c:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a0950:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a0954:	45b8      	cmp	r8, r7
 80a0956:	d009      	beq.n	80a096c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a0958:	4639      	mov	r1, r7
 80a095a:	4628      	mov	r0, r5
 80a095c:	f002 fc71 	bl	80a3242 <_ZN6StringC1ERKS_>
 80a0960:	7c3b      	ldrb	r3, [r7, #16]
 80a0962:	3514      	adds	r5, #20
 80a0964:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a0968:	3714      	adds	r7, #20
 80a096a:	e7f3      	b.n	80a0954 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a096c:	6873      	ldr	r3, [r6, #4]
 80a096e:	6063      	str	r3, [r4, #4]
}
 80a0970:	4620      	mov	r0, r4
 80a0972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0978 <_GLOBAL__sub_I_logHandler>:
 80a0978:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
 80a097a:	2400      	movs	r4, #0
 80a097c:	4b77      	ldr	r3, [pc, #476]	; (80a0b5c <_GLOBAL__sub_I_logHandler+0x1e4>)
 80a097e:	b08f      	sub	sp, #60	; 0x3c
 80a0980:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a0982:	4621      	mov	r1, r4
 80a0984:	2001      	movs	r0, #1
 80a0986:	f000 fc89 	bl	80a129c <system_thread_set_state>
        capacity_(0) {
 80a098a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a098e:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 80a0990:	f003 f8b2 	bl	80a3af8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a0994:	4d72      	ldr	r5, [pc, #456]	; (80a0b60 <_GLOBAL__sub_I_logHandler+0x1e8>)
 80a0996:	4604      	mov	r4, r0
 80a0998:	462e      	mov	r6, r5
 80a099a:	a902      	add	r1, sp, #8
 80a099c:	a805      	add	r0, sp, #20
 80a099e:	f7ff ffb7 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a09a2:	a905      	add	r1, sp, #20
 80a09a4:	a808      	add	r0, sp, #32
 80a09a6:	f7ff ffb3 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a09aa:	4b6e      	ldr	r3, [pc, #440]	; (80a0b64 <_GLOBAL__sub_I_logHandler+0x1ec>)
 80a09ac:	a908      	add	r1, sp, #32
 80a09ae:	f846 3b04 	str.w	r3, [r6], #4
 80a09b2:	a80b      	add	r0, sp, #44	; 0x2c
 80a09b4:	f7ff ffac 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a09b8:	aa0b      	add	r2, sp, #44	; 0x2c
 80a09ba:	211e      	movs	r1, #30
 80a09bc:	4630      	mov	r0, r6
 80a09be:	f001 ff5f 	bl	80a2880 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a09c2:	a80b      	add	r0, sp, #44	; 0x2c
 80a09c4:	f7ff fc94 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a09c8:	a808      	add	r0, sp, #32
 80a09ca:	f7ff fc91 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a09ce:	4b66      	ldr	r3, [pc, #408]	; (80a0b68 <_GLOBAL__sub_I_logHandler+0x1f0>)
 80a09d0:	622c      	str	r4, [r5, #32]
 80a09d2:	602b      	str	r3, [r5, #0]
 80a09d4:	a805      	add	r0, sp, #20
 80a09d6:	f7ff fc8b 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a09da:	4b64      	ldr	r3, [pc, #400]	; (80a0b6c <_GLOBAL__sub_I_logHandler+0x1f4>)
SerialLogHandler logHandler;
 80a09dc:	4c64      	ldr	r4, [pc, #400]	; (80a0b70 <_GLOBAL__sub_I_logHandler+0x1f8>)
 80a09de:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a09e0:	f003 f88a 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a09e4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a09e8:	f003 f868 	bl	80a3abc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a09ec:	f001 fbe2 	bl	80a21b4 <_ZN5spark10LogManager8instanceEv>
 80a09f0:	4629      	mov	r1, r5
 80a09f2:	f001 fed8 	bl	80a27a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a09f6:	4e5f      	ldr	r6, [pc, #380]	; (80a0b74 <_GLOBAL__sub_I_logHandler+0x1fc>)
SerialLogHandler logHandler;
 80a09f8:	a802      	add	r0, sp, #8
 80a09fa:	f7ff fc79 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a09fe:	4622      	mov	r2, r4
 80a0a00:	4628      	mov	r0, r5
 80a0a02:	495d      	ldr	r1, [pc, #372]	; (80a0b78 <_GLOBAL__sub_I_logHandler+0x200>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0a04:	4d5d      	ldr	r5, [pc, #372]	; (80a0b7c <_GLOBAL__sub_I_logHandler+0x204>)
SerialLogHandler logHandler;
 80a0a06:	f003 facb 	bl	80a3fa0 <__aeabi_atexit>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0a0a:	4630      	mov	r0, r6
 80a0a0c:	495c      	ldr	r1, [pc, #368]	; (80a0b80 <_GLOBAL__sub_I_logHandler+0x208>)
 80a0a0e:	f002 fbce 	bl	80a31ae <_ZN6StringC1EPKc>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0a12:	4f5c      	ldr	r7, [pc, #368]	; (80a0b84 <_GLOBAL__sub_I_logHandler+0x20c>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0a14:	4630      	mov	r0, r6
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0a16:	4e5c      	ldr	r6, [pc, #368]	; (80a0b88 <_GLOBAL__sub_I_logHandler+0x210>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0a18:	4622      	mov	r2, r4
 80a0a1a:	4629      	mov	r1, r5
 80a0a1c:	f003 fac0 	bl	80a3fa0 <__aeabi_atexit>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0a20:	4639      	mov	r1, r7
 80a0a22:	4630      	mov	r0, r6
 80a0a24:	f002 fbc3 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0a28:	4630      	mov	r0, r6
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0a2a:	4e58      	ldr	r6, [pc, #352]	; (80a0b8c <_GLOBAL__sub_I_logHandler+0x214>)
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0a2c:	4622      	mov	r2, r4
 80a0a2e:	4629      	mov	r1, r5
 80a0a30:	f003 fab6 	bl	80a3fa0 <__aeabi_atexit>
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0a34:	4639      	mov	r1, r7
 80a0a36:	4630      	mov	r0, r6
 80a0a38:	f002 fbb9 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0a3c:	4630      	mov	r0, r6
const String LIGHT_PATH = "/groups/3/action";
 80a0a3e:	4e54      	ldr	r6, [pc, #336]	; (80a0b90 <_GLOBAL__sub_I_logHandler+0x218>)
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0a40:	4622      	mov	r2, r4
 80a0a42:	4629      	mov	r1, r5
 80a0a44:	f003 faac 	bl	80a3fa0 <__aeabi_atexit>
const String LIGHT_PATH = "/groups/3/action";
 80a0a48:	4630      	mov	r0, r6
 80a0a4a:	4952      	ldr	r1, [pc, #328]	; (80a0b94 <_GLOBAL__sub_I_logHandler+0x21c>)
 80a0a4c:	f002 fbaf 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0a50:	4630      	mov	r0, r6
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0a52:	4e51      	ldr	r6, [pc, #324]	; (80a0b98 <_GLOBAL__sub_I_logHandler+0x220>)
const String LIGHT_PATH = "/groups/3/action";
 80a0a54:	4622      	mov	r2, r4
 80a0a56:	4629      	mov	r1, r5
 80a0a58:	f003 faa2 	bl	80a3fa0 <__aeabi_atexit>
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0a5c:	4630      	mov	r0, r6
 80a0a5e:	494f      	ldr	r1, [pc, #316]	; (80a0b9c <_GLOBAL__sub_I_logHandler+0x224>)
 80a0a60:	f002 fba5 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0a64:	4630      	mov	r0, r6
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a0a66:	4e4e      	ldr	r6, [pc, #312]	; (80a0ba0 <_GLOBAL__sub_I_logHandler+0x228>)
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0a68:	4622      	mov	r2, r4
 80a0a6a:	4629      	mov	r1, r5
 80a0a6c:	f003 fa98 	bl	80a3fa0 <__aeabi_atexit>
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a0a70:	4630      	mov	r0, r6
 80a0a72:	494c      	ldr	r1, [pc, #304]	; (80a0ba4 <_GLOBAL__sub_I_logHandler+0x22c>)
 80a0a74:	f002 fb9b 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0a78:	4630      	mov	r0, r6
HttpClient http;
 80a0a7a:	4e4b      	ldr	r6, [pc, #300]	; (80a0ba8 <_GLOBAL__sub_I_logHandler+0x230>)
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a0a7c:	4622      	mov	r2, r4
 80a0a7e:	4629      	mov	r1, r5
 80a0a80:	f003 fa8e 	bl	80a3fa0 <__aeabi_atexit>
HttpClient http;
 80a0a84:	4630      	mov	r0, r6
 80a0a86:	f000 f8af 	bl	80a0be8 <_ZN10HttpClientC1Ev>
 80a0a8a:	4622      	mov	r2, r4
 80a0a8c:	4630      	mov	r0, r6
 80a0a8e:	4947      	ldr	r1, [pc, #284]	; (80a0bac <_GLOBAL__sub_I_logHandler+0x234>)
 80a0a90:	f003 fa86 	bl	80a3fa0 <__aeabi_atexit>
IPAddress hueIP(192, 168, 1, 157);
 80a0a94:	239d      	movs	r3, #157	; 0x9d
 80a0a96:	4e46      	ldr	r6, [pc, #280]	; (80a0bb0 <_GLOBAL__sub_I_logHandler+0x238>)
 80a0a98:	9300      	str	r3, [sp, #0]
 80a0a9a:	22a8      	movs	r2, #168	; 0xa8
 80a0a9c:	2301      	movs	r3, #1
 80a0a9e:	21c0      	movs	r1, #192	; 0xc0
 80a0aa0:	4630      	mov	r0, r6
 80a0aa2:	f001 f841 	bl	80a1b28 <_ZN9IPAddressC1Ehhhh>
} http_request_t;
 80a0aa6:	4f43      	ldr	r7, [pc, #268]	; (80a0bb4 <_GLOBAL__sub_I_logHandler+0x23c>)
 80a0aa8:	4630      	mov	r0, r6
 80a0aaa:	4e43      	ldr	r6, [pc, #268]	; (80a0bb8 <_GLOBAL__sub_I_logHandler+0x240>)
 80a0aac:	4622      	mov	r2, r4
 80a0aae:	4943      	ldr	r1, [pc, #268]	; (80a0bbc <_GLOBAL__sub_I_logHandler+0x244>)
 80a0ab0:	f003 fa76 	bl	80a3fa0 <__aeabi_atexit>
 80a0ab4:	4631      	mov	r1, r6
 80a0ab6:	4638      	mov	r0, r7
 80a0ab8:	f002 fb79 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0abc:	f107 0010 	add.w	r0, r7, #16
 80a0ac0:	f000 fffc 	bl	80a1abc <_ZN9IPAddressC1Ev>
 80a0ac4:	4631      	mov	r1, r6
 80a0ac6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80a0aca:	f002 fb70 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0ace:	4631      	mov	r1, r6
 80a0ad0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80a0ad4:	f002 fb6b 	bl	80a31ae <_ZN6StringC1EPKc>
http_request_t request;
 80a0ad8:	4638      	mov	r0, r7
} http_response_t;
 80a0ada:	4f39      	ldr	r7, [pc, #228]	; (80a0bc0 <_GLOBAL__sub_I_logHandler+0x248>)
 80a0adc:	4622      	mov	r2, r4
 80a0ade:	4939      	ldr	r1, [pc, #228]	; (80a0bc4 <_GLOBAL__sub_I_logHandler+0x24c>)
 80a0ae0:	f003 fa5e 	bl	80a3fa0 <__aeabi_atexit>
 80a0ae4:	4631      	mov	r1, r6
 80a0ae6:	1d38      	adds	r0, r7, #4
 80a0ae8:	f002 fb61 	bl	80a31ae <_ZN6StringC1EPKc>
http_response_t response;
 80a0aec:	4622      	mov	r2, r4
 80a0aee:	4638      	mov	r0, r7
 80a0af0:	4935      	ldr	r1, [pc, #212]	; (80a0bc8 <_GLOBAL__sub_I_logHandler+0x250>)
 80a0af2:	f003 fa55 	bl	80a3fa0 <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a0af6:	2332      	movs	r3, #50	; 0x32
 80a0af8:	4f34      	ldr	r7, [pc, #208]	; (80a0bcc <_GLOBAL__sub_I_logHandler+0x254>)
 80a0afa:	9300      	str	r3, [sp, #0]
 80a0afc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80a0b00:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80a0b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0b08:	4638      	mov	r0, r7
 80a0b0a:	f000 f9fd 	bl	80a0f08 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 80a0b0e:	4b30      	ldr	r3, [pc, #192]	; (80a0bd0 <_GLOBAL__sub_I_logHandler+0x258>)
JsonParserStatic<1024, 50> parse1;
 80a0b10:	4638      	mov	r0, r7
 80a0b12:	603b      	str	r3, [r7, #0]
String last = "null";
 80a0b14:	4f2f      	ldr	r7, [pc, #188]	; (80a0bd4 <_GLOBAL__sub_I_logHandler+0x25c>)
JsonParserStatic<1024, 50> parse1;
 80a0b16:	4622      	mov	r2, r4
 80a0b18:	492f      	ldr	r1, [pc, #188]	; (80a0bd8 <_GLOBAL__sub_I_logHandler+0x260>)
 80a0b1a:	f003 fa41 	bl	80a3fa0 <__aeabi_atexit>
String last = "null";
 80a0b1e:	4638      	mov	r0, r7
 80a0b20:	492e      	ldr	r1, [pc, #184]	; (80a0bdc <_GLOBAL__sub_I_logHandler+0x264>)
 80a0b22:	f002 fb44 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0b26:	4638      	mov	r0, r7
String hue2;
 80a0b28:	4f2d      	ldr	r7, [pc, #180]	; (80a0be0 <_GLOBAL__sub_I_logHandler+0x268>)
String last = "null";
 80a0b2a:	4622      	mov	r2, r4
 80a0b2c:	4629      	mov	r1, r5
 80a0b2e:	f003 fa37 	bl	80a3fa0 <__aeabi_atexit>
String hue2;
 80a0b32:	4631      	mov	r1, r6
 80a0b34:	4638      	mov	r0, r7
 80a0b36:	f002 fb3a 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0b3a:	4638      	mov	r0, r7
String reachableString;
 80a0b3c:	4f29      	ldr	r7, [pc, #164]	; (80a0be4 <_GLOBAL__sub_I_logHandler+0x26c>)
String hue2;
 80a0b3e:	4622      	mov	r2, r4
 80a0b40:	4629      	mov	r1, r5
 80a0b42:	f003 fa2d 	bl	80a3fa0 <__aeabi_atexit>
String reachableString;
 80a0b46:	4631      	mov	r1, r6
 80a0b48:	4638      	mov	r0, r7
 80a0b4a:	f002 fb30 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0b4e:	4622      	mov	r2, r4
 80a0b50:	4629      	mov	r1, r5
 80a0b52:	4638      	mov	r0, r7
 80a0b54:	f003 fa24 	bl	80a3fa0 <__aeabi_atexit>
 80a0b58:	b00f      	add	sp, #60	; 0x3c
 80a0b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b5c:	200000e4 	.word	0x200000e4
 80a0b60:	2000054c 	.word	0x2000054c
 80a0b64:	080a4728 	.word	0x080a4728
 80a0b68:	080a48c0 	.word	0x080a48c0
 80a0b6c:	080a4740 	.word	0x080a4740
 80a0b70:	20000080 	.word	0x20000080
 80a0b74:	200000a4 	.word	0x200000a4
 80a0b78:	080a0149 	.word	0x080a0149
 80a0b7c:	080a311b 	.word	0x080a311b
 80a0b80:	080a46bb 	.word	0x080a46bb
 80a0b84:	080a46e4 	.word	0x080a46e4
 80a0b88:	200000b4 	.word	0x200000b4
 80a0b8c:	200000c4 	.word	0x200000c4
 80a0b90:	20000084 	.word	0x20000084
 80a0b94:	080a46ee 	.word	0x080a46ee
 80a0b98:	20000094 	.word	0x20000094
 80a0b9c:	080a4666 	.word	0x080a4666
 80a0ba0:	200000d4 	.word	0x200000d4
 80a0ba4:	080a46ff 	.word	0x080a46ff
 80a0ba8:	200000f0 	.word	0x200000f0
 80a0bac:	080a02d9 	.word	0x080a02d9
 80a0bb0:	20000520 	.word	0x20000520
 80a0bb4:	20000cd0 	.word	0x20000cd0
 80a0bb8:	080a47a5 	.word	0x080a47a5
 80a0bbc:	080a00c9 	.word	0x080a00c9
 80a0bc0:	20000d1c 	.word	0x20000d1c
 80a0bc4:	080a00e3 	.word	0x080a00e3
 80a0bc8:	080a00d5 	.word	0x080a00d5
 80a0bcc:	20000570 	.word	0x20000570
 80a0bd0:	080a4758 	.word	0x080a4758
 80a0bd4:	20000538 	.word	0x20000538
 80a0bd8:	080a0101 	.word	0x080a0101
 80a0bdc:	080a471b 	.word	0x080a471b
 80a0be0:	20000510 	.word	0x20000510
 80a0be4:	20000cc0 	.word	0x20000cc0

080a0be8 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a0be8:	b510      	push	{r4, lr}
 80a0bea:	4604      	mov	r4, r0
 80a0bec:	f002 fe3a 	bl	80a3864 <_ZN9TCPClientC1Ev>
{

}
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	bd10      	pop	{r4, pc}

080a0bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0bf4:	b538      	push	{r3, r4, r5, lr}
 80a0bf6:	4604      	mov	r4, r0
 80a0bf8:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a0bfa:	f002 f9ff 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.print(": ");
 80a0bfe:	4620      	mov	r0, r4
 80a0c00:	4904      	ldr	r1, [pc, #16]	; (80a0c14 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a0c02:	f002 f9fb 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a0c06:	4629      	mov	r1, r5
 80a0c08:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
 80a0c0e:	f002 ba08 	b.w	80a3022 <_ZN5Print7printlnEPKc>
 80a0c12:	bf00      	nop
 80a0c14:	080a486b 	.word	0x080a486b

080a0c18 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a0c18:	b538      	push	{r3, r4, r5, lr}
 80a0c1a:	4605      	mov	r5, r0
 80a0c1c:	4614      	mov	r4, r2
    client.print(aHeaderName);
 80a0c1e:	f002 f9ed 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.print(": ");
 80a0c22:	4628      	mov	r0, r5
 80a0c24:	490a      	ldr	r1, [pc, #40]	; (80a0c50 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
 80a0c26:	f002 f9e9 	bl	80a2ffc <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
 80a0c2a:	2c00      	cmp	r4, #0
 80a0c2c:	da0d      	bge.n	80a0c4a <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
 80a0c2e:	212d      	movs	r1, #45	; 0x2d
 80a0c30:	4628      	mov	r0, r5
 80a0c32:	f002 f9e7 	bl	80a3004 <_ZN5Print5printEc>
            val = -n;
 80a0c36:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a0c38:	4628      	mov	r0, r5
 80a0c3a:	220a      	movs	r2, #10
 80a0c3c:	f002 f9fb 	bl	80a3036 <_ZN5Print11printNumberEmh>
        n += println();
 80a0c40:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0c46:	f002 b9e0 	b.w	80a300a <_ZN5Print7printlnEv>
            val = n;
 80a0c4a:	4621      	mov	r1, r4
 80a0c4c:	e7f4      	b.n	80a0c38 <_ZN10HttpClient10sendHeaderEPKci+0x20>
 80a0c4e:	bf00      	nop
 80a0c50:	080a486b 	.word	0x080a486b

080a0c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c58:	460e      	mov	r6, r1
 80a0c5a:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 80a0c60:	b091      	sub	sp, #68	; 0x44
    aResponse.status = -1;
 80a0c62:	6013      	str	r3, [r2, #0]
{
 80a0c64:	4604      	mov	r4, r0
 80a0c66:	2100      	movs	r1, #0
 80a0c68:	4630      	mov	r0, r6
 80a0c6a:	4617      	mov	r7, r2
 80a0c6c:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80a0c70:	f002 fb46 	bl	80a3300 <_ZNK6String6equalsEPKc>
 80a0c74:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a0c78:	4603      	mov	r3, r0
 80a0c7a:	b998      	cbnz	r0, 80a0ca4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
 80a0c7c:	f1be 0f00 	cmp.w	lr, #0
 80a0c80:	bf14      	ite	ne
 80a0c82:	4672      	movne	r2, lr
 80a0c84:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a0c86:	4620      	mov	r0, r4
 80a0c88:	6831      	ldr	r1, [r6, #0]
 80a0c8a:	b292      	uxth	r2, r2
 80a0c8c:	f002 fe02 	bl	80a3894 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0c90:	1e05      	subs	r5, r0, #0
 80a0c92:	bf18      	it	ne
 80a0c94:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a0c96:	b9c5      	cbnz	r5, 80a0cca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a0c98:	4620      	mov	r0, r4
 80a0c9a:	f002 fd33 	bl	80a3704 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a0c9e:	b011      	add	sp, #68	; 0x44
 80a0ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ca4:	4b74      	ldr	r3, [pc, #464]	; (80a0e78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a0ca6:	ad0b      	add	r5, sp, #44	; 0x2c
 80a0ca8:	f106 0c14 	add.w	ip, r6, #20
 80a0cac:	930a      	str	r3, [sp, #40]	; 0x28
 80a0cae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0cb4:	f8dc 3000 	ldr.w	r3, [ip]
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	702b      	strb	r3, [r5, #0]
 80a0cbc:	fa1f f28e 	uxth.w	r2, lr
 80a0cc0:	2300      	movs	r3, #0
 80a0cc2:	a90a      	add	r1, sp, #40	; 0x28
 80a0cc4:	f002 fc74 	bl	80a35b0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0cc8:	e7e2      	b.n	80a0c90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
 80a0cca:	4649      	mov	r1, r9
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	f002 f995 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.print(" ");
 80a0cd2:	496a      	ldr	r1, [pc, #424]	; (80a0e7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	f002 f991 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a0cda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80a0cdc:	4620      	mov	r0, r4
 80a0cde:	f002 f98d 	bl	80a2ffc <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a0ce2:	4967      	ldr	r1, [pc, #412]	; (80a0e80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0ce4:	4620      	mov	r0, r4
 80a0ce6:	f002 f989 	bl	80a2ffc <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a0cea:	4620      	mov	r0, r4
 80a0cec:	4965      	ldr	r1, [pc, #404]	; (80a0e84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a0cee:	4a66      	ldr	r2, [pc, #408]	; (80a0e88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a0cf0:	f7ff ff80 	bl	80a0bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0cf4:	2100      	movs	r1, #0
 80a0cf6:	4630      	mov	r0, r6
 80a0cf8:	f002 fb02 	bl	80a3300 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a0cfc:	b920      	cbnz	r0, 80a0d08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a0cfe:	4620      	mov	r0, r4
 80a0d00:	6832      	ldr	r2, [r6, #0]
 80a0d02:	4962      	ldr	r1, [pc, #392]	; (80a0e8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
 80a0d04:	f7ff ff76 	bl	80a0bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
 80a0d08:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
 80a0d0c:	2100      	movs	r1, #0
 80a0d0e:	4650      	mov	r0, sl
 80a0d10:	f002 faf6 	bl	80a3300 <_ZNK6String6equalsEPKc>
 80a0d14:	b928      	cbnz	r0, 80a0d22 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
 80a0d16:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	495d      	ldr	r1, [pc, #372]	; (80a0e90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
 80a0d1c:	f7ff ff7c 	bl	80a0c18 <_ZN10HttpClient10sendHeaderEPKci>
 80a0d20:	e006      	b.n	80a0d30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a0d22:	4648      	mov	r0, r9
 80a0d24:	495b      	ldr	r1, [pc, #364]	; (80a0e94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
 80a0d26:	f003 fade 	bl	80a42e6 <strcmp>
 80a0d2a:	4602      	mov	r2, r0
 80a0d2c:	2800      	cmp	r0, #0
 80a0d2e:	d0f3      	beq.n	80a0d18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
 80a0d30:	f1b8 0f00 	cmp.w	r8, #0
 80a0d34:	d00e      	beq.n	80a0d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
 80a0d36:	f8d8 1000 	ldr.w	r1, [r8]
 80a0d3a:	b159      	cbz	r1, 80a0d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
 80a0d3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a0d40:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
 80a0d42:	b122      	cbz	r2, 80a0d4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
 80a0d44:	f7ff ff56 	bl	80a0bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
 80a0d48:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
 80a0d4c:	e7f3      	b.n	80a0d36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
 80a0d4e:	f002 f968 	bl	80a3022 <_ZN5Print7printlnEPKc>
}
 80a0d52:	e7f9      	b.n	80a0d48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	f002 f958 	bl	80a300a <_ZN5Print7printlnEv>
    client.flush();
 80a0d5a:	4620      	mov	r0, r4
 80a0d5c:	f002 fb71 	bl	80a3442 <_ZN9TCPClient5flushEv>
 80a0d60:	2100      	movs	r1, #0
 80a0d62:	4650      	mov	r0, sl
 80a0d64:	f002 facc 	bl	80a3300 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
 80a0d68:	b918      	cbnz	r0, 80a0d72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
 80a0d6a:	4620      	mov	r0, r4
 80a0d6c:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80a0d6e:	f002 f958 	bl	80a3022 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
 80a0d72:	f104 0a1c 	add.w	sl, r4, #28
 80a0d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0d7a:	2100      	movs	r1, #0
 80a0d7c:	4650      	mov	r0, sl
 80a0d7e:	f003 fa6f 	bl	80a4260 <memset>
    bool error = false;
 80a0d82:	f04f 0800 	mov.w	r8, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0d86:	f000 f8ff 	bl	80a0f88 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
 80a0d8a:	4646      	mov	r6, r8
 80a0d8c:	9001      	str	r0, [sp, #4]
    } while (client.connected() && !timeout && !error);
 80a0d8e:	f241 3b88 	movw	fp, #5000	; 0x1388
 80a0d92:	f000 f8f9 	bl	80a0f88 <HAL_Timer_Get_Milli_Seconds>
        while (client.available()) {
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	f002 fc7a 	bl	80a3690 <_ZN9TCPClient9availableEv>
 80a0d9c:	b1d8      	cbz	r0, 80a0dd6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	f002 fbb9 	bl	80a3516 <_ZN9TCPClient4readEv>
 80a0da4:	4681      	mov	r9, r0
 80a0da6:	f000 f8ef 	bl	80a0f88 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
 80a0daa:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a0dae:	429e      	cmp	r6, r3
 80a0db0:	9001      	str	r0, [sp, #4]
 80a0db2:	d804      	bhi.n	80a0dbe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
 80a0db4:	19a3      	adds	r3, r4, r6
            char c = client.read();
 80a0db6:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
 80a0dba:	3601      	adds	r6, #1
        while (client.available()) {
 80a0dbc:	e7eb      	b.n	80a0d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a0dbe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a0dc2:	429e      	cmp	r6, r3
 80a0dc4:	d1f9      	bne.n	80a0dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0dc6:	2300      	movs	r3, #0
                client.stop();
 80a0dc8:	4620      	mov	r0, r4
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0dca:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a0dce:	f002 fc99 	bl	80a3704 <_ZN9TCPClient4stopEv>
                error = true;
 80a0dd2:	46a8      	mov	r8, r5
 80a0dd4:	e7f1      	b.n	80a0dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0dd6:	19a3      	adds	r3, r4, r6
 80a0dd8:	7718      	strb	r0, [r3, #28]
 80a0dda:	f000 f8d5 	bl	80a0f88 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
 80a0dde:	9b01      	ldr	r3, [sp, #4]
 80a0de0:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
 80a0de4:	f1b8 0f00 	cmp.w	r8, #0
 80a0de8:	d104      	bne.n	80a0df4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
 80a0dea:	45d9      	cmp	r9, fp
 80a0dec:	d802      	bhi.n	80a0df4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
 80a0dee:	20c8      	movs	r0, #200	; 0xc8
 80a0df0:	f000 fb38 	bl	80a1464 <delay>
    } while (client.connected() && !timeout && !error);
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f002 fcdc 	bl	80a37b2 <_ZN9TCPClient9connectedEv>
 80a0dfa:	b120      	cbz	r0, 80a0e06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0dfc:	45d9      	cmp	r9, fp
 80a0dfe:	d802      	bhi.n	80a0e06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0e00:	f1b8 0f00 	cmp.w	r8, #0
 80a0e04:	d0c7      	beq.n	80a0d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
 80a0e06:	4620      	mov	r0, r4
 80a0e08:	f002 fc7c 	bl	80a3704 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
 80a0e0c:	4651      	mov	r1, sl
 80a0e0e:	a802      	add	r0, sp, #8
 80a0e10:	f002 f9cd 	bl	80a31ae <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
 80a0e14:	230c      	movs	r3, #12
 80a0e16:	2209      	movs	r2, #9
 80a0e18:	a902      	add	r1, sp, #8
 80a0e1a:	a806      	add	r0, sp, #24
 80a0e1c:	f002 fa94 	bl	80a3348 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a0e20:	491d      	ldr	r1, [pc, #116]	; (80a0e98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
 80a0e22:	a80a      	add	r0, sp, #40	; 0x28
 80a0e24:	f002 f9c3 	bl	80a31ae <_ZN6StringC1EPKc>
 80a0e28:	a90a      	add	r1, sp, #40	; 0x28
 80a0e2a:	a802      	add	r0, sp, #8
 80a0e2c:	f002 fa89 	bl	80a3342 <_ZNK6String7indexOfERKS_>
 80a0e30:	4604      	mov	r4, r0
 80a0e32:	a80a      	add	r0, sp, #40	; 0x28
 80a0e34:	f002 f971 	bl	80a311a <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a0e38:	1c63      	adds	r3, r4, #1
 80a0e3a:	d106      	bne.n	80a0e4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f6>
    String statusCode = raw_response.substring(9,12);
 80a0e3c:	a806      	add	r0, sp, #24
 80a0e3e:	f002 f96c 	bl	80a311a <_ZN6StringD1Ev>
    String raw_response(buffer);
 80a0e42:	a802      	add	r0, sp, #8
 80a0e44:	f002 f969 	bl	80a311a <_ZN6StringD1Ev>
 80a0e48:	e729      	b.n	80a0c9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
 80a0e4a:	1d3d      	adds	r5, r7, #4
 80a0e4c:	4913      	ldr	r1, [pc, #76]	; (80a0e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
 80a0e4e:	4628      	mov	r0, r5
 80a0e50:	f002 fa0a 	bl	80a3268 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0e54:	1d22      	adds	r2, r4, #4
 80a0e56:	a902      	add	r1, sp, #8
 80a0e58:	a80a      	add	r0, sp, #40	; 0x28
 80a0e5a:	f002 fa97 	bl	80a338c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0e5e:	a90a      	add	r1, sp, #40	; 0x28
 80a0e60:	4628      	mov	r0, r5
 80a0e62:	f002 fa29 	bl	80a32b8 <_ZN6String6concatERKS_>
 80a0e66:	a80a      	add	r0, sp, #40	; 0x28
 80a0e68:	f002 f957 	bl	80a311a <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0e6c:	9806      	ldr	r0, [sp, #24]
 80a0e6e:	f003 f9b9 	bl	80a41e4 <atoi>
 80a0e72:	6038      	str	r0, [r7, #0]
 80a0e74:	e7e2      	b.n	80a0e3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
 80a0e76:	bf00      	nop
 80a0e78:	080a4814 	.word	0x080a4814
 80a0e7c:	080a4867 	.word	0x080a4867
 80a0e80:	080a476b 	.word	0x080a476b
 80a0e84:	080a477d 	.word	0x080a477d
 80a0e88:	080a4777 	.word	0x080a4777
 80a0e8c:	080a4788 	.word	0x080a4788
 80a0e90:	080a478d 	.word	0x080a478d
 80a0e94:	080a479c 	.word	0x080a479c
 80a0e98:	080a47a1 	.word	0x080a47a1
 80a0e9c:	080a47a5 	.word	0x080a47a5

080a0ea0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a0ea0:	b510      	push	{r4, lr}
 80a0ea2:	4b05      	ldr	r3, [pc, #20]	; (80a0eb8 <_ZN10JsonBufferD1Ev+0x18>)
 80a0ea4:	4604      	mov	r4, r0
 80a0ea6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a0ea8:	7c03      	ldrb	r3, [r0, #16]
 80a0eaa:	b91b      	cbnz	r3, 80a0eb4 <_ZN10JsonBufferD1Ev+0x14>
 80a0eac:	6840      	ldr	r0, [r0, #4]
 80a0eae:	b108      	cbz	r0, 80a0eb4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a0eb0:	f000 faa8 	bl	80a1404 <free>
	}
}
 80a0eb4:	4620      	mov	r0, r4
 80a0eb6:	bd10      	pop	{r4, pc}
 80a0eb8:	080a47b0 	.word	0x080a47b0

080a0ebc <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a0ebc:	b510      	push	{r4, lr}
 80a0ebe:	4604      	mov	r4, r0
}
 80a0ec0:	f7ff ffee 	bl	80a0ea0 <_ZN10JsonBufferD1Ev>
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	2114      	movs	r1, #20
 80a0ec8:	f003 f86f 	bl	80a3faa <_ZdlPvj>
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	bd10      	pop	{r4, pc}

080a0ed0 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a0ed0:	b510      	push	{r4, lr}
 80a0ed2:	4b07      	ldr	r3, [pc, #28]	; (80a0ef0 <_ZN10JsonParserD1Ev+0x20>)
 80a0ed4:	4604      	mov	r4, r0
 80a0ed6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a0ed8:	7c03      	ldrb	r3, [r0, #16]
 80a0eda:	b91b      	cbnz	r3, 80a0ee4 <_ZN10JsonParserD1Ev+0x14>
 80a0edc:	6940      	ldr	r0, [r0, #20]
 80a0ede:	b108      	cbz	r0, 80a0ee4 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a0ee0:	f000 fa90 	bl	80a1404 <free>
JsonParser::~JsonParser() {
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	f7ff ffdb 	bl	80a0ea0 <_ZN10JsonBufferD1Ev>
	}
}
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	bd10      	pop	{r4, pc}
 80a0eee:	bf00      	nop
 80a0ef0:	080a47c0 	.word	0x080a47c0

080a0ef4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a0ef4:	b510      	push	{r4, lr}
 80a0ef6:	4604      	mov	r4, r0
}
 80a0ef8:	f7ff ffea 	bl	80a0ed0 <_ZN10JsonParserD1Ev>
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	212c      	movs	r1, #44	; 0x2c
 80a0f00:	f003 f853 	bl	80a3faa <_ZdlPvj>
 80a0f04:	4620      	mov	r0, r4
 80a0f06:	bd10      	pop	{r4, pc}

080a0f08 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0f08:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a0f0c:	2200      	movs	r2, #0
 80a0f0e:	60c2      	str	r2, [r0, #12]
 80a0f10:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a0f12:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0f14:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a0f16:	6143      	str	r3, [r0, #20]
 80a0f18:	4a02      	ldr	r2, [pc, #8]	; (80a0f24 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a0f1a:	9b02      	ldr	r3, [sp, #8]
 80a0f1c:	6002      	str	r2, [r0, #0]
 80a0f1e:	61c3      	str	r3, [r0, #28]
}
 80a0f20:	bd10      	pop	{r4, pc}
 80a0f22:	bf00      	nop
 80a0f24:	080a47c0 	.word	0x080a47c0

080a0f28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b02      	ldr	r3, [pc, #8]	; (80a0f34 <os_mutex_recursive_create+0xc>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0f30:	9301      	str	r3, [sp, #4]
 80a0f32:	bd08      	pop	{r3, pc}
 80a0f34:	080601d0 	.word	0x080601d0

080a0f38 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0f38:	b508      	push	{r3, lr}
 80a0f3a:	4b02      	ldr	r3, [pc, #8]	; (80a0f44 <os_mutex_recursive_destroy+0xc>)
 80a0f3c:	681b      	ldr	r3, [r3, #0]
 80a0f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f40:	9301      	str	r3, [sp, #4]
 80a0f42:	bd08      	pop	{r3, pc}
 80a0f44:	080601d0 	.word	0x080601d0

080a0f48 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <os_mutex_recursive_lock+0xc>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0f50:	9301      	str	r3, [sp, #4]
 80a0f52:	bd08      	pop	{r3, pc}
 80a0f54:	080601d0 	.word	0x080601d0

080a0f58 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0f58:	b508      	push	{r3, lr}
 80a0f5a:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <os_mutex_recursive_unlock+0xc>)
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	bd08      	pop	{r3, pc}
 80a0f64:	080601d0 	.word	0x080601d0

080a0f68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0f68:	b508      	push	{r3, lr}
 80a0f6a:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <HAL_RNG_GetRandomNumber+0xc>)
 80a0f6c:	681b      	ldr	r3, [r3, #0]
 80a0f6e:	685b      	ldr	r3, [r3, #4]
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	bd08      	pop	{r3, pc}
 80a0f74:	0806019c 	.word	0x0806019c

080a0f78 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0f78:	b508      	push	{r3, lr}
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <HAL_Delay_Microseconds+0xc>)
 80a0f7c:	681b      	ldr	r3, [r3, #0]
 80a0f7e:	68db      	ldr	r3, [r3, #12]
 80a0f80:	9301      	str	r3, [sp, #4]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	0806019c 	.word	0x0806019c

080a0f88 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0f88:	b508      	push	{r3, lr}
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	695b      	ldr	r3, [r3, #20]
 80a0f90:	9301      	str	r3, [sp, #4]
 80a0f92:	bd08      	pop	{r3, pc}
 80a0f94:	0806019c 	.word	0x0806019c

080a0f98 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <HAL_Validate_Pin_Function+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	685b      	ldr	r3, [r3, #4]
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	080601b0 	.word	0x080601b0

080a0fa8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <HAL_Pin_Mode+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	689b      	ldr	r3, [r3, #8]
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	080601b0 	.word	0x080601b0

080a0fb8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <HAL_Get_Pin_Mode+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	68db      	ldr	r3, [r3, #12]
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601b0 	.word	0x080601b0

080a0fc8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <HAL_GPIO_Write+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	691b      	ldr	r3, [r3, #16]
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601b0 	.word	0x080601b0

080a0fd8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <hal_adc_read+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601b0 	.word	0x080601b0

080a0fe8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <hal_i2c_write+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601ac 	.word	0x080601ac

080a0ff8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <hal_i2c_available+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601ac 	.word	0x080601ac

080a1008 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <hal_i2c_read+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601ac 	.word	0x080601ac

080a1018 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1018:	b508      	push	{r3, lr}
 80a101a:	4b02      	ldr	r3, [pc, #8]	; (80a1024 <hal_i2c_peek+0xc>)
 80a101c:	681b      	ldr	r3, [r3, #0]
 80a101e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1020:	9301      	str	r3, [sp, #4]
 80a1022:	bd08      	pop	{r3, pc}
 80a1024:	080601ac 	.word	0x080601ac

080a1028 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <hal_i2c_flush+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601ac 	.word	0x080601ac

080a1038 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <hal_i2c_is_enabled+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601ac 	.word	0x080601ac

080a1048 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b03      	ldr	r3, [pc, #12]	; (80a1058 <hal_i2c_init+0x10>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1052:	9301      	str	r3, [sp, #4]
 80a1054:	bd08      	pop	{r3, pc}
 80a1056:	0000      	.short	0x0000
 80a1058:	080601ac 	.word	0x080601ac

080a105c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <socket_active_status+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	681b      	ldr	r3, [r3, #0]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	080601bc 	.word	0x080601bc

080a106c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <socket_handle_valid+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	685b      	ldr	r3, [r3, #4]
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	080601bc 	.word	0x080601bc

080a107c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <socket_create+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	689b      	ldr	r3, [r3, #8]
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	080601bc 	.word	0x080601bc

080a108c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a108c:	b508      	push	{r3, lr}
 80a108e:	4b02      	ldr	r3, [pc, #8]	; (80a1098 <socket_connect+0xc>)
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	68db      	ldr	r3, [r3, #12]
 80a1094:	9301      	str	r3, [sp, #4]
 80a1096:	bd08      	pop	{r3, pc}
 80a1098:	080601bc 	.word	0x080601bc

080a109c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a109c:	b508      	push	{r3, lr}
 80a109e:	4b02      	ldr	r3, [pc, #8]	; (80a10a8 <socket_receive+0xc>)
 80a10a0:	681b      	ldr	r3, [r3, #0]
 80a10a2:	691b      	ldr	r3, [r3, #16]
 80a10a4:	9301      	str	r3, [sp, #4]
 80a10a6:	bd08      	pop	{r3, pc}
 80a10a8:	080601bc 	.word	0x080601bc

080a10ac <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a10ac:	b508      	push	{r3, lr}
 80a10ae:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <socket_close+0xc>)
 80a10b0:	681b      	ldr	r3, [r3, #0]
 80a10b2:	6a1b      	ldr	r3, [r3, #32]
 80a10b4:	9301      	str	r3, [sp, #4]
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	080601bc 	.word	0x080601bc

080a10bc <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a10bc:	b508      	push	{r3, lr}
 80a10be:	4b02      	ldr	r3, [pc, #8]	; (80a10c8 <socket_handle_invalid+0xc>)
 80a10c0:	681b      	ldr	r3, [r3, #0]
 80a10c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a10c4:	9301      	str	r3, [sp, #4]
 80a10c6:	bd08      	pop	{r3, pc}
 80a10c8:	080601bc 	.word	0x080601bc

080a10cc <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a10cc:	b508      	push	{r3, lr}
 80a10ce:	4b02      	ldr	r3, [pc, #8]	; (80a10d8 <socket_send_ex+0xc>)
 80a10d0:	681b      	ldr	r3, [r3, #0]
 80a10d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a10d4:	9301      	str	r3, [sp, #4]
 80a10d6:	bd08      	pop	{r3, pc}
 80a10d8:	080601bc 	.word	0x080601bc

080a10dc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a10dc:	b508      	push	{r3, lr}
 80a10de:	4b02      	ldr	r3, [pc, #8]	; (80a10e8 <hal_spi_init+0xc>)
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	69db      	ldr	r3, [r3, #28]
 80a10e4:	9301      	str	r3, [sp, #4]
 80a10e6:	bd08      	pop	{r3, pc}
 80a10e8:	080601b4 	.word	0x080601b4

080a10ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <hal_spi_is_enabled+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	6a1b      	ldr	r3, [r3, #32]
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	080601b4 	.word	0x080601b4

080a10fc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <hal_usart_init+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	699b      	ldr	r3, [r3, #24]
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601c4 	.word	0x080601c4

080a110c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <hal_usart_end+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	6a1b      	ldr	r3, [r3, #32]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601c4 	.word	0x080601c4

080a111c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <hal_usart_write+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601c4 	.word	0x080601c4

080a112c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <hal_usart_available+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601c4 	.word	0x080601c4

080a113c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <hal_usart_read+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601c4 	.word	0x080601c4

080a114c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <hal_usart_peek+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601c4 	.word	0x080601c4

080a115c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <hal_usart_flush+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601c4 	.word	0x080601c4

080a116c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <hal_usart_is_enabled+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601c4 	.word	0x080601c4

080a117c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <hal_usart_available_data_for_write+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601c4 	.word	0x080601c4

080a118c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <hal_usart_begin_config+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601c4 	.word	0x080601c4

080a119c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <HAL_USB_USART_Init+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	681b      	ldr	r3, [r3, #0]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601d8 	.word	0x080601d8

080a11ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <HAL_USB_USART_Begin+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	685b      	ldr	r3, [r3, #4]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601d8 	.word	0x080601d8

080a11bc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <HAL_USB_USART_End+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	689b      	ldr	r3, [r3, #8]
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601d8 	.word	0x080601d8

080a11cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <HAL_USB_USART_Available_Data+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	691b      	ldr	r3, [r3, #16]
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601d8 	.word	0x080601d8

080a11dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	695b      	ldr	r3, [r3, #20]
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601d8 	.word	0x080601d8

080a11ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <HAL_USB_USART_Receive_Data+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	699b      	ldr	r3, [r3, #24]
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601d8 	.word	0x080601d8

080a11fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <HAL_USB_USART_Send_Data+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	69db      	ldr	r3, [r3, #28]
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601d8 	.word	0x080601d8

080a120c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <HAL_USB_USART_Flush_Data+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6a1b      	ldr	r3, [r3, #32]
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601d8 	.word	0x080601d8

080a121c <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <HAL_NET_SetNetWatchDog+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601c0 	.word	0x080601c0

080a122c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <inet_gethostbyname+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601c0 	.word	0x080601c0

080a123c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <panic_+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080201a8 	.word	0x080201a8

080a124c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <log_message+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080201a8 	.word	0x080201a8

080a125c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <log_level_name+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080201a8 	.word	0x080201a8

080a126c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <log_set_callbacks+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080201a8 	.word	0x080201a8

080a127c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <set_system_mode+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	685b      	ldr	r3, [r3, #4]
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601a4 	.word	0x080601a4

080a128c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <system_delay_ms+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	695b      	ldr	r3, [r3, #20]
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601a4 	.word	0x080601a4

080a129c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <system_thread_set_state+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601a4 	.word	0x080601a4

080a12ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <application_thread_current+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601a4 	.word	0x080601a4

080a12bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <application_thread_invoke+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601a4 	.word	0x080601a4

080a12cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b03      	ldr	r3, [pc, #12]	; (80a12dc <system_ctrl_set_app_request_handler+0x10>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a12d6:	9301      	str	r3, [sp, #4]
 80a12d8:	bd08      	pop	{r3, pc}
 80a12da:	0000      	.short	0x0000
 80a12dc:	080601a4 	.word	0x080601a4

080a12e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b03      	ldr	r3, [pc, #12]	; (80a12f0 <system_ctrl_set_result+0x10>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a12ea:	9301      	str	r3, [sp, #4]
 80a12ec:	bd08      	pop	{r3, pc}
 80a12ee:	0000      	.short	0x0000
 80a12f0:	080601a4 	.word	0x080601a4

080a12f4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a12f4:	b508      	push	{r3, lr}
 80a12f6:	4b02      	ldr	r3, [pc, #8]	; (80a1300 <spark_variable+0xc>)
 80a12f8:	681b      	ldr	r3, [r3, #0]
 80a12fa:	681b      	ldr	r3, [r3, #0]
 80a12fc:	9301      	str	r3, [sp, #4]
 80a12fe:	bd08      	pop	{r3, pc}
 80a1300:	080601cc 	.word	0x080601cc

080a1304 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1304:	b508      	push	{r3, lr}
 80a1306:	4b02      	ldr	r3, [pc, #8]	; (80a1310 <spark_cloud_flag_connected+0xc>)
 80a1308:	681b      	ldr	r3, [r3, #0]
 80a130a:	695b      	ldr	r3, [r3, #20]
 80a130c:	9301      	str	r3, [sp, #4]
 80a130e:	bd08      	pop	{r3, pc}
 80a1310:	080601cc 	.word	0x080601cc

080a1314 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1314:	b508      	push	{r3, lr}
 80a1316:	4b02      	ldr	r3, [pc, #8]	; (80a1320 <spark_send_event+0xc>)
 80a1318:	681b      	ldr	r3, [r3, #0]
 80a131a:	6a1b      	ldr	r3, [r3, #32]
 80a131c:	9301      	str	r3, [sp, #4]
 80a131e:	bd08      	pop	{r3, pc}
 80a1320:	080601cc 	.word	0x080601cc

080a1324 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1324:	b508      	push	{r3, lr}
 80a1326:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1328:	681b      	ldr	r3, [r3, #0]
 80a132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a132c:	9301      	str	r3, [sp, #4]
 80a132e:	bd08      	pop	{r3, pc}
 80a1330:	080601cc 	.word	0x080601cc

080a1334 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1334:	b508      	push	{r3, lr}
 80a1336:	4b02      	ldr	r3, [pc, #8]	; (80a1340 <network_connect+0xc>)
 80a1338:	681b      	ldr	r3, [r3, #0]
 80a133a:	685b      	ldr	r3, [r3, #4]
 80a133c:	9301      	str	r3, [sp, #4]
 80a133e:	bd08      	pop	{r3, pc}
 80a1340:	080601c8 	.word	0x080601c8

080a1344 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1344:	b508      	push	{r3, lr}
 80a1346:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <network_connecting+0xc>)
 80a1348:	681b      	ldr	r3, [r3, #0]
 80a134a:	689b      	ldr	r3, [r3, #8]
 80a134c:	9301      	str	r3, [sp, #4]
 80a134e:	bd08      	pop	{r3, pc}
 80a1350:	080601c8 	.word	0x080601c8

080a1354 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1354:	b508      	push	{r3, lr}
 80a1356:	4b02      	ldr	r3, [pc, #8]	; (80a1360 <network_disconnect+0xc>)
 80a1358:	681b      	ldr	r3, [r3, #0]
 80a135a:	68db      	ldr	r3, [r3, #12]
 80a135c:	9301      	str	r3, [sp, #4]
 80a135e:	bd08      	pop	{r3, pc}
 80a1360:	080601c8 	.word	0x080601c8

080a1364 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1364:	b508      	push	{r3, lr}
 80a1366:	4b02      	ldr	r3, [pc, #8]	; (80a1370 <network_ready+0xc>)
 80a1368:	681b      	ldr	r3, [r3, #0]
 80a136a:	691b      	ldr	r3, [r3, #16]
 80a136c:	9301      	str	r3, [sp, #4]
 80a136e:	bd08      	pop	{r3, pc}
 80a1370:	080601c8 	.word	0x080601c8

080a1374 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1374:	b508      	push	{r3, lr}
 80a1376:	4b02      	ldr	r3, [pc, #8]	; (80a1380 <network_on+0xc>)
 80a1378:	681b      	ldr	r3, [r3, #0]
 80a137a:	695b      	ldr	r3, [r3, #20]
 80a137c:	9301      	str	r3, [sp, #4]
 80a137e:	bd08      	pop	{r3, pc}
 80a1380:	080601c8 	.word	0x080601c8

080a1384 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1384:	b508      	push	{r3, lr}
 80a1386:	4b02      	ldr	r3, [pc, #8]	; (80a1390 <network_off+0xc>)
 80a1388:	681b      	ldr	r3, [r3, #0]
 80a138a:	699b      	ldr	r3, [r3, #24]
 80a138c:	9301      	str	r3, [sp, #4]
 80a138e:	bd08      	pop	{r3, pc}
 80a1390:	080601c8 	.word	0x080601c8

080a1394 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1394:	b508      	push	{r3, lr}
 80a1396:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <network_listen+0xc>)
 80a1398:	681b      	ldr	r3, [r3, #0]
 80a139a:	69db      	ldr	r3, [r3, #28]
 80a139c:	9301      	str	r3, [sp, #4]
 80a139e:	bd08      	pop	{r3, pc}
 80a13a0:	080601c8 	.word	0x080601c8

080a13a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a13a4:	b508      	push	{r3, lr}
 80a13a6:	4b02      	ldr	r3, [pc, #8]	; (80a13b0 <network_listening+0xc>)
 80a13a8:	681b      	ldr	r3, [r3, #0]
 80a13aa:	6a1b      	ldr	r3, [r3, #32]
 80a13ac:	9301      	str	r3, [sp, #4]
 80a13ae:	bd08      	pop	{r3, pc}
 80a13b0:	080601c8 	.word	0x080601c8

080a13b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a13b4:	b508      	push	{r3, lr}
 80a13b6:	4b02      	ldr	r3, [pc, #8]	; (80a13c0 <network_set_listen_timeout+0xc>)
 80a13b8:	681b      	ldr	r3, [r3, #0]
 80a13ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13bc:	9301      	str	r3, [sp, #4]
 80a13be:	bd08      	pop	{r3, pc}
 80a13c0:	080601c8 	.word	0x080601c8

080a13c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a13c4:	b508      	push	{r3, lr}
 80a13c6:	4b02      	ldr	r3, [pc, #8]	; (80a13d0 <network_get_listen_timeout+0xc>)
 80a13c8:	681b      	ldr	r3, [r3, #0]
 80a13ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a13cc:	9301      	str	r3, [sp, #4]
 80a13ce:	bd08      	pop	{r3, pc}
 80a13d0:	080601c8 	.word	0x080601c8

080a13d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a13d4:	b508      	push	{r3, lr}
 80a13d6:	4b02      	ldr	r3, [pc, #8]	; (80a13e0 <network_is_on+0xc>)
 80a13d8:	681b      	ldr	r3, [r3, #0]
 80a13da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a13dc:	9301      	str	r3, [sp, #4]
 80a13de:	bd08      	pop	{r3, pc}
 80a13e0:	080601c8 	.word	0x080601c8

080a13e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a13e4:	b508      	push	{r3, lr}
 80a13e6:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <network_is_off+0xc>)
 80a13e8:	681b      	ldr	r3, [r3, #0]
 80a13ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a13ec:	9301      	str	r3, [sp, #4]
 80a13ee:	bd08      	pop	{r3, pc}
 80a13f0:	080601c8 	.word	0x080601c8

080a13f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a13f4:	b508      	push	{r3, lr}
 80a13f6:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <malloc+0xc>)
 80a13f8:	681b      	ldr	r3, [r3, #0]
 80a13fa:	681b      	ldr	r3, [r3, #0]
 80a13fc:	9301      	str	r3, [sp, #4]
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	080601a0 	.word	0x080601a0

080a1404 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <free+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	685b      	ldr	r3, [r3, #4]
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601a0 	.word	0x080601a0

080a1414 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <realloc+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	689b      	ldr	r3, [r3, #8]
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601a0 	.word	0x080601a0

080a1424 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <vsnprintf+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601a0 	.word	0x080601a0

080a1434 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <abort+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601a0 	.word	0x080601a0

080a1444 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <_malloc_r+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601a0 	.word	0x080601a0

080a1454 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <newlib_impure_ptr_callback+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601a0 	.word	0x080601a0

080a1464 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1464:	2100      	movs	r1, #0
 80a1466:	f7ff bf11 	b.w	80a128c <system_delay_ms>

080a146a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a146a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a146c:	6883      	ldr	r3, [r0, #8]
 80a146e:	4604      	mov	r4, r0
 80a1470:	b90b      	cbnz	r3, 80a1476 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1472:	f002 fda0 	bl	80a3fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1476:	68c3      	ldr	r3, [r0, #12]
 80a1478:	4798      	blx	r3
      if (_M_manager)
 80a147a:	68a3      	ldr	r3, [r4, #8]
 80a147c:	b11b      	cbz	r3, 80a1486 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a147e:	2203      	movs	r2, #3
 80a1480:	4621      	mov	r1, r4
 80a1482:	4620      	mov	r0, r4
 80a1484:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1486:	4620      	mov	r0, r4
}
 80a1488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a148c:	2110      	movs	r1, #16
 80a148e:	f002 bd8c 	b.w	80a3faa <_ZdlPvj>

080a1492 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1492:	4770      	bx	lr

080a1494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1494:	2000      	movs	r0, #0
 80a1496:	4770      	bx	lr

080a1498 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1498:	b510      	push	{r4, lr}
 80a149a:	4604      	mov	r4, r0
 80a149c:	2110      	movs	r1, #16
 80a149e:	f002 fd84 	bl	80a3faa <_ZdlPvj>
 80a14a2:	4620      	mov	r0, r4
 80a14a4:	bd10      	pop	{r4, pc}

080a14a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a14a6:	b508      	push	{r3, lr}
      { delete this; }
 80a14a8:	f7ff fff6 	bl	80a1498 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a14ac:	bd08      	pop	{r3, pc}

080a14ae <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a14ae:	b510      	push	{r4, lr}
      if (_M_manager)
 80a14b0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a14b2:	4604      	mov	r4, r0
      if (_M_manager)
 80a14b4:	b113      	cbz	r3, 80a14bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a14b6:	2203      	movs	r2, #3
 80a14b8:	4601      	mov	r1, r0
 80a14ba:	4798      	blx	r3
    }
 80a14bc:	4620      	mov	r0, r4
 80a14be:	bd10      	pop	{r4, pc}

080a14c0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a14c0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a14c2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a14c4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a14c8:	6002      	str	r2, [r0, #0]
 80a14ca:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a14cc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a14ce:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a14d0:	680c      	ldr	r4, [r1, #0]
 80a14d2:	8085      	strh	r5, [r0, #4]
 80a14d4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a14d6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a14d8:	bd30      	pop	{r4, r5, pc}

080a14da <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a14da:	b510      	push	{r4, lr}
 80a14dc:	4604      	mov	r4, r0
    free((void*)msg_);
 80a14de:	6800      	ldr	r0, [r0, #0]
 80a14e0:	f7ff ff90 	bl	80a1404 <free>
}
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	bd10      	pop	{r4, pc}

080a14e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a14e8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a14ea:	68c4      	ldr	r4, [r0, #12]
 80a14ec:	b1f4      	cbz	r4, 80a152c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a14ee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a14f0:	2b02      	cmp	r3, #2
 80a14f2:	d103      	bne.n	80a14fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a14f4:	f104 000c 	add.w	r0, r4, #12
 80a14f8:	f7ff ffef 	bl	80a14da <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a14fc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a14fe:	b135      	cbz	r5, 80a150e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1500:	4628      	mov	r0, r5
 80a1502:	f7ff ffd4 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
 80a1506:	2110      	movs	r1, #16
 80a1508:	4628      	mov	r0, r5
 80a150a:	f002 fd4e 	bl	80a3faa <_ZdlPvj>
 80a150e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1510:	b135      	cbz	r5, 80a1520 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1512:	4628      	mov	r0, r5
 80a1514:	f7ff ffcb 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
 80a1518:	2110      	movs	r1, #16
 80a151a:	4628      	mov	r0, r5
 80a151c:	f002 fd45 	bl	80a3faa <_ZdlPvj>
 80a1520:	4620      	mov	r0, r4
 80a1522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1526:	2114      	movs	r1, #20
 80a1528:	f002 bd3f 	b.w	80a3faa <_ZdlPvj>
 80a152c:	bd38      	pop	{r3, r4, r5, pc}

080a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a152e:	680b      	ldr	r3, [r1, #0]
 80a1530:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a1532:	b113      	cbz	r3, 80a153a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1534:	685a      	ldr	r2, [r3, #4]
 80a1536:	3201      	adds	r2, #1
 80a1538:	605a      	str	r2, [r3, #4]
      }
 80a153a:	4770      	bx	lr

080a153c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a153c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a153e:	460e      	mov	r6, r1
 80a1540:	4604      	mov	r4, r0
 80a1542:	f856 3b04 	ldr.w	r3, [r6], #4
 80a1546:	460d      	mov	r5, r1
 80a1548:	a801      	add	r0, sp, #4
 80a154a:	4631      	mov	r1, r6
 80a154c:	9300      	str	r3, [sp, #0]
 80a154e:	f7ff ffee 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1552:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1554:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1556:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a1558:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a155a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a155c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a155e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1560:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1562:	f7fe fea2 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1566:	4630      	mov	r0, r6
 80a1568:	f7fe fe9f 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a156c:	4628      	mov	r0, r5
 80a156e:	2108      	movs	r1, #8
 80a1570:	f002 fd1b 	bl	80a3faa <_ZdlPvj>
        return p;
    }
 80a1574:	4620      	mov	r0, r4
 80a1576:	b002      	add	sp, #8
 80a1578:	bd70      	pop	{r4, r5, r6, pc}

080a157a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a157a:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a157c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a157e:	460b      	mov	r3, r1
 80a1580:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1582:	c803      	ldmia	r0, {r0, r1}
 80a1584:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1588:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a158c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1590:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1594:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1598:	b002      	add	sp, #8
 80a159a:	bd10      	pop	{r4, pc}

080a159c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a159c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a159e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a15a0:	b90a      	cbnz	r2, 80a15a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a15a2:	f002 fd08 	bl	80a3fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a15a6:	68c3      	ldr	r3, [r0, #12]
    }
 80a15a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a15ac:	4718      	bx	r3

080a15ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a15ae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a15b0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a15b2:	f100 0110 	add.w	r1, r0, #16
 80a15b6:	f7ff fff1 	bl	80a159c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a15ba:	bd08      	pop	{r3, pc}

080a15bc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a15bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a15be:	b510      	push	{r4, lr}
      if (_M_empty())
 80a15c0:	b90a      	cbnz	r2, 80a15c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a15c2:	f002 fcf8 	bl	80a3fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a15c6:	68c3      	ldr	r3, [r0, #12]
    }
 80a15c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a15cc:	4718      	bx	r3

080a15ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a15ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a15d0:	6800      	ldr	r0, [r0, #0]
 80a15d2:	f100 0110 	add.w	r1, r0, #16
 80a15d6:	f7ff fff1 	bl	80a15bc <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a15da:	bd08      	pop	{r3, pc}

080a15dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15dc:	b538      	push	{r3, r4, r5, lr}
 80a15de:	2300      	movs	r3, #0
 80a15e0:	4604      	mov	r4, r0
 80a15e2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15e4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15e6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15e8:	f7fe fd55 	bl	80a0096 <_Znwj>
 80a15ec:	b128      	cbz	r0, 80a15fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a15ee:	2301      	movs	r3, #1
 80a15f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a15f4:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a15f6:	60c5      	str	r5, [r0, #12]
 80a15f8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15fa:	6020      	str	r0, [r4, #0]
	}
 80a15fc:	4620      	mov	r0, r4
 80a15fe:	bd38      	pop	{r3, r4, r5, pc}
 80a1600:	080a47d0 	.word	0x080a47d0

080a1604 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1604:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1606:	2300      	movs	r3, #0
 80a1608:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a160a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a160c:	4604      	mov	r4, r0
 80a160e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1610:	b12b      	cbz	r3, 80a161e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1612:	2202      	movs	r2, #2
 80a1614:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1616:	68eb      	ldr	r3, [r5, #12]
 80a1618:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a161a:	68ab      	ldr	r3, [r5, #8]
 80a161c:	60a3      	str	r3, [r4, #8]
    }
 80a161e:	4620      	mov	r0, r4
 80a1620:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1624:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1626:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1628:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a162a:	4668      	mov	r0, sp
 80a162c:	f7ff ff48 	bl	80a14c0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1630:	f04f 0302 	mov.w	r3, #2
 80a1634:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1638:	2a00      	cmp	r2, #0
 80a163a:	d103      	bne.n	80a1644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a163c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1640:	2900      	cmp	r1, #0
 80a1642:	d1f7      	bne.n	80a1634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1644:	d125      	bne.n	80a1692 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1646:	f104 050c 	add.w	r5, r4, #12
 80a164a:	4669      	mov	r1, sp
 80a164c:	4628      	mov	r0, r5
 80a164e:	f7ff ff37 	bl	80a14c0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1652:	2301      	movs	r3, #1
 80a1654:	f3bf 8f5b 	dmb	ish
 80a1658:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a165a:	2000      	movs	r0, #0
 80a165c:	f3bf 8f5b 	dmb	ish
 80a1660:	f104 0308 	add.w	r3, r4, #8
 80a1664:	e853 6f00 	ldrex	r6, [r3]
 80a1668:	e843 0200 	strex	r2, r0, [r3]
 80a166c:	2a00      	cmp	r2, #0
 80a166e:	d1f9      	bne.n	80a1664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a1670:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1674:	b16e      	cbz	r6, 80a1692 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a1676:	f7ff fe19 	bl	80a12ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a167a:	b178      	cbz	r0, 80a169c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a167c:	4629      	mov	r1, r5
 80a167e:	4630      	mov	r0, r6
 80a1680:	f7ff ff8c 	bl	80a159c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1684:	4630      	mov	r0, r6
 80a1686:	f7ff ff12 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a168a:	2110      	movs	r1, #16
 80a168c:	4630      	mov	r0, r6
 80a168e:	f002 fc8c 	bl	80a3faa <_ZdlPvj>
        p_->setError(std::move(error));
 80a1692:	4668      	mov	r0, sp
 80a1694:	f7ff ff21 	bl	80a14da <_ZN8particle5ErrorD1Ev>
    }
 80a1698:	b009      	add	sp, #36	; 0x24
 80a169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a169c:	4631      	mov	r1, r6
 80a169e:	a802      	add	r0, sp, #8
 80a16a0:	f7ff ffb0 	bl	80a1604 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a16a4:	68e0      	ldr	r0, [r4, #12]
 80a16a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a16aa:	b108      	cbz	r0, 80a16b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a16ac:	f002 fe2e 	bl	80a430c <strdup>
        type_(type) {
 80a16b0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a16b2:	2010      	movs	r0, #16
 80a16b4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a16b8:	f7fe fced 	bl	80a0096 <_Znwj>
 80a16bc:	4605      	mov	r5, r0
 80a16be:	b1e8      	cbz	r0, 80a16fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a16c0:	2700      	movs	r7, #0
 80a16c2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a16c4:	2018      	movs	r0, #24
 80a16c6:	f7fe fce6 	bl	80a0096 <_Znwj>
 80a16ca:	4604      	mov	r4, r0
 80a16cc:	b188      	cbz	r0, 80a16f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a16ce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a16d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a16d2:	a802      	add	r0, sp, #8
 80a16d4:	f7ff ff51 	bl	80a157a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a16d8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a16da:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a16dc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a16de:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a16e0:	9204      	str	r2, [sp, #16]
 80a16e2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a16e4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a16e6:	60e3      	str	r3, [r4, #12]
 80a16e8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a16ec:	9205      	str	r2, [sp, #20]
 80a16ee:	f7ff fee7 	bl	80a14c0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a16f2:	4b08      	ldr	r3, [pc, #32]	; (80a1714 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a16f4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a16f6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a16f8:	4b07      	ldr	r3, [pc, #28]	; (80a1718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a16fa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a16fc:	a806      	add	r0, sp, #24
 80a16fe:	f7ff feec 	bl	80a14da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1702:	a802      	add	r0, sp, #8
 80a1704:	f7ff fed3 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1708:	2200      	movs	r2, #0
 80a170a:	4629      	mov	r1, r5
 80a170c:	4803      	ldr	r0, [pc, #12]	; (80a171c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a170e:	f7ff fdd5 	bl	80a12bc <application_thread_invoke>
 80a1712:	e7b7      	b.n	80a1684 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1714:	080a15af 	.word	0x080a15af
 80a1718:	080a1845 	.word	0x080a1845
 80a171c:	080a146b 	.word	0x080a146b

080a1720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1724:	b08a      	sub	sp, #40	; 0x28
 80a1726:	4605      	mov	r5, r0
 80a1728:	460c      	mov	r4, r1
 80a172a:	4617      	mov	r7, r2
 80a172c:	4698      	mov	r8, r3
 80a172e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1732:	f7ff fde7 	bl	80a1304 <spark_cloud_flag_connected>
 80a1736:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1738:	4682      	mov	sl, r0
 80a173a:	bb38      	cbnz	r0, 80a178c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a173c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1740:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1742:	a905      	add	r1, sp, #20
 80a1744:	4630      	mov	r0, r6
 80a1746:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a174a:	f7ff feb9 	bl	80a14c0 <_ZN8particle5ErrorC1EOS0_>
 80a174e:	2014      	movs	r0, #20
 80a1750:	f7fe fca1 	bl	80a0096 <_Znwj>
 80a1754:	4604      	mov	r4, r0
 80a1756:	b148      	cbz	r0, 80a176c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1758:	2302      	movs	r3, #2
 80a175a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a175c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a175e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1762:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1764:	4631      	mov	r1, r6
 80a1766:	300c      	adds	r0, #12
 80a1768:	f7ff feaa 	bl	80a14c0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a176c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a176e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1770:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1774:	f7ff ff32 	bl	80a15dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1778:	4630      	mov	r0, r6
 80a177a:	f7ff feae 	bl	80a14da <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a177e:	a805      	add	r0, sp, #20
 80a1780:	f7ff feab 	bl	80a14da <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1784:	4628      	mov	r0, r5
 80a1786:	b00a      	add	sp, #40	; 0x28
 80a1788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a178c:	230c      	movs	r3, #12
 80a178e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1792:	2014      	movs	r0, #20
 80a1794:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a1798:	9307      	str	r3, [sp, #28]
 80a179a:	f7fe fc7c 	bl	80a0096 <_Znwj>
 80a179e:	4601      	mov	r1, r0
 80a17a0:	b128      	cbz	r0, 80a17ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a17a2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a17a6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a17aa:	f880 a001 	strb.w	sl, [r0, #1]
 80a17ae:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a17b0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a17b2:	f7ff ff13 	bl	80a15dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a17b6:	4b22      	ldr	r3, [pc, #136]	; (80a1840 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a17b8:	2008      	movs	r0, #8
 80a17ba:	9308      	str	r3, [sp, #32]
 80a17bc:	f7fe fc6b 	bl	80a0096 <_Znwj>
 80a17c0:	4682      	mov	sl, r0
 80a17c2:	b128      	cbz	r0, 80a17d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17c4:	9b03      	ldr	r3, [sp, #12]
 80a17c6:	a904      	add	r1, sp, #16
 80a17c8:	f840 3b04 	str.w	r3, [r0], #4
 80a17cc:	f7ff feaf 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a17d0:	4642      	mov	r2, r8
 80a17d2:	4639      	mov	r1, r7
 80a17d4:	4620      	mov	r0, r4
 80a17d6:	9600      	str	r6, [sp, #0]
 80a17d8:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a17dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a17e0:	f7ff fd98 	bl	80a1314 <spark_send_event>
 80a17e4:	b9b8      	cbnz	r0, 80a1816 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a17e6:	9b03      	ldr	r3, [sp, #12]
 80a17e8:	785b      	ldrb	r3, [r3, #1]
 80a17ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a17ee:	b993      	cbnz	r3, 80a1816 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a17f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a17f4:	a905      	add	r1, sp, #20
 80a17f6:	a803      	add	r0, sp, #12
 80a17f8:	9205      	str	r2, [sp, #20]
 80a17fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a17fe:	f7ff ff11 	bl	80a1624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1802:	a805      	add	r0, sp, #20
 80a1804:	f7ff fe69 	bl	80a14da <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1808:	a805      	add	r0, sp, #20
 80a180a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a180c:	f7ff fe96 	bl	80a153c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1810:	a806      	add	r0, sp, #24
 80a1812:	f7fe fd4a 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1816:	9b03      	ldr	r3, [sp, #12]
 80a1818:	a904      	add	r1, sp, #16
 80a181a:	a806      	add	r0, sp, #24
 80a181c:	9305      	str	r3, [sp, #20]
 80a181e:	f7ff fe86 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1822:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1824:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1826:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1828:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a182a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a182c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a182e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1830:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1832:	f7fe fd3a 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1836:	a804      	add	r0, sp, #16
 80a1838:	f7fe fd37 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a183c:	e7a2      	b.n	80a1784 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a183e:	bf00      	nop
 80a1840:	080a1909 	.word	0x080a1909

080a1844 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1844:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1848:	4605      	mov	r5, r0
	  switch (__op)
 80a184a:	d007      	beq.n	80a185c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a184c:	2a03      	cmp	r2, #3
 80a184e:	d018      	beq.n	80a1882 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a1850:	2a01      	cmp	r2, #1
 80a1852:	d101      	bne.n	80a1858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1854:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1856:	6003      	str	r3, [r0, #0]
	}
 80a1858:	2000      	movs	r0, #0
 80a185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a185c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a185e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1860:	f7fe fc19 	bl	80a0096 <_Znwj>
 80a1864:	4604      	mov	r4, r0
 80a1866:	b150      	cbz	r0, 80a187e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1868:	4631      	mov	r1, r6
 80a186a:	f7ff fecb 	bl	80a1604 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a186e:	6930      	ldr	r0, [r6, #16]
 80a1870:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1874:	b108      	cbz	r0, 80a187a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1876:	f002 fd49 	bl	80a430c <strdup>
        type_(type) {
 80a187a:	6120      	str	r0, [r4, #16]
 80a187c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a187e:	602c      	str	r4, [r5, #0]
	}
 80a1880:	e7ea      	b.n	80a1858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1882:	6804      	ldr	r4, [r0, #0]
 80a1884:	2c00      	cmp	r4, #0
 80a1886:	d0e7      	beq.n	80a1858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a1888:	f104 0010 	add.w	r0, r4, #16
 80a188c:	f7ff fe25 	bl	80a14da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1890:	4620      	mov	r0, r4
 80a1892:	f7ff fe0c 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1896:	2118      	movs	r1, #24
 80a1898:	4620      	mov	r0, r4
 80a189a:	f002 fb86 	bl	80a3faa <_ZdlPvj>
 80a189e:	e7db      	b.n	80a1858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a18a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a18a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a18a2:	2300      	movs	r3, #0
 80a18a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a18a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a18a8:	4604      	mov	r4, r0
 80a18aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a18ac:	b12b      	cbz	r3, 80a18ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a18ae:	2202      	movs	r2, #2
 80a18b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a18b2:	68eb      	ldr	r3, [r5, #12]
 80a18b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a18b6:	68ab      	ldr	r3, [r5, #8]
 80a18b8:	60a3      	str	r3, [r4, #8]
    }
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	bd38      	pop	{r3, r4, r5, pc}

080a18be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a18be:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a18c0:	b570      	push	{r4, r5, r6, lr}
 80a18c2:	4604      	mov	r4, r0
	  switch (__op)
 80a18c4:	d007      	beq.n	80a18d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a18c6:	2a03      	cmp	r2, #3
 80a18c8:	d012      	beq.n	80a18f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a18ca:	2a01      	cmp	r2, #1
 80a18cc:	d101      	bne.n	80a18d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a18ce:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a18d0:	6003      	str	r3, [r0, #0]
	}
 80a18d2:	2000      	movs	r0, #0
 80a18d4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a18d6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a18d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a18da:	f7fe fbdc 	bl	80a0096 <_Znwj>
 80a18de:	4605      	mov	r5, r0
 80a18e0:	b120      	cbz	r0, 80a18ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a18e2:	4631      	mov	r1, r6
 80a18e4:	f7ff ffdc 	bl	80a18a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a18e8:	7c33      	ldrb	r3, [r6, #16]
 80a18ea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a18ec:	6025      	str	r5, [r4, #0]
	}
 80a18ee:	e7f0      	b.n	80a18d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a18f0:	6804      	ldr	r4, [r0, #0]
 80a18f2:	2c00      	cmp	r4, #0
 80a18f4:	d0ed      	beq.n	80a18d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f7ff fdd9 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a18fc:	2114      	movs	r1, #20
 80a18fe:	4620      	mov	r0, r4
 80a1900:	f002 fb53 	bl	80a3faa <_ZdlPvj>
 80a1904:	e7e5      	b.n	80a18d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1908 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1908:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a190a:	4604      	mov	r4, r0
 80a190c:	b089      	sub	sp, #36	; 0x24
 80a190e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1910:	a801      	add	r0, sp, #4
 80a1912:	4611      	mov	r1, r2
 80a1914:	f7ff fe12 	bl	80a153c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1918:	b1a4      	cbz	r4, 80a1944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a191a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a191c:	b11d      	cbz	r5, 80a1926 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a191e:	4628      	mov	r0, r5
 80a1920:	f002 fcf4 	bl	80a430c <strdup>
 80a1924:	4605      	mov	r5, r0
 80a1926:	a801      	add	r0, sp, #4
 80a1928:	a903      	add	r1, sp, #12
        type_(type) {
 80a192a:	9503      	str	r5, [sp, #12]
 80a192c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1930:	f7ff fe78 	bl	80a1624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1934:	a803      	add	r0, sp, #12
 80a1936:	f7ff fdd0 	bl	80a14da <_ZN8particle5ErrorD1Ev>
 80a193a:	a802      	add	r0, sp, #8
 80a193c:	f7fe fcb5 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1940:	b009      	add	sp, #36	; 0x24
 80a1942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1944:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1946:	9d01      	ldr	r5, [sp, #4]
 80a1948:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a194c:	2a00      	cmp	r2, #0
 80a194e:	d103      	bne.n	80a1958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1950:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1954:	2900      	cmp	r1, #0
 80a1956:	d1f7      	bne.n	80a1948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1958:	d1ef      	bne.n	80a193a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a195a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a195c:	f3bf 8f5b 	dmb	ish
 80a1960:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1962:	f3bf 8f5b 	dmb	ish
 80a1966:	1d2b      	adds	r3, r5, #4
 80a1968:	e853 6f00 	ldrex	r6, [r3]
 80a196c:	e843 4200 	strex	r2, r4, [r3]
 80a1970:	2a00      	cmp	r2, #0
 80a1972:	d1f9      	bne.n	80a1968 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1974:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1978:	2e00      	cmp	r6, #0
 80a197a:	d0de      	beq.n	80a193a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a197c:	4620      	mov	r0, r4
 80a197e:	f7ff fc95 	bl	80a12ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1982:	4607      	mov	r7, r0
 80a1984:	b160      	cbz	r0, 80a19a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1986:	4630      	mov	r0, r6
 80a1988:	f105 010c 	add.w	r1, r5, #12
 80a198c:	f7ff fe16 	bl	80a15bc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1990:	4630      	mov	r0, r6
 80a1992:	f7ff fd8c 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1996:	2110      	movs	r1, #16
 80a1998:	4630      	mov	r0, r6
 80a199a:	f002 fb06 	bl	80a3faa <_ZdlPvj>
 80a199e:	e7cc      	b.n	80a193a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a19a0:	4631      	mov	r1, r6
 80a19a2:	a803      	add	r0, sp, #12
 80a19a4:	f7ff ff7c 	bl	80a18a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a19a8:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a19aa:	2010      	movs	r0, #16
 80a19ac:	f88d 301c 	strb.w	r3, [sp, #28]
 80a19b0:	f7fe fb71 	bl	80a0096 <_Znwj>
 80a19b4:	4605      	mov	r5, r0
 80a19b6:	b1d0      	cbz	r0, 80a19ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a19b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19ba:	2014      	movs	r0, #20
 80a19bc:	f7fe fb6b 	bl	80a0096 <_Znwj>
 80a19c0:	4604      	mov	r4, r0
 80a19c2:	b178      	cbz	r0, 80a19e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a19c4:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a19c6:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a19c8:	a803      	add	r0, sp, #12
 80a19ca:	f7ff fdd6 	bl	80a157a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a19d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a19d6:	9205      	str	r2, [sp, #20]
 80a19d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19da:	60e3      	str	r3, [r4, #12]
 80a19dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a19e0:	9206      	str	r2, [sp, #24]
 80a19e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a19e4:	4b06      	ldr	r3, [pc, #24]	; (80a1a00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19e6:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a19e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a19ea:	4b06      	ldr	r3, [pc, #24]	; (80a1a04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a19ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a19ee:	a803      	add	r0, sp, #12
 80a19f0:	f7ff fd5d 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a19f4:	2200      	movs	r2, #0
 80a19f6:	4629      	mov	r1, r5
 80a19f8:	4803      	ldr	r0, [pc, #12]	; (80a1a08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a19fa:	f7ff fc5f 	bl	80a12bc <application_thread_invoke>
 80a19fe:	e7c7      	b.n	80a1990 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1a00:	080a15cf 	.word	0x080a15cf
 80a1a04:	080a18bf 	.word	0x080a18bf
 80a1a08:	080a146b 	.word	0x080a146b

080a1a0c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1a0c:	4770      	bx	lr

080a1a0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a10:	4606      	mov	r6, r0
 80a1a12:	4615      	mov	r5, r2
 80a1a14:	460c      	mov	r4, r1
 80a1a16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a18:	42bc      	cmp	r4, r7
 80a1a1a:	d006      	beq.n	80a1a2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a1c:	6833      	ldr	r3, [r6, #0]
 80a1a1e:	4630      	mov	r0, r6
 80a1a20:	689b      	ldr	r3, [r3, #8]
 80a1a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a26:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1a28:	e7f6      	b.n	80a1a18 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1a2a:	4628      	mov	r0, r5
 80a1a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a2e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1a2e:	2200      	movs	r2, #0
 80a1a30:	7c00      	ldrb	r0, [r0, #16]
 80a1a32:	f7ff bad9 	b.w	80a0fe8 <hal_i2c_write>

080a1a36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1a36:	2100      	movs	r1, #0
 80a1a38:	7c00      	ldrb	r0, [r0, #16]
 80a1a3a:	f7ff badd 	b.w	80a0ff8 <hal_i2c_available>

080a1a3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1a3e:	2100      	movs	r1, #0
 80a1a40:	7c00      	ldrb	r0, [r0, #16]
 80a1a42:	f7ff bae1 	b.w	80a1008 <hal_i2c_read>

080a1a46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1a46:	2100      	movs	r1, #0
 80a1a48:	7c00      	ldrb	r0, [r0, #16]
 80a1a4a:	f7ff bae5 	b.w	80a1018 <hal_i2c_peek>

080a1a4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1a4e:	2100      	movs	r1, #0
 80a1a50:	7c00      	ldrb	r0, [r0, #16]
 80a1a52:	f7ff bae9 	b.w	80a1028 <hal_i2c_flush>

080a1a56 <_ZN7TwoWireD0Ev>:
 80a1a56:	b510      	push	{r4, lr}
 80a1a58:	4604      	mov	r4, r0
 80a1a5a:	2114      	movs	r1, #20
 80a1a5c:	f002 faa5 	bl	80a3faa <_ZdlPvj>
 80a1a60:	4620      	mov	r0, r4
 80a1a62:	bd10      	pop	{r4, pc}

080a1a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1a64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a6a:	4604      	mov	r4, r0
 80a1a6c:	4608      	mov	r0, r1
 80a1a6e:	2100      	movs	r1, #0
 80a1a70:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1a74:	4b03      	ldr	r3, [pc, #12]	; (80a1a84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1a76:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1a78:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1a7a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1a7c:	f7ff fae4 	bl	80a1048 <hal_i2c_init>
}
 80a1a80:	4620      	mov	r0, r4
 80a1a82:	bd10      	pop	{r4, pc}
 80a1a84:	080a47ec 	.word	0x080a47ec

080a1a88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a8a:	460e      	mov	r6, r1
 80a1a8c:	2400      	movs	r4, #0
 80a1a8e:	f100 0708 	add.w	r7, r0, #8
 80a1a92:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1a94:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1a98:	220a      	movs	r2, #10
 80a1a9a:	4630      	mov	r0, r6
 80a1a9c:	f001 facb 	bl	80a3036 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aa0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aa2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1aa4:	d101      	bne.n	80a1aaa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1aa6:	4620      	mov	r0, r4
 80a1aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1aaa:	2c00      	cmp	r4, #0
 80a1aac:	d0f2      	beq.n	80a1a94 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1aae:	212e      	movs	r1, #46	; 0x2e
 80a1ab0:	4630      	mov	r0, r6
 80a1ab2:	f001 faa7 	bl	80a3004 <_ZN5Print5printEc>
 80a1ab6:	4404      	add	r4, r0
 80a1ab8:	e7ec      	b.n	80a1a94 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1abc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1abc:	b510      	push	{r4, lr}
 80a1abe:	4604      	mov	r4, r0
 80a1ac0:	4b04      	ldr	r3, [pc, #16]	; (80a1ad4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1ac2:	2211      	movs	r2, #17
 80a1ac4:	2100      	movs	r1, #0
 80a1ac6:	f840 3b04 	str.w	r3, [r0], #4
 80a1aca:	f002 fbc9 	bl	80a4260 <memset>
}
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	bd10      	pop	{r4, pc}
 80a1ad2:	bf00      	nop
 80a1ad4:	080a4814 	.word	0x080a4814

080a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ad8:	4603      	mov	r3, r0
 80a1ada:	4a07      	ldr	r2, [pc, #28]	; (80a1af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1adc:	b510      	push	{r4, lr}
 80a1ade:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1ae2:	f101 0210 	add.w	r2, r1, #16
 80a1ae6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1aea:	4291      	cmp	r1, r2
 80a1aec:	f843 4b04 	str.w	r4, [r3], #4
 80a1af0:	d1f9      	bne.n	80a1ae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1af2:	780a      	ldrb	r2, [r1, #0]
 80a1af4:	701a      	strb	r2, [r3, #0]
}
 80a1af6:	bd10      	pop	{r4, pc}
 80a1af8:	080a4814 	.word	0x080a4814

080a1afc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1afc:	4a02      	ldr	r2, [pc, #8]	; (80a1b08 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1afe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1b02:	2204      	movs	r2, #4
 80a1b04:	7502      	strb	r2, [r0, #20]
}
 80a1b06:	4770      	bx	lr
 80a1b08:	080a4814 	.word	0x080a4814

080a1b0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1b0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b12:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1b16:	2304      	movs	r3, #4
 80a1b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1b1c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1b20:	6044      	str	r4, [r0, #4]
 80a1b22:	7503      	strb	r3, [r0, #20]
}
 80a1b24:	bd10      	pop	{r4, pc}
	...

080a1b28 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b2a:	4d04      	ldr	r5, [pc, #16]	; (80a1b3c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b2c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b2e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b32:	9500      	str	r5, [sp, #0]
 80a1b34:	f7ff ffea 	bl	80a1b0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b38:	b003      	add	sp, #12
 80a1b3a:	bd30      	pop	{r4, r5, pc}
 80a1b3c:	080a4814 	.word	0x080a4814

080a1b40 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a1b40:	2201      	movs	r2, #1
 80a1b42:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a1b46:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a1b4a:	4618      	mov	r0, r3
 80a1b4c:	2901      	cmp	r1, #1
 80a1b4e:	d108      	bne.n	80a1b62 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a1b50:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a1b54:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a1b58:	3a01      	subs	r2, #1
 80a1b5a:	f103 0310 	add.w	r3, r3, #16
 80a1b5e:	d1f2      	bne.n	80a1b46 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a1b60:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a1b62:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a1b64:	bf04      	itt	eq
 80a1b66:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a1b6a:	1852      	addeq	r2, r2, r1
 80a1b6c:	e7f4      	b.n	80a1b58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a1b6e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a1b6e:	b40e      	push	{r1, r2, r3}
 80a1b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b74:	b087      	sub	sp, #28
 80a1b76:	af00      	add	r7, sp, #0
 80a1b78:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a1b7c:	f855 8b04 	ldr.w	r8, [r5], #4
 80a1b80:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1b82:	462b      	mov	r3, r5
 80a1b84:	4642      	mov	r2, r8
 80a1b86:	2110      	movs	r1, #16
 80a1b88:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a1b8c:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1b8e:	f7ff fc49 	bl	80a1424 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a1b92:	280f      	cmp	r0, #15
 80a1b94:	d91b      	bls.n	80a1bce <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a1b96:	f100 0308 	add.w	r3, r0, #8
 80a1b9a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a1b9e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a1ba0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1ba4:	4642      	mov	r2, r8
 80a1ba6:	1c41      	adds	r1, r0, #1
 80a1ba8:	462b      	mov	r3, r5
 80a1baa:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a1bac:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1bae:	f7ff fc39 	bl	80a1424 <vsnprintf>
        if (n > 0) {
 80a1bb2:	1e02      	subs	r2, r0, #0
 80a1bb4:	dd04      	ble.n	80a1bc0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a1bb6:	6823      	ldr	r3, [r4, #0]
 80a1bb8:	4669      	mov	r1, sp
 80a1bba:	4620      	mov	r0, r4
 80a1bbc:	689b      	ldr	r3, [r3, #8]
 80a1bbe:	4798      	blx	r3
 80a1bc0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a1bc2:	371c      	adds	r7, #28
 80a1bc4:	46bd      	mov	sp, r7
 80a1bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1bca:	b003      	add	sp, #12
 80a1bcc:	4770      	bx	lr
    } else if (n > 0) {
 80a1bce:	2800      	cmp	r0, #0
 80a1bd0:	d0f7      	beq.n	80a1bc2 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a1bd2:	6823      	ldr	r3, [r4, #0]
 80a1bd4:	4602      	mov	r2, r0
 80a1bd6:	689b      	ldr	r3, [r3, #8]
 80a1bd8:	4620      	mov	r0, r4
 80a1bda:	f107 0108 	add.w	r1, r7, #8
 80a1bde:	4798      	blx	r3
}
 80a1be0:	e7ef      	b.n	80a1bc2 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a1be2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1be2:	b510      	push	{r4, lr}
 80a1be4:	4604      	mov	r4, r0
          _M_dispose();
 80a1be6:	6803      	ldr	r3, [r0, #0]
 80a1be8:	689b      	ldr	r3, [r3, #8]
 80a1bea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1bec:	68a3      	ldr	r3, [r4, #8]
 80a1bee:	3b01      	subs	r3, #1
 80a1bf0:	60a3      	str	r3, [r4, #8]
 80a1bf2:	b92b      	cbnz	r3, 80a1c00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1bf4:	6823      	ldr	r3, [r4, #0]
 80a1bf6:	4620      	mov	r0, r4
    }
 80a1bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1bfc:	68db      	ldr	r3, [r3, #12]
 80a1bfe:	4718      	bx	r3
    }
 80a1c00:	bd10      	pop	{r4, pc}

080a1c02 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a1c02:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1c04:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a1c06:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1c0a:	2201      	movs	r2, #1
 80a1c0c:	689b      	ldr	r3, [r3, #8]
 80a1c0e:	f10d 0107 	add.w	r1, sp, #7
 80a1c12:	4798      	blx	r3
}
 80a1c14:	b003      	add	sp, #12
 80a1c16:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a1c1a:	b538      	push	{r3, r4, r5, lr}
 80a1c1c:	680b      	ldr	r3, [r1, #0]
 80a1c1e:	4604      	mov	r4, r0
 80a1c20:	6003      	str	r3, [r0, #0]
 80a1c22:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a1c24:	6843      	ldr	r3, [r0, #4]
 80a1c26:	429d      	cmp	r5, r3
 80a1c28:	d00c      	beq.n	80a1c44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a1c2a:	b115      	cbz	r5, 80a1c32 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a1c2c:	686b      	ldr	r3, [r5, #4]
 80a1c2e:	3301      	adds	r3, #1
 80a1c30:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a1c32:	6860      	ldr	r0, [r4, #4]
 80a1c34:	b128      	cbz	r0, 80a1c42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a1c36:	6843      	ldr	r3, [r0, #4]
 80a1c38:	3b01      	subs	r3, #1
 80a1c3a:	6043      	str	r3, [r0, #4]
 80a1c3c:	b90b      	cbnz	r3, 80a1c42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a1c3e:	f7ff ffd0 	bl	80a1be2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a1c42:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a1c44:	4620      	mov	r0, r4
 80a1c46:	bd38      	pop	{r3, r4, r5, pc}

080a1c48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1c48:	460b      	mov	r3, r1
 80a1c4a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1c4c:	2200      	movs	r2, #0
 80a1c4e:	b510      	push	{r4, lr}
 80a1c50:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1c52:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a1c56:	6083      	str	r3, [r0, #8]
    if (t) {
 80a1c58:	b90b      	cbnz	r3, 80a1c5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a1c5a:	4620      	mov	r0, r4
 80a1c5c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a1c5e:	f7ff ffdc 	bl	80a1c1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a1c62:	e7fa      	b.n	80a1c5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a1c64 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a1c64:	4603      	mov	r3, r0
    if (!t_) {
 80a1c66:	6880      	ldr	r0, [r0, #8]
 80a1c68:	b320      	cbz	r0, 80a1cb4 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a1c6a:	7802      	ldrb	r2, [r0, #0]
 80a1c6c:	2a03      	cmp	r2, #3
 80a1c6e:	d81a      	bhi.n	80a1ca6 <_ZNK5spark9JSONValue4typeEv+0x42>
 80a1c70:	e8df f002 	tbb	[pc, r2]
 80a1c74:	1b021704 	.word	0x1b021704
 80a1c78:	2005      	movs	r0, #5
 80a1c7a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a1c7c:	681b      	ldr	r3, [r3, #0]
 80a1c7e:	685a      	ldr	r2, [r3, #4]
 80a1c80:	6843      	ldr	r3, [r0, #4]
 80a1c82:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a1c84:	282d      	cmp	r0, #45	; 0x2d
 80a1c86:	d012      	beq.n	80a1cae <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a1c88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a1c8c:	2b09      	cmp	r3, #9
 80a1c8e:	d90e      	bls.n	80a1cae <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a1c90:	2874      	cmp	r0, #116	; 0x74
 80a1c92:	d00e      	beq.n	80a1cb2 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a1c94:	2866      	cmp	r0, #102	; 0x66
 80a1c96:	d00c      	beq.n	80a1cb2 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a1c98:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a1c9c:	4258      	negs	r0, r3
 80a1c9e:	4158      	adcs	r0, r3
 80a1ca0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a1ca2:	2006      	movs	r0, #6
 80a1ca4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a1ca6:	2000      	movs	r0, #0
 80a1ca8:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a1caa:	2004      	movs	r0, #4
 80a1cac:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a1cae:	2003      	movs	r0, #3
 80a1cb0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a1cb2:	2002      	movs	r0, #2
}
 80a1cb4:	4770      	bx	lr

080a1cb6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a1cb6:	b510      	push	{r4, lr}
 80a1cb8:	4604      	mov	r4, r0
    switch (type()) {
 80a1cba:	f7ff ffd3 	bl	80a1c64 <_ZNK5spark9JSONValue4typeEv>
 80a1cbe:	2802      	cmp	r0, #2
 80a1cc0:	d00e      	beq.n	80a1ce0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a1cc2:	1ec3      	subs	r3, r0, #3
 80a1cc4:	b2db      	uxtb	r3, r3
 80a1cc6:	2b01      	cmp	r3, #1
 80a1cc8:	d814      	bhi.n	80a1cf4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a1cca:	6822      	ldr	r2, [r4, #0]
 80a1ccc:	68a3      	ldr	r3, [r4, #8]
 80a1cce:	6850      	ldr	r0, [r2, #4]
 80a1cd0:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a1cd2:	220a      	movs	r2, #10
}
 80a1cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a1cd8:	2100      	movs	r1, #0
 80a1cda:	4418      	add	r0, r3
 80a1cdc:	f002 bbf0 	b.w	80a44c0 <strtol>
        const char* const s = d_->json + t_->start;
 80a1ce0:	6822      	ldr	r2, [r4, #0]
 80a1ce2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a1ce4:	6852      	ldr	r2, [r2, #4]
 80a1ce6:	685b      	ldr	r3, [r3, #4]
 80a1ce8:	5cd0      	ldrb	r0, [r2, r3]
 80a1cea:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a1cee:	4258      	negs	r0, r3
 80a1cf0:	4158      	adcs	r0, r3
}
 80a1cf2:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a1cf4:	2000      	movs	r0, #0
 80a1cf6:	e7fc      	b.n	80a1cf2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a1cf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1cf8:	460b      	mov	r3, r1
 80a1cfa:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1cfc:	2200      	movs	r2, #0
 80a1cfe:	b510      	push	{r4, lr}
 80a1d00:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1d02:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a1d06:	480d      	ldr	r0, [pc, #52]	; (80a1d3c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a1d08:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1d0c:	b1a3      	cbz	r3, 80a1d38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a1d0e:	781a      	ldrb	r2, [r3, #0]
 80a1d10:	2a03      	cmp	r2, #3
 80a1d12:	d006      	beq.n	80a1d22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a1d14:	b982      	cbnz	r2, 80a1d38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a1d16:	680a      	ldr	r2, [r1, #0]
 80a1d18:	6850      	ldr	r0, [r2, #4]
 80a1d1a:	685a      	ldr	r2, [r3, #4]
 80a1d1c:	5c82      	ldrb	r2, [r0, r2]
 80a1d1e:	2a6e      	cmp	r2, #110	; 0x6e
 80a1d20:	d007      	beq.n	80a1d32 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a1d22:	680a      	ldr	r2, [r1, #0]
 80a1d24:	6858      	ldr	r0, [r3, #4]
 80a1d26:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a1d28:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a1d2a:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1d2c:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a1d2e:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a1d30:	60e3      	str	r3, [r4, #12]
 80a1d32:	4620      	mov	r0, r4
 80a1d34:	f7ff ff71 	bl	80a1c1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1d38:	4620      	mov	r0, r4
 80a1d3a:	bd10      	pop	{r4, pc}
 80a1d3c:	080a47a5 	.word	0x080a47a5

080a1d40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1d40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a1d42:	2500      	movs	r5, #0
 80a1d44:	460b      	mov	r3, r1
 80a1d46:	4604      	mov	r4, r0
 80a1d48:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1d4a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a1d4e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a1d52:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a1d56:	b14b      	cbz	r3, 80a1d6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a1d58:	781a      	ldrb	r2, [r3, #0]
 80a1d5a:	2a01      	cmp	r2, #1
 80a1d5c:	d106      	bne.n	80a1d6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a1d5e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a1d62:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a1d64:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a1d66:	6143      	str	r3, [r0, #20]
 80a1d68:	f7ff ff57 	bl	80a1c1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1d6c:	4620      	mov	r0, r4
 80a1d6e:	bd38      	pop	{r3, r4, r5, pc}

080a1d70 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a1d70:	b510      	push	{r4, lr}
    if (!n_) {
 80a1d72:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a1d74:	4604      	mov	r4, r0
    if (!n_) {
 80a1d76:	b163      	cbz	r3, 80a1d92 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a1d78:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a1d7a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a1d7c:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a1d7e:	3010      	adds	r0, #16
 80a1d80:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a1d82:	6120      	str	r0, [r4, #16]
    --n_;
 80a1d84:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a1d86:	b113      	cbz	r3, 80a1d8e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a1d88:	f7ff feda 	bl	80a1b40 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a1d8c:	60a0      	str	r0, [r4, #8]
    return true;
 80a1d8e:	2001      	movs	r0, #1
 80a1d90:	e000      	b.n	80a1d94 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a1d92:	4618      	mov	r0, r3
}
 80a1d94:	bd10      	pop	{r4, pc}

080a1d96 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a1d96:	b510      	push	{r4, lr}
    write('}');
 80a1d98:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a1d9a:	4604      	mov	r4, r0
    write('}');
 80a1d9c:	f7ff ff31 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a1da0:	2301      	movs	r3, #1
}
 80a1da2:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1da4:	7123      	strb	r3, [r4, #4]
}
 80a1da6:	bd10      	pop	{r4, pc}

080a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a1da8:	b508      	push	{r3, lr}
    switch (state_) {
 80a1daa:	7903      	ldrb	r3, [r0, #4]
 80a1dac:	2b01      	cmp	r3, #1
 80a1dae:	d002      	beq.n	80a1db6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a1db0:	2b02      	cmp	r3, #2
 80a1db2:	d004      	beq.n	80a1dbe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a1db4:	bd08      	pop	{r3, pc}
        write(',');
 80a1db6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a1db8:	f7ff ff23 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
}
 80a1dbc:	e7fa      	b.n	80a1db4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a1dbe:	213a      	movs	r1, #58	; 0x3a
 80a1dc0:	e7fa      	b.n	80a1db8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a1dc2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a1dc2:	b510      	push	{r4, lr}
 80a1dc4:	4604      	mov	r4, r0
    writeSeparator();
 80a1dc6:	f7ff ffef 	bl	80a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a1dca:	4620      	mov	r0, r4
 80a1dcc:	217b      	movs	r1, #123	; 0x7b
 80a1dce:	f7ff ff18 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a1dd2:	2300      	movs	r3, #0
}
 80a1dd4:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a1dd6:	7123      	strb	r3, [r4, #4]
}
 80a1dd8:	bd10      	pop	{r4, pc}
	...

080a1ddc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a1ddc:	b538      	push	{r3, r4, r5, lr}
 80a1dde:	4604      	mov	r4, r0
 80a1de0:	460d      	mov	r5, r1
    writeSeparator();
 80a1de2:	f7ff ffe1 	bl	80a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a1de6:	6823      	ldr	r3, [r4, #0]
 80a1de8:	4620      	mov	r0, r4
 80a1dea:	462a      	mov	r2, r5
 80a1dec:	68db      	ldr	r3, [r3, #12]
 80a1dee:	4903      	ldr	r1, [pc, #12]	; (80a1dfc <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a1df0:	4798      	blx	r3
    state_ = NEXT;
 80a1df2:	2301      	movs	r3, #1
}
 80a1df4:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1df6:	7123      	strb	r3, [r4, #4]
}
 80a1df8:	bd38      	pop	{r3, r4, r5, pc}
 80a1dfa:	bf00      	nop
 80a1dfc:	080a4820 	.word	0x080a4820

080a1e00 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a1e00:	b538      	push	{r3, r4, r5, lr}
 80a1e02:	4604      	mov	r4, r0
 80a1e04:	460d      	mov	r5, r1
    writeSeparator();
 80a1e06:	f7ff ffcf 	bl	80a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a1e0a:	6823      	ldr	r3, [r4, #0]
 80a1e0c:	4620      	mov	r0, r4
 80a1e0e:	462a      	mov	r2, r5
 80a1e10:	68db      	ldr	r3, [r3, #12]
 80a1e12:	4903      	ldr	r1, [pc, #12]	; (80a1e20 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a1e14:	4798      	blx	r3
    state_ = NEXT;
 80a1e16:	2301      	movs	r3, #1
}
 80a1e18:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1e1a:	7123      	strb	r3, [r4, #4]
}
 80a1e1c:	bd38      	pop	{r3, r4, r5, pc}
 80a1e1e:	bf00      	nop
 80a1e20:	080a4823 	.word	0x080a4823

080a1e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e28:	460d      	mov	r5, r1
 80a1e2a:	4617      	mov	r7, r2
    write('"');
 80a1e2c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1e2e:	4604      	mov	r4, r0
    write('"');
 80a1e30:	f7ff fee7 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a1e34:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a1e36:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a1ed0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a1e3a:	442f      	add	r7, r5
    while (s != end) {
 80a1e3c:	42bd      	cmp	r5, r7
 80a1e3e:	462a      	mov	r2, r5
 80a1e40:	d038      	beq.n	80a1eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a1e42:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a1e46:	2e22      	cmp	r6, #34	; 0x22
 80a1e48:	d003      	beq.n	80a1e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1e4a:	2e5c      	cmp	r6, #92	; 0x5c
 80a1e4c:	d001      	beq.n	80a1e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1e4e:	2e1f      	cmp	r6, #31
 80a1e50:	d8f4      	bhi.n	80a1e3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a1e52:	6823      	ldr	r3, [r4, #0]
 80a1e54:	1a52      	subs	r2, r2, r1
 80a1e56:	4620      	mov	r0, r4
 80a1e58:	689b      	ldr	r3, [r3, #8]
 80a1e5a:	4798      	blx	r3
            write('\\');
 80a1e5c:	215c      	movs	r1, #92	; 0x5c
 80a1e5e:	4620      	mov	r0, r4
 80a1e60:	f7ff fecf 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a1e64:	2e0d      	cmp	r6, #13
 80a1e66:	d80a      	bhi.n	80a1e7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a1e68:	2e07      	cmp	r6, #7
 80a1e6a:	d91c      	bls.n	80a1ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1e6c:	f1a6 0308 	sub.w	r3, r6, #8
 80a1e70:	2b05      	cmp	r3, #5
 80a1e72:	d818      	bhi.n	80a1ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1e74:	e8df f003 	tbb	[pc, r3]
 80a1e78:	17110f0d 	.word	0x17110f0d
 80a1e7c:	1513      	.short	0x1513
 80a1e7e:	2e22      	cmp	r6, #34	; 0x22
 80a1e80:	d001      	beq.n	80a1e86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a1e82:	2e5c      	cmp	r6, #92	; 0x5c
 80a1e84:	d10f      	bne.n	80a1ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a1e86:	4631      	mov	r1, r6
                write('b');
 80a1e88:	4620      	mov	r0, r4
 80a1e8a:	f7ff feba 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a1e8e:	4629      	mov	r1, r5
    while (s != end) {
 80a1e90:	e7d4      	b.n	80a1e3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a1e92:	2162      	movs	r1, #98	; 0x62
 80a1e94:	e7f8      	b.n	80a1e88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a1e96:	2174      	movs	r1, #116	; 0x74
 80a1e98:	e7f6      	b.n	80a1e88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a1e9a:	216e      	movs	r1, #110	; 0x6e
 80a1e9c:	e7f4      	b.n	80a1e88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a1e9e:	2166      	movs	r1, #102	; 0x66
 80a1ea0:	e7f2      	b.n	80a1e88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a1ea2:	2172      	movs	r1, #114	; 0x72
 80a1ea4:	e7f0      	b.n	80a1e88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a1ea6:	6823      	ldr	r3, [r4, #0]
 80a1ea8:	4632      	mov	r2, r6
 80a1eaa:	4641      	mov	r1, r8
 80a1eac:	4620      	mov	r0, r4
 80a1eae:	68db      	ldr	r3, [r3, #12]
 80a1eb0:	4798      	blx	r3
                break;
 80a1eb2:	e7ec      	b.n	80a1e8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a1eb4:	428d      	cmp	r5, r1
 80a1eb6:	d004      	beq.n	80a1ec2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a1eb8:	6823      	ldr	r3, [r4, #0]
 80a1eba:	4620      	mov	r0, r4
 80a1ebc:	689b      	ldr	r3, [r3, #8]
 80a1ebe:	1a6a      	subs	r2, r5, r1
 80a1ec0:	4798      	blx	r3
    }
    write('"');
 80a1ec2:	2122      	movs	r1, #34	; 0x22
 80a1ec4:	4620      	mov	r0, r4
 80a1ec6:	f7ff fe9c 	bl	80a1c02 <_ZN5spark10JSONWriter5writeEc>
}
 80a1eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1ece:	bf00      	nop
 80a1ed0:	080a4826 	.word	0x080a4826

080a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a1ed4:	b570      	push	{r4, r5, r6, lr}
 80a1ed6:	4604      	mov	r4, r0
 80a1ed8:	460d      	mov	r5, r1
 80a1eda:	4616      	mov	r6, r2
    writeSeparator();
 80a1edc:	f7ff ff64 	bl	80a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a1ee0:	4620      	mov	r0, r4
 80a1ee2:	4632      	mov	r2, r6
 80a1ee4:	4629      	mov	r1, r5
 80a1ee6:	f7ff ff9d 	bl	80a1e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a1eea:	2302      	movs	r3, #2
}
 80a1eec:	4620      	mov	r0, r4
    state_ = VALUE;
 80a1eee:	7123      	strb	r3, [r4, #4]
}
 80a1ef0:	bd70      	pop	{r4, r5, r6, pc}

080a1ef2 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a1ef2:	b570      	push	{r4, r5, r6, lr}
 80a1ef4:	4604      	mov	r4, r0
 80a1ef6:	460d      	mov	r5, r1
 80a1ef8:	4616      	mov	r6, r2
    writeSeparator();
 80a1efa:	f7ff ff55 	bl	80a1da8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1efe:	4620      	mov	r0, r4
 80a1f00:	4632      	mov	r2, r6
 80a1f02:	4629      	mov	r1, r5
 80a1f04:	f7ff ff8e 	bl	80a1e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1f08:	2301      	movs	r3, #1
}
 80a1f0a:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1f0c:	7123      	strb	r3, [r4, #4]
}
 80a1f0e:	bd70      	pop	{r4, r5, r6, pc}

080a1f10 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1f10:	6880      	ldr	r0, [r0, #8]
 80a1f12:	6803      	ldr	r3, [r0, #0]
 80a1f14:	68db      	ldr	r3, [r3, #12]
 80a1f16:	4718      	bx	r3

080a1f18 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1f18:	4770      	bx	lr

080a1f1a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1f1a:	4608      	mov	r0, r1
 80a1f1c:	b111      	cbz	r1, 80a1f24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1f1e:	680b      	ldr	r3, [r1, #0]
 80a1f20:	685b      	ldr	r3, [r3, #4]
 80a1f22:	4718      	bx	r3
}
 80a1f24:	4770      	bx	lr

080a1f26 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1f26:	4770      	bx	lr

080a1f28 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1f28:	4770      	bx	lr

080a1f2a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1f2a:	4770      	bx	lr

080a1f2c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1f2c:	b538      	push	{r3, r4, r5, lr}
 80a1f2e:	4604      	mov	r4, r0
 80a1f30:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1f32:	6800      	ldr	r0, [r0, #0]
 80a1f34:	212e      	movs	r1, #46	; 0x2e
 80a1f36:	f002 f9cc 	bl	80a42d2 <strchrnul>
    size = s - category;
 80a1f3a:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1f3c:	4602      	mov	r2, r0
    size = s - category;
 80a1f3e:	1ac0      	subs	r0, r0, r3
 80a1f40:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1f42:	b120      	cbz	r0, 80a1f4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1f44:	7813      	ldrb	r3, [r2, #0]
 80a1f46:	b103      	cbz	r3, 80a1f4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1f48:	3201      	adds	r2, #1
 80a1f4a:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f4c:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a1f4e:	bd38      	pop	{r3, r4, r5, pc}

080a1f50 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1f50:	b510      	push	{r4, lr}
 80a1f52:	4604      	mov	r4, r0
 80a1f54:	210c      	movs	r1, #12
 80a1f56:	f002 f828 	bl	80a3faa <_ZdlPvj>
 80a1f5a:	4620      	mov	r0, r4
 80a1f5c:	bd10      	pop	{r4, pc}

080a1f5e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1f5e:	b510      	push	{r4, lr}
 80a1f60:	4604      	mov	r4, r0
 80a1f62:	2104      	movs	r1, #4
 80a1f64:	f002 f821 	bl	80a3faa <_ZdlPvj>
 80a1f68:	4620      	mov	r0, r4
 80a1f6a:	bd10      	pop	{r4, pc}

080a1f6c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1f6c:	b510      	push	{r4, lr}
 80a1f6e:	4604      	mov	r4, r0
 80a1f70:	2104      	movs	r1, #4
 80a1f72:	f002 f81a 	bl	80a3faa <_ZdlPvj>
 80a1f76:	4620      	mov	r0, r4
 80a1f78:	bd10      	pop	{r4, pc}

080a1f7a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1f7a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1f7c:	f002 f9b3 	bl	80a42e6 <strcmp>
}
 80a1f80:	fab0 f080 	clz	r0, r0
 80a1f84:	0940      	lsrs	r0, r0, #5
 80a1f86:	bd08      	pop	{r3, pc}

080a1f88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1f88:	b510      	push	{r4, lr}
 80a1f8a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1f8c:	f001 fdb4 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a1f90:	4284      	cmp	r4, r0
 80a1f92:	d105      	bne.n	80a1fa0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a1f94:	f001 fdb0 	bl	80a3af8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1f9c:	f001 bd92 	b.w	80a3ac4 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a1fa0:	f001 fde8 	bl	80a3b74 <_Z17_fetch_usbserial1v>
 80a1fa4:	4284      	cmp	r4, r0
 80a1fa6:	d102      	bne.n	80a1fae <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1fa8:	f001 fde4 	bl	80a3b74 <_Z17_fetch_usbserial1v>
 80a1fac:	e7f4      	b.n	80a1f98 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1fae:	f001 fd0d 	bl	80a39cc <_Z22__fetch_global_Serial1v>
 80a1fb2:	4284      	cmp	r4, r0
 80a1fb4:	d105      	bne.n	80a1fc2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1fb6:	f001 fd09 	bl	80a39cc <_Z22__fetch_global_Serial1v>
}
 80a1fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1fbe:	f001 bd02 	b.w	80a39c6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1fc2:	b12c      	cbz	r4, 80a1fd0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a1fc4:	6823      	ldr	r3, [r4, #0]
 80a1fc6:	4620      	mov	r0, r4
}
 80a1fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1fcc:	685b      	ldr	r3, [r3, #4]
 80a1fce:	4718      	bx	r3
 80a1fd0:	bd10      	pop	{r4, pc}

080a1fd2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1fd2:	b538      	push	{r3, r4, r5, lr}
 80a1fd4:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1fd6:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1fd8:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1fda:	f002 f9b2 	bl	80a4342 <strlen>
 80a1fde:	4621      	mov	r1, r4
 80a1fe0:	4602      	mov	r2, r0
 80a1fe2:	4628      	mov	r0, r5
}
 80a1fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1fe8:	f7ff bf83 	b.w	80a1ef2 <_ZN5spark10JSONWriter5valueEPKcj>

080a1fec <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1fec:	b570      	push	{r4, r5, r6, lr}
 80a1fee:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1ff0:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a1ff2:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1ff4:	f002 f9a5 	bl	80a4342 <strlen>
 80a1ff8:	6823      	ldr	r3, [r4, #0]
 80a1ffa:	4602      	mov	r2, r0
 80a1ffc:	4629      	mov	r1, r5
 80a1ffe:	4620      	mov	r0, r4
}
 80a2000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a2004:	68db      	ldr	r3, [r3, #12]
 80a2006:	4718      	bx	r3

080a2008 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a2008:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a200a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a200c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a2010:	2201      	movs	r2, #1
 80a2012:	68db      	ldr	r3, [r3, #12]
 80a2014:	f10d 0107 	add.w	r1, sp, #7
 80a2018:	4798      	blx	r3
}
 80a201a:	b003      	add	sp, #12
 80a201c:	f85d fb04 	ldr.w	pc, [sp], #4

080a2020 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a2020:	b40e      	push	{r1, r2, r3}
 80a2022:	b503      	push	{r0, r1, lr}
 80a2024:	ab03      	add	r3, sp, #12
 80a2026:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a202a:	2100      	movs	r1, #0
 80a202c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a202e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a2030:	f001 f81e 	bl	80a3070 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a2034:	b002      	add	sp, #8
 80a2036:	f85d eb04 	ldr.w	lr, [sp], #4
 80a203a:	b003      	add	sp, #12
 80a203c:	4770      	bx	lr
	...

080a2040 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a2040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a2044:	f04f 0814 	mov.w	r8, #20
 80a2048:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a204c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a204e:	464c      	mov	r4, r9
 80a2050:	fb08 f505 	mul.w	r5, r8, r5
 80a2054:	9300      	str	r3, [sp, #0]
 80a2056:	10ab      	asrs	r3, r5, #2
 80a2058:	4d17      	ldr	r5, [pc, #92]	; (80a20b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a205a:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a205c:	2d00      	cmp	r5, #0
 80a205e:	dd23      	ble.n	80a20a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a2060:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a2062:	fb08 f006 	mul.w	r0, r8, r6
 80a2066:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a206a:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a206e:	463a      	mov	r2, r7
 80a2070:	455f      	cmp	r7, fp
 80a2072:	bf28      	it	cs
 80a2074:	465a      	movcs	r2, fp
 80a2076:	5820      	ldr	r0, [r4, r0]
 80a2078:	9101      	str	r1, [sp, #4]
 80a207a:	f002 f96a 	bl	80a4352 <strncmp>
                if (cmp == 0) {
 80a207e:	2301      	movs	r3, #1
 80a2080:	9901      	ldr	r1, [sp, #4]
 80a2082:	b978      	cbnz	r0, 80a20a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a2084:	455f      	cmp	r7, fp
 80a2086:	d103      	bne.n	80a2090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a2088:	9a00      	ldr	r2, [sp, #0]
 80a208a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a208c:	4635      	mov	r5, r6
 80a208e:	e7e5      	b.n	80a205c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a2090:	bf8c      	ite	hi
 80a2092:	2001      	movhi	r0, #1
 80a2094:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a2096:	2800      	cmp	r0, #0
 80a2098:	d0f8      	beq.n	80a208c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a209a:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a209c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a20a0:	3e01      	subs	r6, #1
 80a20a2:	e7f3      	b.n	80a208c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a20a4:	0fc0      	lsrs	r0, r0, #31
 80a20a6:	e7f6      	b.n	80a2096 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a20a8:	eba4 0409 	sub.w	r4, r4, r9
}
 80a20ac:	4802      	ldr	r0, [pc, #8]	; (80a20b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a20ae:	10a4      	asrs	r4, r4, #2
 80a20b0:	4360      	muls	r0, r4
 80a20b2:	b003      	add	sp, #12
 80a20b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a20b8:	cccccccd 	.word	0xcccccccd

080a20bc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a20bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a20be:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a20c0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a20c2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a20c4:	b303      	cbz	r3, 80a2108 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a20c6:	b1f9      	cbz	r1, 80a2108 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a20c8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a20ca:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a20ce:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a20d0:	a903      	add	r1, sp, #12
 80a20d2:	a801      	add	r0, sp, #4
 80a20d4:	f7ff ff2a 	bl	80a1f2c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a20d8:	4601      	mov	r1, r0
 80a20da:	b1a8      	cbz	r0, 80a2108 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a20dc:	f10d 030b 	add.w	r3, sp, #11
 80a20e0:	4620      	mov	r0, r4
 80a20e2:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a20e4:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a20e8:	f7ff ffaa 	bl	80a2040 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a20ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a20f0:	b153      	cbz	r3, 80a2108 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a20f2:	2314      	movs	r3, #20
 80a20f4:	6824      	ldr	r4, [r4, #0]
 80a20f6:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a20fa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a20fe:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a2100:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a2102:	bfa8      	it	ge
 80a2104:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a2106:	e7e3      	b.n	80a20d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a2108:	4630      	mov	r0, r6
 80a210a:	b004      	add	sp, #16
 80a210c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2110 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a2110:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a2112:	4c0a      	ldr	r4, [pc, #40]	; (80a213c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a2114:	7823      	ldrb	r3, [r4, #0]
 80a2116:	f3bf 8f5b 	dmb	ish
 80a211a:	07db      	lsls	r3, r3, #31
 80a211c:	d40b      	bmi.n	80a2136 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a211e:	4620      	mov	r0, r4
 80a2120:	f7fd ffca 	bl	80a00b8 <__cxa_guard_acquire>
 80a2124:	b138      	cbz	r0, 80a2136 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a2126:	4620      	mov	r0, r4
 80a2128:	f7fd ffcb 	bl	80a00c2 <__cxa_guard_release>
 80a212c:	4a04      	ldr	r2, [pc, #16]	; (80a2140 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a212e:	4905      	ldr	r1, [pc, #20]	; (80a2144 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a2130:	4805      	ldr	r0, [pc, #20]	; (80a2148 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a2132:	f001 ff35 	bl	80a3fa0 <__aeabi_atexit>
}
 80a2136:	4804      	ldr	r0, [pc, #16]	; (80a2148 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a2138:	bd10      	pop	{r4, pc}
 80a213a:	bf00      	nop
 80a213c:	20000d38 	.word	0x20000d38
 80a2140:	20000080 	.word	0x20000080
 80a2144:	080a1f29 	.word	0x080a1f29
 80a2148:	20000010 	.word	0x20000010

080a214c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a214c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a214e:	4c0a      	ldr	r4, [pc, #40]	; (80a2178 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a2150:	7823      	ldrb	r3, [r4, #0]
 80a2152:	f3bf 8f5b 	dmb	ish
 80a2156:	07db      	lsls	r3, r3, #31
 80a2158:	d40b      	bmi.n	80a2172 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a215a:	4620      	mov	r0, r4
 80a215c:	f7fd ffac 	bl	80a00b8 <__cxa_guard_acquire>
 80a2160:	b138      	cbz	r0, 80a2172 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a2162:	4620      	mov	r0, r4
 80a2164:	f7fd ffad 	bl	80a00c2 <__cxa_guard_release>
 80a2168:	4a04      	ldr	r2, [pc, #16]	; (80a217c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a216a:	4905      	ldr	r1, [pc, #20]	; (80a2180 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a216c:	4805      	ldr	r0, [pc, #20]	; (80a2184 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a216e:	f001 ff17 	bl	80a3fa0 <__aeabi_atexit>
    return &factory;
}
 80a2172:	4804      	ldr	r0, [pc, #16]	; (80a2184 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a2174:	bd10      	pop	{r4, pc}
 80a2176:	bf00      	nop
 80a2178:	20000d3c 	.word	0x20000d3c
 80a217c:	20000080 	.word	0x20000080
 80a2180:	080a1f27 	.word	0x080a1f27
 80a2184:	20000014 	.word	0x20000014

080a2188 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a2188:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a218a:	2500      	movs	r5, #0
 80a218c:	4604      	mov	r4, r0
 80a218e:	e9c0 5500 	strd	r5, r5, [r0]
 80a2192:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a2196:	6085      	str	r5, [r0, #8]
 80a2198:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a219a:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a219e:	f7fe fec3 	bl	80a0f28 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a21a2:	f7ff ffb5 	bl	80a2110 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a21a6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a21a8:	f7ff ffd0 	bl	80a214c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a21ac:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a21ae:	6220      	str	r0, [r4, #32]
}
 80a21b0:	4620      	mov	r0, r4
 80a21b2:	bd38      	pop	{r3, r4, r5, pc}

080a21b4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a21b4:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a21b6:	4c0b      	ldr	r4, [pc, #44]	; (80a21e4 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a21b8:	7823      	ldrb	r3, [r4, #0]
 80a21ba:	f3bf 8f5b 	dmb	ish
 80a21be:	07db      	lsls	r3, r3, #31
 80a21c0:	d40e      	bmi.n	80a21e0 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a21c2:	4620      	mov	r0, r4
 80a21c4:	f7fd ff78 	bl	80a00b8 <__cxa_guard_acquire>
 80a21c8:	b150      	cbz	r0, 80a21e0 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a21ca:	4807      	ldr	r0, [pc, #28]	; (80a21e8 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a21cc:	f7ff ffdc 	bl	80a2188 <_ZN5spark10LogManagerC1Ev>
 80a21d0:	4620      	mov	r0, r4
 80a21d2:	f7fd ff76 	bl	80a00c2 <__cxa_guard_release>
 80a21d6:	4a05      	ldr	r2, [pc, #20]	; (80a21ec <_ZN5spark10LogManager8instanceEv+0x38>)
 80a21d8:	4905      	ldr	r1, [pc, #20]	; (80a21f0 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a21da:	4803      	ldr	r0, [pc, #12]	; (80a21e8 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a21dc:	f001 fee0 	bl	80a3fa0 <__aeabi_atexit>
    return &mgr;
}
 80a21e0:	4801      	ldr	r0, [pc, #4]	; (80a21e8 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a21e2:	bd10      	pop	{r4, pc}
 80a21e4:	20000d34 	.word	0x20000d34
 80a21e8:	20000d44 	.word	0x20000d44
 80a21ec:	20000080 	.word	0x20000080
 80a21f0:	080a2667 	.word	0x080a2667

080a21f4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a21f4:	2300      	movs	r3, #0
 80a21f6:	4a02      	ldr	r2, [pc, #8]	; (80a2200 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a21f8:	4902      	ldr	r1, [pc, #8]	; (80a2204 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a21fa:	4803      	ldr	r0, [pc, #12]	; (80a2208 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a21fc:	f7ff b836 	b.w	80a126c <log_set_callbacks>
 80a2200:	080a2545 	.word	0x080a2545
 80a2204:	080a24d1 	.word	0x080a24d1
 80a2208:	080a2451 	.word	0x080a2451

080a220c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a220c:	2300      	movs	r3, #0
 80a220e:	461a      	mov	r2, r3
 80a2210:	4619      	mov	r1, r3
 80a2212:	4618      	mov	r0, r3
 80a2214:	f7ff b82a 	b.w	80a126c <log_set_callbacks>

080a2218 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a2218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a221a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a221c:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a221e:	f851 3b04 	ldr.w	r3, [r1], #4
 80a2222:	a801      	add	r0, sp, #4
 80a2224:	9300      	str	r3, [sp, #0]
 80a2226:	f7ff f982 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a222a:	466a      	mov	r2, sp
 80a222c:	4629      	mov	r1, r5
 80a222e:	4620      	mov	r0, r4
 80a2230:	f7ff fd0a 	bl	80a1c48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a2234:	a801      	add	r0, sp, #4
 80a2236:	f7fe f838 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a223a:	4620      	mov	r0, r4
 80a223c:	b003      	add	sp, #12
 80a223e:	bd30      	pop	{r4, r5, pc}

080a2240 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a2240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2242:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a2244:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2246:	f851 3b04 	ldr.w	r3, [r1], #4
 80a224a:	a801      	add	r0, sp, #4
 80a224c:	9300      	str	r3, [sp, #0]
 80a224e:	f7ff f96e 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a2252:	466a      	mov	r2, sp
 80a2254:	4629      	mov	r1, r5
 80a2256:	4620      	mov	r0, r4
 80a2258:	f7ff fd72 	bl	80a1d40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a225c:	a801      	add	r0, sp, #4
 80a225e:	f7fe f824 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a2262:	4620      	mov	r0, r4
 80a2264:	b003      	add	sp, #12
 80a2266:	bd30      	pop	{r4, r5, pc}

080a2268 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a2268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a226a:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a226c:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a226e:	f851 3b04 	ldr.w	r3, [r1], #4
 80a2272:	a801      	add	r0, sp, #4
 80a2274:	9300      	str	r3, [sp, #0]
 80a2276:	f7ff f95a 	bl	80a152e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a227a:	466a      	mov	r2, sp
 80a227c:	4629      	mov	r1, r5
 80a227e:	4620      	mov	r0, r4
 80a2280:	f7ff fd3a 	bl	80a1cf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a2284:	a801      	add	r0, sp, #4
 80a2286:	f7fe f810 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a228a:	4620      	mov	r0, r4
 80a228c:	b003      	add	sp, #12
 80a228e:	bd30      	pop	{r4, r5, pc}

080a2290 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a2290:	b570      	push	{r4, r5, r6, lr}
 80a2292:	b08a      	sub	sp, #40	; 0x28
 80a2294:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a2296:	4601      	mov	r1, r0
 80a2298:	a804      	add	r0, sp, #16
 80a229a:	f7ff ffd1 	bl	80a2240 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a229e:	4e14      	ldr	r6, [pc, #80]	; (80a22f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a22a0:	a804      	add	r0, sp, #16
 80a22a2:	f7ff fd65 	bl	80a1d70 <_ZN5spark18JSONObjectIterator4nextEv>
 80a22a6:	b1e8      	cbz	r0, 80a22e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a22a8:	4668      	mov	r0, sp
 80a22aa:	a904      	add	r1, sp, #16
 80a22ac:	f7ff ffdc 	bl	80a2268 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a22b0:	4631      	mov	r1, r6
 80a22b2:	9802      	ldr	r0, [sp, #8]
 80a22b4:	f7ff fe61 	bl	80a1f7a <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a22b8:	4604      	mov	r4, r0
 80a22ba:	b110      	cbz	r0, 80a22c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a22bc:	1e2c      	subs	r4, r5, #0
 80a22be:	bf18      	it	ne
 80a22c0:	2401      	movne	r4, #1
 80a22c2:	a801      	add	r0, sp, #4
 80a22c4:	f7fd fff1 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a22c8:	2c00      	cmp	r4, #0
 80a22ca:	d0e9      	beq.n	80a22a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a22cc:	4668      	mov	r0, sp
 80a22ce:	a904      	add	r1, sp, #16
 80a22d0:	f7ff ffa2 	bl	80a2218 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a22d4:	4668      	mov	r0, sp
 80a22d6:	f7ff fcee 	bl	80a1cb6 <_ZNK5spark9JSONValue5toIntEv>
 80a22da:	6028      	str	r0, [r5, #0]
 80a22dc:	a801      	add	r0, sp, #4
 80a22de:	f7fd ffe4 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a22e2:	e7dd      	b.n	80a22a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a22e4:	a805      	add	r0, sp, #20
 80a22e6:	f7fd ffe0 	bl	80a02aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a22ea:	b00a      	add	sp, #40	; 0x28
 80a22ec:	bd70      	pop	{r4, r5, r6, pc}
 80a22ee:	bf00      	nop
 80a22f0:	080a482c 	.word	0x080a482c

080a22f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a22f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a22f6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a22f8:	4919      	ldr	r1, [pc, #100]	; (80a2360 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a22fa:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a22fc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a22fe:	f001 fff2 	bl	80a42e6 <strcmp>
 80a2302:	b948      	cbnz	r0, 80a2318 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a2304:	f001 fbf8 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a2308:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a230c:	f001 fbd6 	bl	80a3abc <_ZN9USBSerial5beginEl>
        return &Serial;
 80a2310:	f001 fbf2 	bl	80a3af8 <_Z16_fetch_usbserialv>
}
 80a2314:	b003      	add	sp, #12
 80a2316:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a2318:	4620      	mov	r0, r4
 80a231a:	4912      	ldr	r1, [pc, #72]	; (80a2364 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a231c:	f001 ffe3 	bl	80a42e6 <strcmp>
 80a2320:	b940      	cbnz	r0, 80a2334 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a2322:	f001 fc27 	bl	80a3b74 <_Z17_fetch_usbserial1v>
 80a2326:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a232a:	f001 fbc7 	bl	80a3abc <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a232e:	f001 fc21 	bl	80a3b74 <_Z17_fetch_usbserial1v>
 80a2332:	e7ef      	b.n	80a2314 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a2334:	4620      	mov	r0, r4
 80a2336:	490c      	ldr	r1, [pc, #48]	; (80a2368 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a2338:	f001 ffd5 	bl	80a42e6 <strcmp>
 80a233c:	b970      	cbnz	r0, 80a235c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a233e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a2342:	a901      	add	r1, sp, #4
 80a2344:	4628      	mov	r0, r5
        int baud = 9600;
 80a2346:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a2348:	f7ff ffa2 	bl	80a2290 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a234c:	f001 fb3e 	bl	80a39cc <_Z22__fetch_global_Serial1v>
 80a2350:	9901      	ldr	r1, [sp, #4]
 80a2352:	f001 fb35 	bl	80a39c0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a2356:	f001 fb39 	bl	80a39cc <_Z22__fetch_global_Serial1v>
 80a235a:	e7db      	b.n	80a2314 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a235c:	2000      	movs	r0, #0
 80a235e:	e7d9      	b.n	80a2314 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a2360:	080a4831 	.word	0x080a4831
 80a2364:	080a4838 	.word	0x080a4838
 80a2368:	080a483b 	.word	0x080a483b

080a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a236c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a236e:	2614      	movs	r6, #20
 80a2370:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2374:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a2376:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a237a:	42ae      	cmp	r6, r5
 80a237c:	d005      	beq.n	80a238a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a237e:	f105 0008 	add.w	r0, r5, #8
 80a2382:	f7ff fff3 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2386:	3514      	adds	r5, #20
 80a2388:	e7f7      	b.n	80a237a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a238a:	6820      	ldr	r0, [r4, #0]
 80a238c:	f7ff f83a 	bl	80a1404 <free>
}
 80a2390:	4620      	mov	r0, r4
 80a2392:	bd70      	pop	{r4, r5, r6, pc}

080a2394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2394:	b570      	push	{r4, r5, r6, lr}
 80a2396:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a2398:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a239c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a23a0:	42ae      	cmp	r6, r5
 80a23a2:	d004      	beq.n	80a23ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a23a4:	4628      	mov	r0, r5
 80a23a6:	f000 feb8 	bl	80a311a <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a23aa:	3510      	adds	r5, #16
 80a23ac:	e7f8      	b.n	80a23a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a23ae:	6820      	ldr	r0, [r4, #0]
 80a23b0:	f7ff f828 	bl	80a1404 <free>
}
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	bd70      	pop	{r4, r5, r6, pc}

080a23b8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a23b8:	b510      	push	{r4, lr}
 80a23ba:	4604      	mov	r4, r0
 80a23bc:	300c      	adds	r0, #12
 80a23be:	f7ff ffd5 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a23c2:	4620      	mov	r0, r4
 80a23c4:	f7ff ffe6 	bl	80a2394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a23c8:	4620      	mov	r0, r4
 80a23ca:	bd10      	pop	{r4, pc}

080a23cc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a23cc:	b510      	push	{r4, lr}
 80a23ce:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a23d0:	4b03      	ldr	r3, [pc, #12]	; (80a23e0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a23d2:	f840 3b04 	str.w	r3, [r0], #4
 80a23d6:	f7ff ffef 	bl	80a23b8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a23da:	4620      	mov	r0, r4
 80a23dc:	bd10      	pop	{r4, pc}
 80a23de:	bf00      	nop
 80a23e0:	080a4728 	.word	0x080a4728

080a23e4 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a23e4:	b510      	push	{r4, lr}
 80a23e6:	4604      	mov	r4, r0
 80a23e8:	f7ff fff0 	bl	80a23cc <_ZN5spark16StreamLogHandlerD1Ev>
 80a23ec:	4620      	mov	r0, r4
 80a23ee:	2124      	movs	r1, #36	; 0x24
 80a23f0:	f001 fddb 	bl	80a3faa <_ZdlPvj>
 80a23f4:	4620      	mov	r0, r4
 80a23f6:	bd10      	pop	{r4, pc}

080a23f8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a23f8:	b510      	push	{r4, lr}
 80a23fa:	4604      	mov	r4, r0
 80a23fc:	4b02      	ldr	r3, [pc, #8]	; (80a2408 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a23fe:	6003      	str	r3, [r0, #0]
 80a2400:	f7ff ffe4 	bl	80a23cc <_ZN5spark16StreamLogHandlerD1Ev>
 80a2404:	4620      	mov	r0, r4
 80a2406:	bd10      	pop	{r4, pc}
 80a2408:	080a48d8 	.word	0x080a48d8

080a240c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a240c:	b510      	push	{r4, lr}
 80a240e:	4604      	mov	r4, r0
 80a2410:	f7ff fff2 	bl	80a23f8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a2414:	4620      	mov	r0, r4
 80a2416:	2124      	movs	r1, #36	; 0x24
 80a2418:	f001 fdc7 	bl	80a3faa <_ZdlPvj>
 80a241c:	4620      	mov	r0, r4
 80a241e:	bd10      	pop	{r4, pc}

080a2420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a2420:	2200      	movs	r2, #0
 80a2422:	e9c0 2200 	strd	r2, r2, [r0]
 80a2426:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a2428:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a242a:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a242c:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a242e:	6004      	str	r4, [r0, #0]
 80a2430:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2432:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2434:	6044      	str	r4, [r0, #4]
 80a2436:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2438:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a243a:	6084      	str	r4, [r0, #8]
}
 80a243c:	bd10      	pop	{r4, pc}

080a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a243e:	b510      	push	{r4, lr}
 80a2440:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a2442:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2444:	6818      	ldr	r0, [r3, #0]
 80a2446:	f7fe fd87 	bl	80a0f58 <os_mutex_recursive_unlock>
 80a244a:	4620      	mov	r0, r4
 80a244c:	bd10      	pop	{r4, pc}
	...

080a2450 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a2450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2454:	b087      	sub	sp, #28
 80a2456:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a2458:	4b1c      	ldr	r3, [pc, #112]	; (80a24cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a245a:	4680      	mov	r8, r0
 80a245c:	685b      	ldr	r3, [r3, #4]
 80a245e:	4689      	mov	r9, r1
 80a2460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a2464:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a2466:	b96b      	cbnz	r3, 80a2484 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a2468:	f7ff fea4 	bl	80a21b4 <_ZN5spark10LogManager8instanceEv>
 80a246c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a246e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2472:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2474:	9305      	str	r3, [sp, #20]
 80a2476:	f7fe fd67 	bl	80a0f48 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a247a:	7b23      	ldrb	r3, [r4, #12]
 80a247c:	b12b      	cbz	r3, 80a248a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a247e:	a805      	add	r0, sp, #20
 80a2480:	f7ff ffdd 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a2484:	b007      	add	sp, #28
 80a2486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a248a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a248c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a2490:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a2492:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a2496:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a249a:	45aa      	cmp	sl, r5
 80a249c:	d012      	beq.n	80a24c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a249e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a24a2:	4631      	mov	r1, r6
 80a24a4:	1d38      	adds	r0, r7, #4
 80a24a6:	f7ff fe09 	bl	80a20bc <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a24aa:	4581      	cmp	r9, r0
 80a24ac:	d3f5      	bcc.n	80a249a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a24ae:	9a03      	ldr	r2, [sp, #12]
 80a24b0:	683b      	ldr	r3, [r7, #0]
 80a24b2:	9200      	str	r2, [sp, #0]
 80a24b4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a24b8:	464a      	mov	r2, r9
 80a24ba:	4633      	mov	r3, r6
 80a24bc:	4641      	mov	r1, r8
 80a24be:	4638      	mov	r0, r7
 80a24c0:	47d8      	blx	fp
 80a24c2:	e7ea      	b.n	80a249a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a24c4:	2300      	movs	r3, #0
 80a24c6:	7323      	strb	r3, [r4, #12]
 80a24c8:	e7d9      	b.n	80a247e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a24ca:	bf00      	nop
 80a24cc:	e000ed00 	.word	0xe000ed00

080a24d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a24d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a24d4:	469b      	mov	fp, r3
 80a24d6:	4b1a      	ldr	r3, [pc, #104]	; (80a2540 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a24d8:	4680      	mov	r8, r0
 80a24da:	685b      	ldr	r3, [r3, #4]
 80a24dc:	4689      	mov	r9, r1
 80a24de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a24e2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a24e4:	b96b      	cbnz	r3, 80a2502 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a24e6:	f7ff fe65 	bl	80a21b4 <_ZN5spark10LogManager8instanceEv>
 80a24ea:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a24ec:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a24f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a24f2:	9301      	str	r3, [sp, #4]
 80a24f4:	f7fe fd28 	bl	80a0f48 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a24f8:	7b23      	ldrb	r3, [r4, #12]
 80a24fa:	b12b      	cbz	r3, 80a2508 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a24fc:	a801      	add	r0, sp, #4
 80a24fe:	f7ff ff9e 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2502:	b003      	add	sp, #12
 80a2504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a2508:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a250a:	b2f6      	uxtb	r6, r6
 80a250c:	7323      	strb	r3, [r4, #12]
 80a250e:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a2512:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2516:	4555      	cmp	r5, sl
 80a2518:	d00e      	beq.n	80a2538 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a251a:	f855 7b04 	ldr.w	r7, [r5], #4
 80a251e:	4659      	mov	r1, fp
 80a2520:	1d38      	adds	r0, r7, #4
 80a2522:	f7ff fdcb 	bl	80a20bc <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a2526:	4286      	cmp	r6, r0
 80a2528:	d3f5      	bcc.n	80a2516 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a252a:	683b      	ldr	r3, [r7, #0]
 80a252c:	464a      	mov	r2, r9
 80a252e:	4641      	mov	r1, r8
 80a2530:	4638      	mov	r0, r7
 80a2532:	68db      	ldr	r3, [r3, #12]
 80a2534:	4798      	blx	r3
 80a2536:	e7ee      	b.n	80a2516 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a2538:	2300      	movs	r3, #0
 80a253a:	7323      	strb	r3, [r4, #12]
 80a253c:	e7de      	b.n	80a24fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a253e:	bf00      	nop
 80a2540:	e000ed00 	.word	0xe000ed00

080a2544 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a2544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2548:	4b16      	ldr	r3, [pc, #88]	; (80a25a4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a254a:	4605      	mov	r5, r0
 80a254c:	685b      	ldr	r3, [r3, #4]
 80a254e:	460f      	mov	r7, r1
 80a2550:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a2554:	bb1b      	cbnz	r3, 80a259e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a2556:	f7ff fe2d 	bl	80a21b4 <_ZN5spark10LogManager8instanceEv>
 80a255a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a255c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2560:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a2562:	9301      	str	r3, [sp, #4]
 80a2564:	f7fe fcf0 	bl	80a0f48 <os_mutex_recursive_lock>
 80a2568:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a256c:	2446      	movs	r4, #70	; 0x46
 80a256e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2572:	45b0      	cmp	r8, r6
 80a2574:	d109      	bne.n	80a258a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a2576:	a801      	add	r0, sp, #4
 80a2578:	f7ff ff61 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a257c:	42a5      	cmp	r5, r4
 80a257e:	bfb4      	ite	lt
 80a2580:	2000      	movlt	r0, #0
 80a2582:	2001      	movge	r0, #1
}
 80a2584:	b002      	add	sp, #8
 80a2586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a258a:	f856 0b04 	ldr.w	r0, [r6], #4
 80a258e:	4639      	mov	r1, r7
 80a2590:	3004      	adds	r0, #4
 80a2592:	f7ff fd93 	bl	80a20bc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a2596:	4284      	cmp	r4, r0
 80a2598:	bfa8      	it	ge
 80a259a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a259c:	e7e9      	b.n	80a2572 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a259e:	2000      	movs	r0, #0
 80a25a0:	e7f0      	b.n	80a2584 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a25a2:	bf00      	nop
 80a25a4:	e000ed00 	.word	0xe000ed00

080a25a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a25a8:	460b      	mov	r3, r1
 80a25aa:	b570      	push	{r4, r5, r6, lr}
 80a25ac:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a25ae:	c805      	ldmia	r0, {r0, r2}
 80a25b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a25b4:	4282      	cmp	r2, r0
 80a25b6:	d007      	beq.n	80a25c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a25b8:	4601      	mov	r1, r0
            if (*p == value) {
 80a25ba:	681d      	ldr	r5, [r3, #0]
 80a25bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80a25c0:	42ae      	cmp	r6, r5
 80a25c2:	d003      	beq.n	80a25cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a25c4:	4608      	mov	r0, r1
 80a25c6:	e7f5      	b.n	80a25b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a25c8:	2000      	movs	r0, #0
}
 80a25ca:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a25cc:	1a52      	subs	r2, r2, r1
 80a25ce:	f001 fe2d 	bl	80a422c <memmove>
    --size_;
 80a25d2:	6863      	ldr	r3, [r4, #4]
    return true;
 80a25d4:	2001      	movs	r0, #1
    --size_;
 80a25d6:	3b01      	subs	r3, #1
 80a25d8:	6063      	str	r3, [r4, #4]
    return true;
 80a25da:	e7f6      	b.n	80a25ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a25dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a25dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a25de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a25e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a25e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a25e6:	9101      	str	r1, [sp, #4]
 80a25e8:	9303      	str	r3, [sp, #12]
 80a25ea:	f7fe fcad 	bl	80a0f48 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a25ee:	4620      	mov	r0, r4
 80a25f0:	a901      	add	r1, sp, #4
 80a25f2:	f7ff ffd9 	bl	80a25a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a25f6:	b118      	cbz	r0, 80a2600 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a25f8:	6863      	ldr	r3, [r4, #4]
 80a25fa:	b90b      	cbnz	r3, 80a2600 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a25fc:	f7ff fe06 	bl	80a220c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2600:	a803      	add	r0, sp, #12
 80a2602:	f7ff ff1c 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2606:	b004      	add	sp, #16
 80a2608:	bd10      	pop	{r4, pc}

080a260a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a260a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a260c:	b570      	push	{r4, r5, r6, lr}
 80a260e:	4604      	mov	r4, r0
 80a2610:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a2614:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2618:	42ae      	cmp	r6, r5
 80a261a:	d015      	beq.n	80a2648 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a261c:	4620      	mov	r0, r4
 80a261e:	f105 0110 	add.w	r1, r5, #16
 80a2622:	f7ff ffc1 	bl	80a25a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a2626:	6863      	ldr	r3, [r4, #4]
 80a2628:	b90b      	cbnz	r3, 80a262e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a262a:	f7ff fdef 	bl	80a220c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a262e:	69e0      	ldr	r0, [r4, #28]
 80a2630:	6929      	ldr	r1, [r5, #16]
 80a2632:	6803      	ldr	r3, [r0, #0]
 80a2634:	68db      	ldr	r3, [r3, #12]
 80a2636:	4798      	blx	r3
        if (h.stream) {
 80a2638:	6969      	ldr	r1, [r5, #20]
 80a263a:	b119      	cbz	r1, 80a2644 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a263c:	6a20      	ldr	r0, [r4, #32]
 80a263e:	6803      	ldr	r3, [r0, #0]
 80a2640:	68db      	ldr	r3, [r3, #12]
 80a2642:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2644:	3518      	adds	r5, #24
 80a2646:	e7e7      	b.n	80a2618 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a2648:	2618      	movs	r6, #24
 80a264a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a264e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a2652:	42ae      	cmp	r6, r5
 80a2654:	d004      	beq.n	80a2660 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a2656:	4628      	mov	r0, r5
 80a2658:	f000 fd5f 	bl	80a311a <_ZN6StringD1Ev>
 80a265c:	3518      	adds	r5, #24
 80a265e:	e7f8      	b.n	80a2652 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a2660:	2300      	movs	r3, #0
 80a2662:	6163      	str	r3, [r4, #20]
}
 80a2664:	bd70      	pop	{r4, r5, r6, pc}

080a2666 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a2666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a2668:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a266a:	f7ff fdcf 	bl	80a220c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a266e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a2672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2674:	9301      	str	r3, [sp, #4]
 80a2676:	f7fe fc67 	bl	80a0f48 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a267a:	4620      	mov	r0, r4
 80a267c:	f7ff ffc5 	bl	80a260a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a2680:	a801      	add	r0, sp, #4
 80a2682:	f7ff fedc 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a2686:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2688:	b108      	cbz	r0, 80a268e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a268a:	f7fe fc55 	bl	80a0f38 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a268e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a2692:	2618      	movs	r6, #24
 80a2694:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a2698:	42ae      	cmp	r6, r5
 80a269a:	d004      	beq.n	80a26a6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a269c:	4628      	mov	r0, r5
 80a269e:	f000 fd3c 	bl	80a311a <_ZN6StringD1Ev>
 80a26a2:	3518      	adds	r5, #24
 80a26a4:	e7f8      	b.n	80a2698 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a26a6:	6920      	ldr	r0, [r4, #16]
 80a26a8:	f7fe feac 	bl	80a1404 <free>
 80a26ac:	6820      	ldr	r0, [r4, #0]
 80a26ae:	f7fe fea9 	bl	80a1404 <free>
}
 80a26b2:	4620      	mov	r0, r4
 80a26b4:	b002      	add	sp, #8
 80a26b6:	bd70      	pop	{r4, r5, r6, pc}

080a26b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a26b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a26ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26bc:	4606      	mov	r6, r0
 80a26be:	460c      	mov	r4, r1
 80a26c0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a26c2:	d927      	bls.n	80a2714 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a26c4:	4290      	cmp	r0, r2
 80a26c6:	d226      	bcs.n	80a2716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a26c8:	2600      	movs	r6, #0
            --end;
 80a26ca:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a26ce:	1a6c      	subs	r4, r5, r1
 80a26d0:	f1a1 0714 	sub.w	r7, r1, #20
 80a26d4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a26d6:	42af      	cmp	r7, r5
 80a26d8:	d03d      	beq.n	80a2756 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a26da:	b1a4      	cbz	r4, 80a2706 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a26dc:	682b      	ldr	r3, [r5, #0]
 80a26de:	6023      	str	r3, [r4, #0]
 80a26e0:	88ab      	ldrh	r3, [r5, #4]
 80a26e2:	80a3      	strh	r3, [r4, #4]
 80a26e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a26e8:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a26ec:	6126      	str	r6, [r4, #16]
 80a26ee:	80e3      	strh	r3, [r4, #6]
 80a26f0:	68ab      	ldr	r3, [r5, #8]
 80a26f2:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26f4:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26f6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a26f8:	68ea      	ldr	r2, [r5, #12]
 80a26fa:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26fc:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26fe:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2700:	692a      	ldr	r2, [r5, #16]
 80a2702:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2704:	612b      	str	r3, [r5, #16]
 80a2706:	f105 0008 	add.w	r0, r5, #8
 80a270a:	f7ff fe2f 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a270e:	3d14      	subs	r5, #20
 80a2710:	3c14      	subs	r4, #20
 80a2712:	e7e0      	b.n	80a26d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a2714:	d01f      	beq.n	80a2756 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a2716:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a2718:	42ac      	cmp	r4, r5
 80a271a:	d01c      	beq.n	80a2756 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a271c:	b1a6      	cbz	r6, 80a2748 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a271e:	6823      	ldr	r3, [r4, #0]
 80a2720:	6033      	str	r3, [r6, #0]
 80a2722:	88a3      	ldrh	r3, [r4, #4]
 80a2724:	80b3      	strh	r3, [r6, #4]
 80a2726:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a272a:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a272e:	6137      	str	r7, [r6, #16]
 80a2730:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a2732:	68a3      	ldr	r3, [r4, #8]
 80a2734:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2736:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2738:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a273a:	68e2      	ldr	r2, [r4, #12]
 80a273c:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a273e:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2740:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2742:	6922      	ldr	r2, [r4, #16]
 80a2744:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2746:	6123      	str	r3, [r4, #16]
 80a2748:	f104 0008 	add.w	r0, r4, #8
 80a274c:	f7ff fe0e 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a2750:	3414      	adds	r4, #20
 80a2752:	3614      	adds	r6, #20
 80a2754:	e7e0      	b.n	80a2718 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a2756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2758 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a275a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a275e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2760:	4604      	mov	r4, r0
 80a2762:	460e      	mov	r6, r1
 80a2764:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2766:	db0d      	blt.n	80a2784 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a2768:	3501      	adds	r5, #1
        if (n > 0) {
 80a276a:	2d00      	cmp	r5, #0
 80a276c:	6800      	ldr	r0, [r0, #0]
 80a276e:	dd04      	ble.n	80a277a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a2770:	00a9      	lsls	r1, r5, #2
 80a2772:	f7fe fe4f 	bl	80a1414 <realloc>
            if (!d) {
 80a2776:	b918      	cbnz	r0, 80a2780 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a2778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a277a:	f7fe fe43 	bl	80a1404 <free>
        T* d = nullptr;
 80a277e:	2000      	movs	r0, #0
        data_ = d;
 80a2780:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a2782:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a2784:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a2786:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a2788:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a278c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a278e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a2792:	1d08      	adds	r0, r1, #4
 80a2794:	f001 fd4a 	bl	80a422c <memmove>
    new(p) T(std::move(value));
 80a2798:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a279c:	6863      	ldr	r3, [r4, #4]
    return true;
 80a279e:	2001      	movs	r0, #1
    ++size_;
 80a27a0:	3301      	adds	r3, #1
 80a27a2:	6063      	str	r3, [r4, #4]
    return true;
 80a27a4:	e7e8      	b.n	80a2778 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a27a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a27a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a27a8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a27aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a27ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a27b0:	460d      	mov	r5, r1
 80a27b2:	9301      	str	r3, [sp, #4]
 80a27b4:	f7fe fbc8 	bl	80a0f48 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a27b8:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a27bc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a27c0:	4283      	cmp	r3, r0
 80a27c2:	461a      	mov	r2, r3
 80a27c4:	d00a      	beq.n	80a27dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a27c6:	6812      	ldr	r2, [r2, #0]
 80a27c8:	3304      	adds	r3, #4
 80a27ca:	42aa      	cmp	r2, r5
 80a27cc:	d1f8      	bne.n	80a27c0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a27ce:	a801      	add	r0, sp, #4
 80a27d0:	f7ff fe35 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a27d4:	2500      	movs	r5, #0
}
 80a27d6:	4628      	mov	r0, r5
 80a27d8:	b003      	add	sp, #12
 80a27da:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a27dc:	462a      	mov	r2, r5
 80a27de:	4620      	mov	r0, r4
 80a27e0:	f7ff ffba 	bl	80a2758 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a27e4:	4605      	mov	r5, r0
 80a27e6:	2800      	cmp	r0, #0
 80a27e8:	d0f1      	beq.n	80a27ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a27ea:	6863      	ldr	r3, [r4, #4]
 80a27ec:	2b01      	cmp	r3, #1
 80a27ee:	d101      	bne.n	80a27f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a27f0:	f7ff fd00 	bl	80a21f4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a27f4:	a801      	add	r0, sp, #4
 80a27f6:	f7ff fe22 	bl	80a243e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a27fa:	e7ec      	b.n	80a27d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a27fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a27fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a27fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2800:	4604      	mov	r4, r0
 80a2802:	460d      	mov	r5, r1
 80a2804:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a2806:	d914      	bls.n	80a2832 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a2808:	4290      	cmp	r0, r2
 80a280a:	d213      	bcs.n	80a2834 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a280c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a2810:	1a75      	subs	r5, r6, r1
 80a2812:	f1a1 0710 	sub.w	r7, r1, #16
 80a2816:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a2818:	42b7      	cmp	r7, r6
 80a281a:	d018      	beq.n	80a284e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a281c:	b11c      	cbz	r4, 80a2826 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a281e:	4631      	mov	r1, r6
 80a2820:	4620      	mov	r0, r4
 80a2822:	f000 fcf4 	bl	80a320e <_ZN6StringC1EOS_>
                end->~T();
 80a2826:	4630      	mov	r0, r6
 80a2828:	f000 fc77 	bl	80a311a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a282c:	3e10      	subs	r6, #16
 80a282e:	3c10      	subs	r4, #16
 80a2830:	e7f2      	b.n	80a2818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a2832:	d00c      	beq.n	80a284e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a2834:	42b5      	cmp	r5, r6
 80a2836:	d00a      	beq.n	80a284e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a2838:	b11c      	cbz	r4, 80a2842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a283a:	4629      	mov	r1, r5
 80a283c:	4620      	mov	r0, r4
 80a283e:	f000 fce6 	bl	80a320e <_ZN6StringC1EOS_>
                p->~T();
 80a2842:	4628      	mov	r0, r5
 80a2844:	f000 fc69 	bl	80a311a <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a2848:	3510      	adds	r5, #16
 80a284a:	3410      	adds	r4, #16
 80a284c:	e7f2      	b.n	80a2834 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a2850:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a2852:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a2854:	4605      	mov	r5, r0
        if (n > 0) {
 80a2856:	dd11      	ble.n	80a287c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a2858:	0130      	lsls	r0, r6, #4
 80a285a:	f7fe fdcb 	bl	80a13f4 <malloc>
            if (!d) {
 80a285e:	4604      	mov	r4, r0
 80a2860:	b158      	cbz	r0, 80a287a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a2862:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a2866:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a286a:	f7ff ffc7 	bl	80a27fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a286e:	6828      	ldr	r0, [r5, #0]
 80a2870:	f7fe fdc8 	bl	80a1404 <free>
        return true;
 80a2874:	2001      	movs	r0, #1
        data_ = d;
 80a2876:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a2878:	60ae      	str	r6, [r5, #8]
    }
 80a287a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a287c:	2400      	movs	r4, #0
 80a287e:	e7f6      	b.n	80a286e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a2880 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2884:	4691      	mov	r9, r2
        capacity_(0) {
 80a2886:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a2888:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a288a:	b097      	sub	sp, #92	; 0x5c
 80a288c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a288e:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2892:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a2894:	4299      	cmp	r1, r3
        capacity_(0) {
 80a2896:	e9c0 3300 	strd	r3, r3, [r0]
 80a289a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a289e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a28a2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a28a6:	7602      	strb	r2, [r0, #24]
 80a28a8:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a28aa:	dc23      	bgt.n	80a28f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a28ac:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a28b0:	2314      	movs	r3, #20
 80a28b2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a28b6:	42af      	cmp	r7, r5
 80a28b8:	d03b      	beq.n	80a2932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a28ba:	4629      	mov	r1, r5
 80a28bc:	a80d      	add	r0, sp, #52	; 0x34
 80a28be:	f000 fca6 	bl	80a320e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a28c2:	a90d      	add	r1, sp, #52	; 0x34
 80a28c4:	a811      	add	r0, sp, #68	; 0x44
 80a28c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a28c8:	f000 fca1 	bl	80a320e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a28cc:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a28d0:	4299      	cmp	r1, r3
 80a28d2:	da1b      	bge.n	80a290c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a28d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a28d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a28d8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a28dc:	4631      	mov	r1, r6
 80a28de:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a28e2:	f106 0010 	add.w	r0, r6, #16
 80a28e6:	f7ff ff89 	bl	80a27fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a28ea:	b9ee      	cbnz	r6, 80a2928 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a28ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a28ee:	3301      	adds	r3, #1
 80a28f0:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a28f2:	e011      	b.n	80a2918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a28f4:	a80a      	add	r0, sp, #40	; 0x28
 80a28f6:	f7ff ffab 	bl	80a2850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a28fa:	2800      	cmp	r0, #0
 80a28fc:	d1d6      	bne.n	80a28ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a28fe:	a80a      	add	r0, sp, #40	; 0x28
 80a2900:	f7ff fd48 	bl	80a2394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a2904:	4620      	mov	r0, r4
 80a2906:	b017      	add	sp, #92	; 0x5c
 80a2908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a290c:	3101      	adds	r1, #1
 80a290e:	a80a      	add	r0, sp, #40	; 0x28
 80a2910:	f7ff ff9e 	bl	80a2850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2914:	2800      	cmp	r0, #0
 80a2916:	d1dd      	bne.n	80a28d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a2918:	a811      	add	r0, sp, #68	; 0x44
 80a291a:	f000 fbfe 	bl	80a311a <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a291e:	a80d      	add	r0, sp, #52	; 0x34
 80a2920:	f000 fbfb 	bl	80a311a <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a2924:	3514      	adds	r5, #20
 80a2926:	e7c6      	b.n	80a28b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a2928:	4630      	mov	r0, r6
 80a292a:	a911      	add	r1, sp, #68	; 0x44
 80a292c:	f000 fc6f 	bl	80a320e <_ZN6StringC1EOS_>
 80a2930:	e7dc      	b.n	80a28ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a2932:	2600      	movs	r6, #0
 80a2934:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a2938:	4637      	mov	r7, r6
 80a293a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a293e:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a2940:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a2944:	429e      	cmp	r6, r3
 80a2946:	f280 8097 	bge.w	80a2a78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a294a:	0133      	lsls	r3, r6, #4
 80a294c:	58d3      	ldr	r3, [r2, r3]
 80a294e:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a2950:	b90b      	cbnz	r3, 80a2956 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a2952:	3601      	adds	r6, #1
 80a2954:	e7f4      	b.n	80a2940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a2956:	fb0a f306 	mul.w	r3, sl, r6
 80a295a:	9709      	str	r7, [sp, #36]	; 0x24
 80a295c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a295e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a2960:	a909      	add	r1, sp, #36	; 0x24
 80a2962:	a808      	add	r0, sp, #32
 80a2964:	f7ff fae2 	bl	80a1f2c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a2968:	4683      	mov	fp, r0
 80a296a:	2800      	cmp	r0, #0
 80a296c:	d0f1      	beq.n	80a2952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a296e:	4601      	mov	r1, r0
 80a2970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2972:	4628      	mov	r0, r5
 80a2974:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a2978:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a297c:	f7ff fb60 	bl	80a2040 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2980:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2984:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2986:	f1b8 0f00 	cmp.w	r8, #0
 80a298a:	d166      	bne.n	80a2a5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a298c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a2990:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a2994:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a2998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a299c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a29a0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a29a4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a29a8:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a29ac:	4293      	cmp	r3, r2
 80a29ae:	db1a      	blt.n	80a29e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a29b0:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a29b4:	f1bb 0f00 	cmp.w	fp, #0
 80a29b8:	dd4a      	ble.n	80a2a50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a29ba:	fb0a f00b 	mul.w	r0, sl, fp
 80a29be:	f7fe fd19 	bl	80a13f4 <malloc>
            if (!d) {
 80a29c2:	9004      	str	r0, [sp, #16]
 80a29c4:	2800      	cmp	r0, #0
 80a29c6:	d045      	beq.n	80a2a54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a29c8:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a29cc:	fb0a 1202 	mla	r2, sl, r2, r1
 80a29d0:	f7ff fe72 	bl	80a26b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a29d4:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a29d6:	6828      	ldr	r0, [r5, #0]
 80a29d8:	9304      	str	r3, [sp, #16]
 80a29da:	f7fe fd13 	bl	80a1404 <free>
        data_ = d;
 80a29de:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a29e0:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a29e4:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a29e6:	9b01      	ldr	r3, [sp, #4]
 80a29e8:	f8d5 b000 	ldr.w	fp, [r5]
 80a29ec:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a29f0:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a29f2:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a29f6:	f101 0014 	add.w	r0, r1, #20
 80a29fa:	fb0a b202 	mla	r2, sl, r2, fp
 80a29fe:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a2a00:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a2a02:	f7ff fe59 	bl	80a26b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a2a06:	9904      	ldr	r1, [sp, #16]
 80a2a08:	b1a9      	cbz	r1, 80a2a36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a2a0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a2a0c:	9b05      	ldr	r3, [sp, #20]
 80a2a0e:	f84b 2003 	str.w	r2, [fp, r3]
 80a2a12:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a2a16:	808b      	strh	r3, [r1, #4]
 80a2a18:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a2a1c:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a2a20:	610f      	str	r7, [r1, #16]
 80a2a22:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a2a24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a2a26:	608b      	str	r3, [r1, #8]
 80a2a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a2a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a2a2c:	60cb      	str	r3, [r1, #12]
 80a2a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a30:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a2a32:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a34:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a2a36:	686b      	ldr	r3, [r5, #4]
 80a2a38:	3301      	adds	r3, #1
 80a2a3a:	606b      	str	r3, [r5, #4]
 80a2a3c:	a813      	add	r0, sp, #76	; 0x4c
 80a2a3e:	f7ff fc95 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2a42:	f1b8 0f00 	cmp.w	r8, #0
 80a2a46:	d008      	beq.n	80a2a5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a2a48:	a80d      	add	r0, sp, #52	; 0x34
 80a2a4a:	f7ff fc8f 	bl	80a236c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2a4e:	e756      	b.n	80a28fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a2a50:	4643      	mov	r3, r8
 80a2a52:	e7c0      	b.n	80a29d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2a54:	f04f 0801 	mov.w	r8, #1
 80a2a58:	e7f0      	b.n	80a2a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a2a5a:	9b01      	ldr	r3, [sp, #4]
 80a2a5c:	682d      	ldr	r5, [r5, #0]
 80a2a5e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a2a62:	9b08      	ldr	r3, [sp, #32]
 80a2a64:	781b      	ldrb	r3, [r3, #0]
 80a2a66:	b92b      	cbnz	r3, 80a2a74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a2a68:	f8d9 3000 	ldr.w	r3, [r9]
 80a2a6c:	9a02      	ldr	r2, [sp, #8]
 80a2a6e:	4413      	add	r3, r2
 80a2a70:	7c1b      	ldrb	r3, [r3, #16]
 80a2a72:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a2a74:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a2a76:	e773      	b.n	80a2960 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a78:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2a7a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a7c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2a7e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a80:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a82:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a2a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a86:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a88:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2a8a:	60a2      	str	r2, [r4, #8]
 80a2a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a8e:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a90:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2a92:	60e2      	str	r2, [r4, #12]
 80a2a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a96:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a98:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2a9a:	6122      	str	r2, [r4, #16]
 80a2a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a9e:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a2aa0:	9b03      	ldr	r3, [sp, #12]
 80a2aa2:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a2aa4:	6162      	str	r2, [r4, #20]
 80a2aa6:	7623      	strb	r3, [r4, #24]
 80a2aa8:	e7ce      	b.n	80a2a48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a2aac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a2aae:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2ab0:	460e      	mov	r6, r1
 80a2ab2:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a2ab4:	4b08      	ldr	r3, [pc, #32]	; (80a2ad8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a2ab6:	4611      	mov	r1, r2
 80a2ab8:	f845 3b04 	str.w	r3, [r5], #4
 80a2abc:	a801      	add	r0, sp, #4
 80a2abe:	f7fd ff27 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2ac2:	4631      	mov	r1, r6
 80a2ac4:	aa01      	add	r2, sp, #4
 80a2ac6:	4628      	mov	r0, r5
 80a2ac8:	f7ff feda 	bl	80a2880 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2acc:	a801      	add	r0, sp, #4
 80a2ace:	f7fd fc0f 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a2ad2:	4620      	mov	r0, r4
 80a2ad4:	b004      	add	sp, #16
 80a2ad6:	bd70      	pop	{r4, r5, r6, pc}
 80a2ad8:	080a4728 	.word	0x080a4728

080a2adc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2ade:	460f      	mov	r7, r1
 80a2ae0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2ae2:	4638      	mov	r0, r7
 80a2ae4:	4925      	ldr	r1, [pc, #148]	; (80a2b7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a2ae6:	4616      	mov	r6, r2
 80a2ae8:	461d      	mov	r5, r3
 80a2aea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2aec:	f001 fbfb 	bl	80a42e6 <strcmp>
 80a2af0:	bb00      	cbnz	r0, 80a2b34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a2af2:	b1e4      	cbz	r4, 80a2b2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a2af4:	4629      	mov	r1, r5
 80a2af6:	4668      	mov	r0, sp
 80a2af8:	f7ff fc92 	bl	80a2420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2afc:	2024      	movs	r0, #36	; 0x24
 80a2afe:	4920      	ldr	r1, [pc, #128]	; (80a2b80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2b00:	f001 fa55 	bl	80a3fae <_ZnwjRKSt9nothrow_t>
 80a2b04:	4605      	mov	r5, r0
 80a2b06:	b170      	cbz	r0, 80a2b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2b08:	4669      	mov	r1, sp
 80a2b0a:	a803      	add	r0, sp, #12
 80a2b0c:	f7fd ff00 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2b10:	4631      	mov	r1, r6
 80a2b12:	aa03      	add	r2, sp, #12
 80a2b14:	4628      	mov	r0, r5
 80a2b16:	f7ff ffc9 	bl	80a2aac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2b1a:	a803      	add	r0, sp, #12
 80a2b1c:	f7fd fbe8 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a2b20:	4b18      	ldr	r3, [pc, #96]	; (80a2b84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a2b22:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a2b24:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a2b26:	4668      	mov	r0, sp
 80a2b28:	f7fd fbe2 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2b2c:	462c      	mov	r4, r5
}
 80a2b2e:	4620      	mov	r0, r4
 80a2b30:	b007      	add	sp, #28
 80a2b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a2b34:	4638      	mov	r0, r7
 80a2b36:	4914      	ldr	r1, [pc, #80]	; (80a2b88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a2b38:	f001 fbd5 	bl	80a42e6 <strcmp>
 80a2b3c:	b9e0      	cbnz	r0, 80a2b78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a2b3e:	2c00      	cmp	r4, #0
 80a2b40:	d0f5      	beq.n	80a2b2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a2b42:	4629      	mov	r1, r5
 80a2b44:	4668      	mov	r0, sp
 80a2b46:	f7ff fc6b 	bl	80a2420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2b4a:	2024      	movs	r0, #36	; 0x24
 80a2b4c:	490c      	ldr	r1, [pc, #48]	; (80a2b80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2b4e:	f001 fa2e 	bl	80a3fae <_ZnwjRKSt9nothrow_t>
 80a2b52:	4605      	mov	r5, r0
 80a2b54:	2800      	cmp	r0, #0
 80a2b56:	d0e6      	beq.n	80a2b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a2b58:	4669      	mov	r1, sp
 80a2b5a:	a803      	add	r0, sp, #12
 80a2b5c:	f7fd fed8 	bl	80a0910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2b60:	4631      	mov	r1, r6
 80a2b62:	aa03      	add	r2, sp, #12
 80a2b64:	4628      	mov	r0, r5
 80a2b66:	f7ff ffa1 	bl	80a2aac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2b6a:	a803      	add	r0, sp, #12
 80a2b6c:	f7fd fbc0 	bl	80a02f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2b70:	4b06      	ldr	r3, [pc, #24]	; (80a2b8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a2b72:	622c      	str	r4, [r5, #32]
 80a2b74:	602b      	str	r3, [r5, #0]
}
 80a2b76:	e7d6      	b.n	80a2b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a2b78:	2400      	movs	r4, #0
 80a2b7a:	e7d8      	b.n	80a2b2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a2b7c:	080a4843 	.word	0x080a4843
 80a2b80:	080a4a98 	.word	0x080a4a98
 80a2b84:	080a48d8 	.word	0x080a48d8
 80a2b88:	080a4847 	.word	0x080a4847
 80a2b8c:	080a48c0 	.word	0x080a48c0

080a2b90 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a2b90:	4b01      	ldr	r3, [pc, #4]	; (80a2b98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2b92:	4a02      	ldr	r2, [pc, #8]	; (80a2b9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2b94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2b96:	4770      	bx	lr
 80a2b98:	20000d40 	.word	0x20000d40
 80a2b9c:	080a4858 	.word	0x080a4858

080a2ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2ba4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a2ba6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2baa:	4604      	mov	r4, r0
 80a2bac:	460e      	mov	r6, r1
 80a2bae:	4617      	mov	r7, r2
 80a2bb0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a2bb2:	f000 ffa1 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a2bb6:	4581      	cmp	r9, r0
 80a2bb8:	d04d      	beq.n	80a2c56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a2bba:	792b      	ldrb	r3, [r5, #4]
 80a2bbc:	0719      	lsls	r1, r3, #28
 80a2bbe:	d504      	bpl.n	80a2bca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a2bc0:	4620      	mov	r0, r4
 80a2bc2:	696a      	ldr	r2, [r5, #20]
 80a2bc4:	4954      	ldr	r1, [pc, #336]	; (80a2d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a2bc6:	f7ff fa2b 	bl	80a2020 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a2bca:	f1b8 0f00 	cmp.w	r8, #0
 80a2bce:	d00d      	beq.n	80a2bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a2bd0:	215b      	movs	r1, #91	; 0x5b
 80a2bd2:	4620      	mov	r0, r4
 80a2bd4:	f7ff fa18 	bl	80a2008 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a2bd8:	4641      	mov	r1, r8
 80a2bda:	4620      	mov	r0, r4
 80a2bdc:	f7ff fa06 	bl	80a1fec <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a2be0:	6823      	ldr	r3, [r4, #0]
 80a2be2:	2202      	movs	r2, #2
 80a2be4:	4620      	mov	r0, r4
 80a2be6:	68db      	ldr	r3, [r3, #12]
 80a2be8:	494c      	ldr	r1, [pc, #304]	; (80a2d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a2bea:	4798      	blx	r3
    if (attr.has_file) {
 80a2bec:	792b      	ldrb	r3, [r5, #4]
 80a2bee:	07da      	lsls	r2, r3, #31
 80a2bf0:	d524      	bpl.n	80a2c3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a2bf2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a2bf6:	212f      	movs	r1, #47	; 0x2f
 80a2bf8:	4640      	mov	r0, r8
 80a2bfa:	f001 fbbc 	bl	80a4376 <strrchr>
    if (s1) {
 80a2bfe:	b108      	cbz	r0, 80a2c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a2c00:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a2c04:	4641      	mov	r1, r8
 80a2c06:	4620      	mov	r0, r4
 80a2c08:	f7ff f9f0 	bl	80a1fec <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a2c0c:	792b      	ldrb	r3, [r5, #4]
 80a2c0e:	079b      	lsls	r3, r3, #30
 80a2c10:	d508      	bpl.n	80a2c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a2c12:	213a      	movs	r1, #58	; 0x3a
 80a2c14:	4620      	mov	r0, r4
 80a2c16:	f7ff f9f7 	bl	80a2008 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a2c1a:	4620      	mov	r0, r4
 80a2c1c:	68ea      	ldr	r2, [r5, #12]
 80a2c1e:	4940      	ldr	r1, [pc, #256]	; (80a2d20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a2c20:	f7ff f9fe 	bl	80a2020 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a2c24:	792a      	ldrb	r2, [r5, #4]
 80a2c26:	6823      	ldr	r3, [r4, #0]
 80a2c28:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a2c2c:	4620      	mov	r0, r4
            write(", ", 2);
 80a2c2e:	f04f 0202 	mov.w	r2, #2
 80a2c32:	68db      	ldr	r3, [r3, #12]
 80a2c34:	bf14      	ite	ne
 80a2c36:	493b      	ldrne	r1, [pc, #236]	; (80a2d24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a2c38:	493b      	ldreq	r1, [pc, #236]	; (80a2d28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2c3a:	4798      	blx	r3
    if (attr.has_function) {
 80a2c3c:	792b      	ldrb	r3, [r5, #4]
 80a2c3e:	0758      	lsls	r0, r3, #29
 80a2c40:	d51d      	bpl.n	80a2c7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2c42:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2c44:	460b      	mov	r3, r1
 80a2c46:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a2c48:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a2c4c:	b160      	cbz	r0, 80a2c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a2c4e:	2820      	cmp	r0, #32
 80a2c50:	d108      	bne.n	80a2c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a2c52:	4619      	mov	r1, r3
 80a2c54:	e7f7      	b.n	80a2c46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a2c56:	4835      	ldr	r0, [pc, #212]	; (80a2d2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a2c58:	f000 f967 	bl	80a2f2a <_ZN5spark12NetworkClass9listeningEv>
 80a2c5c:	2800      	cmp	r0, #0
 80a2c5e:	d0ac      	beq.n	80a2bba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a2c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a2c64:	2828      	cmp	r0, #40	; 0x28
 80a2c66:	d1ee      	bne.n	80a2c46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a2c68:	6823      	ldr	r3, [r4, #0]
 80a2c6a:	1a52      	subs	r2, r2, r1
 80a2c6c:	4620      	mov	r0, r4
 80a2c6e:	68db      	ldr	r3, [r3, #12]
 80a2c70:	4798      	blx	r3
        write("(): ", 4);
 80a2c72:	6823      	ldr	r3, [r4, #0]
 80a2c74:	2204      	movs	r2, #4
 80a2c76:	4620      	mov	r0, r4
 80a2c78:	68db      	ldr	r3, [r3, #12]
 80a2c7a:	492d      	ldr	r1, [pc, #180]	; (80a2d30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a2c7c:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a2c7e:	2100      	movs	r1, #0
 80a2c80:	4638      	mov	r0, r7
 80a2c82:	f7fe faeb 	bl	80a125c <log_level_name>
 80a2c86:	4601      	mov	r1, r0
    write(s);
 80a2c88:	4620      	mov	r0, r4
 80a2c8a:	f7ff f9af 	bl	80a1fec <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a2c8e:	6823      	ldr	r3, [r4, #0]
 80a2c90:	2202      	movs	r2, #2
 80a2c92:	4620      	mov	r0, r4
 80a2c94:	68db      	ldr	r3, [r3, #12]
 80a2c96:	4924      	ldr	r1, [pc, #144]	; (80a2d28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2c98:	4798      	blx	r3
    if (msg) {
 80a2c9a:	b11e      	cbz	r6, 80a2ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a2c9c:	4631      	mov	r1, r6
 80a2c9e:	4620      	mov	r0, r4
 80a2ca0:	f7ff f9a4 	bl	80a1fec <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a2ca4:	792b      	ldrb	r3, [r5, #4]
 80a2ca6:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a2caa:	d02c      	beq.n	80a2d06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a2cac:	6823      	ldr	r3, [r4, #0]
 80a2cae:	4921      	ldr	r1, [pc, #132]	; (80a2d34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a2cb0:	68db      	ldr	r3, [r3, #12]
 80a2cb2:	2202      	movs	r2, #2
 80a2cb4:	4620      	mov	r0, r4
 80a2cb6:	4798      	blx	r3
        if (attr.has_code) {
 80a2cb8:	792b      	ldrb	r3, [r5, #4]
 80a2cba:	06d9      	lsls	r1, r3, #27
 80a2cbc:	d50a      	bpl.n	80a2cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a2cbe:	6823      	ldr	r3, [r4, #0]
 80a2cc0:	2207      	movs	r2, #7
 80a2cc2:	4620      	mov	r0, r4
 80a2cc4:	491c      	ldr	r1, [pc, #112]	; (80a2d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a2cc6:	68db      	ldr	r3, [r3, #12]
 80a2cc8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a2cca:	4620      	mov	r0, r4
 80a2ccc:	69aa      	ldr	r2, [r5, #24]
 80a2cce:	491b      	ldr	r1, [pc, #108]	; (80a2d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a2cd0:	f7ff f9a6 	bl	80a2020 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a2cd4:	792b      	ldrb	r3, [r5, #4]
 80a2cd6:	069a      	lsls	r2, r3, #26
 80a2cd8:	d511      	bpl.n	80a2cfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a2cda:	06db      	lsls	r3, r3, #27
 80a2cdc:	d505      	bpl.n	80a2cea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a2cde:	6823      	ldr	r3, [r4, #0]
 80a2ce0:	2202      	movs	r2, #2
 80a2ce2:	4620      	mov	r0, r4
 80a2ce4:	68db      	ldr	r3, [r3, #12]
 80a2ce6:	490f      	ldr	r1, [pc, #60]	; (80a2d24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a2ce8:	4798      	blx	r3
            write("details = ", 10);
 80a2cea:	6823      	ldr	r3, [r4, #0]
 80a2cec:	4620      	mov	r0, r4
 80a2cee:	4914      	ldr	r1, [pc, #80]	; (80a2d40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2cf0:	220a      	movs	r2, #10
 80a2cf2:	68db      	ldr	r3, [r3, #12]
 80a2cf4:	4798      	blx	r3
            write(attr.details);
 80a2cf6:	4620      	mov	r0, r4
 80a2cf8:	69e9      	ldr	r1, [r5, #28]
 80a2cfa:	f7ff f977 	bl	80a1fec <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a2cfe:	215d      	movs	r1, #93	; 0x5d
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	f7ff f981 	bl	80a2008 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a2d06:	6823      	ldr	r3, [r4, #0]
 80a2d08:	4620      	mov	r0, r4
}
 80a2d0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a2d0e:	2202      	movs	r2, #2
 80a2d10:	68db      	ldr	r3, [r3, #12]
 80a2d12:	490c      	ldr	r1, [pc, #48]	; (80a2d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a2d14:	4718      	bx	r3
 80a2d16:	bf00      	nop
 80a2d18:	080a485c 	.word	0x080a485c
 80a2d1c:	080a4863 	.word	0x080a4863
 80a2d20:	080a4820 	.word	0x080a4820
 80a2d24:	080a4866 	.word	0x080a4866
 80a2d28:	080a486b 	.word	0x080a486b
 80a2d2c:	20000d6c 	.word	0x20000d6c
 80a2d30:	080a4869 	.word	0x080a4869
 80a2d34:	080a486e 	.word	0x080a486e
 80a2d38:	080a4871 	.word	0x080a4871
 80a2d3c:	080a4879 	.word	0x080a4879
 80a2d40:	080a487c 	.word	0x080a487c
 80a2d44:	080a47a3 	.word	0x080a47a3

080a2d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d4c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a2d4e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2d52:	4605      	mov	r5, r0
 80a2d54:	460f      	mov	r7, r1
 80a2d56:	4690      	mov	r8, r2
 80a2d58:	461e      	mov	r6, r3
 80a2d5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2d5c:	f000 fecc 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a2d60:	4581      	cmp	r9, r0
 80a2d62:	d105      	bne.n	80a2d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a2d64:	4849      	ldr	r0, [pc, #292]	; (80a2e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a2d66:	f000 f8e0 	bl	80a2f2a <_ZN5spark12NetworkClass9listeningEv>
 80a2d6a:	2800      	cmp	r0, #0
 80a2d6c:	f040 808a 	bne.w	80a2e84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a2d70:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a2d74:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a2d76:	4a46      	ldr	r2, [pc, #280]	; (80a2e90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a2d78:	a801      	add	r0, sp, #4
 80a2d7a:	9201      	str	r2, [sp, #4]
 80a2d7c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a2d7e:	f88d 9008 	strb.w	r9, [sp, #8]
 80a2d82:	f7ff f81e 	bl	80a1dc2 <_ZN5spark10JSONWriter11beginObjectEv>
 80a2d86:	4649      	mov	r1, r9
 80a2d88:	4640      	mov	r0, r8
 80a2d8a:	f7fe fa67 	bl	80a125c <log_level_name>
 80a2d8e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a2d90:	4940      	ldr	r1, [pc, #256]	; (80a2e94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a2d92:	2201      	movs	r2, #1
 80a2d94:	a801      	add	r0, sp, #4
 80a2d96:	f7ff f89d 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2d9a:	4641      	mov	r1, r8
 80a2d9c:	f7ff f919 	bl	80a1fd2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a2da0:	b13f      	cbz	r7, 80a2db2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a2da2:	493d      	ldr	r1, [pc, #244]	; (80a2e98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a2da4:	2201      	movs	r2, #1
 80a2da6:	a801      	add	r0, sp, #4
 80a2da8:	f7ff f894 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2dac:	4639      	mov	r1, r7
 80a2dae:	f7ff f910 	bl	80a1fd2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a2db2:	b13e      	cbz	r6, 80a2dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a2db4:	4939      	ldr	r1, [pc, #228]	; (80a2e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a2db6:	2201      	movs	r2, #1
 80a2db8:	a801      	add	r0, sp, #4
 80a2dba:	f7ff f88b 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2dbe:	4631      	mov	r1, r6
 80a2dc0:	f7ff f907 	bl	80a1fd2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a2dc4:	7923      	ldrb	r3, [r4, #4]
 80a2dc6:	07df      	lsls	r7, r3, #31
 80a2dc8:	d50e      	bpl.n	80a2de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a2dca:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a2dcc:	212f      	movs	r1, #47	; 0x2f
 80a2dce:	4630      	mov	r0, r6
 80a2dd0:	f001 fad1 	bl	80a4376 <strrchr>
    if (s1) {
 80a2dd4:	b100      	cbz	r0, 80a2dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a2dd6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a2dd8:	4931      	ldr	r1, [pc, #196]	; (80a2ea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a2dda:	2201      	movs	r2, #1
 80a2ddc:	a801      	add	r0, sp, #4
 80a2dde:	f7ff f879 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2de2:	4631      	mov	r1, r6
 80a2de4:	f7ff f8f5 	bl	80a1fd2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a2de8:	7923      	ldrb	r3, [r4, #4]
 80a2dea:	079e      	lsls	r6, r3, #30
 80a2dec:	d507      	bpl.n	80a2dfe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2dee:	492d      	ldr	r1, [pc, #180]	; (80a2ea4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2df0:	2202      	movs	r2, #2
 80a2df2:	a801      	add	r0, sp, #4
 80a2df4:	f7ff f86e 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2df8:	68e1      	ldr	r1, [r4, #12]
 80a2dfa:	f7fe ffef 	bl	80a1ddc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a2dfe:	7923      	ldrb	r3, [r4, #4]
 80a2e00:	0758      	lsls	r0, r3, #29
 80a2e02:	d514      	bpl.n	80a2e2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2e04:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2e06:	4633      	mov	r3, r6
 80a2e08:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a2e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e0e:	b12a      	cbz	r2, 80a2e1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a2e10:	2a20      	cmp	r2, #32
 80a2e12:	d101      	bne.n	80a2e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a2e14:	461e      	mov	r6, r3
 80a2e16:	e7f7      	b.n	80a2e08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a2e18:	2a28      	cmp	r2, #40	; 0x28
 80a2e1a:	d1f5      	bne.n	80a2e08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a2e1c:	2202      	movs	r2, #2
 80a2e1e:	4922      	ldr	r1, [pc, #136]	; (80a2ea8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2e20:	a801      	add	r0, sp, #4
 80a2e22:	f7ff f857 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2e26:	4631      	mov	r1, r6
 80a2e28:	1bba      	subs	r2, r7, r6
 80a2e2a:	f7ff f862 	bl	80a1ef2 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a2e2e:	7923      	ldrb	r3, [r4, #4]
 80a2e30:	0719      	lsls	r1, r3, #28
 80a2e32:	d507      	bpl.n	80a2e44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a2e34:	491d      	ldr	r1, [pc, #116]	; (80a2eac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a2e36:	2201      	movs	r2, #1
 80a2e38:	a801      	add	r0, sp, #4
 80a2e3a:	f7ff f84b 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2e3e:	6961      	ldr	r1, [r4, #20]
 80a2e40:	f7fe ffde 	bl	80a1e00 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a2e44:	7923      	ldrb	r3, [r4, #4]
 80a2e46:	06da      	lsls	r2, r3, #27
 80a2e48:	d508      	bpl.n	80a2e5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a2e4a:	2204      	movs	r2, #4
 80a2e4c:	4918      	ldr	r1, [pc, #96]	; (80a2eb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a2e4e:	eb0d 0002 	add.w	r0, sp, r2
 80a2e52:	f7ff f83f 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2e56:	69a1      	ldr	r1, [r4, #24]
 80a2e58:	f7fe ffc0 	bl	80a1ddc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2e5c:	7923      	ldrb	r3, [r4, #4]
 80a2e5e:	069b      	lsls	r3, r3, #26
 80a2e60:	d507      	bpl.n	80a2e72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2e62:	4914      	ldr	r1, [pc, #80]	; (80a2eb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2e64:	2206      	movs	r2, #6
 80a2e66:	a801      	add	r0, sp, #4
 80a2e68:	f7ff f834 	bl	80a1ed4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2e6c:	69e1      	ldr	r1, [r4, #28]
 80a2e6e:	f7ff f8b0 	bl	80a1fd2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2e72:	a801      	add	r0, sp, #4
 80a2e74:	f7fe ff8f 	bl	80a1d96 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2e78:	6a28      	ldr	r0, [r5, #32]
 80a2e7a:	2202      	movs	r2, #2
 80a2e7c:	6803      	ldr	r3, [r0, #0]
 80a2e7e:	490e      	ldr	r1, [pc, #56]	; (80a2eb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2e80:	68db      	ldr	r3, [r3, #12]
 80a2e82:	4798      	blx	r3
}
 80a2e84:	b005      	add	sp, #20
 80a2e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2e8a:	bf00      	nop
 80a2e8c:	20000d6c 	.word	0x20000d6c
 80a2e90:	080a48a8 	.word	0x080a48a8
 80a2e94:	080a4836 	.word	0x080a4836
 80a2e98:	080a4887 	.word	0x080a4887
 80a2e9c:	080a4889 	.word	0x080a4889
 80a2ea0:	080a488b 	.word	0x080a488b
 80a2ea4:	080a488d 	.word	0x080a488d
 80a2ea8:	080a4890 	.word	0x080a4890
 80a2eac:	080a4510 	.word	0x080a4510
 80a2eb0:	080a4893 	.word	0x080a4893
 80a2eb4:	080a4898 	.word	0x080a4898
 80a2eb8:	080a47a3 	.word	0x080a47a3

080a2ebc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ebc:	2300      	movs	r3, #0
 80a2ebe:	6840      	ldr	r0, [r0, #4]
 80a2ec0:	461a      	mov	r2, r3
 80a2ec2:	f7fe ba37 	b.w	80a1334 <network_connect>

080a2ec6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2ec6:	2200      	movs	r2, #0
 80a2ec8:	2102      	movs	r1, #2
 80a2eca:	6840      	ldr	r0, [r0, #4]
 80a2ecc:	f7fe ba42 	b.w	80a1354 <network_disconnect>

080a2ed0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ed0:	2200      	movs	r2, #0
 80a2ed2:	6840      	ldr	r0, [r0, #4]
 80a2ed4:	4611      	mov	r1, r2
 80a2ed6:	f7fe ba35 	b.w	80a1344 <network_connecting>

080a2eda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2eda:	2200      	movs	r2, #0
 80a2edc:	6840      	ldr	r0, [r0, #4]
 80a2ede:	4611      	mov	r1, r2
 80a2ee0:	f7fe ba40 	b.w	80a1364 <network_ready>

080a2ee4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2ee4:	2300      	movs	r3, #0
 80a2ee6:	6840      	ldr	r0, [r0, #4]
 80a2ee8:	461a      	mov	r2, r3
 80a2eea:	4619      	mov	r1, r3
 80a2eec:	f7fe ba42 	b.w	80a1374 <network_on>

080a2ef0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2ef0:	2300      	movs	r3, #0
 80a2ef2:	6840      	ldr	r0, [r0, #4]
 80a2ef4:	461a      	mov	r2, r3
 80a2ef6:	4619      	mov	r1, r3
 80a2ef8:	f7fe ba44 	b.w	80a1384 <network_off>

080a2efc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2efc:	2100      	movs	r1, #0
 80a2efe:	6840      	ldr	r0, [r0, #4]
 80a2f00:	f7fe ba68 	b.w	80a13d4 <network_is_on>

080a2f04 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2f04:	2100      	movs	r1, #0
 80a2f06:	6840      	ldr	r0, [r0, #4]
 80a2f08:	f7fe ba6c 	b.w	80a13e4 <network_is_off>

080a2f0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2f0c:	2200      	movs	r2, #0
 80a2f0e:	6840      	ldr	r0, [r0, #4]
 80a2f10:	f081 0101 	eor.w	r1, r1, #1
 80a2f14:	f7fe ba3e 	b.w	80a1394 <network_listen>

080a2f18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2f18:	2200      	movs	r2, #0
 80a2f1a:	6840      	ldr	r0, [r0, #4]
 80a2f1c:	f7fe ba4a 	b.w	80a13b4 <network_set_listen_timeout>

080a2f20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2f20:	2200      	movs	r2, #0
 80a2f22:	6840      	ldr	r0, [r0, #4]
 80a2f24:	4611      	mov	r1, r2
 80a2f26:	f7fe ba4d 	b.w	80a13c4 <network_get_listen_timeout>

080a2f2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2f2a:	2200      	movs	r2, #0
 80a2f2c:	6840      	ldr	r0, [r0, #4]
 80a2f2e:	4611      	mov	r1, r2
 80a2f30:	f7fe ba38 	b.w	80a13a4 <network_listening>

080a2f34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2f34:	b570      	push	{r4, r5, r6, lr}
 80a2f36:	4615      	mov	r5, r2
 80a2f38:	b08e      	sub	sp, #56	; 0x38
 80a2f3a:	4604      	mov	r4, r0
    IPAddress addr;
 80a2f3c:	a808      	add	r0, sp, #32
 80a2f3e:	f7fe fdbd 	bl	80a1abc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2f42:	2211      	movs	r2, #17
 80a2f44:	2100      	movs	r1, #0
 80a2f46:	a803      	add	r0, sp, #12
 80a2f48:	f001 f98a 	bl	80a4260 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f4c:	2600      	movs	r6, #0
 80a2f4e:	4628      	mov	r0, r5
 80a2f50:	f001 f9f7 	bl	80a4342 <strlen>
 80a2f54:	4b0a      	ldr	r3, [pc, #40]	; (80a2f80 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2f56:	9600      	str	r6, [sp, #0]
 80a2f58:	b281      	uxth	r1, r0
 80a2f5a:	685b      	ldr	r3, [r3, #4]
 80a2f5c:	4628      	mov	r0, r5
 80a2f5e:	aa03      	add	r2, sp, #12
 80a2f60:	f7fe f964 	bl	80a122c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2f64:	b130      	cbz	r0, 80a2f74 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2f66:	4631      	mov	r1, r6
 80a2f68:	4620      	mov	r0, r4
 80a2f6a:	f7fe fdc7 	bl	80a1afc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2f6e:	4620      	mov	r0, r4
 80a2f70:	b00e      	add	sp, #56	; 0x38
 80a2f72:	bd70      	pop	{r4, r5, r6, pc}
 80a2f74:	4620      	mov	r0, r4
 80a2f76:	a903      	add	r1, sp, #12
 80a2f78:	f7fe fdae 	bl	80a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2f7c:	e7f7      	b.n	80a2f6e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2f7e:	bf00      	nop
 80a2f80:	200011ec 	.word	0x200011ec

080a2f84 <_ZN5spark12NetworkClass4fromEm>:
}
 80a2f84:	4a03      	ldr	r2, [pc, #12]	; (80a2f94 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2f86:	4b04      	ldr	r3, [pc, #16]	; (80a2f98 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2f88:	2804      	cmp	r0, #4
 80a2f8a:	bf14      	ite	ne
 80a2f8c:	4610      	movne	r0, r2
 80a2f8e:	4618      	moveq	r0, r3
 80a2f90:	4770      	bx	lr
 80a2f92:	bf00      	nop
 80a2f94:	20000d6c 	.word	0x20000d6c
 80a2f98:	200011ec 	.word	0x200011ec

080a2f9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2f9c:	4b02      	ldr	r3, [pc, #8]	; (80a2fa8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2f9e:	4a03      	ldr	r2, [pc, #12]	; (80a2fac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2fa0:	601a      	str	r2, [r3, #0]
 80a2fa2:	2200      	movs	r2, #0
 80a2fa4:	605a      	str	r2, [r3, #4]

} // spark
 80a2fa6:	4770      	bx	lr
 80a2fa8:	20000d6c 	.word	0x20000d6c
 80a2fac:	080a4920 	.word	0x080a4920

080a2fb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2fb2:	4606      	mov	r6, r0
 80a2fb4:	460d      	mov	r5, r1
  size_t n = 0;
 80a2fb6:	2400      	movs	r4, #0
 80a2fb8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2fba:	42bd      	cmp	r5, r7
 80a2fbc:	d00c      	beq.n	80a2fd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2fbe:	6833      	ldr	r3, [r6, #0]
 80a2fc0:	4630      	mov	r0, r6
 80a2fc2:	689b      	ldr	r3, [r3, #8]
 80a2fc4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2fc8:	4798      	blx	r3
     if (chunk>=0)
 80a2fca:	1e03      	subs	r3, r0, #0
 80a2fcc:	db01      	blt.n	80a2fd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2fce:	441c      	add	r4, r3
  while (size--) {
 80a2fd0:	e7f3      	b.n	80a2fba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2fd2:	2c00      	cmp	r4, #0
 80a2fd4:	bf08      	it	eq
 80a2fd6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2fd8:	4620      	mov	r0, r4
 80a2fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2fdc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2fdc:	b570      	push	{r4, r5, r6, lr}
 80a2fde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2fe0:	460c      	mov	r4, r1
    }
 80a2fe2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2fe4:	b149      	cbz	r1, 80a2ffa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2fe6:	f001 f9ac 	bl	80a4342 <strlen>
 80a2fea:	682b      	ldr	r3, [r5, #0]
 80a2fec:	4602      	mov	r2, r0
 80a2fee:	4621      	mov	r1, r4
 80a2ff0:	4628      	mov	r0, r5
    }
 80a2ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2ff6:	68db      	ldr	r3, [r3, #12]
 80a2ff8:	4718      	bx	r3
    }
 80a2ffa:	bd70      	pop	{r4, r5, r6, pc}

080a2ffc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2ffc:	b508      	push	{r3, lr}
  return write(str);
 80a2ffe:	f7ff ffed 	bl	80a2fdc <_ZN5Print5writeEPKc>
}
 80a3002:	bd08      	pop	{r3, pc}

080a3004 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a3004:	6803      	ldr	r3, [r0, #0]
 80a3006:	689b      	ldr	r3, [r3, #8]
 80a3008:	4718      	bx	r3

080a300a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a300a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a300c:	210d      	movs	r1, #13
{
 80a300e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3010:	f7ff fff8 	bl	80a3004 <_ZN5Print5printEc>
  n += print('\n');
 80a3014:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a3016:	4604      	mov	r4, r0
  n += print('\n');
 80a3018:	4628      	mov	r0, r5
 80a301a:	f7ff fff3 	bl	80a3004 <_ZN5Print5printEc>
  return n;
}
 80a301e:	4420      	add	r0, r4
 80a3020:	bd38      	pop	{r3, r4, r5, pc}

080a3022 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3022:	b538      	push	{r3, r4, r5, lr}
 80a3024:	4605      	mov	r5, r0
  return write(str);
 80a3026:	f7ff ffd9 	bl	80a2fdc <_ZN5Print5writeEPKc>
 80a302a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a302c:	4628      	mov	r0, r5
 80a302e:	f7ff ffec 	bl	80a300a <_ZN5Print7printlnEv>
  return n;
}
 80a3032:	4420      	add	r0, r4
 80a3034:	bd38      	pop	{r3, r4, r5, pc}

080a3036 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3036:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3038:	2a01      	cmp	r2, #1
 80a303a:	bf98      	it	ls
 80a303c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a303e:	b530      	push	{r4, r5, lr}
 80a3040:	b08b      	sub	sp, #44	; 0x2c
 80a3042:	460c      	mov	r4, r1
  *str = '\0';
 80a3044:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a3048:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a304a:	4625      	mov	r5, r4
 80a304c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a3050:	fb04 5312 	mls	r3, r4, r2, r5
 80a3054:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3056:	2b09      	cmp	r3, #9
 80a3058:	bf94      	ite	ls
 80a305a:	3330      	addls	r3, #48	; 0x30
 80a305c:	3337      	addhi	r3, #55	; 0x37
 80a305e:	b2db      	uxtb	r3, r3
  } while(n);
 80a3060:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3062:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a3066:	d9f0      	bls.n	80a304a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a3068:	f7ff ffb8 	bl	80a2fdc <_ZN5Print5writeEPKc>
}
 80a306c:	b00b      	add	sp, #44	; 0x2c
 80a306e:	bd30      	pop	{r4, r5, pc}

080a3070 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a3070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3074:	b086      	sub	sp, #24
 80a3076:	af00      	add	r7, sp, #0
 80a3078:	4605      	mov	r5, r0
 80a307a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a307c:	1d38      	adds	r0, r7, #4
 80a307e:	2114      	movs	r1, #20
{
 80a3080:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a3082:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a3084:	f7fe f9ce 	bl	80a1424 <vsnprintf>

    if (n<bufsize)
 80a3088:	2813      	cmp	r0, #19
 80a308a:	d80e      	bhi.n	80a30aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a308c:	4628      	mov	r0, r5
 80a308e:	1d39      	adds	r1, r7, #4
 80a3090:	f7ff ffa4 	bl	80a2fdc <_ZN5Print5writeEPKc>
 80a3094:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a3096:	b11e      	cbz	r6, 80a30a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a3098:	4628      	mov	r0, r5
 80a309a:	f7ff ffb6 	bl	80a300a <_ZN5Print7printlnEv>
 80a309e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a30a0:	4620      	mov	r0, r4
 80a30a2:	3718      	adds	r7, #24
 80a30a4:	46bd      	mov	sp, r7
 80a30a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a30aa:	f100 0308 	add.w	r3, r0, #8
 80a30ae:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a30b2:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a30b4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a30b8:	4622      	mov	r2, r4
 80a30ba:	1c41      	adds	r1, r0, #1
 80a30bc:	683b      	ldr	r3, [r7, #0]
 80a30be:	4668      	mov	r0, sp
 80a30c0:	f7fe f9b0 	bl	80a1424 <vsnprintf>
  return write(str);
 80a30c4:	4669      	mov	r1, sp
 80a30c6:	4628      	mov	r0, r5
 80a30c8:	f7ff ff88 	bl	80a2fdc <_ZN5Print5writeEPKc>
 80a30cc:	4604      	mov	r4, r0
 80a30ce:	46c5      	mov	sp, r8
 80a30d0:	e7e1      	b.n	80a3096 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a30d2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a30d2:	b510      	push	{r4, lr}
 80a30d4:	4604      	mov	r4, r0
 80a30d6:	f7fe f9ea 	bl	80a14ae <_ZNSt14_Function_baseD1Ev>
 80a30da:	4620      	mov	r0, r4
 80a30dc:	bd10      	pop	{r4, pc}
	...

080a30e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a30e0:	2300      	movs	r3, #0
 80a30e2:	4803      	ldr	r0, [pc, #12]	; (80a30f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a30e4:	4a03      	ldr	r2, [pc, #12]	; (80a30f4 <_GLOBAL__sub_I_RGB+0x14>)
 80a30e6:	4904      	ldr	r1, [pc, #16]	; (80a30f8 <_GLOBAL__sub_I_RGB+0x18>)
 80a30e8:	6083      	str	r3, [r0, #8]
 80a30ea:	f000 bf59 	b.w	80a3fa0 <__aeabi_atexit>
 80a30ee:	bf00      	nop
 80a30f0:	20000d74 	.word	0x20000d74
 80a30f4:	20000080 	.word	0x20000080
 80a30f8:	080a30d3 	.word	0x080a30d3

080a30fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a30fc:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a30fe:	2600      	movs	r6, #0
 80a3100:	4604      	mov	r4, r0
 80a3102:	460d      	mov	r5, r1
 80a3104:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a3108:	f7fd ff0e 	bl	80a0f28 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a310c:	4628      	mov	r0, r5
    _spi = spi;
 80a310e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3110:	f7fd ffe4 	bl	80a10dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3114:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3116:	6066      	str	r6, [r4, #4]
}
 80a3118:	bd70      	pop	{r4, r5, r6, pc}

080a311a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a311a:	b510      	push	{r4, lr}
 80a311c:	4604      	mov	r4, r0
{
	free(buffer);
 80a311e:	6800      	ldr	r0, [r0, #0]
 80a3120:	f7fe f970 	bl	80a1404 <free>
}
 80a3124:	4620      	mov	r0, r4
 80a3126:	bd10      	pop	{r4, pc}

080a3128 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3128:	b510      	push	{r4, lr}
 80a312a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a312c:	6800      	ldr	r0, [r0, #0]
 80a312e:	b108      	cbz	r0, 80a3134 <_ZN6String10invalidateEv+0xc>
 80a3130:	f7fe f968 	bl	80a1404 <free>
	buffer = NULL;
 80a3134:	2300      	movs	r3, #0
	capacity = len = 0;
 80a3136:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a313a:	6023      	str	r3, [r4, #0]
}
 80a313c:	bd10      	pop	{r4, pc}

080a313e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a313e:	b538      	push	{r3, r4, r5, lr}
 80a3140:	4604      	mov	r4, r0
 80a3142:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3144:	6800      	ldr	r0, [r0, #0]
 80a3146:	3101      	adds	r1, #1
 80a3148:	f7fe f964 	bl	80a1414 <realloc>
	if (newbuffer) {
 80a314c:	b110      	cbz	r0, 80a3154 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a314e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a3152:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3154:	bd38      	pop	{r3, r4, r5, pc}

080a3156 <_ZN6String7reserveEj>:
{
 80a3156:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3158:	6803      	ldr	r3, [r0, #0]
{
 80a315a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a315c:	b123      	cbz	r3, 80a3168 <_ZN6String7reserveEj+0x12>
 80a315e:	6843      	ldr	r3, [r0, #4]
 80a3160:	428b      	cmp	r3, r1
 80a3162:	d301      	bcc.n	80a3168 <_ZN6String7reserveEj+0x12>
 80a3164:	2001      	movs	r0, #1
}
 80a3166:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a3168:	4620      	mov	r0, r4
 80a316a:	f7ff ffe8 	bl	80a313e <_ZN6String12changeBufferEj>
 80a316e:	2800      	cmp	r0, #0
 80a3170:	d0f9      	beq.n	80a3166 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a3172:	68a3      	ldr	r3, [r4, #8]
 80a3174:	2b00      	cmp	r3, #0
 80a3176:	d1f5      	bne.n	80a3164 <_ZN6String7reserveEj+0xe>
 80a3178:	6822      	ldr	r2, [r4, #0]
 80a317a:	7013      	strb	r3, [r2, #0]
 80a317c:	e7f2      	b.n	80a3164 <_ZN6String7reserveEj+0xe>

080a317e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a317e:	b570      	push	{r4, r5, r6, lr}
 80a3180:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3182:	4611      	mov	r1, r2
{
 80a3184:	4604      	mov	r4, r0
 80a3186:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3188:	f7ff ffe5 	bl	80a3156 <_ZN6String7reserveEj>
 80a318c:	b920      	cbnz	r0, 80a3198 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a318e:	4620      	mov	r0, r4
 80a3190:	f7ff ffca 	bl	80a3128 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a3194:	4620      	mov	r0, r4
 80a3196:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a3198:	462a      	mov	r2, r5
 80a319a:	4631      	mov	r1, r6
 80a319c:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a319e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a31a0:	f001 f836 	bl	80a4210 <memcpy>
	buffer[len] = 0;
 80a31a4:	2100      	movs	r1, #0
 80a31a6:	6822      	ldr	r2, [r4, #0]
 80a31a8:	68a3      	ldr	r3, [r4, #8]
 80a31aa:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a31ac:	e7f2      	b.n	80a3194 <_ZN6String4copyEPKcj+0x16>

080a31ae <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a31ae:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a31b0:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a31b2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a31b4:	460d      	mov	r5, r1
	capacity = 0;
 80a31b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a31ba:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a31bc:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a31be:	b139      	cbz	r1, 80a31d0 <_ZN6StringC1EPKc+0x22>
 80a31c0:	4608      	mov	r0, r1
 80a31c2:	f001 f8be 	bl	80a4342 <strlen>
 80a31c6:	4629      	mov	r1, r5
 80a31c8:	4602      	mov	r2, r0
 80a31ca:	4620      	mov	r0, r4
 80a31cc:	f7ff ffd7 	bl	80a317e <_ZN6String4copyEPKcj>
}
 80a31d0:	4620      	mov	r0, r4
 80a31d2:	bd38      	pop	{r3, r4, r5, pc}

080a31d4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a31d4:	b538      	push	{r3, r4, r5, lr}
 80a31d6:	4605      	mov	r5, r0
	if (buffer) {
 80a31d8:	6800      	ldr	r0, [r0, #0]
{
 80a31da:	460c      	mov	r4, r1
	if (buffer) {
 80a31dc:	b168      	cbz	r0, 80a31fa <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a31de:	686a      	ldr	r2, [r5, #4]
 80a31e0:	688b      	ldr	r3, [r1, #8]
 80a31e2:	429a      	cmp	r2, r3
 80a31e4:	d307      	bcc.n	80a31f6 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a31e6:	6809      	ldr	r1, [r1, #0]
 80a31e8:	f001 f887 	bl	80a42fa <strcpy>
			len = rhs.len;
 80a31ec:	68a3      	ldr	r3, [r4, #8]
 80a31ee:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a31f0:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a31f2:	60a3      	str	r3, [r4, #8]
}
 80a31f4:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a31f6:	f7fe f905 	bl	80a1404 <free>
	buffer = rhs.buffer;
 80a31fa:	6823      	ldr	r3, [r4, #0]
 80a31fc:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a31fe:	6863      	ldr	r3, [r4, #4]
 80a3200:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a3202:	68a3      	ldr	r3, [r4, #8]
 80a3204:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a3206:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a3208:	e9c4 3300 	strd	r3, r3, [r4]
 80a320c:	e7f1      	b.n	80a31f2 <_ZN6String4moveERS_+0x1e>

080a320e <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a320e:	2300      	movs	r3, #0
String::String(String &&rval)
 80a3210:	b510      	push	{r4, lr}
 80a3212:	4604      	mov	r4, r0
	capacity = 0;
 80a3214:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a3218:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a321a:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a321c:	f7ff ffda 	bl	80a31d4 <_ZN6String4moveERS_>
}
 80a3220:	4620      	mov	r0, r4
 80a3222:	bd10      	pop	{r4, pc}

080a3224 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a3224:	4288      	cmp	r0, r1
{
 80a3226:	b510      	push	{r4, lr}
 80a3228:	460b      	mov	r3, r1
 80a322a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a322c:	d004      	beq.n	80a3238 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a322e:	6809      	ldr	r1, [r1, #0]
 80a3230:	b121      	cbz	r1, 80a323c <_ZN6StringaSERKS_+0x18>
 80a3232:	689a      	ldr	r2, [r3, #8]
 80a3234:	f7ff ffa3 	bl	80a317e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a3238:	4620      	mov	r0, r4
 80a323a:	bd10      	pop	{r4, pc}
	else invalidate();
 80a323c:	f7ff ff74 	bl	80a3128 <_ZN6String10invalidateEv>
 80a3240:	e7fa      	b.n	80a3238 <_ZN6StringaSERKS_+0x14>

080a3242 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a3242:	2300      	movs	r3, #0
String::String(const String &value)
 80a3244:	b510      	push	{r4, lr}
 80a3246:	4604      	mov	r4, r0
	capacity = 0;
 80a3248:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a324c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a324e:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a3250:	f7ff ffe8 	bl	80a3224 <_ZN6StringaSERKS_>
}
 80a3254:	4620      	mov	r0, r4
 80a3256:	bd10      	pop	{r4, pc}

080a3258 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a3258:	4288      	cmp	r0, r1
{
 80a325a:	b510      	push	{r4, lr}
 80a325c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a325e:	d001      	beq.n	80a3264 <_ZN6StringaSEOS_+0xc>
 80a3260:	f7ff ffb8 	bl	80a31d4 <_ZN6String4moveERS_>
	return *this;
}
 80a3264:	4620      	mov	r0, r4
 80a3266:	bd10      	pop	{r4, pc}

080a3268 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3268:	b538      	push	{r3, r4, r5, lr}
 80a326a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a326c:	460c      	mov	r4, r1
 80a326e:	b149      	cbz	r1, 80a3284 <_ZN6StringaSEPKc+0x1c>
 80a3270:	4608      	mov	r0, r1
 80a3272:	f001 f866 	bl	80a4342 <strlen>
 80a3276:	4621      	mov	r1, r4
 80a3278:	4602      	mov	r2, r0
 80a327a:	4628      	mov	r0, r5
 80a327c:	f7ff ff7f 	bl	80a317e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a3280:	4628      	mov	r0, r5
 80a3282:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a3284:	f7ff ff50 	bl	80a3128 <_ZN6String10invalidateEv>
 80a3288:	e7fa      	b.n	80a3280 <_ZN6StringaSEPKc+0x18>

080a328a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a328a:	b570      	push	{r4, r5, r6, lr}
 80a328c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a328e:	460e      	mov	r6, r1
 80a3290:	b909      	cbnz	r1, 80a3296 <_ZN6String6concatEPKcj+0xc>
 80a3292:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3294:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a3296:	b16a      	cbz	r2, 80a32b4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a3298:	6884      	ldr	r4, [r0, #8]
 80a329a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a329c:	4621      	mov	r1, r4
 80a329e:	f7ff ff5a 	bl	80a3156 <_ZN6String7reserveEj>
 80a32a2:	2800      	cmp	r0, #0
 80a32a4:	d0f5      	beq.n	80a3292 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a32a6:	6828      	ldr	r0, [r5, #0]
 80a32a8:	68ab      	ldr	r3, [r5, #8]
 80a32aa:	4631      	mov	r1, r6
 80a32ac:	4418      	add	r0, r3
 80a32ae:	f001 f824 	bl	80a42fa <strcpy>
	len = newlen;
 80a32b2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a32b4:	2001      	movs	r0, #1
 80a32b6:	e7ed      	b.n	80a3294 <_ZN6String6concatEPKcj+0xa>

080a32b8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a32b8:	688a      	ldr	r2, [r1, #8]
 80a32ba:	6809      	ldr	r1, [r1, #0]
 80a32bc:	f7ff bfe5 	b.w	80a328a <_ZN6String6concatEPKcj>

080a32c0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a32c0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a32c2:	688a      	ldr	r2, [r1, #8]
 80a32c4:	6809      	ldr	r1, [r1, #0]
{
 80a32c6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a32c8:	f7ff ffdf 	bl	80a328a <_ZN6String6concatEPKcj>
 80a32cc:	b910      	cbnz	r0, 80a32d4 <_ZplRK15StringSumHelperRK6String+0x14>
 80a32ce:	4620      	mov	r0, r4
 80a32d0:	f7ff ff2a 	bl	80a3128 <_ZN6String10invalidateEv>
	return a;
}
 80a32d4:	4620      	mov	r0, r4
 80a32d6:	bd10      	pop	{r4, pc}

080a32d8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a32d8:	b538      	push	{r3, r4, r5, lr}
 80a32da:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a32dc:	460d      	mov	r5, r1
 80a32de:	b921      	cbnz	r1, 80a32ea <_ZplRK15StringSumHelperPKc+0x12>
 80a32e0:	4620      	mov	r0, r4
 80a32e2:	f7ff ff21 	bl	80a3128 <_ZN6String10invalidateEv>
	return a;
}
 80a32e6:	4620      	mov	r0, r4
 80a32e8:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a32ea:	4608      	mov	r0, r1
 80a32ec:	f001 f829 	bl	80a4342 <strlen>
 80a32f0:	4629      	mov	r1, r5
 80a32f2:	4602      	mov	r2, r0
 80a32f4:	4620      	mov	r0, r4
 80a32f6:	f7ff ffc8 	bl	80a328a <_ZN6String6concatEPKcj>
 80a32fa:	2800      	cmp	r0, #0
 80a32fc:	d0f0      	beq.n	80a32e0 <_ZplRK15StringSumHelperPKc+0x8>
 80a32fe:	e7f2      	b.n	80a32e6 <_ZplRK15StringSumHelperPKc+0xe>

080a3300 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3300:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3302:	6882      	ldr	r2, [r0, #8]
 80a3304:	b93a      	cbnz	r2, 80a3316 <_ZNK6String6equalsEPKc+0x16>
 80a3306:	b121      	cbz	r1, 80a3312 <_ZNK6String6equalsEPKc+0x12>
 80a3308:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a330a:	fab0 f080 	clz	r0, r0
 80a330e:	0940      	lsrs	r0, r0, #5
 80a3310:	e000      	b.n	80a3314 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3312:	2001      	movs	r0, #1
}
 80a3314:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3316:	6800      	ldr	r0, [r0, #0]
 80a3318:	b909      	cbnz	r1, 80a331e <_ZNK6String6equalsEPKc+0x1e>
 80a331a:	7800      	ldrb	r0, [r0, #0]
 80a331c:	e7f5      	b.n	80a330a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a331e:	f000 ffe2 	bl	80a42e6 <strcmp>
 80a3322:	e7f2      	b.n	80a330a <_ZNK6String6equalsEPKc+0xa>

080a3324 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a3324:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a3326:	6883      	ldr	r3, [r0, #8]
 80a3328:	4293      	cmp	r3, r2
 80a332a:	d907      	bls.n	80a333c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a332c:	6804      	ldr	r4, [r0, #0]
 80a332e:	6809      	ldr	r1, [r1, #0]
 80a3330:	18a0      	adds	r0, r4, r2
 80a3332:	f001 f834 	bl	80a439e <strstr>
	if (found == NULL) return -1;
 80a3336:	b108      	cbz	r0, 80a333c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a3338:	1b00      	subs	r0, r0, r4
}
 80a333a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a333c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3340:	e7fb      	b.n	80a333a <_ZNK6String7indexOfERKS_j+0x16>

080a3342 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a3342:	2200      	movs	r2, #0
 80a3344:	f7ff bfee 	b.w	80a3324 <_ZNK6String7indexOfERKS_j>

080a3348 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a334a:	461d      	mov	r5, r3
	if (left > right) {
 80a334c:	429a      	cmp	r2, r3
 80a334e:	bf88      	it	hi
 80a3350:	4613      	movhi	r3, r2
{
 80a3352:	460f      	mov	r7, r1
 80a3354:	4614      	mov	r4, r2
	if (left > right) {
 80a3356:	bf88      	it	hi
 80a3358:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a335a:	490b      	ldr	r1, [pc, #44]	; (80a3388 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a335c:	bf88      	it	hi
 80a335e:	461d      	movhi	r5, r3
{
 80a3360:	4606      	mov	r6, r0
	String out;
 80a3362:	f7ff ff24 	bl	80a31ae <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a3366:	68ba      	ldr	r2, [r7, #8]
 80a3368:	42a2      	cmp	r2, r4
 80a336a:	d30a      	bcc.n	80a3382 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a336c:	6839      	ldr	r1, [r7, #0]
 80a336e:	42aa      	cmp	r2, r5
 80a3370:	bf94      	ite	ls
 80a3372:	ebc4 0202 	rsbls	r2, r4, r2
 80a3376:	ebc4 0205 	rsbhi	r2, r4, r5
 80a337a:	4630      	mov	r0, r6
 80a337c:	4421      	add	r1, r4
 80a337e:	f7ff fefe 	bl	80a317e <_ZN6String4copyEPKcj>
	return out;
}
 80a3382:	4630      	mov	r0, r6
 80a3384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3386:	bf00      	nop
 80a3388:	080a47a5 	.word	0x080a47a5

080a338c <_ZNK6String9substringEj>:
{
 80a338c:	b510      	push	{r4, lr}
 80a338e:	4604      	mov	r4, r0
	return substring(left, len);
 80a3390:	688b      	ldr	r3, [r1, #8]
 80a3392:	f7ff ffd9 	bl	80a3348 <_ZNK6String9substringEjj>
}
 80a3396:	4620      	mov	r0, r4
 80a3398:	bd10      	pop	{r4, pc}

080a339a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a339a:	6800      	ldr	r0, [r0, #0]
 80a339c:	b108      	cbz	r0, 80a33a2 <_ZNK6String5toIntEv+0x8>
 80a339e:	f000 bf25 	b.w	80a41ec <atol>
	return 0;
}
 80a33a2:	4770      	bx	lr

080a33a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a33a4:	b510      	push	{r4, lr}
 80a33a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a33a8:	6800      	ldr	r0, [r0, #0]
 80a33aa:	b118      	cbz	r0, 80a33b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a33ac:	f7fe f82a 	bl	80a1404 <free>
            wakeupSource_ = nullptr;
 80a33b0:	2300      	movs	r3, #0
 80a33b2:	6023      	str	r3, [r4, #0]
        }
    }
 80a33b4:	bd10      	pop	{r4, pc}

080a33b6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a33b6:	b510      	push	{r4, lr}
 80a33b8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a33ba:	f7ff fff3 	bl	80a33a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a33be:	4620      	mov	r0, r4
 80a33c0:	bd10      	pop	{r4, pc}
	...

080a33c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a33c4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a33c6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a33c8:	b510      	push	{r4, lr}
 80a33ca:	4b08      	ldr	r3, [pc, #32]	; (80a33ec <_GLOBAL__sub_I_System+0x28>)
 80a33cc:	4c08      	ldr	r4, [pc, #32]	; (80a33f0 <_GLOBAL__sub_I_System+0x2c>)
 80a33ce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a33d0:	4b08      	ldr	r3, [pc, #32]	; (80a33f4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a33d2:	6020      	str	r0, [r4, #0]
 80a33d4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a33d6:	71a0      	strb	r0, [r4, #6]
 80a33d8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a33da:	f7fd ff4f 	bl	80a127c <set_system_mode>
SystemClass System;
 80a33de:	4620      	mov	r0, r4
 80a33e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a33e4:	4a04      	ldr	r2, [pc, #16]	; (80a33f8 <_GLOBAL__sub_I_System+0x34>)
 80a33e6:	4905      	ldr	r1, [pc, #20]	; (80a33fc <_GLOBAL__sub_I_System+0x38>)
 80a33e8:	f000 bdda 	b.w	80a3fa0 <__aeabi_atexit>
 80a33ec:	20000d90 	.word	0x20000d90
 80a33f0:	20000d84 	.word	0x20000d84
 80a33f4:	ffff0000 	.word	0xffff0000
 80a33f8:	20000080 	.word	0x20000080
 80a33fc:	080a33b7 	.word	0x080a33b7

080a3400 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3400:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3402:	6803      	ldr	r3, [r0, #0]
{
 80a3404:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3408:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a340a:	2201      	movs	r2, #1
 80a340c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3410:	f10d 0107 	add.w	r1, sp, #7
 80a3414:	47a0      	blx	r4
}
 80a3416:	b002      	add	sp, #8
 80a3418:	bd10      	pop	{r4, pc}

080a341a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a341a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a341c:	6803      	ldr	r3, [r0, #0]
 80a341e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3420:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3424:	46a4      	mov	ip, r4
}
 80a3426:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3428:	4760      	bx	ip

080a342a <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a342a:	b513      	push	{r0, r1, r4, lr}
 80a342c:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a342e:	6802      	ldr	r2, [r0, #0]
{
 80a3430:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3434:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3436:	f10d 0107 	add.w	r1, sp, #7
 80a343a:	2201      	movs	r2, #1
 80a343c:	47a0      	blx	r4
}
 80a343e:	b002      	add	sp, #8
 80a3440:	bd10      	pop	{r4, pc}

080a3442 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3442:	4770      	bx	lr

080a3444 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3444:	4770      	bx	lr
	...

080a3448 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3448:	b510      	push	{r4, lr}
 80a344a:	4604      	mov	r4, r0
	    ||
 80a344c:	4b06      	ldr	r3, [pc, #24]	; (80a3468 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a344e:	4608      	mov	r0, r1
	    ||
 80a3450:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3452:	f104 040c 	add.w	r4, r4, #12
 80a3456:	d004      	beq.n	80a3462 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3458:	f000 fdb0 	bl	80a3fbc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a345c:	2800      	cmp	r0, #0
	return nullptr;
 80a345e:	bf08      	it	eq
 80a3460:	2400      	moveq	r4, #0
      }
 80a3462:	4620      	mov	r0, r4
 80a3464:	bd10      	pop	{r4, pc}
 80a3466:	bf00      	nop
 80a3468:	080a498c 	.word	0x080a498c

080a346c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a346c:	b510      	push	{r4, lr}
 80a346e:	4604      	mov	r4, r0
 80a3470:	21ac      	movs	r1, #172	; 0xac
 80a3472:	f000 fd9a 	bl	80a3faa <_ZdlPvj>
 80a3476:	4620      	mov	r0, r4
 80a3478:	bd10      	pop	{r4, pc}

080a347a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a347a:	f7fc be10 	b.w	80a009e <_ZdlPv>
	...

080a3480 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3480:	b538      	push	{r3, r4, r5, lr}
 80a3482:	4b0b      	ldr	r3, [pc, #44]	; (80a34b0 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3484:	6984      	ldr	r4, [r0, #24]
 80a3486:	4605      	mov	r5, r0
 80a3488:	6003      	str	r3, [r0, #0]
 80a348a:	b17c      	cbz	r4, 80a34ac <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a348c:	6863      	ldr	r3, [r4, #4]
 80a348e:	3b01      	subs	r3, #1
 80a3490:	6063      	str	r3, [r4, #4]
 80a3492:	b95b      	cbnz	r3, 80a34ac <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3494:	6823      	ldr	r3, [r4, #0]
 80a3496:	4620      	mov	r0, r4
 80a3498:	689b      	ldr	r3, [r3, #8]
 80a349a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a349c:	68a3      	ldr	r3, [r4, #8]
 80a349e:	3b01      	subs	r3, #1
 80a34a0:	60a3      	str	r3, [r4, #8]
 80a34a2:	b91b      	cbnz	r3, 80a34ac <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a34a4:	6823      	ldr	r3, [r4, #0]
 80a34a6:	4620      	mov	r0, r4
 80a34a8:	68db      	ldr	r3, [r3, #12]
 80a34aa:	4798      	blx	r3
 80a34ac:	4628      	mov	r0, r5
 80a34ae:	bd38      	pop	{r3, r4, r5, pc}
 80a34b0:	080a499c 	.word	0x080a499c

080a34b4 <_ZN9TCPClientD0Ev>:
 80a34b4:	b510      	push	{r4, lr}
 80a34b6:	4604      	mov	r4, r0
 80a34b8:	f7ff ffe2 	bl	80a3480 <_ZN9TCPClientD1Ev>
 80a34bc:	4620      	mov	r0, r4
 80a34be:	211c      	movs	r1, #28
 80a34c0:	f000 fd73 	bl	80a3faa <_ZdlPvj>
 80a34c4:	4620      	mov	r0, r4
 80a34c6:	bd10      	pop	{r4, pc}

080a34c8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a34c8:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a34ca:	4604      	mov	r4, r0
 80a34cc:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a34ce:	694d      	ldr	r5, [r1, #20]
 80a34d0:	4b04      	ldr	r3, [pc, #16]	; (80a34e4 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a34d2:	358c      	adds	r5, #140	; 0x8c
 80a34d4:	f844 3b04 	str.w	r3, [r4], #4
 80a34d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a34da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a34dc:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a34de:	4630      	mov	r0, r6
 80a34e0:	7023      	strb	r3, [r4, #0]
 80a34e2:	bd70      	pop	{r4, r5, r6, pc}
 80a34e4:	080a4814 	.word	0x080a4814

080a34e8 <_ZN9TCPClient4peekEv>:
{
 80a34e8:	b510      	push	{r4, lr}
 80a34ea:	6943      	ldr	r3, [r0, #20]
 80a34ec:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a34ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a34f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a34f6:	429a      	cmp	r2, r3
 80a34f8:	d005      	beq.n	80a3506 <_ZN9TCPClient4peekEv+0x1e>
 80a34fa:	6963      	ldr	r3, [r4, #20]
 80a34fc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3500:	4413      	add	r3, r2
 80a3502:	7918      	ldrb	r0, [r3, #4]
}
 80a3504:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3506:	6803      	ldr	r3, [r0, #0]
 80a3508:	691b      	ldr	r3, [r3, #16]
 80a350a:	4798      	blx	r3
 80a350c:	2800      	cmp	r0, #0
 80a350e:	d1f4      	bne.n	80a34fa <_ZN9TCPClient4peekEv+0x12>
 80a3510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3514:	e7f6      	b.n	80a3504 <_ZN9TCPClient4peekEv+0x1c>

080a3516 <_ZN9TCPClient4readEv>:
{
 80a3516:	b510      	push	{r4, lr}
 80a3518:	6943      	ldr	r3, [r0, #20]
 80a351a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a351c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3520:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3524:	429a      	cmp	r2, r3
 80a3526:	d008      	beq.n	80a353a <_ZN9TCPClient4readEv+0x24>
 80a3528:	6963      	ldr	r3, [r4, #20]
 80a352a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a352e:	1c51      	adds	r1, r2, #1
 80a3530:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3534:	4413      	add	r3, r2
 80a3536:	7918      	ldrb	r0, [r3, #4]
}
 80a3538:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a353a:	6803      	ldr	r3, [r0, #0]
 80a353c:	691b      	ldr	r3, [r3, #16]
 80a353e:	4798      	blx	r3
 80a3540:	2800      	cmp	r0, #0
 80a3542:	d1f1      	bne.n	80a3528 <_ZN9TCPClient4readEv+0x12>
 80a3544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3548:	e7f6      	b.n	80a3538 <_ZN9TCPClient4readEv+0x22>

080a354a <_ZN9TCPClient4readEPhj>:
{
 80a354a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a354c:	6943      	ldr	r3, [r0, #20]
 80a354e:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3550:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3554:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3558:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a355a:	429a      	cmp	r2, r3
{
 80a355c:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a355e:	d016      	beq.n	80a358e <_ZN9TCPClient4readEPhj+0x44>
 80a3560:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3562:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3564:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3568:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a356c:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a356e:	42bc      	cmp	r4, r7
 80a3570:	bf28      	it	cs
 80a3572:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3574:	3304      	adds	r3, #4
 80a3576:	4622      	mov	r2, r4
 80a3578:	4419      	add	r1, r3
 80a357a:	f000 fe49 	bl	80a4210 <memcpy>
 80a357e:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3580:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3584:	4423      	add	r3, r4
 80a3586:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a358a:	4620      	mov	r0, r4
 80a358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a358e:	6803      	ldr	r3, [r0, #0]
 80a3590:	691b      	ldr	r3, [r3, #16]
 80a3592:	4798      	blx	r3
 80a3594:	2800      	cmp	r0, #0
 80a3596:	d1e3      	bne.n	80a3560 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3598:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a359c:	e7f5      	b.n	80a358a <_ZN9TCPClient4readEPhj+0x40>

080a359e <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a359e:	2300      	movs	r3, #0
 80a35a0:	6942      	ldr	r2, [r0, #20]
 80a35a2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a35a6:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a35a8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a35ac:	4770      	bx	lr
	...

080a35b0 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a35b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a35b4:	461f      	mov	r7, r3
    stop();
 80a35b6:	6803      	ldr	r3, [r0, #0]
{
 80a35b8:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a35ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a35bc:	4605      	mov	r5, r0
 80a35be:	460c      	mov	r4, r1
 80a35c0:	4616      	mov	r6, r2
    stop();
 80a35c2:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a35c4:	4638      	mov	r0, r7
 80a35c6:	f7ff fcdd 	bl	80a2f84 <_ZN5spark12NetworkClass4fromEm>
 80a35ca:	6803      	ldr	r3, [r0, #0]
 80a35cc:	68db      	ldr	r3, [r3, #12]
 80a35ce:	4798      	blx	r3
 80a35d0:	2800      	cmp	r0, #0
 80a35d2:	d054      	beq.n	80a367e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a35d4:	4633      	mov	r3, r6
 80a35d6:	2206      	movs	r2, #6
 80a35d8:	2101      	movs	r1, #1
 80a35da:	2002      	movs	r0, #2
 80a35dc:	9700      	str	r7, [sp, #0]
 80a35de:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a35e2:	f7fd fd4b 	bl	80a107c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a35e6:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a35e8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a35ec:	f04f 0800 	mov.w	r8, #0
 80a35f0:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a35f4:	696b      	ldr	r3, [r5, #20]
 80a35f6:	2001      	movs	r0, #1
 80a35f8:	681b      	ldr	r3, [r3, #0]
 80a35fa:	4923      	ldr	r1, [pc, #140]	; (80a3688 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a35fc:	9301      	str	r3, [sp, #4]
 80a35fe:	4b23      	ldr	r3, [pc, #140]	; (80a368c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3600:	aa02      	add	r2, sp, #8
 80a3602:	9300      	str	r3, [sp, #0]
 80a3604:	4643      	mov	r3, r8
 80a3606:	f7fd fe21 	bl	80a124c <log_message>
          if (socket_handle_valid(d_->sock))
 80a360a:	696b      	ldr	r3, [r5, #20]
 80a360c:	6818      	ldr	r0, [r3, #0]
 80a360e:	f7fd fd2d 	bl	80a106c <socket_handle_valid>
 80a3612:	2800      	cmp	r0, #0
 80a3614:	d033      	beq.n	80a367e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3616:	4628      	mov	r0, r5
 80a3618:	f7ff ffc1 	bl	80a359e <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a361c:	2302      	movs	r3, #2
 80a361e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3622:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3624:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3626:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a362a:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a362c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3630:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3634:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3636:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a363a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a363e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3642:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3646:	f7fd fde9 	bl	80a121c <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a364a:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a364c:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a364e:	2210      	movs	r2, #16
 80a3650:	6818      	ldr	r0, [r3, #0]
 80a3652:	a902      	add	r1, sp, #8
 80a3654:	f7fd fd1a 	bl	80a108c <socket_connect>
 80a3658:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a365a:	4630      	mov	r0, r6
 80a365c:	f7fd fdde 	bl	80a121c <HAL_NET_SetNetWatchDog>
 80a3660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3662:	696e      	ldr	r6, [r5, #20]
 80a3664:	368c      	adds	r6, #140	; 0x8c
 80a3666:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3668:	6823      	ldr	r3, [r4, #0]
 80a366a:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a366c:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a366e:	f1b9 0f00 	cmp.w	r9, #0
 80a3672:	d007      	beq.n	80a3684 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3674:	682b      	ldr	r3, [r5, #0]
 80a3676:	4628      	mov	r0, r5
 80a3678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a367a:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a367c:	4640      	mov	r0, r8
}
 80a367e:	b00b      	add	sp, #44	; 0x2c
 80a3680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3684:	2001      	movs	r0, #1
        return connected;
 80a3686:	e7fa      	b.n	80a367e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3688:	080a4954 	.word	0x080a4954
 80a368c:	080a495b 	.word	0x080a495b

080a3690 <_ZN9TCPClient9availableEv>:
{
 80a3690:	b538      	push	{r3, r4, r5, lr}
 80a3692:	6942      	ldr	r2, [r0, #20]
 80a3694:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3696:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a369a:	b12b      	cbz	r3, 80a36a8 <_ZN9TCPClient9availableEv+0x18>
 80a369c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a36a0:	429a      	cmp	r2, r3
 80a36a2:	d101      	bne.n	80a36a8 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a36a4:	f7ff ff7b 	bl	80a359e <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a36a8:	6920      	ldr	r0, [r4, #16]
 80a36aa:	f7ff fc6b 	bl	80a2f84 <_ZN5spark12NetworkClass4fromEm>
 80a36ae:	6803      	ldr	r3, [r0, #0]
 80a36b0:	68db      	ldr	r3, [r3, #12]
 80a36b2:	4798      	blx	r3
 80a36b4:	b1f8      	cbz	r0, 80a36f6 <_ZN9TCPClient9availableEv+0x66>
 80a36b6:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a36b8:	6818      	ldr	r0, [r3, #0]
 80a36ba:	f7fd fcd7 	bl	80a106c <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a36be:	b1d0      	cbz	r0, 80a36f6 <_ZN9TCPClient9availableEv+0x66>
 80a36c0:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a36c2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a36c6:	297f      	cmp	r1, #127	; 0x7f
 80a36c8:	d815      	bhi.n	80a36f6 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a36ca:	1d05      	adds	r5, r0, #4
 80a36cc:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a36d0:	2300      	movs	r3, #0
 80a36d2:	6800      	ldr	r0, [r0, #0]
 80a36d4:	4429      	add	r1, r5
 80a36d6:	f7fd fce1 	bl	80a109c <socket_receive>
            if (ret > 0)
 80a36da:	2800      	cmp	r0, #0
 80a36dc:	dd0b      	ble.n	80a36f6 <_ZN9TCPClient9availableEv+0x66>
 80a36de:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a36e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a36e4:	b90a      	cbnz	r2, 80a36ea <_ZN9TCPClient9availableEv+0x5a>
 80a36e6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a36ea:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a36ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a36f0:	4410      	add	r0, r2
 80a36f2:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a36f6:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a36f8:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a36fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3700:	1ac0      	subs	r0, r0, r3
 80a3702:	bd38      	pop	{r3, r4, r5, pc}

080a3704 <_ZN9TCPClient4stopEv>:
{
 80a3704:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3706:	6943      	ldr	r3, [r0, #20]
{
 80a3708:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a370a:	6818      	ldr	r0, [r3, #0]
 80a370c:	f7fd fcae 	bl	80a106c <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3710:	b118      	cbz	r0, 80a371a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3712:	6963      	ldr	r3, [r4, #20]
 80a3714:	6818      	ldr	r0, [r3, #0]
 80a3716:	f7fd fcc9 	bl	80a10ac <socket_close>
 80a371a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a371c:	f7fd fcce 	bl	80a10bc <socket_handle_invalid>
 80a3720:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a3722:	6960      	ldr	r0, [r4, #20]
 80a3724:	2211      	movs	r2, #17
 80a3726:	2100      	movs	r1, #0
 80a3728:	308c      	adds	r0, #140	; 0x8c
 80a372a:	f000 fd99 	bl	80a4260 <memset>
  flush_buffer();
 80a372e:	4620      	mov	r0, r4
}
 80a3730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3734:	f7ff bf33 	b.w	80a359e <_ZN9TCPClient12flush_bufferEv>

080a3738 <_ZN9TCPClient6statusEv>:
{
 80a3738:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a373a:	6943      	ldr	r3, [r0, #20]
{
 80a373c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a373e:	6818      	ldr	r0, [r3, #0]
 80a3740:	f7fd fc94 	bl	80a106c <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3744:	b908      	cbnz	r0, 80a374a <_ZN9TCPClient6statusEv+0x12>
 80a3746:	2000      	movs	r0, #0
}
 80a3748:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a374a:	6920      	ldr	r0, [r4, #16]
 80a374c:	f7ff fc1a 	bl	80a2f84 <_ZN5spark12NetworkClass4fromEm>
 80a3750:	6803      	ldr	r3, [r0, #0]
 80a3752:	68db      	ldr	r3, [r3, #12]
 80a3754:	4798      	blx	r3
 80a3756:	2800      	cmp	r0, #0
 80a3758:	d0f5      	beq.n	80a3746 <_ZN9TCPClient6statusEv+0xe>
 80a375a:	6963      	ldr	r3, [r4, #20]
 80a375c:	6818      	ldr	r0, [r3, #0]
 80a375e:	f7fd fc7d 	bl	80a105c <socket_active_status>
 80a3762:	fab0 f080 	clz	r0, r0
 80a3766:	0940      	lsrs	r0, r0, #5
 80a3768:	e7ee      	b.n	80a3748 <_ZN9TCPClient6statusEv+0x10>

080a376a <_ZN9TCPClientcvbEv>:
{
 80a376a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a376c:	f7ff ffe4 	bl	80a3738 <_ZN9TCPClient6statusEv>
}
 80a3770:	3800      	subs	r0, #0
 80a3772:	bf18      	it	ne
 80a3774:	2001      	movne	r0, #1
 80a3776:	bd08      	pop	{r3, pc}

080a3778 <_ZN9TCPClient5writeEPKhjm>:
{
 80a3778:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a377c:	2700      	movs	r7, #0
 80a377e:	6047      	str	r7, [r0, #4]
 80a3780:	4604      	mov	r4, r0
 80a3782:	460d      	mov	r5, r1
 80a3784:	4616      	mov	r6, r2
 80a3786:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3788:	f7ff ffd6 	bl	80a3738 <_ZN9TCPClient6statusEv>
 80a378c:	b170      	cbz	r0, 80a37ac <_ZN9TCPClient5writeEPKhjm+0x34>
 80a378e:	e9cd 8700 	strd	r8, r7, [sp]
 80a3792:	6960      	ldr	r0, [r4, #20]
 80a3794:	463b      	mov	r3, r7
 80a3796:	4632      	mov	r2, r6
 80a3798:	4629      	mov	r1, r5
 80a379a:	6800      	ldr	r0, [r0, #0]
 80a379c:	f7fd fc96 	bl	80a10cc <socket_send_ex>
    if (ret < 0) {
 80a37a0:	2800      	cmp	r0, #0
 80a37a2:	da00      	bge.n	80a37a6 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a37a4:	6060      	str	r0, [r4, #4]
}
 80a37a6:	b002      	add	sp, #8
 80a37a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a37ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a37b0:	e7f8      	b.n	80a37a4 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a37b2 <_ZN9TCPClient9connectedEv>:
{
 80a37b2:	b570      	push	{r4, r5, r6, lr}
 80a37b4:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a37b6:	f7ff ffbf 	bl	80a3738 <_ZN9TCPClient6statusEv>
 80a37ba:	b9e8      	cbnz	r0, 80a37f8 <_ZN9TCPClient9connectedEv+0x46>
 80a37bc:	696b      	ldr	r3, [r5, #20]
 80a37be:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a37c2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a37c6:	4291      	cmp	r1, r2
 80a37c8:	d116      	bne.n	80a37f8 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a37ca:	6818      	ldr	r0, [r3, #0]
 80a37cc:	f7fd fc4e 	bl	80a106c <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a37d0:	b908      	cbnz	r0, 80a37d6 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a37d2:	2000      	movs	r0, #0
}
 80a37d4:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a37d6:	696b      	ldr	r3, [r5, #20]
 80a37d8:	6818      	ldr	r0, [r3, #0]
 80a37da:	f7fd fc3f 	bl	80a105c <socket_active_status>
 80a37de:	2801      	cmp	r0, #1
 80a37e0:	4604      	mov	r4, r0
 80a37e2:	d1f6      	bne.n	80a37d2 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a37e4:	682b      	ldr	r3, [r5, #0]
 80a37e6:	4628      	mov	r0, r5
 80a37e8:	691b      	ldr	r3, [r3, #16]
 80a37ea:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a37ec:	b930      	cbnz	r0, 80a37fc <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a37ee:	682b      	ldr	r3, [r5, #0]
 80a37f0:	4628      	mov	r0, r5
 80a37f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a37f4:	4798      	blx	r3
 80a37f6:	e7ec      	b.n	80a37d2 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a37f8:	2001      	movs	r0, #1
 80a37fa:	e7eb      	b.n	80a37d4 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a37fc:	4620      	mov	r0, r4
 80a37fe:	e7e9      	b.n	80a37d4 <_ZN9TCPClient9connectedEv+0x22>

080a3800 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3800:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3802:	b510      	push	{r4, lr}
 80a3804:	4604      	mov	r4, r0
          total(0) {
 80a3806:	6001      	str	r1, [r0, #0]
 80a3808:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a380c:	3088      	adds	r0, #136	; 0x88
 80a380e:	f7fe f955 	bl	80a1abc <_ZN9IPAddressC1Ev>
}
 80a3812:	4620      	mov	r0, r4
 80a3814:	bd10      	pop	{r4, pc}
	...

080a3818 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a381a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a381e:	2300      	movs	r3, #0
 80a3820:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3824:	4a0d      	ldr	r2, [pc, #52]	; (80a385c <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3826:	6103      	str	r3, [r0, #16]
 80a3828:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a382a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a382c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a382e:	20ac      	movs	r0, #172	; 0xac
 80a3830:	460e      	mov	r6, r1
 80a3832:	f7fc fc30 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3836:	1e05      	subs	r5, r0, #0
 80a3838:	f105 070c 	add.w	r7, r5, #12
 80a383c:	d008      	beq.n	80a3850 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a383e:	2301      	movs	r3, #1
 80a3840:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3844:	4b06      	ldr	r3, [pc, #24]	; (80a3860 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3846:	4631      	mov	r1, r6
 80a3848:	4638      	mov	r0, r7
 80a384a:	602b      	str	r3, [r5, #0]
 80a384c:	f7ff ffd8 	bl	80a3800 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3850:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3852:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3856:	f7ff fea2 	bl	80a359e <_ZN9TCPClient12flush_bufferEv>
}
 80a385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a385c:	080a499c 	.word	0x080a499c
 80a3860:	080a4978 	.word	0x080a4978

080a3864 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3864:	b510      	push	{r4, lr}
 80a3866:	4604      	mov	r4, r0
 80a3868:	f7fd fc28 	bl	80a10bc <socket_handle_invalid>
 80a386c:	4601      	mov	r1, r0
 80a386e:	4620      	mov	r0, r4
 80a3870:	f7ff ffd2 	bl	80a3818 <_ZN9TCPClientC1Em>
}
 80a3874:	4620      	mov	r0, r4
 80a3876:	bd10      	pop	{r4, pc}

080a3878 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3878:	b510      	push	{r4, lr}
 80a387a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a387c:	6800      	ldr	r0, [r0, #0]
 80a387e:	f7fd fbf5 	bl	80a106c <socket_handle_valid>
 80a3882:	b110      	cbz	r0, 80a388a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3884:	6820      	ldr	r0, [r4, #0]
 80a3886:	f7fd fc11 	bl	80a10ac <socket_close>
    }
}
 80a388a:	4620      	mov	r0, r4
 80a388c:	bd10      	pop	{r4, pc}

080a388e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a388e:	300c      	adds	r0, #12
 80a3890:	f7ff bff2 	b.w	80a3878 <_ZN9TCPClient4DataD1Ev>

080a3894 <_ZN9TCPClient7connectEPKctm>:
{
 80a3894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3898:	461f      	mov	r7, r3
    stop();
 80a389a:	6803      	ldr	r3, [r0, #0]
{
 80a389c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a38a0:	4606      	mov	r6, r0
 80a38a2:	460d      	mov	r5, r1
 80a38a4:	4690      	mov	r8, r2
    stop();
 80a38a6:	4798      	blx	r3
    if (Network.ready())
 80a38a8:	4813      	ldr	r0, [pc, #76]	; (80a38f8 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a38aa:	f7ff fb16 	bl	80a2eda <_ZN5spark12NetworkClass5readyEv>
 80a38ae:	b1f0      	cbz	r0, 80a38ee <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a38b0:	a802      	add	r0, sp, #8
 80a38b2:	f7fe f903 	bl	80a1abc <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a38b6:	4628      	mov	r0, r5
 80a38b8:	f000 fd43 	bl	80a4342 <strlen>
 80a38bc:	2400      	movs	r4, #0
 80a38be:	b281      	uxth	r1, r0
 80a38c0:	463b      	mov	r3, r7
 80a38c2:	4628      	mov	r0, r5
 80a38c4:	9400      	str	r4, [sp, #0]
 80a38c6:	aa03      	add	r2, sp, #12
 80a38c8:	f7fd fcb0 	bl	80a122c <inet_gethostbyname>
 80a38cc:	b990      	cbnz	r0, 80a38f4 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a38ce:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a38d0:	ad09      	add	r5, sp, #36	; 0x24
 80a38d2:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a38d6:	4b09      	ldr	r3, [pc, #36]	; (80a38fc <_ZN9TCPClient7connectEPKctm+0x68>)
 80a38d8:	ac03      	add	r4, sp, #12
 80a38da:	9308      	str	r3, [sp, #32]
 80a38dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a38de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a38e0:	6823      	ldr	r3, [r4, #0]
 80a38e2:	4642      	mov	r2, r8
 80a38e4:	702b      	strb	r3, [r5, #0]
 80a38e6:	4630      	mov	r0, r6
 80a38e8:	463b      	mov	r3, r7
 80a38ea:	a908      	add	r1, sp, #32
 80a38ec:	47c8      	blx	r9
}
 80a38ee:	b00f      	add	sp, #60	; 0x3c
 80a38f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a38f4:	4620      	mov	r0, r4
 80a38f6:	e7fa      	b.n	80a38ee <_ZN9TCPClient7connectEPKctm+0x5a>
 80a38f8:	20000d6c 	.word	0x20000d6c
 80a38fc:	080a4814 	.word	0x080a4814

080a3900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3900:	4b02      	ldr	r3, [pc, #8]	; (80a390c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3902:	681a      	ldr	r2, [r3, #0]
 80a3904:	4b02      	ldr	r3, [pc, #8]	; (80a3910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3906:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a3908:	4770      	bx	lr
 80a390a:	bf00      	nop
 80a390c:	20000018 	.word	0x20000018
 80a3910:	20000d94 	.word	0x20000d94

080a3914 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3914:	4770      	bx	lr

080a3916 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3916:	7441      	strb	r1, [r0, #17]
}
 80a3918:	4770      	bx	lr

080a391a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a391a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a391c:	7c00      	ldrb	r0, [r0, #16]
 80a391e:	f7fd fc2d 	bl	80a117c <hal_usart_available_data_for_write>
}
 80a3922:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3926:	bd08      	pop	{r3, pc}

080a3928 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3928:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a392a:	7c00      	ldrb	r0, [r0, #16]
 80a392c:	f7fd fbfe 	bl	80a112c <hal_usart_available>
}
 80a3930:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3934:	bd08      	pop	{r3, pc}

080a3936 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3936:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3938:	7c00      	ldrb	r0, [r0, #16]
 80a393a:	f7fd fc07 	bl	80a114c <hal_usart_peek>
}
 80a393e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3942:	bd08      	pop	{r3, pc}

080a3944 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3944:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3946:	7c00      	ldrb	r0, [r0, #16]
 80a3948:	f7fd fbf8 	bl	80a113c <hal_usart_read>
}
 80a394c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3950:	bd08      	pop	{r3, pc}

080a3952 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3952:	7c00      	ldrb	r0, [r0, #16]
 80a3954:	f7fd bc02 	b.w	80a115c <hal_usart_flush>

080a3958 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3958:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a395a:	7c46      	ldrb	r6, [r0, #17]
{
 80a395c:	4604      	mov	r4, r0
 80a395e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3960:	b12e      	cbz	r6, 80a396e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3962:	4629      	mov	r1, r5
 80a3964:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a396a:	f7fd bbd7 	b.w	80a111c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a396e:	7c00      	ldrb	r0, [r0, #16]
 80a3970:	f7fd fc04 	bl	80a117c <hal_usart_available_data_for_write>
 80a3974:	2800      	cmp	r0, #0
 80a3976:	dcf4      	bgt.n	80a3962 <_ZN11USARTSerial5writeEh+0xa>
}
 80a3978:	4630      	mov	r0, r6
 80a397a:	bd70      	pop	{r4, r5, r6, pc}

080a397c <_ZN11USARTSerialD0Ev>:
 80a397c:	b510      	push	{r4, lr}
 80a397e:	4604      	mov	r4, r0
 80a3980:	2114      	movs	r1, #20
 80a3982:	f000 fb12 	bl	80a3faa <_ZdlPvj>
 80a3986:	4620      	mov	r0, r4
 80a3988:	bd10      	pop	{r4, pc}
	...

080a398c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a398c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3990:	b510      	push	{r4, lr}
 80a3992:	4604      	mov	r4, r0
 80a3994:	4608      	mov	r0, r1
 80a3996:	4611      	mov	r1, r2
 80a3998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a399c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a39a0:	4a04      	ldr	r2, [pc, #16]	; (80a39b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a39a2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a39a4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a39a6:	2201      	movs	r2, #1
 80a39a8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a39aa:	461a      	mov	r2, r3
 80a39ac:	f7fd fba6 	bl	80a10fc <hal_usart_init>
}
 80a39b0:	4620      	mov	r0, r4
 80a39b2:	bd10      	pop	{r4, pc}
 80a39b4:	080a4a04 	.word	0x080a4a04

080a39b8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a39b8:	2300      	movs	r3, #0
 80a39ba:	7c00      	ldrb	r0, [r0, #16]
 80a39bc:	f7fd bbe6 	b.w	80a118c <hal_usart_begin_config>

080a39c0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a39c0:	2200      	movs	r2, #0
 80a39c2:	f7ff bff9 	b.w	80a39b8 <_ZN11USARTSerial5beginEmm>

080a39c6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a39c6:	7c00      	ldrb	r0, [r0, #16]
 80a39c8:	f7fd bba0 	b.w	80a110c <hal_usart_end>

080a39cc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a39cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a39ce:	4d0d      	ldr	r5, [pc, #52]	; (80a3a04 <_Z22__fetch_global_Serial1v+0x38>)
 80a39d0:	7829      	ldrb	r1, [r5, #0]
 80a39d2:	f3bf 8f5b 	dmb	ish
 80a39d6:	f011 0401 	ands.w	r4, r1, #1
 80a39da:	d111      	bne.n	80a3a00 <_Z22__fetch_global_Serial1v+0x34>
 80a39dc:	4628      	mov	r0, r5
 80a39de:	f7fc fb6b 	bl	80a00b8 <__cxa_guard_acquire>
 80a39e2:	b168      	cbz	r0, 80a3a00 <_Z22__fetch_global_Serial1v+0x34>
 80a39e4:	4621      	mov	r1, r4
 80a39e6:	4a08      	ldr	r2, [pc, #32]	; (80a3a08 <_Z22__fetch_global_Serial1v+0x3c>)
 80a39e8:	4b08      	ldr	r3, [pc, #32]	; (80a3a0c <_Z22__fetch_global_Serial1v+0x40>)
 80a39ea:	4809      	ldr	r0, [pc, #36]	; (80a3a10 <_Z22__fetch_global_Serial1v+0x44>)
 80a39ec:	f7ff ffce 	bl	80a398c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a39f0:	4628      	mov	r0, r5
 80a39f2:	f7fc fb66 	bl	80a00c2 <__cxa_guard_release>
 80a39f6:	4a07      	ldr	r2, [pc, #28]	; (80a3a14 <_Z22__fetch_global_Serial1v+0x48>)
 80a39f8:	4907      	ldr	r1, [pc, #28]	; (80a3a18 <_Z22__fetch_global_Serial1v+0x4c>)
 80a39fa:	4805      	ldr	r0, [pc, #20]	; (80a3a10 <_Z22__fetch_global_Serial1v+0x44>)
 80a39fc:	f000 fad0 	bl	80a3fa0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3a00:	4803      	ldr	r0, [pc, #12]	; (80a3a10 <_Z22__fetch_global_Serial1v+0x44>)
 80a3a02:	bd38      	pop	{r3, r4, r5, pc}
 80a3a04:	20000d98 	.word	0x20000d98
 80a3a08:	20000d9c 	.word	0x20000d9c
 80a3a0c:	20000e20 	.word	0x20000e20
 80a3a10:	20000ea4 	.word	0x20000ea4
 80a3a14:	20000080 	.word	0x20000080
 80a3a18:	080a3915 	.word	0x080a3915

080a3a1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3a1c:	7441      	strb	r1, [r0, #17]
}
 80a3a1e:	4770      	bx	lr

080a3a20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3a20:	4770      	bx	lr

080a3a22 <_ZN9USBSerial4readEv>:
{
 80a3a22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3a24:	2100      	movs	r1, #0
 80a3a26:	7c00      	ldrb	r0, [r0, #16]
 80a3a28:	f7fd fbe0 	bl	80a11ec <HAL_USB_USART_Receive_Data>
}
 80a3a2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3a30:	bd08      	pop	{r3, pc}

080a3a32 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a3a32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3a34:	2101      	movs	r1, #1
 80a3a36:	7c00      	ldrb	r0, [r0, #16]
 80a3a38:	f7fd fbd8 	bl	80a11ec <HAL_USB_USART_Receive_Data>
}
 80a3a3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3a40:	bd08      	pop	{r3, pc}

080a3a42 <_ZN9USBSerial17availableForWriteEv>:
{
 80a3a42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3a44:	7c00      	ldrb	r0, [r0, #16]
 80a3a46:	f7fd fbc9 	bl	80a11dc <HAL_USB_USART_Available_Data_For_Write>
}
 80a3a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3a4e:	bd08      	pop	{r3, pc}

080a3a50 <_ZN9USBSerial9availableEv>:
{
 80a3a50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3a52:	7c00      	ldrb	r0, [r0, #16]
 80a3a54:	f7fd fbba 	bl	80a11cc <HAL_USB_USART_Available_Data>
}
 80a3a58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3a5c:	bd08      	pop	{r3, pc}

080a3a5e <_ZN9USBSerial5writeEh>:
{
 80a3a5e:	b538      	push	{r3, r4, r5, lr}
 80a3a60:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3a62:	7c00      	ldrb	r0, [r0, #16]
{
 80a3a64:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3a66:	f7fd fbb9 	bl	80a11dc <HAL_USB_USART_Available_Data_For_Write>
 80a3a6a:	2800      	cmp	r0, #0
 80a3a6c:	dc01      	bgt.n	80a3a72 <_ZN9USBSerial5writeEh+0x14>
 80a3a6e:	7c60      	ldrb	r0, [r4, #17]
 80a3a70:	b128      	cbz	r0, 80a3a7e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3a72:	4629      	mov	r1, r5
 80a3a74:	7c20      	ldrb	r0, [r4, #16]
 80a3a76:	f7fd fbc1 	bl	80a11fc <HAL_USB_USART_Send_Data>
 80a3a7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3a7e:	bd38      	pop	{r3, r4, r5, pc}

080a3a80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3a80:	7c00      	ldrb	r0, [r0, #16]
 80a3a82:	f7fd bbc3 	b.w	80a120c <HAL_USB_USART_Flush_Data>

080a3a86 <_ZN9USBSerialD0Ev>:
 80a3a86:	b510      	push	{r4, lr}
 80a3a88:	4604      	mov	r4, r0
 80a3a8a:	2114      	movs	r1, #20
 80a3a8c:	f000 fa8d 	bl	80a3faa <_ZdlPvj>
 80a3a90:	4620      	mov	r0, r4
 80a3a92:	bd10      	pop	{r4, pc}

080a3a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3a94:	b510      	push	{r4, lr}
 80a3a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3a9a:	4604      	mov	r4, r0
 80a3a9c:	4608      	mov	r0, r1
 80a3a9e:	2100      	movs	r1, #0
 80a3aa0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3aa4:	4b04      	ldr	r3, [pc, #16]	; (80a3ab8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3aa6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3aa8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3aaa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3aac:	4611      	mov	r1, r2
  _blocking = true;
 80a3aae:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3ab0:	f7fd fb74 	bl	80a119c <HAL_USB_USART_Init>
}
 80a3ab4:	4620      	mov	r0, r4
 80a3ab6:	bd10      	pop	{r4, pc}
 80a3ab8:	080a4a34 	.word	0x080a4a34

080a3abc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3abc:	2200      	movs	r2, #0
 80a3abe:	7c00      	ldrb	r0, [r0, #16]
 80a3ac0:	f7fd bb74 	b.w	80a11ac <HAL_USB_USART_Begin>

080a3ac4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a3ac4:	7c00      	ldrb	r0, [r0, #16]
 80a3ac6:	f7fd bb79 	b.w	80a11bc <HAL_USB_USART_End>
	...

080a3acc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3acc:	b510      	push	{r4, lr}
 80a3ace:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3ad0:	2214      	movs	r2, #20
 80a3ad2:	2100      	movs	r1, #0
 80a3ad4:	f000 fbc4 	bl	80a4260 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3ad8:	4b05      	ldr	r3, [pc, #20]	; (80a3af0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3ada:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a3adc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3ade:	4b05      	ldr	r3, [pc, #20]	; (80a3af4 <_Z19acquireSerialBufferv+0x28>)
 80a3ae0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3ae2:	f240 1301 	movw	r3, #257	; 0x101
 80a3ae6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3ae8:	2381      	movs	r3, #129	; 0x81
 80a3aea:	8223      	strh	r3, [r4, #16]
}
 80a3aec:	bd10      	pop	{r4, pc}
 80a3aee:	bf00      	nop
 80a3af0:	20000ee8 	.word	0x20000ee8
 80a3af4:	20000fe9 	.word	0x20000fe9

080a3af8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3af8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3afa:	4d0f      	ldr	r5, [pc, #60]	; (80a3b38 <_Z16_fetch_usbserialv+0x40>)
{
 80a3afc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3afe:	a801      	add	r0, sp, #4
 80a3b00:	f7ff ffe4 	bl	80a3acc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3b04:	7829      	ldrb	r1, [r5, #0]
 80a3b06:	f3bf 8f5b 	dmb	ish
 80a3b0a:	f011 0401 	ands.w	r4, r1, #1
 80a3b0e:	d110      	bne.n	80a3b32 <_Z16_fetch_usbserialv+0x3a>
 80a3b10:	4628      	mov	r0, r5
 80a3b12:	f7fc fad1 	bl	80a00b8 <__cxa_guard_acquire>
 80a3b16:	b160      	cbz	r0, 80a3b32 <_Z16_fetch_usbserialv+0x3a>
 80a3b18:	4621      	mov	r1, r4
 80a3b1a:	aa01      	add	r2, sp, #4
 80a3b1c:	4807      	ldr	r0, [pc, #28]	; (80a3b3c <_Z16_fetch_usbserialv+0x44>)
 80a3b1e:	f7ff ffb9 	bl	80a3a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3b22:	4628      	mov	r0, r5
 80a3b24:	f7fc facd 	bl	80a00c2 <__cxa_guard_release>
 80a3b28:	4a05      	ldr	r2, [pc, #20]	; (80a3b40 <_Z16_fetch_usbserialv+0x48>)
 80a3b2a:	4906      	ldr	r1, [pc, #24]	; (80a3b44 <_Z16_fetch_usbserialv+0x4c>)
 80a3b2c:	4803      	ldr	r0, [pc, #12]	; (80a3b3c <_Z16_fetch_usbserialv+0x44>)
 80a3b2e:	f000 fa37 	bl	80a3fa0 <__aeabi_atexit>
	return _usbserial;
}
 80a3b32:	4802      	ldr	r0, [pc, #8]	; (80a3b3c <_Z16_fetch_usbserialv+0x44>)
 80a3b34:	b007      	add	sp, #28
 80a3b36:	bd30      	pop	{r4, r5, pc}
 80a3b38:	20000eb8 	.word	0x20000eb8
 80a3b3c:	20000ec0 	.word	0x20000ec0
 80a3b40:	20000080 	.word	0x20000080
 80a3b44:	080a3a21 	.word	0x080a3a21

080a3b48 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3b48:	b510      	push	{r4, lr}
 80a3b4a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3b4c:	2214      	movs	r2, #20
 80a3b4e:	2100      	movs	r1, #0
 80a3b50:	f000 fb86 	bl	80a4260 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3b54:	4b05      	ldr	r3, [pc, #20]	; (80a3b6c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3b56:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a3b58:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3b5a:	4b05      	ldr	r3, [pc, #20]	; (80a3b70 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3b5c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3b5e:	f240 1301 	movw	r3, #257	; 0x101
 80a3b62:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3b64:	2381      	movs	r3, #129	; 0x81
 80a3b66:	8223      	strh	r3, [r4, #16]
}
 80a3b68:	bd10      	pop	{r4, pc}
 80a3b6a:	bf00      	nop
 80a3b6c:	2000106a 	.word	0x2000106a
 80a3b70:	2000116b 	.word	0x2000116b

080a3b74 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3b74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3b76:	4c0f      	ldr	r4, [pc, #60]	; (80a3bb4 <_Z17_fetch_usbserial1v+0x40>)
{
 80a3b78:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3b7a:	a801      	add	r0, sp, #4
 80a3b7c:	f7ff ffe4 	bl	80a3b48 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3b80:	7823      	ldrb	r3, [r4, #0]
 80a3b82:	f3bf 8f5b 	dmb	ish
 80a3b86:	07db      	lsls	r3, r3, #31
 80a3b88:	d410      	bmi.n	80a3bac <_Z17_fetch_usbserial1v+0x38>
 80a3b8a:	4620      	mov	r0, r4
 80a3b8c:	f7fc fa94 	bl	80a00b8 <__cxa_guard_acquire>
 80a3b90:	b160      	cbz	r0, 80a3bac <_Z17_fetch_usbserial1v+0x38>
 80a3b92:	2101      	movs	r1, #1
 80a3b94:	aa01      	add	r2, sp, #4
 80a3b96:	4808      	ldr	r0, [pc, #32]	; (80a3bb8 <_Z17_fetch_usbserial1v+0x44>)
 80a3b98:	f7ff ff7c 	bl	80a3a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3b9c:	4620      	mov	r0, r4
 80a3b9e:	f7fc fa90 	bl	80a00c2 <__cxa_guard_release>
 80a3ba2:	4a06      	ldr	r2, [pc, #24]	; (80a3bbc <_Z17_fetch_usbserial1v+0x48>)
 80a3ba4:	4906      	ldr	r1, [pc, #24]	; (80a3bc0 <_Z17_fetch_usbserial1v+0x4c>)
 80a3ba6:	4804      	ldr	r0, [pc, #16]	; (80a3bb8 <_Z17_fetch_usbserial1v+0x44>)
 80a3ba8:	f000 f9fa 	bl	80a3fa0 <__aeabi_atexit>
  return _usbserial1;
}
 80a3bac:	4802      	ldr	r0, [pc, #8]	; (80a3bb8 <_Z17_fetch_usbserial1v+0x44>)
 80a3bae:	b006      	add	sp, #24
 80a3bb0:	bd10      	pop	{r4, pc}
 80a3bb2:	bf00      	nop
 80a3bb4:	20000ebc 	.word	0x20000ebc
 80a3bb8:	20000ed4 	.word	0x20000ed4
 80a3bbc:	20000080 	.word	0x20000080
 80a3bc0:	080a3a21 	.word	0x080a3a21

080a3bc4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a3bc4:	2200      	movs	r2, #0
 80a3bc6:	6840      	ldr	r0, [r0, #4]
 80a3bc8:	4611      	mov	r1, r2
 80a3bca:	f7fd bbcb 	b.w	80a1364 <network_ready>

080a3bce <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a3bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3bd0:	4615      	mov	r5, r2
 80a3bd2:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a3bd4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3bd6:	460e      	mov	r6, r1
 80a3bd8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3bda:	2100      	movs	r1, #0
 80a3bdc:	a803      	add	r0, sp, #12
 80a3bde:	f000 fb3f 	bl	80a4260 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3be2:	4628      	mov	r0, r5
 80a3be4:	f000 fbad 	bl	80a4342 <strlen>
 80a3be8:	2700      	movs	r7, #0
 80a3bea:	b281      	uxth	r1, r0
 80a3bec:	6873      	ldr	r3, [r6, #4]
 80a3bee:	4628      	mov	r0, r5
 80a3bf0:	9700      	str	r7, [sp, #0]
 80a3bf2:	aa03      	add	r2, sp, #12
 80a3bf4:	f7fd fb1a 	bl	80a122c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3bf8:	b130      	cbz	r0, 80a3c08 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3bfa:	4639      	mov	r1, r7
 80a3bfc:	4620      	mov	r0, r4
 80a3bfe:	f7fd ff7d 	bl	80a1afc <_ZN9IPAddressC1Em>
    }
 80a3c02:	4620      	mov	r0, r4
 80a3c04:	b009      	add	sp, #36	; 0x24
 80a3c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3c08:	4620      	mov	r0, r4
 80a3c0a:	a903      	add	r1, sp, #12
 80a3c0c:	f7fd ff64 	bl	80a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3c10:	e7f7      	b.n	80a3c02 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3c12 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3c12:	2200      	movs	r2, #0
 80a3c14:	6840      	ldr	r0, [r0, #4]
 80a3c16:	4611      	mov	r1, r2
 80a3c18:	f7fd bbc4 	b.w	80a13a4 <network_listening>

080a3c1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3c1c:	2200      	movs	r2, #0
 80a3c1e:	6840      	ldr	r0, [r0, #4]
 80a3c20:	4611      	mov	r1, r2
 80a3c22:	f7fd bbcf 	b.w	80a13c4 <network_get_listen_timeout>

080a3c26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3c26:	2200      	movs	r2, #0
 80a3c28:	6840      	ldr	r0, [r0, #4]
 80a3c2a:	f7fd bbc3 	b.w	80a13b4 <network_set_listen_timeout>

080a3c2e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3c2e:	2200      	movs	r2, #0
 80a3c30:	6840      	ldr	r0, [r0, #4]
 80a3c32:	f081 0101 	eor.w	r1, r1, #1
 80a3c36:	f7fd bbad 	b.w	80a1394 <network_listen>

080a3c3a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3c3a:	2300      	movs	r3, #0
 80a3c3c:	6840      	ldr	r0, [r0, #4]
 80a3c3e:	461a      	mov	r2, r3
 80a3c40:	4619      	mov	r1, r3
 80a3c42:	f7fd bb9f 	b.w	80a1384 <network_off>

080a3c46 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a3c46:	2300      	movs	r3, #0
 80a3c48:	6840      	ldr	r0, [r0, #4]
 80a3c4a:	461a      	mov	r2, r3
 80a3c4c:	4619      	mov	r1, r3
 80a3c4e:	f7fd bb91 	b.w	80a1374 <network_on>

080a3c52 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a3c52:	2200      	movs	r2, #0
 80a3c54:	6840      	ldr	r0, [r0, #4]
 80a3c56:	4611      	mov	r1, r2
 80a3c58:	f7fd bb74 	b.w	80a1344 <network_connecting>

080a3c5c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3c5c:	2200      	movs	r2, #0
 80a3c5e:	2102      	movs	r1, #2
 80a3c60:	6840      	ldr	r0, [r0, #4]
 80a3c62:	f7fd bb77 	b.w	80a1354 <network_disconnect>

080a3c66 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3c66:	2300      	movs	r3, #0
 80a3c68:	6840      	ldr	r0, [r0, #4]
 80a3c6a:	461a      	mov	r2, r3
 80a3c6c:	f7fd bb62 	b.w	80a1334 <network_connect>

080a3c70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3c70:	2204      	movs	r2, #4
 80a3c72:	4b02      	ldr	r3, [pc, #8]	; (80a3c7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3c74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3c76:	4a02      	ldr	r2, [pc, #8]	; (80a3c80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3c78:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3c7a:	4770      	bx	lr
 80a3c7c:	200011ec 	.word	0x200011ec
 80a3c80:	080a4a64 	.word	0x080a4a64

080a3c84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a3c84:	4b01      	ldr	r3, [pc, #4]	; (80a3c8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a3c86:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a3c88:	4770      	bx	lr
 80a3c8a:	bf00      	nop
 80a3c8c:	2000001c 	.word	0x2000001c

080a3c90 <serialEventRun>:
{
 80a3c90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3c92:	4b13      	ldr	r3, [pc, #76]	; (80a3ce0 <serialEventRun+0x50>)
 80a3c94:	b143      	cbz	r3, 80a3ca8 <serialEventRun+0x18>
 80a3c96:	f7ff ff2f 	bl	80a3af8 <_Z16_fetch_usbserialv>
 80a3c9a:	6803      	ldr	r3, [r0, #0]
 80a3c9c:	691b      	ldr	r3, [r3, #16]
 80a3c9e:	4798      	blx	r3
 80a3ca0:	2800      	cmp	r0, #0
 80a3ca2:	dd01      	ble.n	80a3ca8 <serialEventRun+0x18>
        serialEvent();
 80a3ca4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3ca8:	4b0e      	ldr	r3, [pc, #56]	; (80a3ce4 <serialEventRun+0x54>)
 80a3caa:	b143      	cbz	r3, 80a3cbe <serialEventRun+0x2e>
 80a3cac:	f7ff fe8e 	bl	80a39cc <_Z22__fetch_global_Serial1v>
 80a3cb0:	6803      	ldr	r3, [r0, #0]
 80a3cb2:	691b      	ldr	r3, [r3, #16]
 80a3cb4:	4798      	blx	r3
 80a3cb6:	2800      	cmp	r0, #0
 80a3cb8:	dd01      	ble.n	80a3cbe <serialEventRun+0x2e>
        serialEvent1();
 80a3cba:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a3cbe:	4b0a      	ldr	r3, [pc, #40]	; (80a3ce8 <serialEventRun+0x58>)
 80a3cc0:	b10b      	cbz	r3, 80a3cc6 <serialEventRun+0x36>
 80a3cc2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3cc6:	4b09      	ldr	r3, [pc, #36]	; (80a3cec <serialEventRun+0x5c>)
 80a3cc8:	b143      	cbz	r3, 80a3cdc <serialEventRun+0x4c>
 80a3cca:	f7ff ff53 	bl	80a3b74 <_Z17_fetch_usbserial1v>
 80a3cce:	6803      	ldr	r3, [r0, #0]
 80a3cd0:	691b      	ldr	r3, [r3, #16]
 80a3cd2:	4798      	blx	r3
 80a3cd4:	2800      	cmp	r0, #0
 80a3cd6:	dd01      	ble.n	80a3cdc <serialEventRun+0x4c>
        usbSerialEvent1();
 80a3cd8:	f3af 8000 	nop.w
}
 80a3cdc:	bd08      	pop	{r3, pc}
 80a3cde:	bf00      	nop
	...

080a3cf0 <_post_loop>:
{
 80a3cf0:	b508      	push	{r3, lr}
	serialEventRun();
 80a3cf2:	f7ff ffcd 	bl	80a3c90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3cf6:	f7fd f947 	bl	80a0f88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3cfa:	4b01      	ldr	r3, [pc, #4]	; (80a3d00 <_post_loop+0x10>)
 80a3cfc:	6018      	str	r0, [r3, #0]
}
 80a3cfe:	bd08      	pop	{r3, pc}
 80a3d00:	2000120c 	.word	0x2000120c

080a3d04 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3d04:	4802      	ldr	r0, [pc, #8]	; (80a3d10 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3d06:	4a03      	ldr	r2, [pc, #12]	; (80a3d14 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3d08:	4903      	ldr	r1, [pc, #12]	; (80a3d18 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3d0a:	1a12      	subs	r2, r2, r0
 80a3d0c:	f000 ba80 	b.w	80a4210 <memcpy>
 80a3d10:	40024000 	.word	0x40024000
 80a3d14:	40024004 	.word	0x40024004
 80a3d18:	080a4cb0 	.word	0x080a4cb0

080a3d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3d1c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3d1e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3d20:	461a      	mov	r2, r3
 80a3d22:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3d26:	9300      	str	r3, [sp, #0]
 80a3d28:	f7fd fada 	bl	80a12e0 <system_ctrl_set_result>
}
 80a3d2c:	b003      	add	sp, #12
 80a3d2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3d34 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3d34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3d36:	8843      	ldrh	r3, [r0, #2]
 80a3d38:	2b0a      	cmp	r3, #10
 80a3d3a:	d008      	beq.n	80a3d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3d3c:	2b50      	cmp	r3, #80	; 0x50
 80a3d3e:	d10b      	bne.n	80a3d58 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a3d40:	4b09      	ldr	r3, [pc, #36]	; (80a3d68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3d42:	681b      	ldr	r3, [r3, #0]
 80a3d44:	b14b      	cbz	r3, 80a3d5a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3d46:	b003      	add	sp, #12
 80a3d48:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3d4c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a3d4e:	f7ff ffe5 	bl	80a3d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3d52:	b003      	add	sp, #12
 80a3d54:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3d58:	2300      	movs	r3, #0
 80a3d5a:	461a      	mov	r2, r3
 80a3d5c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3d60:	9300      	str	r3, [sp, #0]
 80a3d62:	f7fd fabd 	bl	80a12e0 <system_ctrl_set_result>
}
 80a3d66:	e7f4      	b.n	80a3d52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3d68:	200011f8 	.word	0x200011f8

080a3d6c <module_user_init_hook>:
{
 80a3d6c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3d6e:	4c12      	ldr	r4, [pc, #72]	; (80a3db8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3d70:	2100      	movs	r1, #0
 80a3d72:	4812      	ldr	r0, [pc, #72]	; (80a3dbc <module_user_init_hook+0x50>)
 80a3d74:	f7fd fb6e 	bl	80a1454 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3d78:	4d11      	ldr	r5, [pc, #68]	; (80a3dc0 <module_user_init_hook+0x54>)
 80a3d7a:	6823      	ldr	r3, [r4, #0]
 80a3d7c:	42ab      	cmp	r3, r5
 80a3d7e:	bf0c      	ite	eq
 80a3d80:	2201      	moveq	r2, #1
 80a3d82:	2200      	movne	r2, #0
 80a3d84:	4b0f      	ldr	r3, [pc, #60]	; (80a3dc4 <module_user_init_hook+0x58>)
 80a3d86:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3d88:	d002      	beq.n	80a3d90 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a3d8a:	f7ff ffbb 	bl	80a3d04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3d8e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3d90:	f7fd f8ea 	bl	80a0f68 <HAL_RNG_GetRandomNumber>
 80a3d94:	4604      	mov	r4, r0
    srand(seed);
 80a3d96:	f000 fa6b 	bl	80a4270 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3d9a:	4b0b      	ldr	r3, [pc, #44]	; (80a3dc8 <module_user_init_hook+0x5c>)
 80a3d9c:	b113      	cbz	r3, 80a3da4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a3d9e:	4620      	mov	r0, r4
 80a3da0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3da4:	2100      	movs	r1, #0
 80a3da6:	4808      	ldr	r0, [pc, #32]	; (80a3dc8 <module_user_init_hook+0x5c>)
 80a3da8:	f7fd fabc 	bl	80a1324 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3db0:	2100      	movs	r1, #0
 80a3db2:	4806      	ldr	r0, [pc, #24]	; (80a3dcc <module_user_init_hook+0x60>)
 80a3db4:	f7fd ba8a 	b.w	80a12cc <system_ctrl_set_app_request_handler>
 80a3db8:	40024000 	.word	0x40024000
 80a3dbc:	080a3c85 	.word	0x080a3c85
 80a3dc0:	9a271c1e 	.word	0x9a271c1e
 80a3dc4:	200011f4 	.word	0x200011f4
 80a3dc8:	00000000 	.word	0x00000000
 80a3dcc:	080a3d35 	.word	0x080a3d35

080a3dd0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a3dd0:	b510      	push	{r4, lr}
 80a3dd2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3dd4:	6880      	ldr	r0, [r0, #8]
 80a3dd6:	b108      	cbz	r0, 80a3ddc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3dd8:	f7fd f8ae 	bl	80a0f38 <os_mutex_recursive_destroy>
 80a3ddc:	4620      	mov	r0, r4
 80a3dde:	bd10      	pop	{r4, pc}

080a3de0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3de0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3de2:	b570      	push	{r4, r5, r6, lr}
 80a3de4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3de6:	d901      	bls.n	80a3dec <pinAvailable+0xc>
    return false;
 80a3de8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3dea:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3dec:	f1a0 030d 	sub.w	r3, r0, #13
 80a3df0:	2b02      	cmp	r3, #2
 80a3df2:	d90b      	bls.n	80a3e0c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3df4:	2801      	cmp	r0, #1
 80a3df6:	d826      	bhi.n	80a3e46 <pinAvailable+0x66>
 80a3df8:	f000 f892 	bl	80a3f20 <_Z19__fetch_global_Wirev>
 80a3dfc:	2100      	movs	r1, #0
 80a3dfe:	7c00      	ldrb	r0, [r0, #16]
 80a3e00:	f7fd f91a 	bl	80a1038 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3e04:	f080 0001 	eor.w	r0, r0, #1
 80a3e08:	b2c0      	uxtb	r0, r0
 80a3e0a:	e7ee      	b.n	80a3dea <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3e0c:	4e13      	ldr	r6, [pc, #76]	; (80a3e5c <pinAvailable+0x7c>)
 80a3e0e:	7831      	ldrb	r1, [r6, #0]
 80a3e10:	f3bf 8f5b 	dmb	ish
 80a3e14:	f011 0501 	ands.w	r5, r1, #1
 80a3e18:	d10f      	bne.n	80a3e3a <pinAvailable+0x5a>
 80a3e1a:	4630      	mov	r0, r6
 80a3e1c:	f7fc f94c 	bl	80a00b8 <__cxa_guard_acquire>
 80a3e20:	b158      	cbz	r0, 80a3e3a <pinAvailable+0x5a>
 80a3e22:	4629      	mov	r1, r5
 80a3e24:	480e      	ldr	r0, [pc, #56]	; (80a3e60 <pinAvailable+0x80>)
 80a3e26:	f7ff f969 	bl	80a30fc <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3e2a:	4630      	mov	r0, r6
 80a3e2c:	f7fc f949 	bl	80a00c2 <__cxa_guard_release>
 80a3e30:	4a0c      	ldr	r2, [pc, #48]	; (80a3e64 <pinAvailable+0x84>)
 80a3e32:	490d      	ldr	r1, [pc, #52]	; (80a3e68 <pinAvailable+0x88>)
 80a3e34:	480a      	ldr	r0, [pc, #40]	; (80a3e60 <pinAvailable+0x80>)
 80a3e36:	f000 f8b3 	bl	80a3fa0 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3e3a:	4b09      	ldr	r3, [pc, #36]	; (80a3e60 <pinAvailable+0x80>)
 80a3e3c:	7818      	ldrb	r0, [r3, #0]
 80a3e3e:	f7fd f955 	bl	80a10ec <hal_spi_is_enabled>
 80a3e42:	2800      	cmp	r0, #0
 80a3e44:	d1d0      	bne.n	80a3de8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3e46:	3c12      	subs	r4, #18
 80a3e48:	2c01      	cmp	r4, #1
 80a3e4a:	d805      	bhi.n	80a3e58 <pinAvailable+0x78>
 80a3e4c:	f7ff fdbe 	bl	80a39cc <_Z22__fetch_global_Serial1v>
 80a3e50:	7c00      	ldrb	r0, [r0, #16]
 80a3e52:	f7fd f98b 	bl	80a116c <hal_usart_is_enabled>
 80a3e56:	e7d5      	b.n	80a3e04 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3e58:	2001      	movs	r0, #1
 80a3e5a:	e7c6      	b.n	80a3dea <pinAvailable+0xa>
 80a3e5c:	200011fc 	.word	0x200011fc
 80a3e60:	20001200 	.word	0x20001200
 80a3e64:	20000080 	.word	0x20000080
 80a3e68:	080a3dd1 	.word	0x080a3dd1

080a3e6c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3e6c:	2817      	cmp	r0, #23
{
 80a3e6e:	b538      	push	{r3, r4, r5, lr}
 80a3e70:	4604      	mov	r4, r0
 80a3e72:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3e74:	d80a      	bhi.n	80a3e8c <pinMode+0x20>
 80a3e76:	29ff      	cmp	r1, #255	; 0xff
 80a3e78:	d008      	beq.n	80a3e8c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3e7a:	f7ff ffb1 	bl	80a3de0 <pinAvailable>
 80a3e7e:	b128      	cbz	r0, 80a3e8c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3e80:	4629      	mov	r1, r5
 80a3e82:	4620      	mov	r0, r4
}
 80a3e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3e88:	f7fd b88e 	b.w	80a0fa8 <HAL_Pin_Mode>
}
 80a3e8c:	bd38      	pop	{r3, r4, r5, pc}

080a3e8e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3e8e:	b538      	push	{r3, r4, r5, lr}
 80a3e90:	4604      	mov	r4, r0
 80a3e92:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3e94:	f7fd f890 	bl	80a0fb8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3e98:	28ff      	cmp	r0, #255	; 0xff
 80a3e9a:	d010      	beq.n	80a3ebe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3e9c:	2806      	cmp	r0, #6
 80a3e9e:	d804      	bhi.n	80a3eaa <digitalWrite+0x1c>
 80a3ea0:	234d      	movs	r3, #77	; 0x4d
 80a3ea2:	fa23 f000 	lsr.w	r0, r3, r0
 80a3ea6:	07c3      	lsls	r3, r0, #31
 80a3ea8:	d409      	bmi.n	80a3ebe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3eaa:	4620      	mov	r0, r4
 80a3eac:	f7ff ff98 	bl	80a3de0 <pinAvailable>
 80a3eb0:	b128      	cbz	r0, 80a3ebe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3eb2:	4629      	mov	r1, r5
 80a3eb4:	4620      	mov	r0, r4
}
 80a3eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3eba:	f7fd b885 	b.w	80a0fc8 <HAL_GPIO_Write>
}
 80a3ebe:	bd38      	pop	{r3, r4, r5, pc}

080a3ec0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3ec0:	b510      	push	{r4, lr}
 80a3ec2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3ec4:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3ec6:	bf9c      	itt	ls
 80a3ec8:	340a      	addls	r4, #10
 80a3eca:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3ecc:	4620      	mov	r0, r4
 80a3ece:	f7ff ff87 	bl	80a3de0 <pinAvailable>
 80a3ed2:	b150      	cbz	r0, 80a3eea <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3ed4:	2103      	movs	r1, #3
 80a3ed6:	4620      	mov	r0, r4
 80a3ed8:	f7fd f85e 	bl	80a0f98 <HAL_Validate_Pin_Function>
 80a3edc:	2803      	cmp	r0, #3
 80a3ede:	d104      	bne.n	80a3eea <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a3ee0:	4620      	mov	r0, r4
}
 80a3ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3ee6:	f7fd b877 	b.w	80a0fd8 <hal_adc_read>
}
 80a3eea:	2000      	movs	r0, #0
 80a3eec:	bd10      	pop	{r4, pc}
	...

080a3ef0 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3ef0:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3ef2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3ef4:	2520      	movs	r5, #32
 80a3ef6:	8043      	strh	r3, [r0, #2]
 80a3ef8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3efa:	4e08      	ldr	r6, [pc, #32]	; (80a3f1c <_Z17acquireWireBufferv+0x2c>)
{
 80a3efc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3efe:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3f00:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3f02:	6085      	str	r5, [r0, #8]
 80a3f04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3f06:	4628      	mov	r0, r5
 80a3f08:	f000 f853 	bl	80a3fb2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3f0c:	4631      	mov	r1, r6
	};
 80a3f0e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3f10:	4628      	mov	r0, r5
 80a3f12:	f000 f84e 	bl	80a3fb2 <_ZnajRKSt9nothrow_t>
	};
 80a3f16:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3f18:	4620      	mov	r0, r4
 80a3f1a:	bd70      	pop	{r4, r5, r6, pc}
 80a3f1c:	080a4a98 	.word	0x080a4a98

080a3f20 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3f20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3f22:	4d0f      	ldr	r5, [pc, #60]	; (80a3f60 <_Z19__fetch_global_Wirev+0x40>)
{
 80a3f24:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3f26:	7829      	ldrb	r1, [r5, #0]
 80a3f28:	f3bf 8f5b 	dmb	ish
 80a3f2c:	f011 0401 	ands.w	r4, r1, #1
 80a3f30:	d113      	bne.n	80a3f5a <_Z19__fetch_global_Wirev+0x3a>
 80a3f32:	4628      	mov	r0, r5
 80a3f34:	f7fc f8c0 	bl	80a00b8 <__cxa_guard_acquire>
 80a3f38:	b178      	cbz	r0, 80a3f5a <_Z19__fetch_global_Wirev+0x3a>
 80a3f3a:	a801      	add	r0, sp, #4
 80a3f3c:	f7ff ffd8 	bl	80a3ef0 <_Z17acquireWireBufferv>
 80a3f40:	4621      	mov	r1, r4
 80a3f42:	aa01      	add	r2, sp, #4
 80a3f44:	4807      	ldr	r0, [pc, #28]	; (80a3f64 <_Z19__fetch_global_Wirev+0x44>)
 80a3f46:	f7fd fd8d 	bl	80a1a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3f4a:	4628      	mov	r0, r5
 80a3f4c:	f7fc f8b9 	bl	80a00c2 <__cxa_guard_release>
 80a3f50:	4a05      	ldr	r2, [pc, #20]	; (80a3f68 <_Z19__fetch_global_Wirev+0x48>)
 80a3f52:	4906      	ldr	r1, [pc, #24]	; (80a3f6c <_Z19__fetch_global_Wirev+0x4c>)
 80a3f54:	4803      	ldr	r0, [pc, #12]	; (80a3f64 <_Z19__fetch_global_Wirev+0x44>)
 80a3f56:	f000 f823 	bl	80a3fa0 <__aeabi_atexit>
	return wire;
}
 80a3f5a:	4802      	ldr	r0, [pc, #8]	; (80a3f64 <_Z19__fetch_global_Wirev+0x44>)
 80a3f5c:	b007      	add	sp, #28
 80a3f5e:	bd30      	pop	{r4, r5, pc}
 80a3f60:	20001210 	.word	0x20001210
 80a3f64:	20001214 	.word	0x20001214
 80a3f68:	20000080 	.word	0x20000080
 80a3f6c:	080a1a0d 	.word	0x080a1a0d

080a3f70 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3f70:	2300      	movs	r3, #0
 80a3f72:	b513      	push	{r0, r1, r4, lr}
 80a3f74:	4c07      	ldr	r4, [pc, #28]	; (80a3f94 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3f76:	461a      	mov	r2, r3
 80a3f78:	4619      	mov	r1, r3
 80a3f7a:	4620      	mov	r0, r4
 80a3f7c:	9300      	str	r3, [sp, #0]
 80a3f7e:	f7fd fdd3 	bl	80a1b28 <_ZN9IPAddressC1Ehhhh>
 80a3f82:	4620      	mov	r0, r4
 80a3f84:	4a04      	ldr	r2, [pc, #16]	; (80a3f98 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3f86:	4905      	ldr	r1, [pc, #20]	; (80a3f9c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3f88:	b002      	add	sp, #8
 80a3f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3f8e:	f000 b807 	b.w	80a3fa0 <__aeabi_atexit>
 80a3f92:	bf00      	nop
 80a3f94:	20001228 	.word	0x20001228
 80a3f98:	20000080 	.word	0x20000080
 80a3f9c:	080a00c9 	.word	0x080a00c9

080a3fa0 <__aeabi_atexit>:
 80a3fa0:	460b      	mov	r3, r1
 80a3fa2:	4601      	mov	r1, r0
 80a3fa4:	4618      	mov	r0, r3
 80a3fa6:	f000 b925 	b.w	80a41f4 <__cxa_atexit>

080a3faa <_ZdlPvj>:
 80a3faa:	f7fc b878 	b.w	80a009e <_ZdlPv>

080a3fae <_ZnwjRKSt9nothrow_t>:
 80a3fae:	f7fc b872 	b.w	80a0096 <_Znwj>

080a3fb2 <_ZnajRKSt9nothrow_t>:
 80a3fb2:	f7fc b872 	b.w	80a009a <_Znaj>

080a3fb6 <_ZSt25__throw_bad_function_callv>:
 80a3fb6:	b508      	push	{r3, lr}
 80a3fb8:	f7fd fa3c 	bl	80a1434 <abort>

080a3fbc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a3fbc:	4901      	ldr	r1, [pc, #4]	; (80a3fc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a3fbe:	f000 b8fb 	b.w	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a3fc2:	bf00      	nop
 80a3fc4:	080a4ab4 	.word	0x080a4ab4

080a3fc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3fca:	2400      	movs	r4, #0
 80a3fcc:	2310      	movs	r3, #16
 80a3fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3fd2:	6803      	ldr	r3, [r0, #0]
 80a3fd4:	4615      	mov	r5, r2
 80a3fd6:	699e      	ldr	r6, [r3, #24]
 80a3fd8:	6812      	ldr	r2, [r2, #0]
 80a3fda:	466b      	mov	r3, sp
 80a3fdc:	9400      	str	r4, [sp, #0]
 80a3fde:	f88d 4004 	strb.w	r4, [sp, #4]
 80a3fe2:	47b0      	blx	r6
 80a3fe4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3fe8:	f003 0306 	and.w	r3, r3, #6
 80a3fec:	2b06      	cmp	r3, #6
 80a3fee:	bf09      	itett	eq
 80a3ff0:	2001      	moveq	r0, #1
 80a3ff2:	4620      	movne	r0, r4
 80a3ff4:	9b00      	ldreq	r3, [sp, #0]
 80a3ff6:	602b      	streq	r3, [r5, #0]
 80a3ff8:	b004      	add	sp, #16
 80a3ffa:	bd70      	pop	{r4, r5, r6, pc}

080a3ffc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a3ffc:	9800      	ldr	r0, [sp, #0]
 80a3ffe:	4290      	cmp	r0, r2
 80a4000:	bf14      	ite	ne
 80a4002:	2001      	movne	r0, #1
 80a4004:	2006      	moveq	r0, #6
 80a4006:	4770      	bx	lr

080a4008 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a4008:	b510      	push	{r4, lr}
 80a400a:	4604      	mov	r4, r0
 80a400c:	4b02      	ldr	r3, [pc, #8]	; (80a4018 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a400e:	6003      	str	r3, [r0, #0]
 80a4010:	f000 f8cf 	bl	80a41b2 <_ZNSt9type_infoD1Ev>
 80a4014:	4620      	mov	r0, r4
 80a4016:	bd10      	pop	{r4, pc}
 80a4018:	080a4af4 	.word	0x080a4af4

080a401c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a401c:	b510      	push	{r4, lr}
 80a401e:	4604      	mov	r4, r0
 80a4020:	f7ff fff2 	bl	80a4008 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a4024:	4620      	mov	r0, r4
 80a4026:	2108      	movs	r1, #8
 80a4028:	f7ff ffbf 	bl	80a3faa <_ZdlPvj>
 80a402c:	4620      	mov	r0, r4
 80a402e:	bd10      	pop	{r4, pc}

080a4030 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a4030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4034:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a4038:	461f      	mov	r7, r3
 80a403a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a403e:	4598      	cmp	r8, r3
 80a4040:	4606      	mov	r6, r0
 80a4042:	4615      	mov	r5, r2
 80a4044:	d107      	bne.n	80a4056 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a4046:	9907      	ldr	r1, [sp, #28]
 80a4048:	f000 f8b6 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a404c:	b118      	cbz	r0, 80a4056 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a404e:	7165      	strb	r5, [r4, #5]
 80a4050:	2000      	movs	r0, #0
 80a4052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4056:	4639      	mov	r1, r7
 80a4058:	4630      	mov	r0, r6
 80a405a:	f000 f8ad 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a405e:	2800      	cmp	r0, #0
 80a4060:	d0f6      	beq.n	80a4050 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a4062:	2301      	movs	r3, #1
 80a4064:	f8c4 8000 	str.w	r8, [r4]
 80a4068:	7125      	strb	r5, [r4, #4]
 80a406a:	71a3      	strb	r3, [r4, #6]
 80a406c:	e7f0      	b.n	80a4050 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a406e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a406e:	b538      	push	{r3, r4, r5, lr}
 80a4070:	4615      	mov	r5, r2
 80a4072:	461c      	mov	r4, r3
 80a4074:	f000 f8a0 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a4078:	b120      	cbz	r0, 80a4084 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a407a:	2308      	movs	r3, #8
 80a407c:	60e3      	str	r3, [r4, #12]
 80a407e:	2306      	movs	r3, #6
 80a4080:	6025      	str	r5, [r4, #0]
 80a4082:	7123      	strb	r3, [r4, #4]
 80a4084:	bd38      	pop	{r3, r4, r5, pc}

080a4086 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a4086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a408a:	4605      	mov	r5, r0
 80a408c:	460c      	mov	r4, r1
 80a408e:	4616      	mov	r6, r2
 80a4090:	461f      	mov	r7, r3
 80a4092:	f000 f891 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a4096:	b948      	cbnz	r0, 80a40ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a4098:	2f03      	cmp	r7, #3
 80a409a:	d807      	bhi.n	80a40ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a409c:	6823      	ldr	r3, [r4, #0]
 80a409e:	4632      	mov	r2, r6
 80a40a0:	4629      	mov	r1, r5
 80a40a2:	4620      	mov	r0, r4
 80a40a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a40a8:	695b      	ldr	r3, [r3, #20]
 80a40aa:	4718      	bx	r3
 80a40ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a40b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a40b0:	b510      	push	{r4, lr}
 80a40b2:	4604      	mov	r4, r0
 80a40b4:	4b02      	ldr	r3, [pc, #8]	; (80a40c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a40b6:	6003      	str	r3, [r0, #0]
 80a40b8:	f7ff ffa6 	bl	80a4008 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a40bc:	4620      	mov	r0, r4
 80a40be:	bd10      	pop	{r4, pc}
 80a40c0:	080a4b54 	.word	0x080a4b54

080a40c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a40c4:	b510      	push	{r4, lr}
 80a40c6:	4604      	mov	r4, r0
 80a40c8:	f7ff fff2 	bl	80a40b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a40cc:	4620      	mov	r0, r4
 80a40ce:	210c      	movs	r1, #12
 80a40d0:	f7ff ff6b 	bl	80a3faa <_ZdlPvj>
 80a40d4:	4620      	mov	r0, r4
 80a40d6:	bd10      	pop	{r4, pc}

080a40d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a40dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a40e0:	4606      	mov	r6, r0
 80a40e2:	4590      	cmp	r8, r2
 80a40e4:	460f      	mov	r7, r1
 80a40e6:	4615      	mov	r5, r2
 80a40e8:	461c      	mov	r4, r3
 80a40ea:	d00b      	beq.n	80a4104 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a40ec:	68b0      	ldr	r0, [r6, #8]
 80a40ee:	462a      	mov	r2, r5
 80a40f0:	6803      	ldr	r3, [r0, #0]
 80a40f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80a40f6:	6a1e      	ldr	r6, [r3, #32]
 80a40f8:	4639      	mov	r1, r7
 80a40fa:	4623      	mov	r3, r4
 80a40fc:	46b4      	mov	ip, r6
 80a40fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a4102:	4760      	bx	ip
 80a4104:	4619      	mov	r1, r3
 80a4106:	f000 f857 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a410a:	2800      	cmp	r0, #0
 80a410c:	d0ee      	beq.n	80a40ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a410e:	2006      	movs	r0, #6
 80a4110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a4114:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4118:	460d      	mov	r5, r1
 80a411a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a411e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a4122:	4619      	mov	r1, r3
 80a4124:	4681      	mov	r9, r0
 80a4126:	4617      	mov	r7, r2
 80a4128:	4698      	mov	r8, r3
 80a412a:	f000 f845 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a412e:	b190      	cbz	r0, 80a4156 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a4130:	2d00      	cmp	r5, #0
 80a4132:	6034      	str	r4, [r6, #0]
 80a4134:	7137      	strb	r7, [r6, #4]
 80a4136:	db09      	blt.n	80a414c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a4138:	442c      	add	r4, r5
 80a413a:	45a2      	cmp	sl, r4
 80a413c:	bf0c      	ite	eq
 80a413e:	2406      	moveq	r4, #6
 80a4140:	2401      	movne	r4, #1
 80a4142:	71b4      	strb	r4, [r6, #6]
 80a4144:	2000      	movs	r0, #0
 80a4146:	b001      	add	sp, #4
 80a4148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a414c:	3502      	adds	r5, #2
 80a414e:	d1f9      	bne.n	80a4144 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a4150:	2301      	movs	r3, #1
 80a4152:	71b3      	strb	r3, [r6, #6]
 80a4154:	e7f6      	b.n	80a4144 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a4156:	4554      	cmp	r4, sl
 80a4158:	d106      	bne.n	80a4168 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a415a:	4659      	mov	r1, fp
 80a415c:	4648      	mov	r0, r9
 80a415e:	f000 f82b 	bl	80a41b8 <_ZNKSt9type_infoeqERKS_>
 80a4162:	b108      	cbz	r0, 80a4168 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a4164:	7177      	strb	r7, [r6, #5]
 80a4166:	e7ed      	b.n	80a4144 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a4168:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a416c:	463a      	mov	r2, r7
 80a416e:	6803      	ldr	r3, [r0, #0]
 80a4170:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a4174:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a4178:	69dc      	ldr	r4, [r3, #28]
 80a417a:	4629      	mov	r1, r5
 80a417c:	4643      	mov	r3, r8
 80a417e:	46a4      	mov	ip, r4
 80a4180:	b001      	add	sp, #4
 80a4182:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4186:	4760      	bx	ip

080a4188 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a4188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a418c:	4607      	mov	r7, r0
 80a418e:	460c      	mov	r4, r1
 80a4190:	4615      	mov	r5, r2
 80a4192:	461e      	mov	r6, r3
 80a4194:	f7ff ff6b 	bl	80a406e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a4198:	b948      	cbnz	r0, 80a41ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a419a:	68b8      	ldr	r0, [r7, #8]
 80a419c:	462a      	mov	r2, r5
 80a419e:	6803      	ldr	r3, [r0, #0]
 80a41a0:	4621      	mov	r1, r4
 80a41a2:	699f      	ldr	r7, [r3, #24]
 80a41a4:	4633      	mov	r3, r6
 80a41a6:	46bc      	mov	ip, r7
 80a41a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a41ac:	4760      	bx	ip
 80a41ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a41b2 <_ZNSt9type_infoD1Ev>:
 80a41b2:	4770      	bx	lr

080a41b4 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a41b4:	2000      	movs	r0, #0
 80a41b6:	4770      	bx	lr

080a41b8 <_ZNKSt9type_infoeqERKS_>:
 80a41b8:	4281      	cmp	r1, r0
 80a41ba:	b508      	push	{r3, lr}
 80a41bc:	d00e      	beq.n	80a41dc <_ZNKSt9type_infoeqERKS_+0x24>
 80a41be:	6840      	ldr	r0, [r0, #4]
 80a41c0:	7803      	ldrb	r3, [r0, #0]
 80a41c2:	2b2a      	cmp	r3, #42	; 0x2a
 80a41c4:	d00c      	beq.n	80a41e0 <_ZNKSt9type_infoeqERKS_+0x28>
 80a41c6:	6849      	ldr	r1, [r1, #4]
 80a41c8:	780b      	ldrb	r3, [r1, #0]
 80a41ca:	2b2a      	cmp	r3, #42	; 0x2a
 80a41cc:	bf08      	it	eq
 80a41ce:	3101      	addeq	r1, #1
 80a41d0:	f000 f889 	bl	80a42e6 <strcmp>
 80a41d4:	fab0 f080 	clz	r0, r0
 80a41d8:	0940      	lsrs	r0, r0, #5
 80a41da:	bd08      	pop	{r3, pc}
 80a41dc:	2001      	movs	r0, #1
 80a41de:	e7fc      	b.n	80a41da <_ZNKSt9type_infoeqERKS_+0x22>
 80a41e0:	2000      	movs	r0, #0
 80a41e2:	e7fa      	b.n	80a41da <_ZNKSt9type_infoeqERKS_+0x22>

080a41e4 <atoi>:
 80a41e4:	220a      	movs	r2, #10
 80a41e6:	2100      	movs	r1, #0
 80a41e8:	f000 b96a 	b.w	80a44c0 <strtol>

080a41ec <atol>:
 80a41ec:	220a      	movs	r2, #10
 80a41ee:	2100      	movs	r1, #0
 80a41f0:	f000 b966 	b.w	80a44c0 <strtol>

080a41f4 <__cxa_atexit>:
 80a41f4:	b510      	push	{r4, lr}
 80a41f6:	4604      	mov	r4, r0
 80a41f8:	4804      	ldr	r0, [pc, #16]	; (80a420c <__cxa_atexit+0x18>)
 80a41fa:	4613      	mov	r3, r2
 80a41fc:	b120      	cbz	r0, 80a4208 <__cxa_atexit+0x14>
 80a41fe:	460a      	mov	r2, r1
 80a4200:	2002      	movs	r0, #2
 80a4202:	4621      	mov	r1, r4
 80a4204:	f3af 8000 	nop.w
 80a4208:	bd10      	pop	{r4, pc}
 80a420a:	bf00      	nop
 80a420c:	00000000 	.word	0x00000000

080a4210 <memcpy>:
 80a4210:	440a      	add	r2, r1
 80a4212:	4291      	cmp	r1, r2
 80a4214:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a4218:	d100      	bne.n	80a421c <memcpy+0xc>
 80a421a:	4770      	bx	lr
 80a421c:	b510      	push	{r4, lr}
 80a421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4222:	4291      	cmp	r1, r2
 80a4224:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4228:	d1f9      	bne.n	80a421e <memcpy+0xe>
 80a422a:	bd10      	pop	{r4, pc}

080a422c <memmove>:
 80a422c:	4288      	cmp	r0, r1
 80a422e:	b510      	push	{r4, lr}
 80a4230:	eb01 0402 	add.w	r4, r1, r2
 80a4234:	d902      	bls.n	80a423c <memmove+0x10>
 80a4236:	4284      	cmp	r4, r0
 80a4238:	4623      	mov	r3, r4
 80a423a:	d807      	bhi.n	80a424c <memmove+0x20>
 80a423c:	1e43      	subs	r3, r0, #1
 80a423e:	42a1      	cmp	r1, r4
 80a4240:	d008      	beq.n	80a4254 <memmove+0x28>
 80a4242:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4246:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a424a:	e7f8      	b.n	80a423e <memmove+0x12>
 80a424c:	4601      	mov	r1, r0
 80a424e:	4402      	add	r2, r0
 80a4250:	428a      	cmp	r2, r1
 80a4252:	d100      	bne.n	80a4256 <memmove+0x2a>
 80a4254:	bd10      	pop	{r4, pc}
 80a4256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a425a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a425e:	e7f7      	b.n	80a4250 <memmove+0x24>

080a4260 <memset>:
 80a4260:	4603      	mov	r3, r0
 80a4262:	4402      	add	r2, r0
 80a4264:	4293      	cmp	r3, r2
 80a4266:	d100      	bne.n	80a426a <memset+0xa>
 80a4268:	4770      	bx	lr
 80a426a:	f803 1b01 	strb.w	r1, [r3], #1
 80a426e:	e7f9      	b.n	80a4264 <memset+0x4>

080a4270 <srand>:
 80a4270:	b538      	push	{r3, r4, r5, lr}
 80a4272:	4b0d      	ldr	r3, [pc, #52]	; (80a42a8 <srand+0x38>)
 80a4274:	4604      	mov	r4, r0
 80a4276:	681d      	ldr	r5, [r3, #0]
 80a4278:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a427a:	b97b      	cbnz	r3, 80a429c <srand+0x2c>
 80a427c:	2018      	movs	r0, #24
 80a427e:	f7fd f8b9 	bl	80a13f4 <malloc>
 80a4282:	4a0a      	ldr	r2, [pc, #40]	; (80a42ac <srand+0x3c>)
 80a4284:	4b0a      	ldr	r3, [pc, #40]	; (80a42b0 <srand+0x40>)
 80a4286:	63a8      	str	r0, [r5, #56]	; 0x38
 80a4288:	e9c0 2300 	strd	r2, r3, [r0]
 80a428c:	4b09      	ldr	r3, [pc, #36]	; (80a42b4 <srand+0x44>)
 80a428e:	2201      	movs	r2, #1
 80a4290:	6083      	str	r3, [r0, #8]
 80a4292:	230b      	movs	r3, #11
 80a4294:	8183      	strh	r3, [r0, #12]
 80a4296:	2300      	movs	r3, #0
 80a4298:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a429c:	2200      	movs	r2, #0
 80a429e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a42a0:	611c      	str	r4, [r3, #16]
 80a42a2:	615a      	str	r2, [r3, #20]
 80a42a4:	bd38      	pop	{r3, r4, r5, pc}
 80a42a6:	bf00      	nop
 80a42a8:	2000001c 	.word	0x2000001c
 80a42ac:	abcd330e 	.word	0xabcd330e
 80a42b0:	e66d1234 	.word	0xe66d1234
 80a42b4:	0005deec 	.word	0x0005deec

080a42b8 <strchr>:
 80a42b8:	4603      	mov	r3, r0
 80a42ba:	b2c9      	uxtb	r1, r1
 80a42bc:	4618      	mov	r0, r3
 80a42be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a42c2:	b112      	cbz	r2, 80a42ca <strchr+0x12>
 80a42c4:	428a      	cmp	r2, r1
 80a42c6:	d1f9      	bne.n	80a42bc <strchr+0x4>
 80a42c8:	4770      	bx	lr
 80a42ca:	2900      	cmp	r1, #0
 80a42cc:	bf18      	it	ne
 80a42ce:	2000      	movne	r0, #0
 80a42d0:	4770      	bx	lr

080a42d2 <strchrnul>:
 80a42d2:	b510      	push	{r4, lr}
 80a42d4:	4604      	mov	r4, r0
 80a42d6:	f7ff ffef 	bl	80a42b8 <strchr>
 80a42da:	b918      	cbnz	r0, 80a42e4 <strchrnul+0x12>
 80a42dc:	4620      	mov	r0, r4
 80a42de:	f000 f830 	bl	80a4342 <strlen>
 80a42e2:	4420      	add	r0, r4
 80a42e4:	bd10      	pop	{r4, pc}

080a42e6 <strcmp>:
 80a42e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a42ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a42ee:	2a01      	cmp	r2, #1
 80a42f0:	bf28      	it	cs
 80a42f2:	429a      	cmpcs	r2, r3
 80a42f4:	d0f7      	beq.n	80a42e6 <strcmp>
 80a42f6:	1ad0      	subs	r0, r2, r3
 80a42f8:	4770      	bx	lr

080a42fa <strcpy>:
 80a42fa:	4603      	mov	r3, r0
 80a42fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4300:	f803 2b01 	strb.w	r2, [r3], #1
 80a4304:	2a00      	cmp	r2, #0
 80a4306:	d1f9      	bne.n	80a42fc <strcpy+0x2>
 80a4308:	4770      	bx	lr
	...

080a430c <strdup>:
 80a430c:	4b02      	ldr	r3, [pc, #8]	; (80a4318 <strdup+0xc>)
 80a430e:	4601      	mov	r1, r0
 80a4310:	6818      	ldr	r0, [r3, #0]
 80a4312:	f000 b803 	b.w	80a431c <_strdup_r>
 80a4316:	bf00      	nop
 80a4318:	2000001c 	.word	0x2000001c

080a431c <_strdup_r>:
 80a431c:	b570      	push	{r4, r5, r6, lr}
 80a431e:	4604      	mov	r4, r0
 80a4320:	4608      	mov	r0, r1
 80a4322:	460d      	mov	r5, r1
 80a4324:	f000 f80d 	bl	80a4342 <strlen>
 80a4328:	1c46      	adds	r6, r0, #1
 80a432a:	4631      	mov	r1, r6
 80a432c:	4620      	mov	r0, r4
 80a432e:	f7fd f889 	bl	80a1444 <_malloc_r>
 80a4332:	4604      	mov	r4, r0
 80a4334:	b118      	cbz	r0, 80a433e <_strdup_r+0x22>
 80a4336:	4632      	mov	r2, r6
 80a4338:	4629      	mov	r1, r5
 80a433a:	f7ff ff69 	bl	80a4210 <memcpy>
 80a433e:	4620      	mov	r0, r4
 80a4340:	bd70      	pop	{r4, r5, r6, pc}

080a4342 <strlen>:
 80a4342:	4603      	mov	r3, r0
 80a4344:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4348:	2a00      	cmp	r2, #0
 80a434a:	d1fb      	bne.n	80a4344 <strlen+0x2>
 80a434c:	1a18      	subs	r0, r3, r0
 80a434e:	3801      	subs	r0, #1
 80a4350:	4770      	bx	lr

080a4352 <strncmp>:
 80a4352:	b510      	push	{r4, lr}
 80a4354:	b16a      	cbz	r2, 80a4372 <strncmp+0x20>
 80a4356:	3901      	subs	r1, #1
 80a4358:	1884      	adds	r4, r0, r2
 80a435a:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a435e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a4362:	4293      	cmp	r3, r2
 80a4364:	d103      	bne.n	80a436e <strncmp+0x1c>
 80a4366:	42a0      	cmp	r0, r4
 80a4368:	d001      	beq.n	80a436e <strncmp+0x1c>
 80a436a:	2b00      	cmp	r3, #0
 80a436c:	d1f5      	bne.n	80a435a <strncmp+0x8>
 80a436e:	1a98      	subs	r0, r3, r2
 80a4370:	bd10      	pop	{r4, pc}
 80a4372:	4610      	mov	r0, r2
 80a4374:	e7fc      	b.n	80a4370 <strncmp+0x1e>

080a4376 <strrchr>:
 80a4376:	b538      	push	{r3, r4, r5, lr}
 80a4378:	4603      	mov	r3, r0
 80a437a:	460c      	mov	r4, r1
 80a437c:	b969      	cbnz	r1, 80a439a <strrchr+0x24>
 80a437e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4382:	f7ff bf99 	b.w	80a42b8 <strchr>
 80a4386:	4605      	mov	r5, r0
 80a4388:	1c43      	adds	r3, r0, #1
 80a438a:	4621      	mov	r1, r4
 80a438c:	4618      	mov	r0, r3
 80a438e:	f7ff ff93 	bl	80a42b8 <strchr>
 80a4392:	2800      	cmp	r0, #0
 80a4394:	d1f7      	bne.n	80a4386 <strrchr+0x10>
 80a4396:	4628      	mov	r0, r5
 80a4398:	bd38      	pop	{r3, r4, r5, pc}
 80a439a:	2500      	movs	r5, #0
 80a439c:	e7f5      	b.n	80a438a <strrchr+0x14>

080a439e <strstr>:
 80a439e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a43a0:	780c      	ldrb	r4, [r1, #0]
 80a43a2:	b164      	cbz	r4, 80a43be <strstr+0x20>
 80a43a4:	4603      	mov	r3, r0
 80a43a6:	781a      	ldrb	r2, [r3, #0]
 80a43a8:	4618      	mov	r0, r3
 80a43aa:	1c5e      	adds	r6, r3, #1
 80a43ac:	b90a      	cbnz	r2, 80a43b2 <strstr+0x14>
 80a43ae:	4610      	mov	r0, r2
 80a43b0:	e005      	b.n	80a43be <strstr+0x20>
 80a43b2:	4294      	cmp	r4, r2
 80a43b4:	d108      	bne.n	80a43c8 <strstr+0x2a>
 80a43b6:	460d      	mov	r5, r1
 80a43b8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a43bc:	b902      	cbnz	r2, 80a43c0 <strstr+0x22>
 80a43be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a43c0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a43c4:	4297      	cmp	r7, r2
 80a43c6:	d0f7      	beq.n	80a43b8 <strstr+0x1a>
 80a43c8:	4633      	mov	r3, r6
 80a43ca:	e7ec      	b.n	80a43a6 <strstr+0x8>

080a43cc <_strtol_l.isra.0>:
 80a43cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a43d0:	468c      	mov	ip, r1
 80a43d2:	4686      	mov	lr, r0
 80a43d4:	4e39      	ldr	r6, [pc, #228]	; (80a44bc <_strtol_l.isra.0+0xf0>)
 80a43d6:	4660      	mov	r0, ip
 80a43d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a43dc:	5da5      	ldrb	r5, [r4, r6]
 80a43de:	f015 0508 	ands.w	r5, r5, #8
 80a43e2:	d1f8      	bne.n	80a43d6 <_strtol_l.isra.0+0xa>
 80a43e4:	2c2d      	cmp	r4, #45	; 0x2d
 80a43e6:	d133      	bne.n	80a4450 <_strtol_l.isra.0+0x84>
 80a43e8:	f04f 0801 	mov.w	r8, #1
 80a43ec:	f89c 4000 	ldrb.w	r4, [ip]
 80a43f0:	f100 0c02 	add.w	ip, r0, #2
 80a43f4:	2b00      	cmp	r3, #0
 80a43f6:	d05c      	beq.n	80a44b2 <_strtol_l.isra.0+0xe6>
 80a43f8:	2b10      	cmp	r3, #16
 80a43fa:	d10c      	bne.n	80a4416 <_strtol_l.isra.0+0x4a>
 80a43fc:	2c30      	cmp	r4, #48	; 0x30
 80a43fe:	d10a      	bne.n	80a4416 <_strtol_l.isra.0+0x4a>
 80a4400:	f89c 0000 	ldrb.w	r0, [ip]
 80a4404:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4408:	2858      	cmp	r0, #88	; 0x58
 80a440a:	d14d      	bne.n	80a44a8 <_strtol_l.isra.0+0xdc>
 80a440c:	2310      	movs	r3, #16
 80a440e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a4412:	f10c 0c02 	add.w	ip, ip, #2
 80a4416:	2600      	movs	r6, #0
 80a4418:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a441c:	3f01      	subs	r7, #1
 80a441e:	fbb7 f9f3 	udiv	r9, r7, r3
 80a4422:	4630      	mov	r0, r6
 80a4424:	fb03 7a19 	mls	sl, r3, r9, r7
 80a4428:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a442c:	2d09      	cmp	r5, #9
 80a442e:	d818      	bhi.n	80a4462 <_strtol_l.isra.0+0x96>
 80a4430:	462c      	mov	r4, r5
 80a4432:	42a3      	cmp	r3, r4
 80a4434:	dd24      	ble.n	80a4480 <_strtol_l.isra.0+0xb4>
 80a4436:	1c75      	adds	r5, r6, #1
 80a4438:	d007      	beq.n	80a444a <_strtol_l.isra.0+0x7e>
 80a443a:	4581      	cmp	r9, r0
 80a443c:	d31d      	bcc.n	80a447a <_strtol_l.isra.0+0xae>
 80a443e:	d101      	bne.n	80a4444 <_strtol_l.isra.0+0x78>
 80a4440:	45a2      	cmp	sl, r4
 80a4442:	db1a      	blt.n	80a447a <_strtol_l.isra.0+0xae>
 80a4444:	2601      	movs	r6, #1
 80a4446:	fb00 4003 	mla	r0, r0, r3, r4
 80a444a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a444e:	e7eb      	b.n	80a4428 <_strtol_l.isra.0+0x5c>
 80a4450:	2c2b      	cmp	r4, #43	; 0x2b
 80a4452:	bf08      	it	eq
 80a4454:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a4458:	46a8      	mov	r8, r5
 80a445a:	bf08      	it	eq
 80a445c:	f100 0c02 	addeq.w	ip, r0, #2
 80a4460:	e7c8      	b.n	80a43f4 <_strtol_l.isra.0+0x28>
 80a4462:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a4466:	2d19      	cmp	r5, #25
 80a4468:	d801      	bhi.n	80a446e <_strtol_l.isra.0+0xa2>
 80a446a:	3c37      	subs	r4, #55	; 0x37
 80a446c:	e7e1      	b.n	80a4432 <_strtol_l.isra.0+0x66>
 80a446e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a4472:	2d19      	cmp	r5, #25
 80a4474:	d804      	bhi.n	80a4480 <_strtol_l.isra.0+0xb4>
 80a4476:	3c57      	subs	r4, #87	; 0x57
 80a4478:	e7db      	b.n	80a4432 <_strtol_l.isra.0+0x66>
 80a447a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a447e:	e7e4      	b.n	80a444a <_strtol_l.isra.0+0x7e>
 80a4480:	1c73      	adds	r3, r6, #1
 80a4482:	d106      	bne.n	80a4492 <_strtol_l.isra.0+0xc6>
 80a4484:	2322      	movs	r3, #34	; 0x22
 80a4486:	4638      	mov	r0, r7
 80a4488:	f8ce 3000 	str.w	r3, [lr]
 80a448c:	b942      	cbnz	r2, 80a44a0 <_strtol_l.isra.0+0xd4>
 80a448e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4492:	f1b8 0f00 	cmp.w	r8, #0
 80a4496:	d000      	beq.n	80a449a <_strtol_l.isra.0+0xce>
 80a4498:	4240      	negs	r0, r0
 80a449a:	2a00      	cmp	r2, #0
 80a449c:	d0f7      	beq.n	80a448e <_strtol_l.isra.0+0xc2>
 80a449e:	b10e      	cbz	r6, 80a44a4 <_strtol_l.isra.0+0xd8>
 80a44a0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a44a4:	6011      	str	r1, [r2, #0]
 80a44a6:	e7f2      	b.n	80a448e <_strtol_l.isra.0+0xc2>
 80a44a8:	2430      	movs	r4, #48	; 0x30
 80a44aa:	2b00      	cmp	r3, #0
 80a44ac:	d1b3      	bne.n	80a4416 <_strtol_l.isra.0+0x4a>
 80a44ae:	2308      	movs	r3, #8
 80a44b0:	e7b1      	b.n	80a4416 <_strtol_l.isra.0+0x4a>
 80a44b2:	2c30      	cmp	r4, #48	; 0x30
 80a44b4:	d0a4      	beq.n	80a4400 <_strtol_l.isra.0+0x34>
 80a44b6:	230a      	movs	r3, #10
 80a44b8:	e7ad      	b.n	80a4416 <_strtol_l.isra.0+0x4a>
 80a44ba:	bf00      	nop
 80a44bc:	080a4b8e 	.word	0x080a4b8e

080a44c0 <strtol>:
 80a44c0:	4613      	mov	r3, r2
 80a44c2:	460a      	mov	r2, r1
 80a44c4:	4601      	mov	r1, r0
 80a44c6:	4802      	ldr	r0, [pc, #8]	; (80a44d0 <strtol+0x10>)
 80a44c8:	6800      	ldr	r0, [r0, #0]
 80a44ca:	f7ff bf7f 	b.w	80a43cc <_strtol_l.isra.0>
 80a44ce:	bf00      	nop
 80a44d0:	2000001c 	.word	0x2000001c

080a44d4 <dynalib_user>:
 80a44d4:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a44e4:	00000000 6c616e61 6176676f 0065756c     ....analogvalue.
 80a44f4:	6970612f 5550002f 45470054 75460054     /api/.PUT.GET.Fu
 80a4504:	44206c6c 00617461 6e756f63 2d2d0074     ll Data.count.--
 80a4514:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 80a4524:	45554800 45554800 65720032 61686361     .HUE.HUE2.reacha
 80a4534:	00656c62 65757274 73203200 6e6f6365     ble.true.2 secon
 80a4544:	66007364 65736c61 45554800 54414420     ds.false.HUE DAT
 80a4554:	69480041 6f632074 7469646e 616e6f69     A.Hit conditiona
 80a4564:	6572006c 20686361 63656863 3733006b     l.reach check.37
 80a4574:	52002c36 68636165 656c6261 7568202c     6,.Reachable, hu
 80a4584:	72745365 2c676e69 65756820 74532032     eString, hue2 St
 80a4594:	676e6972 6f227b00 203a226e 65757274     ring.{"on": true
 80a45a4:	7322202c 656e6563 22203a22 2d496262     , "scene": "bbI-
 80a45b4:	72374741 56565864 22497879 7422202c     AG7rdXVVyxI", "t
 80a45c4:	736e6172 6f697469 6d69746e 203a2265     ransitiontime": 
 80a45d4:	007d3033 6b737544 6f227b00 203a226e     30}.Dusk.{"on": 
 80a45e4:	65757274 7322202c 656e6563 22203a22     true, "scene": "
 80a45f4:	61527064 76445371 306d3648 2232786e     dpRaqSDvH6m0nx2"
 80a4604:	7422202c 736e6172 6f697469 6d69746e     , "transitiontim
 80a4614:	203a2265 007d3033 6b737544 7b003220     e": 30}.Dusk 2.{
 80a4624:	226e6f22 7274203a 202c6575 65637322     "on": true, "sce
 80a4634:	3a22656e 324f2220 58527750 734c446c     ne": "O2PwRXlDLs
 80a4644:	4941796c 202c2264 61727422 7469736e     lyAId", "transit
 80a4654:	746e6f69 22656d69 3033203a 4144007d     iontime": 30}.DA
 80a4664:	227b0059 3a226e6f 75727420 22202c65     Y.{"on": true, "
 80a4674:	6e656373 203a2265 6d597622 43597561     scene": "vYmauYC
 80a4684:	557a6752 2d337a46 22202c22 6e617274     RgzUFz3-", "tran
 80a4694:	69746973 69746e6f 3a22656d 7d303320     sitiontime": 30}
 80a46a4:	79614400 69685400 73692073 69616d20     .Day.This is mai
 80a46b4:	6f6c206e 6100706f 796a486b 49726158     n loop.akHjyXarI
 80a46c4:	6d647a53 3465364e 6e4c6a72 63787035     SzdmN6e4rjLn5pxc
 80a46d4:	67564970 4f7a4169 6c5a4733 006f312d     pIVgiAzO3GZl-1o.
 80a46e4:	67696c2f 2f737468 672f0035 70756f72     /lights/5./group
 80a46f4:	2f332f73 69746361 7b006e6f 61747322     s/3/action.{"sta
 80a4704:	3a226574 68227b20 3a226575 30312220     te": {"hue": "10
 80a4714:	22303030 6e007d7d 006c6c75              000"}}.null.

080a4720 <_ZTVN5spark10LogHandlerE>:
	...
 80a4730:	080a00a5 080a00cb                       ........

080a4738 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a4740:	080a0149 080a017d 080a2ba1 080a00cd     I...}....+......

080a4750 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
 80a4758:	080a0101 080a0115 65636341 2a007470     ........Accept.*
 80a4768:	20002a2f 50545448 302e312f 63000a0d     /*. HTTP/1.0...c
 80a4778:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
 80a4788:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
 80a4798:	00687467 54534f50 0d0a0d00 0000000a     gth.POST........

080a47a8 <_ZTV10JsonBuffer>:
	...
 80a47b0:	080a0ea1 080a0ebd                       ........

080a47b8 <_ZTV10JsonParser>:
	...
 80a47c0:	080a0ed1 080a0ef5                       ........

080a47c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a47d0:	080a1493 080a1499 080a14e9 080a14a7     ................
 80a47e0:	080a1495                                ....

080a47e4 <_ZTV7TwoWire>:
	...
 80a47ec:	080a1a0d 080a1a57 080a1a2f 080a1a0f     ....W.../.......
 80a47fc:	080a1a37 080a1a3f 080a1a47 080a1a4f     7...?...G...O...

080a480c <_ZTV9IPAddress>:
	...
 80a4814:	080a1a89 080a00c9 080a01b1 25006425     ............%d.%
 80a4824:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 80a4834:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 80a4844:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a4854:	0072656c 00707061 30313025 5d002075     ler.app.%010u .]
 80a4864:	202c0020 3a292800 5b200020 646f6300      ., .(): . [.cod
 80a4874:	203d2065 00692500 61746564 20736c69     e = .%i.details 
 80a4884:	6d00203d 66006300 006e6c00 63006e66     = .m.c.f.ln.fn.c
 80a4894:	0065646f 61746564 00006c69              ode.detail..

080a48a0 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a48a8:	080a1f2b 080a1f51 080a1f11 080a1b6f     +...Q.......o...

080a48b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a48c0:	080a23cd 080a23e5 080a2ba1 080a00cd     .#...#...+......

080a48d0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a48d8:	080a23f9 080a240d 080a2d49 080a1f19     .#...$..I-......

080a48e8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a48f0:	080a1f29 080a1f5f 080a2add 080a1f1b     )..._....*......

080a4900 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a4908:	080a1f27 080a1f6d 080a22f5 080a1f89     '...m...."......

080a4918 <_ZTVN5spark12NetworkClassE>:
	...
 80a4920:	080a2ebd 080a2ec7 080a2ed1 080a2edb     ................
 80a4930:	080a2ee5 080a2ef1 080a2efd 080a2f05     ............./..
 80a4940:	080a2f0d 080a2f19 080a2f21 080a2f2b     ./.../..!/..+/..
 80a4950:	080a2f35 69726977 5400676e 6c435043     5/..wiring.TCPCl
 80a4960:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a4970 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4978:	080a3445 080a346d 080a388f 080a347b     E4..m4...8..{4..
 80a4988:	080a3449                                I4..

080a498c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a4994 <_ZTV9TCPClient>:
	...
 80a499c:	080a3481 080a34b5 080a3401 080a341b     .4...4...4...4..
 80a49ac:	080a3691 080a3517 080a34e9 080a3443     .6...5...4..C4..
 80a49bc:	080a35b1 080a3895 080a354b 080a3705     .5...8..K5...7..
 80a49cc:	080a37b3 080a376b 080a342b 080a3779     .7..k7..+4..y7..
 80a49dc:	080a34c9 252d5925 64252d6d 3a482554     .4..%Y-%m-%dT%H:
 80a49ec:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a49fc <_ZTV11USARTSerial>:
	...
 80a4a04:	080a3915 080a397d 080a3959 080a2fb1     .9..}9..Y9.../..
 80a4a14:	080a3929 080a3945 080a3937 080a3953     )9..E9..79..S9..
 80a4a24:	080a3917 080a391b                       .9...9..

080a4a2c <_ZTV9USBSerial>:
	...
 80a4a34:	080a3a21 080a3a87 080a3a5f 080a2fb1     !:...:.._:.../..
 80a4a44:	080a3a51 080a3a23 080a3a33 080a3a81     Q:..#:..3:...:..
 80a4a54:	080a3a43 080a3a1d                       C:...:..

080a4a5c <_ZTVN5spark9WiFiClassE>:
	...
 80a4a64:	080a3c67 080a3c5d 080a3c53 080a3bc5     g<..]<..S<...;..
 80a4a74:	080a3c47 080a3c3b 080a2efd 080a2f05     G<..;<......./..
 80a4a84:	080a3c2f 080a3c27 080a3c1d 080a3c13     /<..'<...<...<..
 80a4a94:	080a3bcf                                .;..

080a4a98 <_ZSt7nothrow>:
	...

080a4a99 <_ZTSSt19_Sp_make_shared_tag>:
 80a4a99:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a4aa9:	5f646572 00676174                        red_tag....

080a4ab4 <_ZTISt19_Sp_make_shared_tag>:
 80a4ab4:	080a4af4 080a4a99                       .J...J..

080a4abc <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a4abc:	080a4b54 080a4ac8 080a4b78              TK...J..xK..

080a4ac8 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a4ac8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a4ad8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a4ae8:	00000045                                E...

080a4aec <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a4aec:	00000000 080a4abc 080a4009 080a401d     .....J...@...@..
 80a4afc:	080a41b5 080a41b5 080a4087 080a3fc9     .A...A...@...?..
 80a4b0c:	080a406f 080a4031 080a3ffd              o@..1@...?..

080a4b18 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a4b18:	080a4b54 080a4b24 080a4abc              TK..$K...J..

080a4b24 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a4b24:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a4b34:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a4b44:	456f666e 00000000                       nfoE....

080a4b4c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a4b4c:	00000000 080a4b18 080a40b1 080a40c5     .....K...@...@..
 80a4b5c:	080a41b5 080a41b5 080a4087 080a3fc9     .A...A...@...?..
 80a4b6c:	080a4189 080a4115 080a40d9              .A...A...@..

080a4b78 <_ZTISt9type_info>:
 80a4b78:	080a4af4 080a4b80                       .J...K..

080a4b80 <_ZTSSt9type_info>:
 80a4b80:	74397453 5f657079 6f666e69               St9type_info.

080a4b8d <_ctype_>:
 80a4b8d:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4b9d:	20202020 20202020 20202020 20202020                     
 80a4bad:	10108820 10101010 10101010 10101010      ...............
 80a4bbd:	04040410 04040404 10040404 10101010     ................
 80a4bcd:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4bdd:	01010101 01010101 01010101 10101010     ................
 80a4bed:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4bfd:	02020202 02020202 02020202 10101010     ................
 80a4c0d:	00000020 00000000 00000000 00000000      ...............
	...

080a4c8e <link_const_variable_data_end>:
	...

080a4c90 <link_constructors_location>:
 80a4c90:	080a0979 	.word	0x080a0979
 80a4c94:	080a2b91 	.word	0x080a2b91
 80a4c98:	080a2f9d 	.word	0x080a2f9d
 80a4c9c:	080a30e1 	.word	0x080a30e1
 80a4ca0:	080a33c5 	.word	0x080a33c5
 80a4ca4:	080a3901 	.word	0x080a3901
 80a4ca8:	080a3c71 	.word	0x080a3c71
 80a4cac:	080a3f71 	.word	0x080a3f71
