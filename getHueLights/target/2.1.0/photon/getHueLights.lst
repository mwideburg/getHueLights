
/Users/michaelwideburg/Desktop/getHueLights/getHueLights/target/2.1.0/photon/getHueLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047e4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4800  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a4804  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001190  20000084  20000084  00040084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4888  080a4888  00034888  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a48b0  080a48b0  000348b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001433af  00000000  00000000  000348b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000177a0  00000000  00000000  00177c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023128  00000000  00000000  0018f403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002798  00000000  00000000  001b252b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006650  00000000  00000000  001b4cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029aa2  00000000  00000000  001bb313  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035a9a  00000000  00000000  001e4db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bb340  00000000  00000000  0021a84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006b68  00000000  00000000  002d5b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fedd 	bl	80a3dec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 feff 	bl	80a3e3c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4804 	.word	0x080a4804
 80a004c:	20000084 	.word	0x20000084
 80a0050:	20000084 	.word	0x20000084
 80a0054:	20001214 	.word	0x20001214
 80a0058:	20001214 	.word	0x20001214

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fc73 	bl	80a3948 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a47dc 	.word	0x080a47dc
 80a0080:	080a47fc 	.word	0x080a47fc

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b88e 	b.w	80a01a4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f96d 	bl	80a0368 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f003 bc1b 	b.w	80a38cc <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bfb7 	b.w	80a1008 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bfb5 	b.w	80a1008 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bfbb 	b.w	80a1018 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 fed0 	bl	80a0e50 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0b8d 	.word	0x080a0b8d

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00cc:	6a00      	ldr	r0, [r0, #32]
 80a00ce:	6803      	ldr	r3, [r0, #0]
 80a00d0:	68db      	ldr	r3, [r3, #12]
 80a00d2:	4718      	bx	r3

080a00d4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	3004      	adds	r0, #4
 80a00da:	f002 fe28 	bl	80a2d2e <_ZN6StringD1Ev>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN14http_request_tD1Ev>:
} http_request_t;
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	303c      	adds	r0, #60	; 0x3c
 80a00e8:	f002 fe21 	bl	80a2d2e <_ZN6StringD1Ev>
 80a00ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00f0:	f002 fe1d 	bl	80a2d2e <_ZN6StringD1Ev>
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f002 fe1a 	bl	80a2d2e <_ZN6StringD1Ev>
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	bd10      	pop	{r4, pc}
	...

080a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	4b02      	ldr	r3, [pc, #8]	; (80a0110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
 80a0106:	6003      	str	r3, [r0, #0]
 80a0108:	f000 fcec 	bl	80a0ae4 <_ZN10JsonParserD1Ev>
 80a010c:	4620      	mov	r0, r4
 80a010e:	bd10      	pop	{r4, pc}
 80a0110:	080a42a4 	.word	0x080a42a4

080a0114 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	f7ff fff2 	bl	80a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
 80a011c:	4620      	mov	r0, r4
 80a011e:	f240 714c 	movw	r1, #1868	; 0x74c
 80a0122:	f003 fd30 	bl	80a3b86 <_ZdlPvj>
 80a0126:	4620      	mov	r0, r4
 80a0128:	bd10      	pop	{r4, pc}
	...

080a012c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a012c:	b513      	push	{r0, r1, r4, lr}
 80a012e:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0130:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0132:	2200      	movs	r2, #0
 80a0134:	781b      	ldrb	r3, [r3, #0]
 80a0136:	f88d 3000 	strb.w	r3, [sp]
 80a013a:	233c      	movs	r3, #60	; 0x3c
 80a013c:	f001 f8fa 	bl	80a1334 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0140:	4620      	mov	r0, r4
 80a0142:	b002      	add	sp, #8
 80a0144:	bd10      	pop	{r4, pc}
 80a0146:	bf00      	nop
 80a0148:	200000e8 	.word	0x200000e8

080a014c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a014c:	b510      	push	{r4, lr}
 80a014e:	4604      	mov	r4, r0
 80a0150:	4b09      	ldr	r3, [pc, #36]	; (80a0178 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a0152:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0154:	f001 fe38 	bl	80a1dc8 <_ZN5spark10LogManager8instanceEv>
 80a0158:	4621      	mov	r1, r4
 80a015a:	f002 f849 	bl	80a21f0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a015e:	f003 fab9 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0162:	f003 fa9d 	bl	80a36a0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a0166:	4620      	mov	r0, r4
 80a0168:	4b04      	ldr	r3, [pc, #16]	; (80a017c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a016a:	f840 3b04 	str.w	r3, [r0], #4
 80a016e:	f001 ff2d 	bl	80a1fcc <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0172:	4620      	mov	r0, r4
 80a0174:	bd10      	pop	{r4, pc}
 80a0176:	bf00      	nop
 80a0178:	080a428c 	.word	0x080a428c
 80a017c:	080a4274 	.word	0x080a4274

080a0180 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0180:	b510      	push	{r4, lr}
 80a0182:	4604      	mov	r4, r0
    }
 80a0184:	f7ff ffe2 	bl	80a014c <_ZN5spark16SerialLogHandlerD1Ev>
 80a0188:	4620      	mov	r0, r4
 80a018a:	2124      	movs	r1, #36	; 0x24
 80a018c:	f003 fcfb 	bl	80a3b86 <_ZdlPvj>
 80a0190:	4620      	mov	r0, r4
 80a0192:	bd10      	pop	{r4, pc}

080a0194 <_ZN9IPAddressD0Ev>:
 80a0194:	b510      	push	{r4, lr}
 80a0196:	4604      	mov	r4, r0
 80a0198:	2118      	movs	r1, #24
 80a019a:	f003 fcf4 	bl	80a3b86 <_ZdlPvj>
 80a019e:	4620      	mov	r0, r4
 80a01a0:	bd10      	pop	{r4, pc}
	...

080a01a4 <setup>:
JsonParserStatic<1024, 50> parse1;
int analogvalue;
int hue = 8418;
bool lightStatus = false;
String last = "null";
void setup() {
 80a01a4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a01a6:	4e10      	ldr	r6, [pc, #64]	; (80a01e8 <setup+0x44>)
 80a01a8:	4d10      	ldr	r5, [pc, #64]	; (80a01ec <setup+0x48>)
 80a01aa:	f106 0414 	add.w	r4, r6, #20
 80a01ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01b2:	682b      	ldr	r3, [r5, #0]
 80a01b4:	7023      	strb	r3, [r4, #0]
  // Put initialization like pinMode and begin functions here.
  request.ip = hueIP;
  request.port = 80;
 80a01b6:	2350      	movs	r3, #80	; 0x50
 80a01b8:	63b3      	str	r3, [r6, #56]	; 0x38
  Serial.begin(9600);
 80a01ba:	f003 fa8b 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a01be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01c2:	f003 fa69 	bl	80a3698 <_ZN9USBSerial5beginEl>
  // First, declare all of our pins. This lets our device know which ones
  // will be used for outputting voltage, and which ones will read
  // incoming voltage.
  pinMode(LED_PIN, OUTPUT); // Our LED pin is output (lighting up the LED)
 80a01c6:	2101      	movs	r1, #1
 80a01c8:	2006      	movs	r0, #6
 80a01ca:	f003 fc3d 	bl	80a3a48 <pinMode>
  digitalWrite(LED_PIN, LOW);
 80a01ce:	2100      	movs	r1, #0
 80a01d0:	2006      	movs	r0, #6
 80a01d2:	f003 fc4a 	bl	80a3a6a <digitalWrite>

  // We are going to declare a Particle.variable() here so that we can
  // access the value of the photosensor from the cloud.
  Particle.variable("analogvalue", analogvalue);
}
 80a01d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a01da:	2300      	movs	r3, #0
 80a01dc:	2202      	movs	r2, #2
 80a01de:	4904      	ldr	r1, [pc, #16]	; (80a01f0 <setup+0x4c>)
 80a01e0:	4804      	ldr	r0, [pc, #16]	; (80a01f4 <setup+0x50>)
 80a01e2:	f000 be91 	b.w	80a0f08 <spark_variable>
 80a01e6:	bf00      	nop
 80a01e8:	20000ca8 	.word	0x20000ca8
 80a01ec:	20000510 	.word	0x20000510
 80a01f0:	200000ec 	.word	0x200000ec
 80a01f4:	080a40c4 	.word	0x080a40c4

080a01f8 <_Z9getLightsv>:

  delay(2000);
}


void getLights(){
 80a01f8:	b530      	push	{r4, r5, lr}
 80a01fa:	b08b      	sub	sp, #44	; 0x2c

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01fc:	4928      	ldr	r1, [pc, #160]	; (80a02a0 <_Z9getLightsv+0xa8>)
 80a01fe:	a806      	add	r0, sp, #24
 80a0200:	f002 fddf 	bl	80a2dc2 <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + BEDROOM_PATH;
 80a0204:	4927      	ldr	r1, [pc, #156]	; (80a02a4 <_Z9getLightsv+0xac>)
 80a0206:	a806      	add	r0, sp, #24
 80a0208:	f002 fe5c 	bl	80a2ec4 <_ZplRK15StringSumHelperRK6String>
 80a020c:	4926      	ldr	r1, [pc, #152]	; (80a02a8 <_Z9getLightsv+0xb0>)
 80a020e:	f002 fe59 	bl	80a2ec4 <_ZplRK15StringSumHelperRK6String>
 80a0212:	4d26      	ldr	r5, [pc, #152]	; (80a02ac <_Z9getLightsv+0xb4>)
 80a0214:	4601      	mov	r1, r0
 80a0216:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80a021a:	f002 fe0d 	bl	80a2e38 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a021e:	a806      	add	r0, sp, #24
 80a0220:	f002 fd85 	bl	80a2d2e <_ZN6StringD1Ev>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
 80a0224:	4c22      	ldr	r4, [pc, #136]	; (80a02b0 <_Z9getLightsv+0xb8>)
 80a0226:	4b23      	ldr	r3, [pc, #140]	; (80a02b4 <_Z9getLightsv+0xbc>)
 80a0228:	4622      	mov	r2, r4
 80a022a:	4629      	mov	r1, r5
 80a022c:	9300      	str	r3, [sp, #0]
 80a022e:	4822      	ldr	r0, [pc, #136]	; (80a02b8 <_Z9getLightsv+0xc0>)
 80a0230:	4b22      	ldr	r3, [pc, #136]	; (80a02bc <_Z9getLightsv+0xc4>)
 80a0232:	f000 fb19 	bl	80a0868 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  
  http.get(request, response, headers);
  String data = response.body.c_str();
 80a0236:	6861      	ldr	r1, [r4, #4]
 80a0238:	a802      	add	r0, sp, #8
 80a023a:	f002 fdc2 	bl	80a2dc2 <_ZN6StringC1EPKc>
  Serial.println("Full Data");
 80a023e:	f003 fa49 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0242:	491f      	ldr	r1, [pc, #124]	; (80a02c0 <_Z9getLightsv+0xc8>)
 80a0244:	f002 fcf7 	bl	80a2c36 <_ZN5Print7printlnEPKc>
  Serial.println(data);
 80a0248:	f003 fa44 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a024c:	9902      	ldr	r1, [sp, #8]
 80a024e:	f002 fcf2 	bl	80a2c36 <_ZN5Print7printlnEPKc>
  Serial.println();
 80a0252:	f003 fa3f 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0256:	f002 fce2 	bl	80a2c1e <_ZN5Print7printlnEv>
  int pos = data.indexOf("h") + 5;
 80a025a:	491a      	ldr	r1, [pc, #104]	; (80a02c4 <_Z9getLightsv+0xcc>)
 80a025c:	a806      	add	r0, sp, #24
 80a025e:	f002 fdb0 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0262:	a906      	add	r1, sp, #24
 80a0264:	a802      	add	r0, sp, #8
 80a0266:	f002 fe5a 	bl	80a2f1e <_ZNK6String7indexOfERKS_>
 80a026a:	4604      	mov	r4, r0
 80a026c:	a806      	add	r0, sp, #24
 80a026e:	f002 fd5e 	bl	80a2d2e <_ZN6StringD1Ev>

  hue = data.substring(pos, pos + 4).toInt();
 80a0272:	1d62      	adds	r2, r4, #5
 80a0274:	a902      	add	r1, sp, #8
 80a0276:	f104 0309 	add.w	r3, r4, #9
 80a027a:	a806      	add	r0, sp, #24
 80a027c:	f002 fe52 	bl	80a2f24 <_ZNK6String9substringEjj>
 80a0280:	a806      	add	r0, sp, #24
 80a0282:	f002 fe78 	bl	80a2f76 <_ZNK6String5toIntEv>
 80a0286:	4b10      	ldr	r3, [pc, #64]	; (80a02c8 <_Z9getLightsv+0xd0>)
 80a0288:	6018      	str	r0, [r3, #0]
 80a028a:	a806      	add	r0, sp, #24
 80a028c:	f002 fd4f 	bl	80a2d2e <_ZN6StringD1Ev>
  lightStatus = true;
 80a0290:	2201      	movs	r2, #1
 80a0292:	4b0e      	ldr	r3, [pc, #56]	; (80a02cc <_Z9getLightsv+0xd4>)
  String data = response.body.c_str();
 80a0294:	a802      	add	r0, sp, #8
  lightStatus = true;
 80a0296:	701a      	strb	r2, [r3, #0]
  String data = response.body.c_str();
 80a0298:	f002 fd49 	bl	80a2d2e <_ZN6StringD1Ev>
}
 80a029c:	b00b      	add	sp, #44	; 0x2c
 80a029e:	bd30      	pop	{r4, r5, pc}
 80a02a0:	080a40d0 	.word	0x080a40d0
 80a02a4:	200000a8 	.word	0x200000a8
 80a02a8:	200000b8 	.word	0x200000b8
 80a02ac:	20000ca8 	.word	0x20000ca8
 80a02b0:	20000cf4 	.word	0x20000cf4
 80a02b4:	080a40d6 	.word	0x080a40d6
 80a02b8:	200000f0 	.word	0x200000f0
 80a02bc:	20000000 	.word	0x20000000
 80a02c0:	080a40da 	.word	0x080a40da
 80a02c4:	080a42e6 	.word	0x080a42e6
 80a02c8:	20000010 	.word	0x20000010
 80a02cc:	20000534 	.word	0x20000534

080a02d0 <_Z12setHueLights6String>:

void setHueLights(String command){
 80a02d0:	b530      	push	{r4, r5, lr}
 80a02d2:	b087      	sub	sp, #28
 80a02d4:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
 80a02d6:	4911      	ldr	r1, [pc, #68]	; (80a031c <_Z12setHueLights6String+0x4c>)
 80a02d8:	a802      	add	r0, sp, #8
 80a02da:	f002 fd72 	bl	80a2dc2 <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + LIGHT_PATH;
 80a02de:	4910      	ldr	r1, [pc, #64]	; (80a0320 <_Z12setHueLights6String+0x50>)
 80a02e0:	a802      	add	r0, sp, #8
 80a02e2:	f002 fdef 	bl	80a2ec4 <_ZplRK15StringSumHelperRK6String>
 80a02e6:	490f      	ldr	r1, [pc, #60]	; (80a0324 <_Z12setHueLights6String+0x54>)
 80a02e8:	f002 fdec 	bl	80a2ec4 <_ZplRK15StringSumHelperRK6String>
 80a02ec:	4c0e      	ldr	r4, [pc, #56]	; (80a0328 <_Z12setHueLights6String+0x58>)
 80a02ee:	4601      	mov	r1, r0
 80a02f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a02f4:	f002 fda0 	bl	80a2e38 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a02f8:	a802      	add	r0, sp, #8
 80a02fa:	f002 fd18 	bl	80a2d2e <_ZN6StringD1Ev>
  request.body = command;
 80a02fe:	4629      	mov	r1, r5
 80a0300:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0304:	f002 fd98 	bl	80a2e38 <_ZN6StringaSERKS_>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
 80a0308:	4b08      	ldr	r3, [pc, #32]	; (80a032c <_Z12setHueLights6String+0x5c>)
 80a030a:	4621      	mov	r1, r4
 80a030c:	9300      	str	r3, [sp, #0]
 80a030e:	4a08      	ldr	r2, [pc, #32]	; (80a0330 <_Z12setHueLights6String+0x60>)
 80a0310:	4b08      	ldr	r3, [pc, #32]	; (80a0334 <_Z12setHueLights6String+0x64>)
 80a0312:	4809      	ldr	r0, [pc, #36]	; (80a0338 <_Z12setHueLights6String+0x68>)
 80a0314:	f000 faa8 	bl	80a0868 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  http.put(request, response, headers);

}
 80a0318:	b007      	add	sp, #28
 80a031a:	bd30      	pop	{r4, r5, pc}
 80a031c:	080a40d0 	.word	0x080a40d0
 80a0320:	200000a8 	.word	0x200000a8
 80a0324:	20000088 	.word	0x20000088
 80a0328:	20000ca8 	.word	0x20000ca8
 80a032c:	080a40e4 	.word	0x080a40e4
 80a0330:	20000cf4 	.word	0x20000cf4
 80a0334:	20000000 	.word	0x20000000
 80a0338:	200000f0 	.word	0x200000f0

080a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a033c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a033e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0340:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0342:	b17c      	cbz	r4, 80a0364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0344:	6863      	ldr	r3, [r4, #4]
 80a0346:	3b01      	subs	r3, #1
 80a0348:	6063      	str	r3, [r4, #4]
 80a034a:	b95b      	cbnz	r3, 80a0364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a034c:	6823      	ldr	r3, [r4, #0]
 80a034e:	4620      	mov	r0, r4
 80a0350:	689b      	ldr	r3, [r3, #8]
 80a0352:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0354:	68a3      	ldr	r3, [r4, #8]
 80a0356:	3b01      	subs	r3, #1
 80a0358:	60a3      	str	r3, [r4, #8]
 80a035a:	b91b      	cbnz	r3, 80a0364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a035c:	6823      	ldr	r3, [r4, #0]
 80a035e:	4620      	mov	r0, r4
 80a0360:	68db      	ldr	r3, [r3, #12]
 80a0362:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0364:	4628      	mov	r0, r5
 80a0366:	bd38      	pop	{r3, r4, r5, pc}

080a0368 <loop>:
void loop() {
 80a0368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  analogvalue = analogRead(SENSOR_PIN);
 80a036c:	200a      	movs	r0, #10
void loop() {
 80a036e:	b088      	sub	sp, #32
  analogvalue = analogRead(SENSOR_PIN);
 80a0370:	f003 fb94 	bl	80a3a9c <analogRead>
  lightStatus = false;
 80a0374:	2300      	movs	r3, #0
  analogvalue = analogRead(SENSOR_PIN);
 80a0376:	4f43      	ldr	r7, [pc, #268]	; (80a0484 <loop+0x11c>)
  lightStatus = false;
 80a0378:	4d43      	ldr	r5, [pc, #268]	; (80a0488 <loop+0x120>)
  analogvalue = analogRead(SENSOR_PIN);
 80a037a:	6038      	str	r0, [r7, #0]
  lightStatus = false;
 80a037c:	702b      	strb	r3, [r5, #0]
  getLights();
 80a037e:	f7ff ff3b 	bl	80a01f8 <_Z9getLightsv>
  Serial.println("HUE DATA");
 80a0382:	f003 f9a7 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0386:	4941      	ldr	r1, [pc, #260]	; (80a048c <loop+0x124>)
 80a0388:	f002 fc55 	bl	80a2c36 <_ZN5Print7printlnEPKc>
  Serial.println(hue);
 80a038c:	f003 f9a2 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0390:	4b3f      	ldr	r3, [pc, #252]	; (80a0490 <loop+0x128>)
 80a0392:	46b8      	mov	r8, r7
 80a0394:	681c      	ldr	r4, [r3, #0]
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a0396:	462f      	mov	r7, r5
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0398:	2c00      	cmp	r4, #0
 80a039a:	4606      	mov	r6, r0
 80a039c:	461d      	mov	r5, r3
 80a039e:	da3e      	bge.n	80a041e <loop+0xb6>
            t = print('-');
 80a03a0:	212d      	movs	r1, #45	; 0x2d
 80a03a2:	f002 fc39 	bl	80a2c18 <_ZN5Print5printEc>
            val = -n;
 80a03a6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a03a8:	220a      	movs	r2, #10
 80a03aa:	4630      	mov	r0, r6
 80a03ac:	f002 fc4d 	bl	80a2c4a <_ZN5Print11printNumberEmh>
        n += println();
 80a03b0:	4630      	mov	r0, r6
 80a03b2:	f002 fc34 	bl	80a2c1e <_ZN5Print7printlnEv>
  Serial.println();
 80a03b6:	f003 f98d 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a03ba:	f002 fc30 	bl	80a2c1e <_ZN5Print7printlnEv>
  if (hue == 8418)
 80a03be:	f242 03e2 	movw	r3, #8418	; 0x20e2
 80a03c2:	682a      	ldr	r2, [r5, #0]
 80a03c4:	429a      	cmp	r2, r3
 80a03c6:	d027      	beq.n	80a0418 <loop+0xb0>
  }else if(lightStatus == true){
 80a03c8:	783b      	ldrb	r3, [r7, #0]
 80a03ca:	b30b      	cbz	r3, 80a0410 <loop+0xa8>
    if (analogvalue >= 8 && analogvalue < 10)
 80a03cc:	f8d8 3000 	ldr.w	r3, [r8]
 80a03d0:	f1a3 0208 	sub.w	r2, r3, #8
 80a03d4:	2a01      	cmp	r2, #1
 80a03d6:	d824      	bhi.n	80a0422 <loop+0xba>
      Particle.publish("Dusk");
 80a03d8:	492e      	ldr	r1, [pc, #184]	; (80a0494 <loop+0x12c>)
 80a03da:	a804      	add	r0, sp, #16
 80a03dc:	f7ff fea6 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a03e0:	a805      	add	r0, sp, #20
 80a03e2:	f7ff ffab 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      last = "Dusk";
 80a03e6:	492b      	ldr	r1, [pc, #172]	; (80a0494 <loop+0x12c>)
 80a03e8:	482b      	ldr	r0, [pc, #172]	; (80a0498 <loop+0x130>)
 80a03ea:	f002 fd3f 	bl	80a2e6c <_ZN6StringaSEPKc>
      String command = "{\"on\": true, \"scene\": \"dpRaqSDvH6m0nx2\", \"transitiontime\": 30}";
 80a03ee:	4668      	mov	r0, sp
 80a03f0:	492a      	ldr	r1, [pc, #168]	; (80a049c <loop+0x134>)
 80a03f2:	f002 fce6 	bl	80a2dc2 <_ZN6StringC1EPKc>
      setHueLights(command);
 80a03f6:	4669      	mov	r1, sp
 80a03f8:	a804      	add	r0, sp, #16
 80a03fa:	f002 fd2c 	bl	80a2e56 <_ZN6StringC1ERKS_>
 80a03fe:	a804      	add	r0, sp, #16
 80a0400:	f7ff ff66 	bl	80a02d0 <_Z12setHueLights6String>
 80a0404:	a804      	add	r0, sp, #16
 80a0406:	f002 fc92 	bl	80a2d2e <_ZN6StringD1Ev>
      String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a040a:	4668      	mov	r0, sp
 80a040c:	f002 fc8f 	bl	80a2d2e <_ZN6StringD1Ev>
  delay(2000);
 80a0410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0414:	f000 fe30 	bl	80a1078 <delay>
}
 80a0418:	b008      	add	sp, #32
 80a041a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 80a041e:	4621      	mov	r1, r4
 80a0420:	e7c2      	b.n	80a03a8 <loop+0x40>
    else if (analogvalue >= 4 && analogvalue < 8)
 80a0422:	1f1a      	subs	r2, r3, #4
 80a0424:	2a03      	cmp	r2, #3
 80a0426:	d80f      	bhi.n	80a0448 <loop+0xe0>
      Particle.publish("Dusk 2");
 80a0428:	491d      	ldr	r1, [pc, #116]	; (80a04a0 <loop+0x138>)
 80a042a:	a804      	add	r0, sp, #16
 80a042c:	f7ff fe7e 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0430:	a805      	add	r0, sp, #20
 80a0432:	f7ff ff83 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      String command = "{\"on\": true, \"scene\": \"O2PwRXlDLslyAId\", \"transitiontime\": 30}";
 80a0436:	491b      	ldr	r1, [pc, #108]	; (80a04a4 <loop+0x13c>)
 80a0438:	4668      	mov	r0, sp
 80a043a:	f002 fcc2 	bl	80a2dc2 <_ZN6StringC1EPKc>
      last = "Dusk 2";
 80a043e:	4918      	ldr	r1, [pc, #96]	; (80a04a0 <loop+0x138>)
      last = "Day";
 80a0440:	4815      	ldr	r0, [pc, #84]	; (80a0498 <loop+0x130>)
 80a0442:	f002 fd13 	bl	80a2e6c <_ZN6StringaSEPKc>
 80a0446:	e7d6      	b.n	80a03f6 <loop+0x8e>
    else if (analogvalue <= 2 && analogvalue < 4)
 80a0448:	2b02      	cmp	r3, #2
 80a044a:	dc0c      	bgt.n	80a0466 <loop+0xfe>
      Particle.publish("Night");
 80a044c:	4916      	ldr	r1, [pc, #88]	; (80a04a8 <loop+0x140>)
 80a044e:	a804      	add	r0, sp, #16
 80a0450:	f7ff fe6c 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0454:	a805      	add	r0, sp, #20
 80a0456:	f7ff ff71 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      String command = "{\"on\": true, \"scene\": \"bbI-AG7rdXVVyxI\", \"transitiontime\": 30}";
 80a045a:	4914      	ldr	r1, [pc, #80]	; (80a04ac <loop+0x144>)
 80a045c:	4668      	mov	r0, sp
 80a045e:	f002 fcb0 	bl	80a2dc2 <_ZN6StringC1EPKc>
      last = "Night";
 80a0462:	4911      	ldr	r1, [pc, #68]	; (80a04a8 <loop+0x140>)
 80a0464:	e7ec      	b.n	80a0440 <loop+0xd8>
    else if (analogvalue >= 10)
 80a0466:	2b09      	cmp	r3, #9
 80a0468:	ddd2      	ble.n	80a0410 <loop+0xa8>
      Particle.publish("DAY");
 80a046a:	4911      	ldr	r1, [pc, #68]	; (80a04b0 <loop+0x148>)
 80a046c:	a804      	add	r0, sp, #16
 80a046e:	f7ff fe5d 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0472:	a805      	add	r0, sp, #20
 80a0474:	f7ff ff62 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0478:	490e      	ldr	r1, [pc, #56]	; (80a04b4 <loop+0x14c>)
 80a047a:	4668      	mov	r0, sp
 80a047c:	f002 fca1 	bl	80a2dc2 <_ZN6StringC1EPKc>
      last = "Day";
 80a0480:	490d      	ldr	r1, [pc, #52]	; (80a04b8 <loop+0x150>)
 80a0482:	e7dd      	b.n	80a0440 <loop+0xd8>
 80a0484:	200000ec 	.word	0x200000ec
 80a0488:	20000534 	.word	0x20000534
 80a048c:	080a40e8 	.word	0x080a40e8
 80a0490:	20000010 	.word	0x20000010
 80a0494:	080a40f1 	.word	0x080a40f1
 80a0498:	20000524 	.word	0x20000524
 80a049c:	080a40f6 	.word	0x080a40f6
 80a04a0:	080a4135 	.word	0x080a4135
 80a04a4:	080a413c 	.word	0x080a413c
 80a04a8:	080a417b 	.word	0x080a417b
 80a04ac:	080a4181 	.word	0x080a4181
 80a04b0:	080a41c0 	.word	0x080a41c0
 80a04b4:	080a41c4 	.word	0x080a41c4
 80a04b8:	080a4203 	.word	0x080a4203

080a04bc <_ZN10HttpClientD1Ev>:
class HttpClient {
 80a04bc:	b510      	push	{r4, lr}
 80a04be:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a04c0:	4b03      	ldr	r3, [pc, #12]	; (80a04d0 <_ZN10HttpClientD1Ev+0x14>)
 80a04c2:	f840 3b18 	str.w	r3, [r0], #24
 80a04c6:	f7ff ff39 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a04ca:	4620      	mov	r0, r4
 80a04cc:	bd10      	pop	{r4, pc}
 80a04ce:	bf00      	nop
 80a04d0:	080a44e8 	.word	0x080a44e8

080a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a04d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a04d6:	2614      	movs	r6, #20
 80a04d8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a04dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a04de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a04e2:	42ae      	cmp	r6, r5
 80a04e4:	d004      	beq.n	80a04f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a04e6:	4628      	mov	r0, r5
 80a04e8:	f002 fc21 	bl	80a2d2e <_ZN6StringD1Ev>
 80a04ec:	3514      	adds	r5, #20
 80a04ee:	e7f8      	b.n	80a04e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a04f0:	6820      	ldr	r0, [r4, #0]
 80a04f2:	f000 fd91 	bl	80a1018 <free>
    AllocatorT::free(data_);
}
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	bd70      	pop	{r4, r5, r6, pc}

080a04fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a04fa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a04fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04fe:	4604      	mov	r4, r0
 80a0500:	460d      	mov	r5, r1
 80a0502:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a0504:	d916      	bls.n	80a0534 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0506:	4290      	cmp	r0, r2
 80a0508:	d215      	bcs.n	80a0536 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a050a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a050e:	1a75      	subs	r5, r6, r1
 80a0510:	f1a1 0714 	sub.w	r7, r1, #20
 80a0514:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a0516:	42b7      	cmp	r7, r6
 80a0518:	d01c      	beq.n	80a0554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a051a:	b12c      	cbz	r4, 80a0528 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a051c:	4631      	mov	r1, r6
 80a051e:	4620      	mov	r0, r4
 80a0520:	f002 fc7f 	bl	80a2e22 <_ZN6StringC1EOS_>
 80a0524:	7c33      	ldrb	r3, [r6, #16]
 80a0526:	7423      	strb	r3, [r4, #16]
 80a0528:	4630      	mov	r0, r6
 80a052a:	f002 fc00 	bl	80a2d2e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a052e:	3e14      	subs	r6, #20
 80a0530:	3c14      	subs	r4, #20
 80a0532:	e7f0      	b.n	80a0516 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a0534:	d00e      	beq.n	80a0554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0536:	42b5      	cmp	r5, r6
 80a0538:	d00c      	beq.n	80a0554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a053a:	b12c      	cbz	r4, 80a0548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a053c:	4629      	mov	r1, r5
 80a053e:	4620      	mov	r0, r4
 80a0540:	f002 fc6f 	bl	80a2e22 <_ZN6StringC1EOS_>
 80a0544:	7c2b      	ldrb	r3, [r5, #16]
 80a0546:	7423      	strb	r3, [r4, #16]
 80a0548:	4628      	mov	r0, r5
 80a054a:	f002 fbf0 	bl	80a2d2e <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a054e:	3514      	adds	r5, #20
 80a0550:	3414      	adds	r4, #20
 80a0552:	e7f0      	b.n	80a0536 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a0554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a0556:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a055c:	e9c0 3300 	strd	r3, r3, [r0]
 80a0560:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0562:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0564:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0566:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0568:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a056a:	dd24      	ble.n	80a05b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a056c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a0570:	fb08 f007 	mul.w	r0, r8, r7
 80a0574:	f000 fd48 	bl	80a1008 <malloc>
            if (!d) {
 80a0578:	4605      	mov	r5, r0
 80a057a:	b1e0      	cbz	r0, 80a05b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a057c:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a0580:	fb08 1202 	mla	r2, r8, r2, r1
 80a0584:	f7ff ffb9 	bl	80a04fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a0588:	6820      	ldr	r0, [r4, #0]
 80a058a:	f000 fd45 	bl	80a1018 <free>
        data_ = d;
 80a058e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a0590:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a0592:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a0596:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a059a:	45b8      	cmp	r8, r7
 80a059c:	d009      	beq.n	80a05b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a059e:	4639      	mov	r1, r7
 80a05a0:	4628      	mov	r0, r5
 80a05a2:	f002 fc58 	bl	80a2e56 <_ZN6StringC1ERKS_>
 80a05a6:	7c3b      	ldrb	r3, [r7, #16]
 80a05a8:	3514      	adds	r5, #20
 80a05aa:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a05ae:	3714      	adds	r7, #20
 80a05b0:	e7f3      	b.n	80a059a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a05b2:	6873      	ldr	r3, [r6, #4]
 80a05b4:	6063      	str	r3, [r4, #4]
}
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a05bc <_GLOBAL__sub_I_logHandler>:
}
 80a05bc:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
 80a05be:	2400      	movs	r4, #0
 80a05c0:	4b6d      	ldr	r3, [pc, #436]	; (80a0778 <_GLOBAL__sub_I_logHandler+0x1bc>)
 80a05c2:	b08f      	sub	sp, #60	; 0x3c
 80a05c4:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a05c6:	4621      	mov	r1, r4
 80a05c8:	2001      	movs	r0, #1
 80a05ca:	f000 fc71 	bl	80a0eb0 <system_thread_set_state>
        capacity_(0) {
 80a05ce:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a05d2:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 80a05d4:	f003 f87e 	bl	80a36d4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a05d8:	4d68      	ldr	r5, [pc, #416]	; (80a077c <_GLOBAL__sub_I_logHandler+0x1c0>)
 80a05da:	4604      	mov	r4, r0
 80a05dc:	462e      	mov	r6, r5
 80a05de:	a902      	add	r1, sp, #8
 80a05e0:	a805      	add	r0, sp, #20
 80a05e2:	f7ff ffb8 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a05e6:	a905      	add	r1, sp, #20
 80a05e8:	a808      	add	r0, sp, #32
 80a05ea:	f7ff ffb4 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a05ee:	4b64      	ldr	r3, [pc, #400]	; (80a0780 <_GLOBAL__sub_I_logHandler+0x1c4>)
 80a05f0:	a908      	add	r1, sp, #32
 80a05f2:	f846 3b04 	str.w	r3, [r6], #4
 80a05f6:	a80b      	add	r0, sp, #44	; 0x2c
 80a05f8:	f7ff ffad 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a05fc:	aa0b      	add	r2, sp, #44	; 0x2c
 80a05fe:	211e      	movs	r1, #30
 80a0600:	4630      	mov	r0, r6
 80a0602:	f001 ff47 	bl	80a2494 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0606:	a80b      	add	r0, sp, #44	; 0x2c
 80a0608:	f7ff ff64 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a060c:	a808      	add	r0, sp, #32
 80a060e:	f7ff ff61 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0612:	4b5c      	ldr	r3, [pc, #368]	; (80a0784 <_GLOBAL__sub_I_logHandler+0x1c8>)
 80a0614:	622c      	str	r4, [r5, #32]
 80a0616:	602b      	str	r3, [r5, #0]
 80a0618:	a805      	add	r0, sp, #20
 80a061a:	f7ff ff5b 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a061e:	4b5a      	ldr	r3, [pc, #360]	; (80a0788 <_GLOBAL__sub_I_logHandler+0x1cc>)
SerialLogHandler logHandler;
 80a0620:	4c5a      	ldr	r4, [pc, #360]	; (80a078c <_GLOBAL__sub_I_logHandler+0x1d0>)
 80a0622:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a0624:	f003 f856 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a0628:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a062c:	f003 f834 	bl	80a3698 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0630:	f001 fbca 	bl	80a1dc8 <_ZN5spark10LogManager8instanceEv>
 80a0634:	4629      	mov	r1, r5
 80a0636:	f001 fec0 	bl	80a23ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a063a:	4e55      	ldr	r6, [pc, #340]	; (80a0790 <_GLOBAL__sub_I_logHandler+0x1d4>)
SerialLogHandler logHandler;
 80a063c:	a802      	add	r0, sp, #8
 80a063e:	f7ff ff49 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0642:	4622      	mov	r2, r4
 80a0644:	4628      	mov	r0, r5
 80a0646:	4953      	ldr	r1, [pc, #332]	; (80a0794 <_GLOBAL__sub_I_logHandler+0x1d8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0648:	4d53      	ldr	r5, [pc, #332]	; (80a0798 <_GLOBAL__sub_I_logHandler+0x1dc>)
SerialLogHandler logHandler;
 80a064a:	f003 fa97 	bl	80a3b7c <__aeabi_atexit>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a064e:	4630      	mov	r0, r6
 80a0650:	4952      	ldr	r1, [pc, #328]	; (80a079c <_GLOBAL__sub_I_logHandler+0x1e0>)
 80a0652:	f002 fbb6 	bl	80a2dc2 <_ZN6StringC1EPKc>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0656:	4f52      	ldr	r7, [pc, #328]	; (80a07a0 <_GLOBAL__sub_I_logHandler+0x1e4>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a0658:	4630      	mov	r0, r6
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a065a:	4e52      	ldr	r6, [pc, #328]	; (80a07a4 <_GLOBAL__sub_I_logHandler+0x1e8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a065c:	4622      	mov	r2, r4
 80a065e:	4629      	mov	r1, r5
 80a0660:	f003 fa8c 	bl	80a3b7c <__aeabi_atexit>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0664:	4639      	mov	r1, r7
 80a0666:	4630      	mov	r0, r6
 80a0668:	f002 fbab 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a066c:	4630      	mov	r0, r6
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a066e:	4e4e      	ldr	r6, [pc, #312]	; (80a07a8 <_GLOBAL__sub_I_logHandler+0x1ec>)
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a0670:	4622      	mov	r2, r4
 80a0672:	4629      	mov	r1, r5
 80a0674:	f003 fa82 	bl	80a3b7c <__aeabi_atexit>
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0678:	4639      	mov	r1, r7
 80a067a:	4630      	mov	r0, r6
 80a067c:	f002 fba1 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0680:	4630      	mov	r0, r6
const String LIGHT_PATH = "/groups/3/action";
 80a0682:	4e4a      	ldr	r6, [pc, #296]	; (80a07ac <_GLOBAL__sub_I_logHandler+0x1f0>)
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0684:	4622      	mov	r2, r4
 80a0686:	4629      	mov	r1, r5
 80a0688:	f003 fa78 	bl	80a3b7c <__aeabi_atexit>
const String LIGHT_PATH = "/groups/3/action";
 80a068c:	4630      	mov	r0, r6
 80a068e:	4948      	ldr	r1, [pc, #288]	; (80a07b0 <_GLOBAL__sub_I_logHandler+0x1f4>)
 80a0690:	f002 fb97 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0694:	4630      	mov	r0, r6
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0696:	4e47      	ldr	r6, [pc, #284]	; (80a07b4 <_GLOBAL__sub_I_logHandler+0x1f8>)
const String LIGHT_PATH = "/groups/3/action";
 80a0698:	4622      	mov	r2, r4
 80a069a:	4629      	mov	r1, r5
 80a069c:	f003 fa6e 	bl	80a3b7c <__aeabi_atexit>
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a06a0:	4630      	mov	r0, r6
 80a06a2:	4945      	ldr	r1, [pc, #276]	; (80a07b8 <_GLOBAL__sub_I_logHandler+0x1fc>)
 80a06a4:	f002 fb8d 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a06a8:	4630      	mov	r0, r6
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06aa:	4e44      	ldr	r6, [pc, #272]	; (80a07bc <_GLOBAL__sub_I_logHandler+0x200>)
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a06ac:	4622      	mov	r2, r4
 80a06ae:	4629      	mov	r1, r5
 80a06b0:	f003 fa64 	bl	80a3b7c <__aeabi_atexit>
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06b4:	4630      	mov	r0, r6
 80a06b6:	4942      	ldr	r1, [pc, #264]	; (80a07c0 <_GLOBAL__sub_I_logHandler+0x204>)
 80a06b8:	f002 fb83 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a06bc:	4630      	mov	r0, r6
HttpClient http;
 80a06be:	4e41      	ldr	r6, [pc, #260]	; (80a07c4 <_GLOBAL__sub_I_logHandler+0x208>)
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a06c0:	4622      	mov	r2, r4
 80a06c2:	4629      	mov	r1, r5
 80a06c4:	f003 fa5a 	bl	80a3b7c <__aeabi_atexit>
HttpClient http;
 80a06c8:	4630      	mov	r0, r6
 80a06ca:	f000 f897 	bl	80a07fc <_ZN10HttpClientC1Ev>
 80a06ce:	4622      	mov	r2, r4
 80a06d0:	4630      	mov	r0, r6
 80a06d2:	493d      	ldr	r1, [pc, #244]	; (80a07c8 <_GLOBAL__sub_I_logHandler+0x20c>)
 80a06d4:	f003 fa52 	bl	80a3b7c <__aeabi_atexit>
IPAddress hueIP(192, 168, 1, 157);
 80a06d8:	239d      	movs	r3, #157	; 0x9d
 80a06da:	4e3c      	ldr	r6, [pc, #240]	; (80a07cc <_GLOBAL__sub_I_logHandler+0x210>)
 80a06dc:	9300      	str	r3, [sp, #0]
 80a06de:	22a8      	movs	r2, #168	; 0xa8
 80a06e0:	2301      	movs	r3, #1
 80a06e2:	21c0      	movs	r1, #192	; 0xc0
 80a06e4:	4630      	mov	r0, r6
 80a06e6:	f001 f829 	bl	80a173c <_ZN9IPAddressC1Ehhhh>
} http_request_t;
 80a06ea:	4f39      	ldr	r7, [pc, #228]	; (80a07d0 <_GLOBAL__sub_I_logHandler+0x214>)
 80a06ec:	4630      	mov	r0, r6
 80a06ee:	4e39      	ldr	r6, [pc, #228]	; (80a07d4 <_GLOBAL__sub_I_logHandler+0x218>)
 80a06f0:	4622      	mov	r2, r4
 80a06f2:	4939      	ldr	r1, [pc, #228]	; (80a07d8 <_GLOBAL__sub_I_logHandler+0x21c>)
 80a06f4:	f003 fa42 	bl	80a3b7c <__aeabi_atexit>
 80a06f8:	4639      	mov	r1, r7
 80a06fa:	4630      	mov	r0, r6
 80a06fc:	f002 fb61 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0700:	f106 0010 	add.w	r0, r6, #16
 80a0704:	f000 ffe4 	bl	80a16d0 <_ZN9IPAddressC1Ev>
 80a0708:	4639      	mov	r1, r7
 80a070a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80a070e:	f002 fb58 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0712:	4639      	mov	r1, r7
 80a0714:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 80a0718:	f002 fb53 	bl	80a2dc2 <_ZN6StringC1EPKc>
http_request_t request;
 80a071c:	4630      	mov	r0, r6
} http_response_t;
 80a071e:	4e2f      	ldr	r6, [pc, #188]	; (80a07dc <_GLOBAL__sub_I_logHandler+0x220>)
 80a0720:	4622      	mov	r2, r4
 80a0722:	492f      	ldr	r1, [pc, #188]	; (80a07e0 <_GLOBAL__sub_I_logHandler+0x224>)
 80a0724:	f003 fa2a 	bl	80a3b7c <__aeabi_atexit>
 80a0728:	4639      	mov	r1, r7
 80a072a:	1d30      	adds	r0, r6, #4
 80a072c:	f002 fb49 	bl	80a2dc2 <_ZN6StringC1EPKc>
http_response_t response;
 80a0730:	4622      	mov	r2, r4
 80a0732:	4630      	mov	r0, r6
 80a0734:	492b      	ldr	r1, [pc, #172]	; (80a07e4 <_GLOBAL__sub_I_logHandler+0x228>)
 80a0736:	f003 fa21 	bl	80a3b7c <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a073a:	2332      	movs	r3, #50	; 0x32
 80a073c:	4e2a      	ldr	r6, [pc, #168]	; (80a07e8 <_GLOBAL__sub_I_logHandler+0x22c>)
 80a073e:	9300      	str	r3, [sp, #0]
 80a0740:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 80a0744:	f206 432c 	addw	r3, r6, #1068	; 0x42c
 80a0748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a074c:	4630      	mov	r0, r6
 80a074e:	f000 f9e5 	bl	80a0b1c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 80a0752:	4b26      	ldr	r3, [pc, #152]	; (80a07ec <_GLOBAL__sub_I_logHandler+0x230>)
JsonParserStatic<1024, 50> parse1;
 80a0754:	4630      	mov	r0, r6
 80a0756:	6033      	str	r3, [r6, #0]
String last = "null";
 80a0758:	4e25      	ldr	r6, [pc, #148]	; (80a07f0 <_GLOBAL__sub_I_logHandler+0x234>)
JsonParserStatic<1024, 50> parse1;
 80a075a:	4622      	mov	r2, r4
 80a075c:	4925      	ldr	r1, [pc, #148]	; (80a07f4 <_GLOBAL__sub_I_logHandler+0x238>)
 80a075e:	f003 fa0d 	bl	80a3b7c <__aeabi_atexit>
String last = "null";
 80a0762:	4630      	mov	r0, r6
 80a0764:	4924      	ldr	r1, [pc, #144]	; (80a07f8 <_GLOBAL__sub_I_logHandler+0x23c>)
 80a0766:	f002 fb2c 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a076a:	4622      	mov	r2, r4
 80a076c:	4629      	mov	r1, r5
 80a076e:	4630      	mov	r0, r6
 80a0770:	f003 fa04 	bl	80a3b7c <__aeabi_atexit>
}
 80a0774:	b00f      	add	sp, #60	; 0x3c
 80a0776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0778:	200000e8 	.word	0x200000e8
 80a077c:	20000538 	.word	0x20000538
 80a0780:	080a4274 	.word	0x080a4274
 80a0784:	080a440c 	.word	0x080a440c
 80a0788:	080a428c 	.word	0x080a428c
 80a078c:	20000084 	.word	0x20000084
 80a0790:	200000a8 	.word	0x200000a8
 80a0794:	080a014d 	.word	0x080a014d
 80a0798:	080a2d2f 	.word	0x080a2d2f
 80a079c:	080a4207 	.word	0x080a4207
 80a07a0:	080a4230 	.word	0x080a4230
 80a07a4:	200000b8 	.word	0x200000b8
 80a07a8:	200000c8 	.word	0x200000c8
 80a07ac:	20000088 	.word	0x20000088
 80a07b0:	080a423a 	.word	0x080a423a
 80a07b4:	20000098 	.word	0x20000098
 80a07b8:	080a41c4 	.word	0x080a41c4
 80a07bc:	200000d8 	.word	0x200000d8
 80a07c0:	080a424b 	.word	0x080a424b
 80a07c4:	200000f0 	.word	0x200000f0
 80a07c8:	080a04bd 	.word	0x080a04bd
 80a07cc:	2000050c 	.word	0x2000050c
 80a07d0:	080a42f1 	.word	0x080a42f1
 80a07d4:	20000ca8 	.word	0x20000ca8
 80a07d8:	080a00c9 	.word	0x080a00c9
 80a07dc:	20000cf4 	.word	0x20000cf4
 80a07e0:	080a00e3 	.word	0x080a00e3
 80a07e4:	080a00d5 	.word	0x080a00d5
 80a07e8:	2000055c 	.word	0x2000055c
 80a07ec:	080a42a4 	.word	0x080a42a4
 80a07f0:	20000524 	.word	0x20000524
 80a07f4:	080a0101 	.word	0x080a0101
 80a07f8:	080a4267 	.word	0x080a4267

080a07fc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a07fc:	b510      	push	{r4, lr}
 80a07fe:	4604      	mov	r4, r0
 80a0800:	f002 fe1e 	bl	80a3440 <_ZN9TCPClientC1Ev>
{

}
 80a0804:	4620      	mov	r0, r4
 80a0806:	bd10      	pop	{r4, pc}

080a0808 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0808:	b538      	push	{r3, r4, r5, lr}
 80a080a:	4604      	mov	r4, r0
 80a080c:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a080e:	f002 f9ff 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0812:	4620      	mov	r0, r4
 80a0814:	4904      	ldr	r1, [pc, #16]	; (80a0828 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a0816:	f002 f9fb 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a081a:	4629      	mov	r1, r5
 80a081c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a081e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
 80a0822:	f002 ba08 	b.w	80a2c36 <_ZN5Print7printlnEPKc>
 80a0826:	bf00      	nop
 80a0828:	080a43b7 	.word	0x080a43b7

080a082c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a082c:	b538      	push	{r3, r4, r5, lr}
 80a082e:	4605      	mov	r5, r0
 80a0830:	4614      	mov	r4, r2
    client.print(aHeaderName);
 80a0832:	f002 f9ed 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0836:	4628      	mov	r0, r5
 80a0838:	490a      	ldr	r1, [pc, #40]	; (80a0864 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
 80a083a:	f002 f9e9 	bl	80a2c10 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
 80a083e:	2c00      	cmp	r4, #0
 80a0840:	da0d      	bge.n	80a085e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
 80a0842:	212d      	movs	r1, #45	; 0x2d
 80a0844:	4628      	mov	r0, r5
 80a0846:	f002 f9e7 	bl	80a2c18 <_ZN5Print5printEc>
            val = -n;
 80a084a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a084c:	4628      	mov	r0, r5
 80a084e:	220a      	movs	r2, #10
 80a0850:	f002 f9fb 	bl	80a2c4a <_ZN5Print11printNumberEmh>
        n += println();
 80a0854:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a085a:	f002 b9e0 	b.w	80a2c1e <_ZN5Print7printlnEv>
            val = n;
 80a085e:	4621      	mov	r1, r4
 80a0860:	e7f4      	b.n	80a084c <_ZN10HttpClient10sendHeaderEPKci+0x20>
 80a0862:	bf00      	nop
 80a0864:	080a43b7 	.word	0x080a43b7

080a0868 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a086c:	460e      	mov	r6, r1
 80a086e:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 80a0874:	b091      	sub	sp, #68	; 0x44
    aResponse.status = -1;
 80a0876:	6013      	str	r3, [r2, #0]
{
 80a0878:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a087a:	2100      	movs	r1, #0
 80a087c:	4630      	mov	r0, r6
 80a087e:	4617      	mov	r7, r2
 80a0880:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80a0884:	f002 fb2a 	bl	80a2edc <_ZNK6String6equalsEPKc>
 80a0888:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a088c:	4603      	mov	r3, r0
 80a088e:	b998      	cbnz	r0, 80a08b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
 80a0890:	f1be 0f00 	cmp.w	lr, #0
 80a0894:	bf14      	ite	ne
 80a0896:	4672      	movne	r2, lr
 80a0898:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a089a:	4620      	mov	r0, r4
 80a089c:	6831      	ldr	r1, [r6, #0]
 80a089e:	b292      	uxth	r2, r2
 80a08a0:	f002 fde6 	bl	80a3470 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a08a4:	1e05      	subs	r5, r0, #0
 80a08a6:	bf18      	it	ne
 80a08a8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a08aa:	b9c5      	cbnz	r5, 80a08de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	f002 fd17 	bl	80a32e0 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a08b2:	b011      	add	sp, #68	; 0x44
 80a08b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a08b8:	4b74      	ldr	r3, [pc, #464]	; (80a0a8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a08ba:	ad0b      	add	r5, sp, #44	; 0x2c
 80a08bc:	f106 0c14 	add.w	ip, r6, #20
 80a08c0:	930a      	str	r3, [sp, #40]	; 0x28
 80a08c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a08c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a08c8:	f8dc 3000 	ldr.w	r3, [ip]
        connected = client.connect(aRequest.ip, aRequest.port);
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	702b      	strb	r3, [r5, #0]
 80a08d0:	fa1f f28e 	uxth.w	r2, lr
 80a08d4:	2300      	movs	r3, #0
 80a08d6:	a90a      	add	r1, sp, #40	; 0x28
 80a08d8:	f002 fc58 	bl	80a318c <_ZN9TCPClient7connectE9IPAddresstm>
 80a08dc:	e7e2      	b.n	80a08a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
 80a08de:	4649      	mov	r1, r9
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	f002 f995 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.print(" ");
 80a08e6:	496a      	ldr	r1, [pc, #424]	; (80a0a90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	f002 f991 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a08ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	f002 f98d 	bl	80a2c10 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a08f6:	4967      	ldr	r1, [pc, #412]	; (80a0a94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a08f8:	4620      	mov	r0, r4
 80a08fa:	f002 f989 	bl	80a2c10 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a08fe:	4620      	mov	r0, r4
 80a0900:	4965      	ldr	r1, [pc, #404]	; (80a0a98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a0902:	4a66      	ldr	r2, [pc, #408]	; (80a0a9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a0904:	f7ff ff80 	bl	80a0808 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0908:	2100      	movs	r1, #0
 80a090a:	4630      	mov	r0, r6
 80a090c:	f002 fae6 	bl	80a2edc <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a0910:	b920      	cbnz	r0, 80a091c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a0912:	4620      	mov	r0, r4
 80a0914:	6832      	ldr	r2, [r6, #0]
 80a0916:	4962      	ldr	r1, [pc, #392]	; (80a0aa0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
 80a0918:	f7ff ff76 	bl	80a0808 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
 80a091c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
 80a0920:	2100      	movs	r1, #0
 80a0922:	4650      	mov	r0, sl
 80a0924:	f002 fada 	bl	80a2edc <_ZNK6String6equalsEPKc>
 80a0928:	b928      	cbnz	r0, 80a0936 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
 80a092a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
 80a092c:	4620      	mov	r0, r4
 80a092e:	495d      	ldr	r1, [pc, #372]	; (80a0aa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
 80a0930:	f7ff ff7c 	bl	80a082c <_ZN10HttpClient10sendHeaderEPKci>
 80a0934:	e006      	b.n	80a0944 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a0936:	4648      	mov	r0, r9
 80a0938:	495b      	ldr	r1, [pc, #364]	; (80a0aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
 80a093a:	f003 fac2 	bl	80a3ec2 <strcmp>
 80a093e:	4602      	mov	r2, r0
 80a0940:	2800      	cmp	r0, #0
 80a0942:	d0f3      	beq.n	80a092c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
 80a0944:	f1b8 0f00 	cmp.w	r8, #0
 80a0948:	d00e      	beq.n	80a0968 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
 80a094a:	f8d8 1000 	ldr.w	r1, [r8]
 80a094e:	b159      	cbz	r1, 80a0968 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
 80a0950:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a0954:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
 80a0956:	b122      	cbz	r2, 80a0962 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
 80a0958:	f7ff ff56 	bl	80a0808 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
 80a095c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
 80a0960:	e7f3      	b.n	80a094a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
 80a0962:	f002 f968 	bl	80a2c36 <_ZN5Print7printlnEPKc>
}
 80a0966:	e7f9      	b.n	80a095c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
 80a0968:	4620      	mov	r0, r4
 80a096a:	f002 f958 	bl	80a2c1e <_ZN5Print7printlnEv>
    client.flush();
 80a096e:	4620      	mov	r0, r4
 80a0970:	f002 fb55 	bl	80a301e <_ZN9TCPClient5flushEv>
 80a0974:	2100      	movs	r1, #0
 80a0976:	4650      	mov	r0, sl
 80a0978:	f002 fab0 	bl	80a2edc <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
 80a097c:	b918      	cbnz	r0, 80a0986 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
 80a097e:	4620      	mov	r0, r4
 80a0980:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80a0982:	f002 f958 	bl	80a2c36 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
 80a0986:	f104 0a1c 	add.w	sl, r4, #28
 80a098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a098e:	2100      	movs	r1, #0
 80a0990:	4650      	mov	r0, sl
 80a0992:	f003 fa53 	bl	80a3e3c <memset>
    bool error = false;
 80a0996:	f04f 0800 	mov.w	r8, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a099a:	f000 f8ff 	bl	80a0b9c <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
 80a099e:	4646      	mov	r6, r8
 80a09a0:	9001      	str	r0, [sp, #4]
    } while (client.connected() && !timeout && !error);
 80a09a2:	f241 3b88 	movw	fp, #5000	; 0x1388
 80a09a6:	f000 f8f9 	bl	80a0b9c <HAL_Timer_Get_Milli_Seconds>
        while (client.available()) {
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	f002 fc5e 	bl	80a326c <_ZN9TCPClient9availableEv>
 80a09b0:	b1d8      	cbz	r0, 80a09ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	f002 fb9d 	bl	80a30f2 <_ZN9TCPClient4readEv>
 80a09b8:	4681      	mov	r9, r0
 80a09ba:	f000 f8ef 	bl	80a0b9c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
 80a09be:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a09c2:	429e      	cmp	r6, r3
 80a09c4:	9001      	str	r0, [sp, #4]
 80a09c6:	d804      	bhi.n	80a09d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
 80a09c8:	19a3      	adds	r3, r4, r6
            char c = client.read();
 80a09ca:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
 80a09ce:	3601      	adds	r6, #1
        while (client.available()) {
 80a09d0:	e7eb      	b.n	80a09aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a09d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a09d6:	429e      	cmp	r6, r3
 80a09d8:	d1f9      	bne.n	80a09ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a09da:	2300      	movs	r3, #0
                client.stop();
 80a09dc:	4620      	mov	r0, r4
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a09de:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a09e2:	f002 fc7d 	bl	80a32e0 <_ZN9TCPClient4stopEv>
                error = true;
 80a09e6:	46a8      	mov	r8, r5
 80a09e8:	e7f1      	b.n	80a09ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a09ea:	19a3      	adds	r3, r4, r6
 80a09ec:	7718      	strb	r0, [r3, #28]
 80a09ee:	f000 f8d5 	bl	80a0b9c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
 80a09f2:	9b01      	ldr	r3, [sp, #4]
 80a09f4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
 80a09f8:	f1b8 0f00 	cmp.w	r8, #0
 80a09fc:	d104      	bne.n	80a0a08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
 80a09fe:	45d9      	cmp	r9, fp
 80a0a00:	d802      	bhi.n	80a0a08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
 80a0a02:	20c8      	movs	r0, #200	; 0xc8
 80a0a04:	f000 fb38 	bl	80a1078 <delay>
    } while (client.connected() && !timeout && !error);
 80a0a08:	4620      	mov	r0, r4
 80a0a0a:	f002 fcc0 	bl	80a338e <_ZN9TCPClient9connectedEv>
 80a0a0e:	b120      	cbz	r0, 80a0a1a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0a10:	45d9      	cmp	r9, fp
 80a0a12:	d802      	bhi.n	80a0a1a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0a14:	f1b8 0f00 	cmp.w	r8, #0
 80a0a18:	d0c7      	beq.n	80a09aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	f002 fc60 	bl	80a32e0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
 80a0a20:	4651      	mov	r1, sl
 80a0a22:	a802      	add	r0, sp, #8
 80a0a24:	f002 f9cd 	bl	80a2dc2 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
 80a0a28:	230c      	movs	r3, #12
 80a0a2a:	2209      	movs	r2, #9
 80a0a2c:	a902      	add	r1, sp, #8
 80a0a2e:	a806      	add	r0, sp, #24
 80a0a30:	f002 fa78 	bl	80a2f24 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a0a34:	491d      	ldr	r1, [pc, #116]	; (80a0aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
 80a0a36:	a80a      	add	r0, sp, #40	; 0x28
 80a0a38:	f002 f9c3 	bl	80a2dc2 <_ZN6StringC1EPKc>
 80a0a3c:	a90a      	add	r1, sp, #40	; 0x28
 80a0a3e:	a802      	add	r0, sp, #8
 80a0a40:	f002 fa6d 	bl	80a2f1e <_ZNK6String7indexOfERKS_>
 80a0a44:	4604      	mov	r4, r0
 80a0a46:	a80a      	add	r0, sp, #40	; 0x28
 80a0a48:	f002 f971 	bl	80a2d2e <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a0a4c:	1c63      	adds	r3, r4, #1
 80a0a4e:	d106      	bne.n	80a0a5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f6>
    String statusCode = raw_response.substring(9,12);
 80a0a50:	a806      	add	r0, sp, #24
 80a0a52:	f002 f96c 	bl	80a2d2e <_ZN6StringD1Ev>
    String raw_response(buffer);
 80a0a56:	a802      	add	r0, sp, #8
 80a0a58:	f002 f969 	bl	80a2d2e <_ZN6StringD1Ev>
 80a0a5c:	e729      	b.n	80a08b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
 80a0a5e:	1d3d      	adds	r5, r7, #4
 80a0a60:	4913      	ldr	r1, [pc, #76]	; (80a0ab0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
 80a0a62:	4628      	mov	r0, r5
 80a0a64:	f002 fa02 	bl	80a2e6c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0a68:	1d22      	adds	r2, r4, #4
 80a0a6a:	a902      	add	r1, sp, #8
 80a0a6c:	a80a      	add	r0, sp, #40	; 0x28
 80a0a6e:	f002 fa7b 	bl	80a2f68 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0a72:	a90a      	add	r1, sp, #40	; 0x28
 80a0a74:	4628      	mov	r0, r5
 80a0a76:	f002 fa21 	bl	80a2ebc <_ZN6String6concatERKS_>
 80a0a7a:	a80a      	add	r0, sp, #40	; 0x28
 80a0a7c:	f002 f957 	bl	80a2d2e <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0a80:	9806      	ldr	r0, [sp, #24]
 80a0a82:	f003 f99d 	bl	80a3dc0 <atoi>
 80a0a86:	6038      	str	r0, [r7, #0]
 80a0a88:	e7e2      	b.n	80a0a50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
 80a0a8a:	bf00      	nop
 80a0a8c:	080a4360 	.word	0x080a4360
 80a0a90:	080a43b3 	.word	0x080a43b3
 80a0a94:	080a42b7 	.word	0x080a42b7
 80a0a98:	080a42c9 	.word	0x080a42c9
 80a0a9c:	080a42c3 	.word	0x080a42c3
 80a0aa0:	080a42d4 	.word	0x080a42d4
 80a0aa4:	080a42d9 	.word	0x080a42d9
 80a0aa8:	080a42e8 	.word	0x080a42e8
 80a0aac:	080a42ed 	.word	0x080a42ed
 80a0ab0:	080a42f1 	.word	0x080a42f1

080a0ab4 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a0ab4:	b510      	push	{r4, lr}
 80a0ab6:	4b05      	ldr	r3, [pc, #20]	; (80a0acc <_ZN10JsonBufferD1Ev+0x18>)
 80a0ab8:	4604      	mov	r4, r0
 80a0aba:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a0abc:	7c03      	ldrb	r3, [r0, #16]
 80a0abe:	b91b      	cbnz	r3, 80a0ac8 <_ZN10JsonBufferD1Ev+0x14>
 80a0ac0:	6840      	ldr	r0, [r0, #4]
 80a0ac2:	b108      	cbz	r0, 80a0ac8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a0ac4:	f000 faa8 	bl	80a1018 <free>
	}
}
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	bd10      	pop	{r4, pc}
 80a0acc:	080a42fc 	.word	0x080a42fc

080a0ad0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a0ad0:	b510      	push	{r4, lr}
 80a0ad2:	4604      	mov	r4, r0
}
 80a0ad4:	f7ff ffee 	bl	80a0ab4 <_ZN10JsonBufferD1Ev>
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	2114      	movs	r1, #20
 80a0adc:	f003 f853 	bl	80a3b86 <_ZdlPvj>
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	bd10      	pop	{r4, pc}

080a0ae4 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a0ae4:	b510      	push	{r4, lr}
 80a0ae6:	4b07      	ldr	r3, [pc, #28]	; (80a0b04 <_ZN10JsonParserD1Ev+0x20>)
 80a0ae8:	4604      	mov	r4, r0
 80a0aea:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a0aec:	7c03      	ldrb	r3, [r0, #16]
 80a0aee:	b91b      	cbnz	r3, 80a0af8 <_ZN10JsonParserD1Ev+0x14>
 80a0af0:	6940      	ldr	r0, [r0, #20]
 80a0af2:	b108      	cbz	r0, 80a0af8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a0af4:	f000 fa90 	bl	80a1018 <free>
JsonParser::~JsonParser() {
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	f7ff ffdb 	bl	80a0ab4 <_ZN10JsonBufferD1Ev>
	}
}
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	bd10      	pop	{r4, pc}
 80a0b02:	bf00      	nop
 80a0b04:	080a430c 	.word	0x080a430c

080a0b08 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a0b08:	b510      	push	{r4, lr}
 80a0b0a:	4604      	mov	r4, r0
}
 80a0b0c:	f7ff ffea 	bl	80a0ae4 <_ZN10JsonParserD1Ev>
 80a0b10:	4620      	mov	r0, r4
 80a0b12:	212c      	movs	r1, #44	; 0x2c
 80a0b14:	f003 f837 	bl	80a3b86 <_ZdlPvj>
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	bd10      	pop	{r4, pc}

080a0b1c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0b1c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a0b20:	2200      	movs	r2, #0
 80a0b22:	60c2      	str	r2, [r0, #12]
 80a0b24:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a0b26:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0b28:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a0b2a:	6143      	str	r3, [r0, #20]
 80a0b2c:	4a02      	ldr	r2, [pc, #8]	; (80a0b38 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a0b2e:	9b02      	ldr	r3, [sp, #8]
 80a0b30:	6002      	str	r2, [r0, #0]
 80a0b32:	61c3      	str	r3, [r0, #28]
}
 80a0b34:	bd10      	pop	{r4, pc}
 80a0b36:	bf00      	nop
 80a0b38:	080a430c 	.word	0x080a430c

080a0b3c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <os_mutex_recursive_create+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601d0 	.word	0x080601d0

080a0b4c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <os_mutex_recursive_destroy+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601d0 	.word	0x080601d0

080a0b5c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <os_mutex_recursive_lock+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601d0 	.word	0x080601d0

080a0b6c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <os_mutex_recursive_unlock+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601d0 	.word	0x080601d0

080a0b7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <HAL_RNG_GetRandomNumber+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	685b      	ldr	r3, [r3, #4]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	0806019c 	.word	0x0806019c

080a0b8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_Delay_Microseconds+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	68db      	ldr	r3, [r3, #12]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	0806019c 	.word	0x0806019c

080a0b9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	695b      	ldr	r3, [r3, #20]
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	0806019c 	.word	0x0806019c

080a0bac <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <HAL_Validate_Pin_Function+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	685b      	ldr	r3, [r3, #4]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601b0 	.word	0x080601b0

080a0bbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <HAL_Pin_Mode+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	689b      	ldr	r3, [r3, #8]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601b0 	.word	0x080601b0

080a0bcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <HAL_Get_Pin_Mode+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	68db      	ldr	r3, [r3, #12]
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601b0 	.word	0x080601b0

080a0bdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <HAL_GPIO_Write+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	691b      	ldr	r3, [r3, #16]
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601b0 	.word	0x080601b0

080a0bec <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <hal_adc_read+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601b0 	.word	0x080601b0

080a0bfc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <hal_i2c_write+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601ac 	.word	0x080601ac

080a0c0c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <hal_i2c_available+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601ac 	.word	0x080601ac

080a0c1c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <hal_i2c_read+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601ac 	.word	0x080601ac

080a0c2c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <hal_i2c_peek+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601ac 	.word	0x080601ac

080a0c3c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <hal_i2c_flush+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601ac 	.word	0x080601ac

080a0c4c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <hal_i2c_is_enabled+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601ac 	.word	0x080601ac

080a0c5c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b03      	ldr	r3, [pc, #12]	; (80a0c6c <hal_i2c_init+0x10>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0c66:	9301      	str	r3, [sp, #4]
 80a0c68:	bd08      	pop	{r3, pc}
 80a0c6a:	0000      	.short	0x0000
 80a0c6c:	080601ac 	.word	0x080601ac

080a0c70 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0c70:	b508      	push	{r3, lr}
 80a0c72:	4b02      	ldr	r3, [pc, #8]	; (80a0c7c <socket_active_status+0xc>)
 80a0c74:	681b      	ldr	r3, [r3, #0]
 80a0c76:	681b      	ldr	r3, [r3, #0]
 80a0c78:	9301      	str	r3, [sp, #4]
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	080601bc 	.word	0x080601bc

080a0c80 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0c80:	b508      	push	{r3, lr}
 80a0c82:	4b02      	ldr	r3, [pc, #8]	; (80a0c8c <socket_handle_valid+0xc>)
 80a0c84:	681b      	ldr	r3, [r3, #0]
 80a0c86:	685b      	ldr	r3, [r3, #4]
 80a0c88:	9301      	str	r3, [sp, #4]
 80a0c8a:	bd08      	pop	{r3, pc}
 80a0c8c:	080601bc 	.word	0x080601bc

080a0c90 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0c90:	b508      	push	{r3, lr}
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <socket_create+0xc>)
 80a0c94:	681b      	ldr	r3, [r3, #0]
 80a0c96:	689b      	ldr	r3, [r3, #8]
 80a0c98:	9301      	str	r3, [sp, #4]
 80a0c9a:	bd08      	pop	{r3, pc}
 80a0c9c:	080601bc 	.word	0x080601bc

080a0ca0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0ca0:	b508      	push	{r3, lr}
 80a0ca2:	4b02      	ldr	r3, [pc, #8]	; (80a0cac <socket_connect+0xc>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	68db      	ldr	r3, [r3, #12]
 80a0ca8:	9301      	str	r3, [sp, #4]
 80a0caa:	bd08      	pop	{r3, pc}
 80a0cac:	080601bc 	.word	0x080601bc

080a0cb0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b02      	ldr	r3, [pc, #8]	; (80a0cbc <socket_receive+0xc>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	691b      	ldr	r3, [r3, #16]
 80a0cb8:	9301      	str	r3, [sp, #4]
 80a0cba:	bd08      	pop	{r3, pc}
 80a0cbc:	080601bc 	.word	0x080601bc

080a0cc0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0cc0:	b508      	push	{r3, lr}
 80a0cc2:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <socket_close+0xc>)
 80a0cc4:	681b      	ldr	r3, [r3, #0]
 80a0cc6:	6a1b      	ldr	r3, [r3, #32]
 80a0cc8:	9301      	str	r3, [sp, #4]
 80a0cca:	bd08      	pop	{r3, pc}
 80a0ccc:	080601bc 	.word	0x080601bc

080a0cd0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0cd0:	b508      	push	{r3, lr}
 80a0cd2:	4b02      	ldr	r3, [pc, #8]	; (80a0cdc <socket_handle_invalid+0xc>)
 80a0cd4:	681b      	ldr	r3, [r3, #0]
 80a0cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cd8:	9301      	str	r3, [sp, #4]
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	080601bc 	.word	0x080601bc

080a0ce0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <socket_send_ex+0xc>)
 80a0ce4:	681b      	ldr	r3, [r3, #0]
 80a0ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0ce8:	9301      	str	r3, [sp, #4]
 80a0cea:	bd08      	pop	{r3, pc}
 80a0cec:	080601bc 	.word	0x080601bc

080a0cf0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b02      	ldr	r3, [pc, #8]	; (80a0cfc <hal_spi_init+0xc>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	69db      	ldr	r3, [r3, #28]
 80a0cf8:	9301      	str	r3, [sp, #4]
 80a0cfa:	bd08      	pop	{r3, pc}
 80a0cfc:	080601b4 	.word	0x080601b4

080a0d00 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0d00:	b508      	push	{r3, lr}
 80a0d02:	4b02      	ldr	r3, [pc, #8]	; (80a0d0c <hal_spi_is_enabled+0xc>)
 80a0d04:	681b      	ldr	r3, [r3, #0]
 80a0d06:	6a1b      	ldr	r3, [r3, #32]
 80a0d08:	9301      	str	r3, [sp, #4]
 80a0d0a:	bd08      	pop	{r3, pc}
 80a0d0c:	080601b4 	.word	0x080601b4

080a0d10 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0d10:	b508      	push	{r3, lr}
 80a0d12:	4b02      	ldr	r3, [pc, #8]	; (80a0d1c <hal_usart_init+0xc>)
 80a0d14:	681b      	ldr	r3, [r3, #0]
 80a0d16:	699b      	ldr	r3, [r3, #24]
 80a0d18:	9301      	str	r3, [sp, #4]
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	080601c4 	.word	0x080601c4

080a0d20 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0d20:	b508      	push	{r3, lr}
 80a0d22:	4b02      	ldr	r3, [pc, #8]	; (80a0d2c <hal_usart_end+0xc>)
 80a0d24:	681b      	ldr	r3, [r3, #0]
 80a0d26:	6a1b      	ldr	r3, [r3, #32]
 80a0d28:	9301      	str	r3, [sp, #4]
 80a0d2a:	bd08      	pop	{r3, pc}
 80a0d2c:	080601c4 	.word	0x080601c4

080a0d30 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0d30:	b508      	push	{r3, lr}
 80a0d32:	4b02      	ldr	r3, [pc, #8]	; (80a0d3c <hal_usart_write+0xc>)
 80a0d34:	681b      	ldr	r3, [r3, #0]
 80a0d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d38:	9301      	str	r3, [sp, #4]
 80a0d3a:	bd08      	pop	{r3, pc}
 80a0d3c:	080601c4 	.word	0x080601c4

080a0d40 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <hal_usart_available+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	080601c4 	.word	0x080601c4

080a0d50 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <hal_usart_read+0xc>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d58:	9301      	str	r3, [sp, #4]
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	080601c4 	.word	0x080601c4

080a0d60 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0d60:	b508      	push	{r3, lr}
 80a0d62:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <hal_usart_peek+0xc>)
 80a0d64:	681b      	ldr	r3, [r3, #0]
 80a0d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d68:	9301      	str	r3, [sp, #4]
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	080601c4 	.word	0x080601c4

080a0d70 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <hal_usart_flush+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601c4 	.word	0x080601c4

080a0d80 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <hal_usart_is_enabled+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601c4 	.word	0x080601c4

080a0d90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <hal_usart_available_data_for_write+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601c4 	.word	0x080601c4

080a0da0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <hal_usart_begin_config+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601c4 	.word	0x080601c4

080a0db0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <HAL_USB_USART_Init+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	681b      	ldr	r3, [r3, #0]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601d8 	.word	0x080601d8

080a0dc0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <HAL_USB_USART_Begin+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	685b      	ldr	r3, [r3, #4]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601d8 	.word	0x080601d8

080a0dd0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <HAL_USB_USART_End+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	689b      	ldr	r3, [r3, #8]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601d8 	.word	0x080601d8

080a0de0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <HAL_USB_USART_Available_Data+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	691b      	ldr	r3, [r3, #16]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601d8 	.word	0x080601d8

080a0df0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	695b      	ldr	r3, [r3, #20]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601d8 	.word	0x080601d8

080a0e00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <HAL_USB_USART_Receive_Data+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	699b      	ldr	r3, [r3, #24]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601d8 	.word	0x080601d8

080a0e10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <HAL_USB_USART_Send_Data+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	69db      	ldr	r3, [r3, #28]
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601d8 	.word	0x080601d8

080a0e20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <HAL_USB_USART_Flush_Data+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	6a1b      	ldr	r3, [r3, #32]
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601d8 	.word	0x080601d8

080a0e30 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <HAL_NET_SetNetWatchDog+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601c0 	.word	0x080601c0

080a0e40 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <inet_gethostbyname+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601c0 	.word	0x080601c0

080a0e50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <panic_+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080201a8 	.word	0x080201a8

080a0e60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <log_message+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080201a8 	.word	0x080201a8

080a0e70 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <log_level_name+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080201a8 	.word	0x080201a8

080a0e80 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <log_set_callbacks+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080201a8 	.word	0x080201a8

080a0e90 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <set_system_mode+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	685b      	ldr	r3, [r3, #4]
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601a4 	.word	0x080601a4

080a0ea0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <system_delay_ms+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	695b      	ldr	r3, [r3, #20]
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601a4 	.word	0x080601a4

080a0eb0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <system_thread_set_state+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601a4 	.word	0x080601a4

080a0ec0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <application_thread_current+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601a4 	.word	0x080601a4

080a0ed0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <application_thread_invoke+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601a4 	.word	0x080601a4

080a0ee0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b03      	ldr	r3, [pc, #12]	; (80a0ef0 <system_ctrl_set_app_request_handler+0x10>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0eea:	9301      	str	r3, [sp, #4]
 80a0eec:	bd08      	pop	{r3, pc}
 80a0eee:	0000      	.short	0x0000
 80a0ef0:	080601a4 	.word	0x080601a4

080a0ef4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b03      	ldr	r3, [pc, #12]	; (80a0f04 <system_ctrl_set_result+0x10>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0efe:	9301      	str	r3, [sp, #4]
 80a0f00:	bd08      	pop	{r3, pc}
 80a0f02:	0000      	.short	0x0000
 80a0f04:	080601a4 	.word	0x080601a4

080a0f08 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <spark_variable+0xc>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	681b      	ldr	r3, [r3, #0]
 80a0f10:	9301      	str	r3, [sp, #4]
 80a0f12:	bd08      	pop	{r3, pc}
 80a0f14:	080601cc 	.word	0x080601cc

080a0f18 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0f18:	b508      	push	{r3, lr}
 80a0f1a:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <spark_cloud_flag_connected+0xc>)
 80a0f1c:	681b      	ldr	r3, [r3, #0]
 80a0f1e:	695b      	ldr	r3, [r3, #20]
 80a0f20:	9301      	str	r3, [sp, #4]
 80a0f22:	bd08      	pop	{r3, pc}
 80a0f24:	080601cc 	.word	0x080601cc

080a0f28 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b02      	ldr	r3, [pc, #8]	; (80a0f34 <spark_send_event+0xc>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	6a1b      	ldr	r3, [r3, #32]
 80a0f30:	9301      	str	r3, [sp, #4]
 80a0f32:	bd08      	pop	{r3, pc}
 80a0f34:	080601cc 	.word	0x080601cc

080a0f38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f38:	b508      	push	{r3, lr}
 80a0f3a:	4b02      	ldr	r3, [pc, #8]	; (80a0f44 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f3c:	681b      	ldr	r3, [r3, #0]
 80a0f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0f40:	9301      	str	r3, [sp, #4]
 80a0f42:	bd08      	pop	{r3, pc}
 80a0f44:	080601cc 	.word	0x080601cc

080a0f48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <network_connect+0xc>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	685b      	ldr	r3, [r3, #4]
 80a0f50:	9301      	str	r3, [sp, #4]
 80a0f52:	bd08      	pop	{r3, pc}
 80a0f54:	080601c8 	.word	0x080601c8

080a0f58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f58:	b508      	push	{r3, lr}
 80a0f5a:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <network_connecting+0xc>)
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	689b      	ldr	r3, [r3, #8]
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	bd08      	pop	{r3, pc}
 80a0f64:	080601c8 	.word	0x080601c8

080a0f68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f68:	b508      	push	{r3, lr}
 80a0f6a:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <network_disconnect+0xc>)
 80a0f6c:	681b      	ldr	r3, [r3, #0]
 80a0f6e:	68db      	ldr	r3, [r3, #12]
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	bd08      	pop	{r3, pc}
 80a0f74:	080601c8 	.word	0x080601c8

080a0f78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f78:	b508      	push	{r3, lr}
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <network_ready+0xc>)
 80a0f7c:	681b      	ldr	r3, [r3, #0]
 80a0f7e:	691b      	ldr	r3, [r3, #16]
 80a0f80:	9301      	str	r3, [sp, #4]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	080601c8 	.word	0x080601c8

080a0f88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f88:	b508      	push	{r3, lr}
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <network_on+0xc>)
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	695b      	ldr	r3, [r3, #20]
 80a0f90:	9301      	str	r3, [sp, #4]
 80a0f92:	bd08      	pop	{r3, pc}
 80a0f94:	080601c8 	.word	0x080601c8

080a0f98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <network_off+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	699b      	ldr	r3, [r3, #24]
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	080601c8 	.word	0x080601c8

080a0fa8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <network_listen+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	69db      	ldr	r3, [r3, #28]
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	080601c8 	.word	0x080601c8

080a0fb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <network_listening+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	6a1b      	ldr	r3, [r3, #32]
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601c8 	.word	0x080601c8

080a0fc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <network_set_listen_timeout+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601c8 	.word	0x080601c8

080a0fd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <network_get_listen_timeout+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601c8 	.word	0x080601c8

080a0fe8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <network_is_on+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601c8 	.word	0x080601c8

080a0ff8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <network_is_off+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601c8 	.word	0x080601c8

080a1008 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <malloc+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	681b      	ldr	r3, [r3, #0]
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601a0 	.word	0x080601a0

080a1018 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1018:	b508      	push	{r3, lr}
 80a101a:	4b02      	ldr	r3, [pc, #8]	; (80a1024 <free+0xc>)
 80a101c:	681b      	ldr	r3, [r3, #0]
 80a101e:	685b      	ldr	r3, [r3, #4]
 80a1020:	9301      	str	r3, [sp, #4]
 80a1022:	bd08      	pop	{r3, pc}
 80a1024:	080601a0 	.word	0x080601a0

080a1028 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <realloc+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	689b      	ldr	r3, [r3, #8]
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601a0 	.word	0x080601a0

080a1038 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <vsnprintf+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601a0 	.word	0x080601a0

080a1048 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b02      	ldr	r3, [pc, #8]	; (80a1054 <abort+0xc>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1050:	9301      	str	r3, [sp, #4]
 80a1052:	bd08      	pop	{r3, pc}
 80a1054:	080601a0 	.word	0x080601a0

080a1058 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1058:	b508      	push	{r3, lr}
 80a105a:	4b02      	ldr	r3, [pc, #8]	; (80a1064 <_malloc_r+0xc>)
 80a105c:	681b      	ldr	r3, [r3, #0]
 80a105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1060:	9301      	str	r3, [sp, #4]
 80a1062:	bd08      	pop	{r3, pc}
 80a1064:	080601a0 	.word	0x080601a0

080a1068 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <newlib_impure_ptr_callback+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601a0 	.word	0x080601a0

080a1078 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1078:	2100      	movs	r1, #0
 80a107a:	f7ff bf11 	b.w	80a0ea0 <system_delay_ms>

080a107e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a107e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1080:	6883      	ldr	r3, [r0, #8]
 80a1082:	4604      	mov	r4, r0
 80a1084:	b90b      	cbnz	r3, 80a108a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1086:	f002 fd84 	bl	80a3b92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a108a:	68c3      	ldr	r3, [r0, #12]
 80a108c:	4798      	blx	r3
      if (_M_manager)
 80a108e:	68a3      	ldr	r3, [r4, #8]
 80a1090:	b11b      	cbz	r3, 80a109a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1092:	2203      	movs	r2, #3
 80a1094:	4621      	mov	r1, r4
 80a1096:	4620      	mov	r0, r4
 80a1098:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a109a:	4620      	mov	r0, r4
}
 80a109c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a10a0:	2110      	movs	r1, #16
 80a10a2:	f002 bd70 	b.w	80a3b86 <_ZdlPvj>

080a10a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a10a6:	4770      	bx	lr

080a10a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a10a8:	2000      	movs	r0, #0
 80a10aa:	4770      	bx	lr

080a10ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a10ac:	b510      	push	{r4, lr}
 80a10ae:	4604      	mov	r4, r0
 80a10b0:	2110      	movs	r1, #16
 80a10b2:	f002 fd68 	bl	80a3b86 <_ZdlPvj>
 80a10b6:	4620      	mov	r0, r4
 80a10b8:	bd10      	pop	{r4, pc}

080a10ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a10ba:	b508      	push	{r3, lr}
      { delete this; }
 80a10bc:	f7ff fff6 	bl	80a10ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a10c0:	bd08      	pop	{r3, pc}

080a10c2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a10c2:	b510      	push	{r4, lr}
      if (_M_manager)
 80a10c4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a10c6:	4604      	mov	r4, r0
      if (_M_manager)
 80a10c8:	b113      	cbz	r3, 80a10d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a10ca:	2203      	movs	r2, #3
 80a10cc:	4601      	mov	r1, r0
 80a10ce:	4798      	blx	r3
    }
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	bd10      	pop	{r4, pc}

080a10d4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a10d4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a10d6:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a10d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a10dc:	6002      	str	r2, [r0, #0]
 80a10de:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a10e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a10e4:	680c      	ldr	r4, [r1, #0]
 80a10e6:	8085      	strh	r5, [r0, #4]
 80a10e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a10ec:	bd30      	pop	{r4, r5, pc}

080a10ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a10ee:	b510      	push	{r4, lr}
 80a10f0:	4604      	mov	r4, r0
    free((void*)msg_);
 80a10f2:	6800      	ldr	r0, [r0, #0]
 80a10f4:	f7ff ff90 	bl	80a1018 <free>
}
 80a10f8:	4620      	mov	r0, r4
 80a10fa:	bd10      	pop	{r4, pc}

080a10fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a10fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a10fe:	68c4      	ldr	r4, [r0, #12]
 80a1100:	b1f4      	cbz	r4, 80a1140 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1102:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1104:	2b02      	cmp	r3, #2
 80a1106:	d103      	bne.n	80a1110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1108:	f104 000c 	add.w	r0, r4, #12
 80a110c:	f7ff ffef 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1110:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1112:	b135      	cbz	r5, 80a1122 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1114:	4628      	mov	r0, r5
 80a1116:	f7ff ffd4 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
 80a111a:	2110      	movs	r1, #16
 80a111c:	4628      	mov	r0, r5
 80a111e:	f002 fd32 	bl	80a3b86 <_ZdlPvj>
 80a1122:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1124:	b135      	cbz	r5, 80a1134 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1126:	4628      	mov	r0, r5
 80a1128:	f7ff ffcb 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
 80a112c:	2110      	movs	r1, #16
 80a112e:	4628      	mov	r0, r5
 80a1130:	f002 fd29 	bl	80a3b86 <_ZdlPvj>
 80a1134:	4620      	mov	r0, r4
 80a1136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a113a:	2114      	movs	r1, #20
 80a113c:	f002 bd23 	b.w	80a3b86 <_ZdlPvj>
 80a1140:	bd38      	pop	{r3, r4, r5, pc}

080a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a1142:	680b      	ldr	r3, [r1, #0]
 80a1144:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a1146:	b113      	cbz	r3, 80a114e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1148:	685a      	ldr	r2, [r3, #4]
 80a114a:	3201      	adds	r2, #1
 80a114c:	605a      	str	r2, [r3, #4]
      }
 80a114e:	4770      	bx	lr

080a1150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1150:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1152:	460e      	mov	r6, r1
 80a1154:	4604      	mov	r4, r0
 80a1156:	f856 3b04 	ldr.w	r3, [r6], #4
 80a115a:	460d      	mov	r5, r1
 80a115c:	a801      	add	r0, sp, #4
 80a115e:	4631      	mov	r1, r6
 80a1160:	9300      	str	r3, [sp, #0]
 80a1162:	f7ff ffee 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1166:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1168:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a116a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a116c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a116e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1170:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a1172:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1174:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1176:	f7ff f8e1 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a117a:	4630      	mov	r0, r6
 80a117c:	f7ff f8de 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1180:	4628      	mov	r0, r5
 80a1182:	2108      	movs	r1, #8
 80a1184:	f002 fcff 	bl	80a3b86 <_ZdlPvj>
        return p;
    }
 80a1188:	4620      	mov	r0, r4
 80a118a:	b002      	add	sp, #8
 80a118c:	bd70      	pop	{r4, r5, r6, pc}

080a118e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a118e:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1190:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1192:	460b      	mov	r3, r1
 80a1194:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1196:	c803      	ldmia	r0, {r0, r1}
 80a1198:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a119c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a11a0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a11a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a11a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a11ac:	b002      	add	sp, #8
 80a11ae:	bd10      	pop	{r4, pc}

080a11b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a11b0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a11b2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a11b4:	b90a      	cbnz	r2, 80a11ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a11b6:	f002 fcec 	bl	80a3b92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11ba:	68c3      	ldr	r3, [r0, #12]
    }
 80a11bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11c0:	4718      	bx	r3

080a11c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a11c2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a11c4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a11c6:	f100 0110 	add.w	r1, r0, #16
 80a11ca:	f7ff fff1 	bl	80a11b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a11ce:	bd08      	pop	{r3, pc}

080a11d0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a11d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a11d2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a11d4:	b90a      	cbnz	r2, 80a11da <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a11d6:	f002 fcdc 	bl	80a3b92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11da:	68c3      	ldr	r3, [r0, #12]
    }
 80a11dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11e0:	4718      	bx	r3

080a11e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a11e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a11e4:	6800      	ldr	r0, [r0, #0]
 80a11e6:	f100 0110 	add.w	r1, r0, #16
 80a11ea:	f7ff fff1 	bl	80a11d0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a11ee:	bd08      	pop	{r3, pc}

080a11f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a11f0:	b538      	push	{r3, r4, r5, lr}
 80a11f2:	2300      	movs	r3, #0
 80a11f4:	4604      	mov	r4, r0
 80a11f6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a11f8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a11fa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a11fc:	f7fe ff4b 	bl	80a0096 <_Znwj>
 80a1200:	b128      	cbz	r0, 80a120e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1202:	2301      	movs	r3, #1
 80a1204:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1208:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a120a:	60c5      	str	r5, [r0, #12]
 80a120c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a120e:	6020      	str	r0, [r4, #0]
	}
 80a1210:	4620      	mov	r0, r4
 80a1212:	bd38      	pop	{r3, r4, r5, pc}
 80a1214:	080a431c 	.word	0x080a431c

080a1218 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1218:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a121a:	2300      	movs	r3, #0
 80a121c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a121e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1220:	4604      	mov	r4, r0
 80a1222:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1224:	b12b      	cbz	r3, 80a1232 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1226:	2202      	movs	r2, #2
 80a1228:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a122a:	68eb      	ldr	r3, [r5, #12]
 80a122c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a122e:	68ab      	ldr	r3, [r5, #8]
 80a1230:	60a3      	str	r3, [r4, #8]
    }
 80a1232:	4620      	mov	r0, r4
 80a1234:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1238:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a123a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a123c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a123e:	4668      	mov	r0, sp
 80a1240:	f7ff ff48 	bl	80a10d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1244:	f04f 0302 	mov.w	r3, #2
 80a1248:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a124c:	2a00      	cmp	r2, #0
 80a124e:	d103      	bne.n	80a1258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1250:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1254:	2900      	cmp	r1, #0
 80a1256:	d1f7      	bne.n	80a1248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1258:	d125      	bne.n	80a12a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a125a:	f104 050c 	add.w	r5, r4, #12
 80a125e:	4669      	mov	r1, sp
 80a1260:	4628      	mov	r0, r5
 80a1262:	f7ff ff37 	bl	80a10d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1266:	2301      	movs	r3, #1
 80a1268:	f3bf 8f5b 	dmb	ish
 80a126c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a126e:	2000      	movs	r0, #0
 80a1270:	f3bf 8f5b 	dmb	ish
 80a1274:	f104 0308 	add.w	r3, r4, #8
 80a1278:	e853 6f00 	ldrex	r6, [r3]
 80a127c:	e843 0200 	strex	r2, r0, [r3]
 80a1280:	2a00      	cmp	r2, #0
 80a1282:	d1f9      	bne.n	80a1278 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a1284:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1288:	b16e      	cbz	r6, 80a12a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a128a:	f7ff fe19 	bl	80a0ec0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a128e:	b178      	cbz	r0, 80a12b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1290:	4629      	mov	r1, r5
 80a1292:	4630      	mov	r0, r6
 80a1294:	f7ff ff8c 	bl	80a11b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1298:	4630      	mov	r0, r6
 80a129a:	f7ff ff12 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a129e:	2110      	movs	r1, #16
 80a12a0:	4630      	mov	r0, r6
 80a12a2:	f002 fc70 	bl	80a3b86 <_ZdlPvj>
        p_->setError(std::move(error));
 80a12a6:	4668      	mov	r0, sp
 80a12a8:	f7ff ff21 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
    }
 80a12ac:	b009      	add	sp, #36	; 0x24
 80a12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a12b0:	4631      	mov	r1, r6
 80a12b2:	a802      	add	r0, sp, #8
 80a12b4:	f7ff ffb0 	bl	80a1218 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a12b8:	68e0      	ldr	r0, [r4, #12]
 80a12ba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a12be:	b108      	cbz	r0, 80a12c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a12c0:	f002 fe12 	bl	80a3ee8 <strdup>
        type_(type) {
 80a12c4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a12c6:	2010      	movs	r0, #16
 80a12c8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a12cc:	f7fe fee3 	bl	80a0096 <_Znwj>
 80a12d0:	4605      	mov	r5, r0
 80a12d2:	b1e8      	cbz	r0, 80a1310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a12d4:	2700      	movs	r7, #0
 80a12d6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a12d8:	2018      	movs	r0, #24
 80a12da:	f7fe fedc 	bl	80a0096 <_Znwj>
 80a12de:	4604      	mov	r4, r0
 80a12e0:	b188      	cbz	r0, 80a1306 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a12e2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a12e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a12e6:	a802      	add	r0, sp, #8
 80a12e8:	f7ff ff51 	bl	80a118e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a12ec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a12ee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a12f0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a12f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a12f4:	9204      	str	r2, [sp, #16]
 80a12f6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a12f8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a12fa:	60e3      	str	r3, [r4, #12]
 80a12fc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1300:	9205      	str	r2, [sp, #20]
 80a1302:	f7ff fee7 	bl	80a10d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a1306:	4b08      	ldr	r3, [pc, #32]	; (80a1328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1308:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a130a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a130c:	4b07      	ldr	r3, [pc, #28]	; (80a132c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a130e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1310:	a806      	add	r0, sp, #24
 80a1312:	f7ff feec 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1316:	a802      	add	r0, sp, #8
 80a1318:	f7ff fed3 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a131c:	2200      	movs	r2, #0
 80a131e:	4629      	mov	r1, r5
 80a1320:	4803      	ldr	r0, [pc, #12]	; (80a1330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a1322:	f7ff fdd5 	bl	80a0ed0 <application_thread_invoke>
 80a1326:	e7b7      	b.n	80a1298 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1328:	080a11c3 	.word	0x080a11c3
 80a132c:	080a1459 	.word	0x080a1459
 80a1330:	080a107f 	.word	0x080a107f

080a1334 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1338:	b08a      	sub	sp, #40	; 0x28
 80a133a:	4605      	mov	r5, r0
 80a133c:	460c      	mov	r4, r1
 80a133e:	4617      	mov	r7, r2
 80a1340:	4698      	mov	r8, r3
 80a1342:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1346:	f7ff fde7 	bl	80a0f18 <spark_cloud_flag_connected>
 80a134a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a134c:	4682      	mov	sl, r0
 80a134e:	bb38      	cbnz	r0, 80a13a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1350:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1354:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1356:	a905      	add	r1, sp, #20
 80a1358:	4630      	mov	r0, r6
 80a135a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a135e:	f7ff feb9 	bl	80a10d4 <_ZN8particle5ErrorC1EOS0_>
 80a1362:	2014      	movs	r0, #20
 80a1364:	f7fe fe97 	bl	80a0096 <_Znwj>
 80a1368:	4604      	mov	r4, r0
 80a136a:	b148      	cbz	r0, 80a1380 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a136c:	2302      	movs	r3, #2
 80a136e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1370:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1372:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1376:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1378:	4631      	mov	r1, r6
 80a137a:	300c      	adds	r0, #12
 80a137c:	f7ff feaa 	bl	80a10d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1380:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a1382:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1384:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1388:	f7ff ff32 	bl	80a11f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a138c:	4630      	mov	r0, r6
 80a138e:	f7ff feae 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1392:	a805      	add	r0, sp, #20
 80a1394:	f7ff feab 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1398:	4628      	mov	r0, r5
 80a139a:	b00a      	add	sp, #40	; 0x28
 80a139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a13a0:	230c      	movs	r3, #12
 80a13a2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a13a6:	2014      	movs	r0, #20
 80a13a8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a13ac:	9307      	str	r3, [sp, #28]
 80a13ae:	f7fe fe72 	bl	80a0096 <_Znwj>
 80a13b2:	4601      	mov	r1, r0
 80a13b4:	b128      	cbz	r0, 80a13c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a13b6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a13ba:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a13be:	f880 a001 	strb.w	sl, [r0, #1]
 80a13c2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a13c4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a13c6:	f7ff ff13 	bl	80a11f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a13ca:	4b22      	ldr	r3, [pc, #136]	; (80a1454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a13cc:	2008      	movs	r0, #8
 80a13ce:	9308      	str	r3, [sp, #32]
 80a13d0:	f7fe fe61 	bl	80a0096 <_Znwj>
 80a13d4:	4682      	mov	sl, r0
 80a13d6:	b128      	cbz	r0, 80a13e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a13d8:	9b03      	ldr	r3, [sp, #12]
 80a13da:	a904      	add	r1, sp, #16
 80a13dc:	f840 3b04 	str.w	r3, [r0], #4
 80a13e0:	f7ff feaf 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a13e4:	4642      	mov	r2, r8
 80a13e6:	4639      	mov	r1, r7
 80a13e8:	4620      	mov	r0, r4
 80a13ea:	9600      	str	r6, [sp, #0]
 80a13ec:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a13f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a13f4:	f7ff fd98 	bl	80a0f28 <spark_send_event>
 80a13f8:	b9b8      	cbnz	r0, 80a142a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a13fa:	9b03      	ldr	r3, [sp, #12]
 80a13fc:	785b      	ldrb	r3, [r3, #1]
 80a13fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1402:	b993      	cbnz	r3, 80a142a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1404:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1408:	a905      	add	r1, sp, #20
 80a140a:	a803      	add	r0, sp, #12
 80a140c:	9205      	str	r2, [sp, #20]
 80a140e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1412:	f7ff ff11 	bl	80a1238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1416:	a805      	add	r0, sp, #20
 80a1418:	f7ff fe69 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a141c:	a805      	add	r0, sp, #20
 80a141e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1420:	f7ff fe96 	bl	80a1150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1424:	a806      	add	r0, sp, #24
 80a1426:	f7fe ff89 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a142a:	9b03      	ldr	r3, [sp, #12]
 80a142c:	a904      	add	r1, sp, #16
 80a142e:	a806      	add	r0, sp, #24
 80a1430:	9305      	str	r3, [sp, #20]
 80a1432:	f7ff fe86 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1436:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1438:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a143a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a143c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a143e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1440:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1442:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1444:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1446:	f7fe ff79 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a144a:	a804      	add	r0, sp, #16
 80a144c:	f7fe ff76 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1450:	e7a2      	b.n	80a1398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1452:	bf00      	nop
 80a1454:	080a151d 	.word	0x080a151d

080a1458 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1458:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a145a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a145c:	4605      	mov	r5, r0
	  switch (__op)
 80a145e:	d007      	beq.n	80a1470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1460:	2a03      	cmp	r2, #3
 80a1462:	d018      	beq.n	80a1496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a1464:	2a01      	cmp	r2, #1
 80a1466:	d101      	bne.n	80a146c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1468:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a146a:	6003      	str	r3, [r0, #0]
	}
 80a146c:	2000      	movs	r0, #0
 80a146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1470:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1472:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1474:	f7fe fe0f 	bl	80a0096 <_Znwj>
 80a1478:	4604      	mov	r4, r0
 80a147a:	b150      	cbz	r0, 80a1492 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a147c:	4631      	mov	r1, r6
 80a147e:	f7ff fecb 	bl	80a1218 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1482:	6930      	ldr	r0, [r6, #16]
 80a1484:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1488:	b108      	cbz	r0, 80a148e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a148a:	f002 fd2d 	bl	80a3ee8 <strdup>
        type_(type) {
 80a148e:	6120      	str	r0, [r4, #16]
 80a1490:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1492:	602c      	str	r4, [r5, #0]
	}
 80a1494:	e7ea      	b.n	80a146c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1496:	6804      	ldr	r4, [r0, #0]
 80a1498:	2c00      	cmp	r4, #0
 80a149a:	d0e7      	beq.n	80a146c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a149c:	f104 0010 	add.w	r0, r4, #16
 80a14a0:	f7ff fe25 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	f7ff fe0c 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a14aa:	2118      	movs	r1, #24
 80a14ac:	4620      	mov	r0, r4
 80a14ae:	f002 fb6a 	bl	80a3b86 <_ZdlPvj>
 80a14b2:	e7db      	b.n	80a146c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a14b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a14b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a14b6:	2300      	movs	r3, #0
 80a14b8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a14ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a14bc:	4604      	mov	r4, r0
 80a14be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a14c0:	b12b      	cbz	r3, 80a14ce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a14c2:	2202      	movs	r2, #2
 80a14c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a14c6:	68eb      	ldr	r3, [r5, #12]
 80a14c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a14ca:	68ab      	ldr	r3, [r5, #8]
 80a14cc:	60a3      	str	r3, [r4, #8]
    }
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	bd38      	pop	{r3, r4, r5, pc}

080a14d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a14d2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a14d4:	b570      	push	{r4, r5, r6, lr}
 80a14d6:	4604      	mov	r4, r0
	  switch (__op)
 80a14d8:	d007      	beq.n	80a14ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a14da:	2a03      	cmp	r2, #3
 80a14dc:	d012      	beq.n	80a1504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a14de:	2a01      	cmp	r2, #1
 80a14e0:	d101      	bne.n	80a14e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a14e2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a14e4:	6003      	str	r3, [r0, #0]
	}
 80a14e6:	2000      	movs	r0, #0
 80a14e8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a14ea:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a14ec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a14ee:	f7fe fdd2 	bl	80a0096 <_Znwj>
 80a14f2:	4605      	mov	r5, r0
 80a14f4:	b120      	cbz	r0, 80a1500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a14f6:	4631      	mov	r1, r6
 80a14f8:	f7ff ffdc 	bl	80a14b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a14fc:	7c33      	ldrb	r3, [r6, #16]
 80a14fe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1500:	6025      	str	r5, [r4, #0]
	}
 80a1502:	e7f0      	b.n	80a14e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1504:	6804      	ldr	r4, [r0, #0]
 80a1506:	2c00      	cmp	r4, #0
 80a1508:	d0ed      	beq.n	80a14e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a150a:	4620      	mov	r0, r4
 80a150c:	f7ff fdd9 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1510:	2114      	movs	r1, #20
 80a1512:	4620      	mov	r0, r4
 80a1514:	f002 fb37 	bl	80a3b86 <_ZdlPvj>
 80a1518:	e7e5      	b.n	80a14e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a151c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a151e:	4604      	mov	r4, r0
 80a1520:	b089      	sub	sp, #36	; 0x24
 80a1522:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1524:	a801      	add	r0, sp, #4
 80a1526:	4611      	mov	r1, r2
 80a1528:	f7ff fe12 	bl	80a1150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a152c:	b1a4      	cbz	r4, 80a1558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a152e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1530:	b11d      	cbz	r5, 80a153a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1532:	4628      	mov	r0, r5
 80a1534:	f002 fcd8 	bl	80a3ee8 <strdup>
 80a1538:	4605      	mov	r5, r0
 80a153a:	a801      	add	r0, sp, #4
 80a153c:	a903      	add	r1, sp, #12
        type_(type) {
 80a153e:	9503      	str	r5, [sp, #12]
 80a1540:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1544:	f7ff fe78 	bl	80a1238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1548:	a803      	add	r0, sp, #12
 80a154a:	f7ff fdd0 	bl	80a10ee <_ZN8particle5ErrorD1Ev>
 80a154e:	a802      	add	r0, sp, #8
 80a1550:	f7fe fef4 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1554:	b009      	add	sp, #36	; 0x24
 80a1556:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1558:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a155a:	9d01      	ldr	r5, [sp, #4]
 80a155c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1560:	2a00      	cmp	r2, #0
 80a1562:	d103      	bne.n	80a156c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1564:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1568:	2900      	cmp	r1, #0
 80a156a:	d1f7      	bne.n	80a155c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a156c:	d1ef      	bne.n	80a154e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a156e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1570:	f3bf 8f5b 	dmb	ish
 80a1574:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1576:	f3bf 8f5b 	dmb	ish
 80a157a:	1d2b      	adds	r3, r5, #4
 80a157c:	e853 6f00 	ldrex	r6, [r3]
 80a1580:	e843 4200 	strex	r2, r4, [r3]
 80a1584:	2a00      	cmp	r2, #0
 80a1586:	d1f9      	bne.n	80a157c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1588:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a158c:	2e00      	cmp	r6, #0
 80a158e:	d0de      	beq.n	80a154e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1590:	4620      	mov	r0, r4
 80a1592:	f7ff fc95 	bl	80a0ec0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1596:	4607      	mov	r7, r0
 80a1598:	b160      	cbz	r0, 80a15b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a159a:	4630      	mov	r0, r6
 80a159c:	f105 010c 	add.w	r1, r5, #12
 80a15a0:	f7ff fe16 	bl	80a11d0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a15a4:	4630      	mov	r0, r6
 80a15a6:	f7ff fd8c 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a15aa:	2110      	movs	r1, #16
 80a15ac:	4630      	mov	r0, r6
 80a15ae:	f002 faea 	bl	80a3b86 <_ZdlPvj>
 80a15b2:	e7cc      	b.n	80a154e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a15b4:	4631      	mov	r1, r6
 80a15b6:	a803      	add	r0, sp, #12
 80a15b8:	f7ff ff7c 	bl	80a14b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a15bc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a15be:	2010      	movs	r0, #16
 80a15c0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a15c4:	f7fe fd67 	bl	80a0096 <_Znwj>
 80a15c8:	4605      	mov	r5, r0
 80a15ca:	b1d0      	cbz	r0, 80a1602 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a15cc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a15ce:	2014      	movs	r0, #20
 80a15d0:	f7fe fd61 	bl	80a0096 <_Znwj>
 80a15d4:	4604      	mov	r4, r0
 80a15d6:	b178      	cbz	r0, 80a15f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a15d8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a15da:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a15dc:	a803      	add	r0, sp, #12
 80a15de:	f7ff fdd6 	bl	80a118e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a15e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a15e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15e6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a15e8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a15ea:	9205      	str	r2, [sp, #20]
 80a15ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15ee:	60e3      	str	r3, [r4, #12]
 80a15f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a15f4:	9206      	str	r2, [sp, #24]
 80a15f6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a15f8:	4b06      	ldr	r3, [pc, #24]	; (80a1614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a15fa:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a15fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a15fe:	4b06      	ldr	r3, [pc, #24]	; (80a1618 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1600:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1602:	a803      	add	r0, sp, #12
 80a1604:	f7ff fd5d 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1608:	2200      	movs	r2, #0
 80a160a:	4629      	mov	r1, r5
 80a160c:	4803      	ldr	r0, [pc, #12]	; (80a161c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a160e:	f7ff fc5f 	bl	80a0ed0 <application_thread_invoke>
 80a1612:	e7c7      	b.n	80a15a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1614:	080a11e3 	.word	0x080a11e3
 80a1618:	080a14d3 	.word	0x080a14d3
 80a161c:	080a107f 	.word	0x080a107f

080a1620 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1620:	4770      	bx	lr

080a1622 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1624:	4606      	mov	r6, r0
 80a1626:	4615      	mov	r5, r2
 80a1628:	460c      	mov	r4, r1
 80a162a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a162c:	42bc      	cmp	r4, r7
 80a162e:	d006      	beq.n	80a163e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1630:	6833      	ldr	r3, [r6, #0]
 80a1632:	4630      	mov	r0, r6
 80a1634:	689b      	ldr	r3, [r3, #8]
 80a1636:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a163a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a163c:	e7f6      	b.n	80a162c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a163e:	4628      	mov	r0, r5
 80a1640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1642 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1642:	2200      	movs	r2, #0
 80a1644:	7c00      	ldrb	r0, [r0, #16]
 80a1646:	f7ff bad9 	b.w	80a0bfc <hal_i2c_write>

080a164a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a164a:	2100      	movs	r1, #0
 80a164c:	7c00      	ldrb	r0, [r0, #16]
 80a164e:	f7ff badd 	b.w	80a0c0c <hal_i2c_available>

080a1652 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1652:	2100      	movs	r1, #0
 80a1654:	7c00      	ldrb	r0, [r0, #16]
 80a1656:	f7ff bae1 	b.w	80a0c1c <hal_i2c_read>

080a165a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a165a:	2100      	movs	r1, #0
 80a165c:	7c00      	ldrb	r0, [r0, #16]
 80a165e:	f7ff bae5 	b.w	80a0c2c <hal_i2c_peek>

080a1662 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1662:	2100      	movs	r1, #0
 80a1664:	7c00      	ldrb	r0, [r0, #16]
 80a1666:	f7ff bae9 	b.w	80a0c3c <hal_i2c_flush>

080a166a <_ZN7TwoWireD0Ev>:
 80a166a:	b510      	push	{r4, lr}
 80a166c:	4604      	mov	r4, r0
 80a166e:	2114      	movs	r1, #20
 80a1670:	f002 fa89 	bl	80a3b86 <_ZdlPvj>
 80a1674:	4620      	mov	r0, r4
 80a1676:	bd10      	pop	{r4, pc}

080a1678 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1678:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a167e:	4604      	mov	r4, r0
 80a1680:	4608      	mov	r0, r1
 80a1682:	2100      	movs	r1, #0
 80a1684:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1688:	4b03      	ldr	r3, [pc, #12]	; (80a1698 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a168a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a168c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a168e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1690:	f7ff fae4 	bl	80a0c5c <hal_i2c_init>
}
 80a1694:	4620      	mov	r0, r4
 80a1696:	bd10      	pop	{r4, pc}
 80a1698:	080a4338 	.word	0x080a4338

080a169c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a169e:	460e      	mov	r6, r1
 80a16a0:	2400      	movs	r4, #0
 80a16a2:	f100 0708 	add.w	r7, r0, #8
 80a16a6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a16a8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a16ac:	220a      	movs	r2, #10
 80a16ae:	4630      	mov	r0, r6
 80a16b0:	f001 facb 	bl	80a2c4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a16b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a16b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a16b8:	d101      	bne.n	80a16be <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a16ba:	4620      	mov	r0, r4
 80a16bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a16be:	2c00      	cmp	r4, #0
 80a16c0:	d0f2      	beq.n	80a16a8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a16c2:	212e      	movs	r1, #46	; 0x2e
 80a16c4:	4630      	mov	r0, r6
 80a16c6:	f001 faa7 	bl	80a2c18 <_ZN5Print5printEc>
 80a16ca:	4404      	add	r4, r0
 80a16cc:	e7ec      	b.n	80a16a8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a16d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a16d0:	b510      	push	{r4, lr}
 80a16d2:	4604      	mov	r4, r0
 80a16d4:	4b04      	ldr	r3, [pc, #16]	; (80a16e8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a16d6:	2211      	movs	r2, #17
 80a16d8:	2100      	movs	r1, #0
 80a16da:	f840 3b04 	str.w	r3, [r0], #4
 80a16de:	f002 fbad 	bl	80a3e3c <memset>
}
 80a16e2:	4620      	mov	r0, r4
 80a16e4:	bd10      	pop	{r4, pc}
 80a16e6:	bf00      	nop
 80a16e8:	080a4360 	.word	0x080a4360

080a16ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a16ec:	4603      	mov	r3, r0
 80a16ee:	4a07      	ldr	r2, [pc, #28]	; (80a170c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a16f0:	b510      	push	{r4, lr}
 80a16f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a16f6:	f101 0210 	add.w	r2, r1, #16
 80a16fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a16fe:	4291      	cmp	r1, r2
 80a1700:	f843 4b04 	str.w	r4, [r3], #4
 80a1704:	d1f9      	bne.n	80a16fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1706:	780a      	ldrb	r2, [r1, #0]
 80a1708:	701a      	strb	r2, [r3, #0]
}
 80a170a:	bd10      	pop	{r4, pc}
 80a170c:	080a4360 	.word	0x080a4360

080a1710 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1710:	4a02      	ldr	r2, [pc, #8]	; (80a171c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1712:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1716:	2204      	movs	r2, #4
 80a1718:	7502      	strb	r2, [r0, #20]
}
 80a171a:	4770      	bx	lr
 80a171c:	080a4360 	.word	0x080a4360

080a1720 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1720:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1722:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1726:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a172a:	2304      	movs	r3, #4
 80a172c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1730:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1734:	6044      	str	r4, [r0, #4]
 80a1736:	7503      	strb	r3, [r0, #20]
}
 80a1738:	bd10      	pop	{r4, pc}
	...

080a173c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a173c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a173e:	4d04      	ldr	r5, [pc, #16]	; (80a1750 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1740:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1742:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1746:	9500      	str	r5, [sp, #0]
 80a1748:	f7ff ffea 	bl	80a1720 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a174c:	b003      	add	sp, #12
 80a174e:	bd30      	pop	{r4, r5, pc}
 80a1750:	080a4360 	.word	0x080a4360

080a1754 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a1754:	2201      	movs	r2, #1
 80a1756:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a175a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a175e:	4618      	mov	r0, r3
 80a1760:	2901      	cmp	r1, #1
 80a1762:	d108      	bne.n	80a1776 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a1764:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a1768:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a176c:	3a01      	subs	r2, #1
 80a176e:	f103 0310 	add.w	r3, r3, #16
 80a1772:	d1f2      	bne.n	80a175a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a1774:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a1776:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a1778:	bf04      	itt	eq
 80a177a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a177e:	1852      	addeq	r2, r2, r1
 80a1780:	e7f4      	b.n	80a176c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a1782 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a1782:	b40e      	push	{r1, r2, r3}
 80a1784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1788:	b087      	sub	sp, #28
 80a178a:	af00      	add	r7, sp, #0
 80a178c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a1790:	f855 8b04 	ldr.w	r8, [r5], #4
 80a1794:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1796:	462b      	mov	r3, r5
 80a1798:	4642      	mov	r2, r8
 80a179a:	2110      	movs	r1, #16
 80a179c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a17a0:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17a2:	f7ff fc49 	bl	80a1038 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a17a6:	280f      	cmp	r0, #15
 80a17a8:	d91b      	bls.n	80a17e2 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a17aa:	f100 0308 	add.w	r3, r0, #8
 80a17ae:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a17b2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a17b4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17b8:	4642      	mov	r2, r8
 80a17ba:	1c41      	adds	r1, r0, #1
 80a17bc:	462b      	mov	r3, r5
 80a17be:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a17c0:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a17c2:	f7ff fc39 	bl	80a1038 <vsnprintf>
        if (n > 0) {
 80a17c6:	1e02      	subs	r2, r0, #0
 80a17c8:	dd04      	ble.n	80a17d4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a17ca:	6823      	ldr	r3, [r4, #0]
 80a17cc:	4669      	mov	r1, sp
 80a17ce:	4620      	mov	r0, r4
 80a17d0:	689b      	ldr	r3, [r3, #8]
 80a17d2:	4798      	blx	r3
 80a17d4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a17d6:	371c      	adds	r7, #28
 80a17d8:	46bd      	mov	sp, r7
 80a17da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a17de:	b003      	add	sp, #12
 80a17e0:	4770      	bx	lr
    } else if (n > 0) {
 80a17e2:	2800      	cmp	r0, #0
 80a17e4:	d0f7      	beq.n	80a17d6 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a17e6:	6823      	ldr	r3, [r4, #0]
 80a17e8:	4602      	mov	r2, r0
 80a17ea:	689b      	ldr	r3, [r3, #8]
 80a17ec:	4620      	mov	r0, r4
 80a17ee:	f107 0108 	add.w	r1, r7, #8
 80a17f2:	4798      	blx	r3
}
 80a17f4:	e7ef      	b.n	80a17d6 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a17f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a17f6:	b510      	push	{r4, lr}
 80a17f8:	4604      	mov	r4, r0
          _M_dispose();
 80a17fa:	6803      	ldr	r3, [r0, #0]
 80a17fc:	689b      	ldr	r3, [r3, #8]
 80a17fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1800:	68a3      	ldr	r3, [r4, #8]
 80a1802:	3b01      	subs	r3, #1
 80a1804:	60a3      	str	r3, [r4, #8]
 80a1806:	b92b      	cbnz	r3, 80a1814 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1808:	6823      	ldr	r3, [r4, #0]
 80a180a:	4620      	mov	r0, r4
    }
 80a180c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1810:	68db      	ldr	r3, [r3, #12]
 80a1812:	4718      	bx	r3
    }
 80a1814:	bd10      	pop	{r4, pc}

080a1816 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a1816:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1818:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a181a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a181e:	2201      	movs	r2, #1
 80a1820:	689b      	ldr	r3, [r3, #8]
 80a1822:	f10d 0107 	add.w	r1, sp, #7
 80a1826:	4798      	blx	r3
}
 80a1828:	b003      	add	sp, #12
 80a182a:	f85d fb04 	ldr.w	pc, [sp], #4

080a182e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a182e:	b538      	push	{r3, r4, r5, lr}
 80a1830:	680b      	ldr	r3, [r1, #0]
 80a1832:	4604      	mov	r4, r0
 80a1834:	6003      	str	r3, [r0, #0]
 80a1836:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a1838:	6843      	ldr	r3, [r0, #4]
 80a183a:	429d      	cmp	r5, r3
 80a183c:	d00c      	beq.n	80a1858 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a183e:	b115      	cbz	r5, 80a1846 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a1840:	686b      	ldr	r3, [r5, #4]
 80a1842:	3301      	adds	r3, #1
 80a1844:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a1846:	6860      	ldr	r0, [r4, #4]
 80a1848:	b128      	cbz	r0, 80a1856 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a184a:	6843      	ldr	r3, [r0, #4]
 80a184c:	3b01      	subs	r3, #1
 80a184e:	6043      	str	r3, [r0, #4]
 80a1850:	b90b      	cbnz	r3, 80a1856 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a1852:	f7ff ffd0 	bl	80a17f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a1856:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a1858:	4620      	mov	r0, r4
 80a185a:	bd38      	pop	{r3, r4, r5, pc}

080a185c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a185c:	460b      	mov	r3, r1
 80a185e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1860:	2200      	movs	r2, #0
 80a1862:	b510      	push	{r4, lr}
 80a1864:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1866:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a186a:	6083      	str	r3, [r0, #8]
    if (t) {
 80a186c:	b90b      	cbnz	r3, 80a1872 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a186e:	4620      	mov	r0, r4
 80a1870:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a1872:	f7ff ffdc 	bl	80a182e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a1876:	e7fa      	b.n	80a186e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a1878 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a1878:	4603      	mov	r3, r0
    if (!t_) {
 80a187a:	6880      	ldr	r0, [r0, #8]
 80a187c:	b320      	cbz	r0, 80a18c8 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a187e:	7802      	ldrb	r2, [r0, #0]
 80a1880:	2a03      	cmp	r2, #3
 80a1882:	d81a      	bhi.n	80a18ba <_ZNK5spark9JSONValue4typeEv+0x42>
 80a1884:	e8df f002 	tbb	[pc, r2]
 80a1888:	1b021704 	.word	0x1b021704
 80a188c:	2005      	movs	r0, #5
 80a188e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	685a      	ldr	r2, [r3, #4]
 80a1894:	6843      	ldr	r3, [r0, #4]
 80a1896:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a1898:	282d      	cmp	r0, #45	; 0x2d
 80a189a:	d012      	beq.n	80a18c2 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a189c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a18a0:	2b09      	cmp	r3, #9
 80a18a2:	d90e      	bls.n	80a18c2 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a18a4:	2874      	cmp	r0, #116	; 0x74
 80a18a6:	d00e      	beq.n	80a18c6 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a18a8:	2866      	cmp	r0, #102	; 0x66
 80a18aa:	d00c      	beq.n	80a18c6 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a18ac:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a18b0:	4258      	negs	r0, r3
 80a18b2:	4158      	adcs	r0, r3
 80a18b4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a18b6:	2006      	movs	r0, #6
 80a18b8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a18ba:	2000      	movs	r0, #0
 80a18bc:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a18be:	2004      	movs	r0, #4
 80a18c0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a18c2:	2003      	movs	r0, #3
 80a18c4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a18c6:	2002      	movs	r0, #2
}
 80a18c8:	4770      	bx	lr

080a18ca <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a18ca:	b510      	push	{r4, lr}
 80a18cc:	4604      	mov	r4, r0
    switch (type()) {
 80a18ce:	f7ff ffd3 	bl	80a1878 <_ZNK5spark9JSONValue4typeEv>
 80a18d2:	2802      	cmp	r0, #2
 80a18d4:	d00e      	beq.n	80a18f4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a18d6:	1ec3      	subs	r3, r0, #3
 80a18d8:	b2db      	uxtb	r3, r3
 80a18da:	2b01      	cmp	r3, #1
 80a18dc:	d814      	bhi.n	80a1908 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a18de:	6822      	ldr	r2, [r4, #0]
 80a18e0:	68a3      	ldr	r3, [r4, #8]
 80a18e2:	6850      	ldr	r0, [r2, #4]
 80a18e4:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a18e6:	220a      	movs	r2, #10
}
 80a18e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a18ec:	2100      	movs	r1, #0
 80a18ee:	4418      	add	r0, r3
 80a18f0:	f002 bbd4 	b.w	80a409c <strtol>
        const char* const s = d_->json + t_->start;
 80a18f4:	6822      	ldr	r2, [r4, #0]
 80a18f6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a18f8:	6852      	ldr	r2, [r2, #4]
 80a18fa:	685b      	ldr	r3, [r3, #4]
 80a18fc:	5cd0      	ldrb	r0, [r2, r3]
 80a18fe:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a1902:	4258      	negs	r0, r3
 80a1904:	4158      	adcs	r0, r3
}
 80a1906:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a1908:	2000      	movs	r0, #0
 80a190a:	e7fc      	b.n	80a1906 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a190c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a190c:	460b      	mov	r3, r1
 80a190e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1910:	2200      	movs	r2, #0
 80a1912:	b510      	push	{r4, lr}
 80a1914:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1916:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a191a:	480d      	ldr	r0, [pc, #52]	; (80a1950 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a191c:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1920:	b1a3      	cbz	r3, 80a194c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a1922:	781a      	ldrb	r2, [r3, #0]
 80a1924:	2a03      	cmp	r2, #3
 80a1926:	d006      	beq.n	80a1936 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a1928:	b982      	cbnz	r2, 80a194c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a192a:	680a      	ldr	r2, [r1, #0]
 80a192c:	6850      	ldr	r0, [r2, #4]
 80a192e:	685a      	ldr	r2, [r3, #4]
 80a1930:	5c82      	ldrb	r2, [r0, r2]
 80a1932:	2a6e      	cmp	r2, #110	; 0x6e
 80a1934:	d007      	beq.n	80a1946 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a1936:	680a      	ldr	r2, [r1, #0]
 80a1938:	6858      	ldr	r0, [r3, #4]
 80a193a:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a193c:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a193e:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1940:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a1942:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a1944:	60e3      	str	r3, [r4, #12]
 80a1946:	4620      	mov	r0, r4
 80a1948:	f7ff ff71 	bl	80a182e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a194c:	4620      	mov	r0, r4
 80a194e:	bd10      	pop	{r4, pc}
 80a1950:	080a42f1 	.word	0x080a42f1

080a1954 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1954:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a1956:	2500      	movs	r5, #0
 80a1958:	460b      	mov	r3, r1
 80a195a:	4604      	mov	r4, r0
 80a195c:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a195e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a1962:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a1966:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a196a:	b14b      	cbz	r3, 80a1980 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a196c:	781a      	ldrb	r2, [r3, #0]
 80a196e:	2a01      	cmp	r2, #1
 80a1970:	d106      	bne.n	80a1980 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a1972:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a1976:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a1978:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a197a:	6143      	str	r3, [r0, #20]
 80a197c:	f7ff ff57 	bl	80a182e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1980:	4620      	mov	r0, r4
 80a1982:	bd38      	pop	{r3, r4, r5, pc}

080a1984 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a1984:	b510      	push	{r4, lr}
    if (!n_) {
 80a1986:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a1988:	4604      	mov	r4, r0
    if (!n_) {
 80a198a:	b163      	cbz	r3, 80a19a6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a198c:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a198e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a1990:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a1992:	3010      	adds	r0, #16
 80a1994:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a1996:	6120      	str	r0, [r4, #16]
    --n_;
 80a1998:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a199a:	b113      	cbz	r3, 80a19a2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a199c:	f7ff feda 	bl	80a1754 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a19a0:	60a0      	str	r0, [r4, #8]
    return true;
 80a19a2:	2001      	movs	r0, #1
 80a19a4:	e000      	b.n	80a19a8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a19a6:	4618      	mov	r0, r3
}
 80a19a8:	bd10      	pop	{r4, pc}

080a19aa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a19aa:	b510      	push	{r4, lr}
    write('}');
 80a19ac:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a19ae:	4604      	mov	r4, r0
    write('}');
 80a19b0:	f7ff ff31 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a19b4:	2301      	movs	r3, #1
}
 80a19b6:	4620      	mov	r0, r4
    state_ = NEXT;
 80a19b8:	7123      	strb	r3, [r4, #4]
}
 80a19ba:	bd10      	pop	{r4, pc}

080a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a19bc:	b508      	push	{r3, lr}
    switch (state_) {
 80a19be:	7903      	ldrb	r3, [r0, #4]
 80a19c0:	2b01      	cmp	r3, #1
 80a19c2:	d002      	beq.n	80a19ca <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a19c4:	2b02      	cmp	r3, #2
 80a19c6:	d004      	beq.n	80a19d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a19c8:	bd08      	pop	{r3, pc}
        write(',');
 80a19ca:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a19cc:	f7ff ff23 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
}
 80a19d0:	e7fa      	b.n	80a19c8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a19d2:	213a      	movs	r1, #58	; 0x3a
 80a19d4:	e7fa      	b.n	80a19cc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a19d6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a19d6:	b510      	push	{r4, lr}
 80a19d8:	4604      	mov	r4, r0
    writeSeparator();
 80a19da:	f7ff ffef 	bl	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a19de:	4620      	mov	r0, r4
 80a19e0:	217b      	movs	r1, #123	; 0x7b
 80a19e2:	f7ff ff18 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a19e6:	2300      	movs	r3, #0
}
 80a19e8:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a19ea:	7123      	strb	r3, [r4, #4]
}
 80a19ec:	bd10      	pop	{r4, pc}
	...

080a19f0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a19f0:	b538      	push	{r3, r4, r5, lr}
 80a19f2:	4604      	mov	r4, r0
 80a19f4:	460d      	mov	r5, r1
    writeSeparator();
 80a19f6:	f7ff ffe1 	bl	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a19fa:	6823      	ldr	r3, [r4, #0]
 80a19fc:	4620      	mov	r0, r4
 80a19fe:	462a      	mov	r2, r5
 80a1a00:	68db      	ldr	r3, [r3, #12]
 80a1a02:	4903      	ldr	r1, [pc, #12]	; (80a1a10 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a1a04:	4798      	blx	r3
    state_ = NEXT;
 80a1a06:	2301      	movs	r3, #1
}
 80a1a08:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a0a:	7123      	strb	r3, [r4, #4]
}
 80a1a0c:	bd38      	pop	{r3, r4, r5, pc}
 80a1a0e:	bf00      	nop
 80a1a10:	080a436c 	.word	0x080a436c

080a1a14 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a1a14:	b538      	push	{r3, r4, r5, lr}
 80a1a16:	4604      	mov	r4, r0
 80a1a18:	460d      	mov	r5, r1
    writeSeparator();
 80a1a1a:	f7ff ffcf 	bl	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a1a1e:	6823      	ldr	r3, [r4, #0]
 80a1a20:	4620      	mov	r0, r4
 80a1a22:	462a      	mov	r2, r5
 80a1a24:	68db      	ldr	r3, [r3, #12]
 80a1a26:	4903      	ldr	r1, [pc, #12]	; (80a1a34 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a1a28:	4798      	blx	r3
    state_ = NEXT;
 80a1a2a:	2301      	movs	r3, #1
}
 80a1a2c:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1a2e:	7123      	strb	r3, [r4, #4]
}
 80a1a30:	bd38      	pop	{r3, r4, r5, pc}
 80a1a32:	bf00      	nop
 80a1a34:	080a436f 	.word	0x080a436f

080a1a38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a3c:	460d      	mov	r5, r1
 80a1a3e:	4617      	mov	r7, r2
    write('"');
 80a1a40:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1a42:	4604      	mov	r4, r0
    write('"');
 80a1a44:	f7ff fee7 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a1a48:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a1a4a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a1ae4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a1a4e:	442f      	add	r7, r5
    while (s != end) {
 80a1a50:	42bd      	cmp	r5, r7
 80a1a52:	462a      	mov	r2, r5
 80a1a54:	d038      	beq.n	80a1ac8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a1a56:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a1a5a:	2e22      	cmp	r6, #34	; 0x22
 80a1a5c:	d003      	beq.n	80a1a66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a5e:	2e5c      	cmp	r6, #92	; 0x5c
 80a1a60:	d001      	beq.n	80a1a66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1a62:	2e1f      	cmp	r6, #31
 80a1a64:	d8f4      	bhi.n	80a1a50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a1a66:	6823      	ldr	r3, [r4, #0]
 80a1a68:	1a52      	subs	r2, r2, r1
 80a1a6a:	4620      	mov	r0, r4
 80a1a6c:	689b      	ldr	r3, [r3, #8]
 80a1a6e:	4798      	blx	r3
            write('\\');
 80a1a70:	215c      	movs	r1, #92	; 0x5c
 80a1a72:	4620      	mov	r0, r4
 80a1a74:	f7ff fecf 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a1a78:	2e0d      	cmp	r6, #13
 80a1a7a:	d80a      	bhi.n	80a1a92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a1a7c:	2e07      	cmp	r6, #7
 80a1a7e:	d91c      	bls.n	80a1aba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1a80:	f1a6 0308 	sub.w	r3, r6, #8
 80a1a84:	2b05      	cmp	r3, #5
 80a1a86:	d818      	bhi.n	80a1aba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1a88:	e8df f003 	tbb	[pc, r3]
 80a1a8c:	17110f0d 	.word	0x17110f0d
 80a1a90:	1513      	.short	0x1513
 80a1a92:	2e22      	cmp	r6, #34	; 0x22
 80a1a94:	d001      	beq.n	80a1a9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a1a96:	2e5c      	cmp	r6, #92	; 0x5c
 80a1a98:	d10f      	bne.n	80a1aba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a1a9a:	4631      	mov	r1, r6
                write('b');
 80a1a9c:	4620      	mov	r0, r4
 80a1a9e:	f7ff feba 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a1aa2:	4629      	mov	r1, r5
    while (s != end) {
 80a1aa4:	e7d4      	b.n	80a1a50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a1aa6:	2162      	movs	r1, #98	; 0x62
 80a1aa8:	e7f8      	b.n	80a1a9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a1aaa:	2174      	movs	r1, #116	; 0x74
 80a1aac:	e7f6      	b.n	80a1a9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a1aae:	216e      	movs	r1, #110	; 0x6e
 80a1ab0:	e7f4      	b.n	80a1a9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a1ab2:	2166      	movs	r1, #102	; 0x66
 80a1ab4:	e7f2      	b.n	80a1a9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a1ab6:	2172      	movs	r1, #114	; 0x72
 80a1ab8:	e7f0      	b.n	80a1a9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a1aba:	6823      	ldr	r3, [r4, #0]
 80a1abc:	4632      	mov	r2, r6
 80a1abe:	4641      	mov	r1, r8
 80a1ac0:	4620      	mov	r0, r4
 80a1ac2:	68db      	ldr	r3, [r3, #12]
 80a1ac4:	4798      	blx	r3
                break;
 80a1ac6:	e7ec      	b.n	80a1aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a1ac8:	428d      	cmp	r5, r1
 80a1aca:	d004      	beq.n	80a1ad6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a1acc:	6823      	ldr	r3, [r4, #0]
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	689b      	ldr	r3, [r3, #8]
 80a1ad2:	1a6a      	subs	r2, r5, r1
 80a1ad4:	4798      	blx	r3
    }
    write('"');
 80a1ad6:	2122      	movs	r1, #34	; 0x22
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	f7ff fe9c 	bl	80a1816 <_ZN5spark10JSONWriter5writeEc>
}
 80a1ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1ae2:	bf00      	nop
 80a1ae4:	080a4372 	.word	0x080a4372

080a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a1ae8:	b570      	push	{r4, r5, r6, lr}
 80a1aea:	4604      	mov	r4, r0
 80a1aec:	460d      	mov	r5, r1
 80a1aee:	4616      	mov	r6, r2
    writeSeparator();
 80a1af0:	f7ff ff64 	bl	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a1af4:	4620      	mov	r0, r4
 80a1af6:	4632      	mov	r2, r6
 80a1af8:	4629      	mov	r1, r5
 80a1afa:	f7ff ff9d 	bl	80a1a38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a1afe:	2302      	movs	r3, #2
}
 80a1b00:	4620      	mov	r0, r4
    state_ = VALUE;
 80a1b02:	7123      	strb	r3, [r4, #4]
}
 80a1b04:	bd70      	pop	{r4, r5, r6, pc}

080a1b06 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a1b06:	b570      	push	{r4, r5, r6, lr}
 80a1b08:	4604      	mov	r4, r0
 80a1b0a:	460d      	mov	r5, r1
 80a1b0c:	4616      	mov	r6, r2
    writeSeparator();
 80a1b0e:	f7ff ff55 	bl	80a19bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1b12:	4620      	mov	r0, r4
 80a1b14:	4632      	mov	r2, r6
 80a1b16:	4629      	mov	r1, r5
 80a1b18:	f7ff ff8e 	bl	80a1a38 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1b1c:	2301      	movs	r3, #1
}
 80a1b1e:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1b20:	7123      	strb	r3, [r4, #4]
}
 80a1b22:	bd70      	pop	{r4, r5, r6, pc}

080a1b24 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1b24:	6880      	ldr	r0, [r0, #8]
 80a1b26:	6803      	ldr	r3, [r0, #0]
 80a1b28:	68db      	ldr	r3, [r3, #12]
 80a1b2a:	4718      	bx	r3

080a1b2c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1b2c:	4770      	bx	lr

080a1b2e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1b2e:	4608      	mov	r0, r1
 80a1b30:	b111      	cbz	r1, 80a1b38 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1b32:	680b      	ldr	r3, [r1, #0]
 80a1b34:	685b      	ldr	r3, [r3, #4]
 80a1b36:	4718      	bx	r3
}
 80a1b38:	4770      	bx	lr

080a1b3a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b3a:	4770      	bx	lr

080a1b3c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1b3c:	4770      	bx	lr

080a1b3e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1b3e:	4770      	bx	lr

080a1b40 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1b40:	b538      	push	{r3, r4, r5, lr}
 80a1b42:	4604      	mov	r4, r0
 80a1b44:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1b46:	6800      	ldr	r0, [r0, #0]
 80a1b48:	212e      	movs	r1, #46	; 0x2e
 80a1b4a:	f002 f9b0 	bl	80a3eae <strchrnul>
    size = s - category;
 80a1b4e:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1b50:	4602      	mov	r2, r0
    size = s - category;
 80a1b52:	1ac0      	subs	r0, r0, r3
 80a1b54:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1b56:	b120      	cbz	r0, 80a1b62 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1b58:	7813      	ldrb	r3, [r2, #0]
 80a1b5a:	b103      	cbz	r3, 80a1b5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1b5c:	3201      	adds	r2, #1
 80a1b5e:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b60:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a1b62:	bd38      	pop	{r3, r4, r5, pc}

080a1b64 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1b64:	b510      	push	{r4, lr}
 80a1b66:	4604      	mov	r4, r0
 80a1b68:	210c      	movs	r1, #12
 80a1b6a:	f002 f80c 	bl	80a3b86 <_ZdlPvj>
 80a1b6e:	4620      	mov	r0, r4
 80a1b70:	bd10      	pop	{r4, pc}

080a1b72 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1b72:	b510      	push	{r4, lr}
 80a1b74:	4604      	mov	r4, r0
 80a1b76:	2104      	movs	r1, #4
 80a1b78:	f002 f805 	bl	80a3b86 <_ZdlPvj>
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	bd10      	pop	{r4, pc}

080a1b80 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1b80:	b510      	push	{r4, lr}
 80a1b82:	4604      	mov	r4, r0
 80a1b84:	2104      	movs	r1, #4
 80a1b86:	f001 fffe 	bl	80a3b86 <_ZdlPvj>
 80a1b8a:	4620      	mov	r0, r4
 80a1b8c:	bd10      	pop	{r4, pc}

080a1b8e <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1b8e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1b90:	f002 f997 	bl	80a3ec2 <strcmp>
}
 80a1b94:	fab0 f080 	clz	r0, r0
 80a1b98:	0940      	lsrs	r0, r0, #5
 80a1b9a:	bd08      	pop	{r3, pc}

080a1b9c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1b9c:	b510      	push	{r4, lr}
 80a1b9e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1ba0:	f001 fd98 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a1ba4:	4284      	cmp	r4, r0
 80a1ba6:	d105      	bne.n	80a1bb4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a1ba8:	f001 fd94 	bl	80a36d4 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1bb0:	f001 bd76 	b.w	80a36a0 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a1bb4:	f001 fdcc 	bl	80a3750 <_Z17_fetch_usbserial1v>
 80a1bb8:	4284      	cmp	r4, r0
 80a1bba:	d102      	bne.n	80a1bc2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1bbc:	f001 fdc8 	bl	80a3750 <_Z17_fetch_usbserial1v>
 80a1bc0:	e7f4      	b.n	80a1bac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1bc2:	f001 fcf1 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
 80a1bc6:	4284      	cmp	r4, r0
 80a1bc8:	d105      	bne.n	80a1bd6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1bca:	f001 fced 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
}
 80a1bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1bd2:	f001 bce6 	b.w	80a35a2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1bd6:	b12c      	cbz	r4, 80a1be4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a1bd8:	6823      	ldr	r3, [r4, #0]
 80a1bda:	4620      	mov	r0, r4
}
 80a1bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1be0:	685b      	ldr	r3, [r3, #4]
 80a1be2:	4718      	bx	r3
 80a1be4:	bd10      	pop	{r4, pc}

080a1be6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1be6:	b538      	push	{r3, r4, r5, lr}
 80a1be8:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1bea:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1bec:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1bee:	f002 f996 	bl	80a3f1e <strlen>
 80a1bf2:	4621      	mov	r1, r4
 80a1bf4:	4602      	mov	r2, r0
 80a1bf6:	4628      	mov	r0, r5
}
 80a1bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1bfc:	f7ff bf83 	b.w	80a1b06 <_ZN5spark10JSONWriter5valueEPKcj>

080a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c00:	b570      	push	{r4, r5, r6, lr}
 80a1c02:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1c04:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a1c06:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1c08:	f002 f989 	bl	80a3f1e <strlen>
 80a1c0c:	6823      	ldr	r3, [r4, #0]
 80a1c0e:	4602      	mov	r2, r0
 80a1c10:	4629      	mov	r1, r5
 80a1c12:	4620      	mov	r0, r4
}
 80a1c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a1c18:	68db      	ldr	r3, [r3, #12]
 80a1c1a:	4718      	bx	r3

080a1c1c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1c1c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1c1e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1c20:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1c24:	2201      	movs	r2, #1
 80a1c26:	68db      	ldr	r3, [r3, #12]
 80a1c28:	f10d 0107 	add.w	r1, sp, #7
 80a1c2c:	4798      	blx	r3
}
 80a1c2e:	b003      	add	sp, #12
 80a1c30:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c34 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a1c34:	b40e      	push	{r1, r2, r3}
 80a1c36:	b503      	push	{r0, r1, lr}
 80a1c38:	ab03      	add	r3, sp, #12
 80a1c3a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1c3e:	2100      	movs	r1, #0
 80a1c40:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1c42:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a1c44:	f001 f81e 	bl	80a2c84 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a1c48:	b002      	add	sp, #8
 80a1c4a:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1c4e:	b003      	add	sp, #12
 80a1c50:	4770      	bx	lr
	...

080a1c54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a1c58:	f04f 0814 	mov.w	r8, #20
 80a1c5c:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a1c60:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1c62:	464c      	mov	r4, r9
 80a1c64:	fb08 f505 	mul.w	r5, r8, r5
 80a1c68:	9300      	str	r3, [sp, #0]
 80a1c6a:	10ab      	asrs	r3, r5, #2
 80a1c6c:	4d17      	ldr	r5, [pc, #92]	; (80a1ccc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1c6e:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1c70:	2d00      	cmp	r5, #0
 80a1c72:	dd23      	ble.n	80a1cbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a1c74:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a1c76:	fb08 f006 	mul.w	r0, r8, r6
 80a1c7a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1c7e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a1c82:	463a      	mov	r2, r7
 80a1c84:	455f      	cmp	r7, fp
 80a1c86:	bf28      	it	cs
 80a1c88:	465a      	movcs	r2, fp
 80a1c8a:	5820      	ldr	r0, [r4, r0]
 80a1c8c:	9101      	str	r1, [sp, #4]
 80a1c8e:	f002 f94e 	bl	80a3f2e <strncmp>
                if (cmp == 0) {
 80a1c92:	2301      	movs	r3, #1
 80a1c94:	9901      	ldr	r1, [sp, #4]
 80a1c96:	b978      	cbnz	r0, 80a1cb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a1c98:	455f      	cmp	r7, fp
 80a1c9a:	d103      	bne.n	80a1ca4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1c9c:	9a00      	ldr	r2, [sp, #0]
 80a1c9e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1ca0:	4635      	mov	r5, r6
 80a1ca2:	e7e5      	b.n	80a1c70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a1ca4:	bf8c      	ite	hi
 80a1ca6:	2001      	movhi	r0, #1
 80a1ca8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1caa:	2800      	cmp	r0, #0
 80a1cac:	d0f8      	beq.n	80a1ca0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1cae:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a1cb0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a1cb4:	3e01      	subs	r6, #1
 80a1cb6:	e7f3      	b.n	80a1ca0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a1cb8:	0fc0      	lsrs	r0, r0, #31
 80a1cba:	e7f6      	b.n	80a1caa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a1cbc:	eba4 0409 	sub.w	r4, r4, r9
}
 80a1cc0:	4802      	ldr	r0, [pc, #8]	; (80a1ccc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1cc2:	10a4      	asrs	r4, r4, #2
 80a1cc4:	4360      	muls	r0, r4
 80a1cc6:	b003      	add	sp, #12
 80a1cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1ccc:	cccccccd 	.word	0xcccccccd

080a1cd0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a1cd2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a1cd4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1cd6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a1cd8:	b303      	cbz	r3, 80a1d1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a1cda:	b1f9      	cbz	r1, 80a1d1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1cdc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1cde:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a1ce2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a1ce4:	a903      	add	r1, sp, #12
 80a1ce6:	a801      	add	r0, sp, #4
 80a1ce8:	f7ff ff2a 	bl	80a1b40 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1cec:	4601      	mov	r1, r0
 80a1cee:	b1a8      	cbz	r0, 80a1d1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1cf0:	f10d 030b 	add.w	r3, sp, #11
 80a1cf4:	4620      	mov	r0, r4
 80a1cf6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a1cf8:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1cfc:	f7ff ffaa 	bl	80a1c54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1d00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1d04:	b153      	cbz	r3, 80a1d1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a1d06:	2314      	movs	r3, #20
 80a1d08:	6824      	ldr	r4, [r4, #0]
 80a1d0a:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1d0e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1d12:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1d14:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1d16:	bfa8      	it	ge
 80a1d18:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a1d1a:	e7e3      	b.n	80a1ce4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1d1c:	4630      	mov	r0, r6
 80a1d1e:	b004      	add	sp, #16
 80a1d20:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1d24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1d24:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1d26:	4c0a      	ldr	r4, [pc, #40]	; (80a1d50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1d28:	7823      	ldrb	r3, [r4, #0]
 80a1d2a:	f3bf 8f5b 	dmb	ish
 80a1d2e:	07db      	lsls	r3, r3, #31
 80a1d30:	d40b      	bmi.n	80a1d4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1d32:	4620      	mov	r0, r4
 80a1d34:	f7fe f9c0 	bl	80a00b8 <__cxa_guard_acquire>
 80a1d38:	b138      	cbz	r0, 80a1d4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1d3a:	4620      	mov	r0, r4
 80a1d3c:	f7fe f9c1 	bl	80a00c2 <__cxa_guard_release>
 80a1d40:	4a04      	ldr	r2, [pc, #16]	; (80a1d54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1d42:	4905      	ldr	r1, [pc, #20]	; (80a1d58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1d44:	4805      	ldr	r0, [pc, #20]	; (80a1d5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1d46:	f001 ff19 	bl	80a3b7c <__aeabi_atexit>
}
 80a1d4a:	4804      	ldr	r0, [pc, #16]	; (80a1d5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1d4c:	bd10      	pop	{r4, pc}
 80a1d4e:	bf00      	nop
 80a1d50:	20000d0c 	.word	0x20000d0c
 80a1d54:	20000084 	.word	0x20000084
 80a1d58:	080a1b3d 	.word	0x080a1b3d
 80a1d5c:	20000014 	.word	0x20000014

080a1d60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1d60:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1d62:	4c0a      	ldr	r4, [pc, #40]	; (80a1d8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1d64:	7823      	ldrb	r3, [r4, #0]
 80a1d66:	f3bf 8f5b 	dmb	ish
 80a1d6a:	07db      	lsls	r3, r3, #31
 80a1d6c:	d40b      	bmi.n	80a1d86 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	f7fe f9a2 	bl	80a00b8 <__cxa_guard_acquire>
 80a1d74:	b138      	cbz	r0, 80a1d86 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1d76:	4620      	mov	r0, r4
 80a1d78:	f7fe f9a3 	bl	80a00c2 <__cxa_guard_release>
 80a1d7c:	4a04      	ldr	r2, [pc, #16]	; (80a1d90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1d7e:	4905      	ldr	r1, [pc, #20]	; (80a1d94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1d80:	4805      	ldr	r0, [pc, #20]	; (80a1d98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1d82:	f001 fefb 	bl	80a3b7c <__aeabi_atexit>
    return &factory;
}
 80a1d86:	4804      	ldr	r0, [pc, #16]	; (80a1d98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1d88:	bd10      	pop	{r4, pc}
 80a1d8a:	bf00      	nop
 80a1d8c:	20000d10 	.word	0x20000d10
 80a1d90:	20000084 	.word	0x20000084
 80a1d94:	080a1b3b 	.word	0x080a1b3b
 80a1d98:	20000018 	.word	0x20000018

080a1d9c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1d9c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1d9e:	2500      	movs	r5, #0
 80a1da0:	4604      	mov	r4, r0
 80a1da2:	e9c0 5500 	strd	r5, r5, [r0]
 80a1da6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a1daa:	6085      	str	r5, [r0, #8]
 80a1dac:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1dae:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1db2:	f7fe fec3 	bl	80a0b3c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1db6:	f7ff ffb5 	bl	80a1d24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1dba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dbc:	f7ff ffd0 	bl	80a1d60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1dc0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1dc2:	6220      	str	r0, [r4, #32]
}
 80a1dc4:	4620      	mov	r0, r4
 80a1dc6:	bd38      	pop	{r3, r4, r5, pc}

080a1dc8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1dc8:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1dca:	4c0b      	ldr	r4, [pc, #44]	; (80a1df8 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1dcc:	7823      	ldrb	r3, [r4, #0]
 80a1dce:	f3bf 8f5b 	dmb	ish
 80a1dd2:	07db      	lsls	r3, r3, #31
 80a1dd4:	d40e      	bmi.n	80a1df4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1dd6:	4620      	mov	r0, r4
 80a1dd8:	f7fe f96e 	bl	80a00b8 <__cxa_guard_acquire>
 80a1ddc:	b150      	cbz	r0, 80a1df4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1dde:	4807      	ldr	r0, [pc, #28]	; (80a1dfc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1de0:	f7ff ffdc 	bl	80a1d9c <_ZN5spark10LogManagerC1Ev>
 80a1de4:	4620      	mov	r0, r4
 80a1de6:	f7fe f96c 	bl	80a00c2 <__cxa_guard_release>
 80a1dea:	4a05      	ldr	r2, [pc, #20]	; (80a1e00 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a1dec:	4905      	ldr	r1, [pc, #20]	; (80a1e04 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a1dee:	4803      	ldr	r0, [pc, #12]	; (80a1dfc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1df0:	f001 fec4 	bl	80a3b7c <__aeabi_atexit>
    return &mgr;
}
 80a1df4:	4801      	ldr	r0, [pc, #4]	; (80a1dfc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1df6:	bd10      	pop	{r4, pc}
 80a1df8:	20000d08 	.word	0x20000d08
 80a1dfc:	20000d18 	.word	0x20000d18
 80a1e00:	20000084 	.word	0x20000084
 80a1e04:	080a227b 	.word	0x080a227b

080a1e08 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1e08:	2300      	movs	r3, #0
 80a1e0a:	4a02      	ldr	r2, [pc, #8]	; (80a1e14 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1e0c:	4902      	ldr	r1, [pc, #8]	; (80a1e18 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1e0e:	4803      	ldr	r0, [pc, #12]	; (80a1e1c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1e10:	f7ff b836 	b.w	80a0e80 <log_set_callbacks>
 80a1e14:	080a2159 	.word	0x080a2159
 80a1e18:	080a20e5 	.word	0x080a20e5
 80a1e1c:	080a2065 	.word	0x080a2065

080a1e20 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1e20:	2300      	movs	r3, #0
 80a1e22:	461a      	mov	r2, r3
 80a1e24:	4619      	mov	r1, r3
 80a1e26:	4618      	mov	r0, r3
 80a1e28:	f7ff b82a 	b.w	80a0e80 <log_set_callbacks>

080a1e2c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e2e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1e30:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e32:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e36:	a801      	add	r0, sp, #4
 80a1e38:	9300      	str	r3, [sp, #0]
 80a1e3a:	f7ff f982 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e3e:	466a      	mov	r2, sp
 80a1e40:	4629      	mov	r1, r5
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	f7ff fd0a 	bl	80a185c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e48:	a801      	add	r0, sp, #4
 80a1e4a:	f7fe fa77 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	b003      	add	sp, #12
 80a1e52:	bd30      	pop	{r4, r5, pc}

080a1e54 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e56:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1e58:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e5a:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e5e:	a801      	add	r0, sp, #4
 80a1e60:	9300      	str	r3, [sp, #0]
 80a1e62:	f7ff f96e 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e66:	466a      	mov	r2, sp
 80a1e68:	4629      	mov	r1, r5
 80a1e6a:	4620      	mov	r0, r4
 80a1e6c:	f7ff fd72 	bl	80a1954 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e70:	a801      	add	r0, sp, #4
 80a1e72:	f7fe fa63 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	b003      	add	sp, #12
 80a1e7a:	bd30      	pop	{r4, r5, pc}

080a1e7c <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e7e:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a1e80:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e82:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1e86:	a801      	add	r0, sp, #4
 80a1e88:	9300      	str	r3, [sp, #0]
 80a1e8a:	f7ff f95a 	bl	80a1142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1e8e:	466a      	mov	r2, sp
 80a1e90:	4629      	mov	r1, r5
 80a1e92:	4620      	mov	r0, r4
 80a1e94:	f7ff fd3a 	bl	80a190c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1e98:	a801      	add	r0, sp, #4
 80a1e9a:	f7fe fa4f 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	b003      	add	sp, #12
 80a1ea2:	bd30      	pop	{r4, r5, pc}

080a1ea4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1ea4:	b570      	push	{r4, r5, r6, lr}
 80a1ea6:	b08a      	sub	sp, #40	; 0x28
 80a1ea8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a1eaa:	4601      	mov	r1, r0
 80a1eac:	a804      	add	r0, sp, #16
 80a1eae:	f7ff ffd1 	bl	80a1e54 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a1eb2:	4e14      	ldr	r6, [pc, #80]	; (80a1f04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a1eb4:	a804      	add	r0, sp, #16
 80a1eb6:	f7ff fd65 	bl	80a1984 <_ZN5spark18JSONObjectIterator4nextEv>
 80a1eba:	b1e8      	cbz	r0, 80a1ef8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a1ebc:	4668      	mov	r0, sp
 80a1ebe:	a904      	add	r1, sp, #16
 80a1ec0:	f7ff ffdc 	bl	80a1e7c <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1ec4:	4631      	mov	r1, r6
 80a1ec6:	9802      	ldr	r0, [sp, #8]
 80a1ec8:	f7ff fe61 	bl	80a1b8e <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a1ecc:	4604      	mov	r4, r0
 80a1ece:	b110      	cbz	r0, 80a1ed6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a1ed0:	1e2c      	subs	r4, r5, #0
 80a1ed2:	bf18      	it	ne
 80a1ed4:	2401      	movne	r4, #1
 80a1ed6:	a801      	add	r0, sp, #4
 80a1ed8:	f7fe fa30 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1edc:	2c00      	cmp	r4, #0
 80a1ede:	d0e9      	beq.n	80a1eb4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a1ee0:	4668      	mov	r0, sp
 80a1ee2:	a904      	add	r1, sp, #16
 80a1ee4:	f7ff ffa2 	bl	80a1e2c <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1ee8:	4668      	mov	r0, sp
 80a1eea:	f7ff fcee 	bl	80a18ca <_ZNK5spark9JSONValue5toIntEv>
 80a1eee:	6028      	str	r0, [r5, #0]
 80a1ef0:	a801      	add	r0, sp, #4
 80a1ef2:	f7fe fa23 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ef6:	e7dd      	b.n	80a1eb4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1ef8:	a805      	add	r0, sp, #20
 80a1efa:	f7fe fa1f 	bl	80a033c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1efe:	b00a      	add	sp, #40	; 0x28
 80a1f00:	bd70      	pop	{r4, r5, r6, pc}
 80a1f02:	bf00      	nop
 80a1f04:	080a4378 	.word	0x080a4378

080a1f08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f0a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1f0c:	4919      	ldr	r1, [pc, #100]	; (80a1f74 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a1f0e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1f10:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a1f12:	f001 ffd6 	bl	80a3ec2 <strcmp>
 80a1f16:	b948      	cbnz	r0, 80a1f2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a1f18:	f001 fbdc 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a1f1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f20:	f001 fbba 	bl	80a3698 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1f24:	f001 fbd6 	bl	80a36d4 <_Z16_fetch_usbserialv>
}
 80a1f28:	b003      	add	sp, #12
 80a1f2a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a1f2c:	4620      	mov	r0, r4
 80a1f2e:	4912      	ldr	r1, [pc, #72]	; (80a1f78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1f30:	f001 ffc7 	bl	80a3ec2 <strcmp>
 80a1f34:	b940      	cbnz	r0, 80a1f48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a1f36:	f001 fc0b 	bl	80a3750 <_Z17_fetch_usbserial1v>
 80a1f3a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1f3e:	f001 fbab 	bl	80a3698 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1f42:	f001 fc05 	bl	80a3750 <_Z17_fetch_usbserial1v>
 80a1f46:	e7ef      	b.n	80a1f28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	490c      	ldr	r1, [pc, #48]	; (80a1f7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1f4c:	f001 ffb9 	bl	80a3ec2 <strcmp>
 80a1f50:	b970      	cbnz	r0, 80a1f70 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1f52:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a1f56:	a901      	add	r1, sp, #4
 80a1f58:	4628      	mov	r0, r5
        int baud = 9600;
 80a1f5a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a1f5c:	f7ff ffa2 	bl	80a1ea4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1f60:	f001 fb22 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
 80a1f64:	9901      	ldr	r1, [sp, #4]
 80a1f66:	f001 fb19 	bl	80a359c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a1f6a:	f001 fb1d 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
 80a1f6e:	e7db      	b.n	80a1f28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1f70:	2000      	movs	r0, #0
 80a1f72:	e7d9      	b.n	80a1f28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1f74:	080a437d 	.word	0x080a437d
 80a1f78:	080a4384 	.word	0x080a4384
 80a1f7c:	080a4387 	.word	0x080a4387

080a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1f80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1f82:	2614      	movs	r6, #20
 80a1f84:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1f88:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1f8a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1f8e:	42ae      	cmp	r6, r5
 80a1f90:	d005      	beq.n	80a1f9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1f92:	f105 0008 	add.w	r0, r5, #8
 80a1f96:	f7ff fff3 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1f9a:	3514      	adds	r5, #20
 80a1f9c:	e7f7      	b.n	80a1f8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a1f9e:	6820      	ldr	r0, [r4, #0]
 80a1fa0:	f7ff f83a 	bl	80a1018 <free>
}
 80a1fa4:	4620      	mov	r0, r4
 80a1fa6:	bd70      	pop	{r4, r5, r6, pc}

080a1fa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1fa8:	b570      	push	{r4, r5, r6, lr}
 80a1faa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1fac:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a1fb0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a1fb4:	42ae      	cmp	r6, r5
 80a1fb6:	d004      	beq.n	80a1fc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a1fb8:	4628      	mov	r0, r5
 80a1fba:	f000 feb8 	bl	80a2d2e <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a1fbe:	3510      	adds	r5, #16
 80a1fc0:	e7f8      	b.n	80a1fb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a1fc2:	6820      	ldr	r0, [r4, #0]
 80a1fc4:	f7ff f828 	bl	80a1018 <free>
}
 80a1fc8:	4620      	mov	r0, r4
 80a1fca:	bd70      	pop	{r4, r5, r6, pc}

080a1fcc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a1fcc:	b510      	push	{r4, lr}
 80a1fce:	4604      	mov	r4, r0
 80a1fd0:	300c      	adds	r0, #12
 80a1fd2:	f7ff ffd5 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	f7ff ffe6 	bl	80a1fa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1fdc:	4620      	mov	r0, r4
 80a1fde:	bd10      	pop	{r4, pc}

080a1fe0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a1fe0:	b510      	push	{r4, lr}
 80a1fe2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1fe4:	4b03      	ldr	r3, [pc, #12]	; (80a1ff4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1fe6:	f840 3b04 	str.w	r3, [r0], #4
 80a1fea:	f7ff ffef 	bl	80a1fcc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	bd10      	pop	{r4, pc}
 80a1ff2:	bf00      	nop
 80a1ff4:	080a4274 	.word	0x080a4274

080a1ff8 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a1ff8:	b510      	push	{r4, lr}
 80a1ffa:	4604      	mov	r4, r0
 80a1ffc:	f7ff fff0 	bl	80a1fe0 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2000:	4620      	mov	r0, r4
 80a2002:	2124      	movs	r1, #36	; 0x24
 80a2004:	f001 fdbf 	bl	80a3b86 <_ZdlPvj>
 80a2008:	4620      	mov	r0, r4
 80a200a:	bd10      	pop	{r4, pc}

080a200c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a200c:	b510      	push	{r4, lr}
 80a200e:	4604      	mov	r4, r0
 80a2010:	4b02      	ldr	r3, [pc, #8]	; (80a201c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a2012:	6003      	str	r3, [r0, #0]
 80a2014:	f7ff ffe4 	bl	80a1fe0 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2018:	4620      	mov	r0, r4
 80a201a:	bd10      	pop	{r4, pc}
 80a201c:	080a4424 	.word	0x080a4424

080a2020 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a2020:	b510      	push	{r4, lr}
 80a2022:	4604      	mov	r4, r0
 80a2024:	f7ff fff2 	bl	80a200c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a2028:	4620      	mov	r0, r4
 80a202a:	2124      	movs	r1, #36	; 0x24
 80a202c:	f001 fdab 	bl	80a3b86 <_ZdlPvj>
 80a2030:	4620      	mov	r0, r4
 80a2032:	bd10      	pop	{r4, pc}

080a2034 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a2034:	2200      	movs	r2, #0
 80a2036:	e9c0 2200 	strd	r2, r2, [r0]
 80a203a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a203c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a203e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2040:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2042:	6004      	str	r4, [r0, #0]
 80a2044:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2046:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2048:	6044      	str	r4, [r0, #4]
 80a204a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a204c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a204e:	6084      	str	r4, [r0, #8]
}
 80a2050:	bd10      	pop	{r4, pc}

080a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a2052:	b510      	push	{r4, lr}
 80a2054:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a2056:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2058:	6818      	ldr	r0, [r3, #0]
 80a205a:	f7fe fd87 	bl	80a0b6c <os_mutex_recursive_unlock>
 80a205e:	4620      	mov	r0, r4
 80a2060:	bd10      	pop	{r4, pc}
	...

080a2064 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a2064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2068:	b087      	sub	sp, #28
 80a206a:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a206c:	4b1c      	ldr	r3, [pc, #112]	; (80a20e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a206e:	4680      	mov	r8, r0
 80a2070:	685b      	ldr	r3, [r3, #4]
 80a2072:	4689      	mov	r9, r1
 80a2074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a2078:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a207a:	b96b      	cbnz	r3, 80a2098 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a207c:	f7ff fea4 	bl	80a1dc8 <_ZN5spark10LogManager8instanceEv>
 80a2080:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2082:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2086:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2088:	9305      	str	r3, [sp, #20]
 80a208a:	f7fe fd67 	bl	80a0b5c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a208e:	7b23      	ldrb	r3, [r4, #12]
 80a2090:	b12b      	cbz	r3, 80a209e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a2092:	a805      	add	r0, sp, #20
 80a2094:	f7ff ffdd 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a2098:	b007      	add	sp, #28
 80a209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a209e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a20a0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a20a4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a20a6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a20aa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a20ae:	45aa      	cmp	sl, r5
 80a20b0:	d012      	beq.n	80a20d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a20b2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a20b6:	4631      	mov	r1, r6
 80a20b8:	1d38      	adds	r0, r7, #4
 80a20ba:	f7ff fe09 	bl	80a1cd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a20be:	4581      	cmp	r9, r0
 80a20c0:	d3f5      	bcc.n	80a20ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a20c2:	9a03      	ldr	r2, [sp, #12]
 80a20c4:	683b      	ldr	r3, [r7, #0]
 80a20c6:	9200      	str	r2, [sp, #0]
 80a20c8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a20cc:	464a      	mov	r2, r9
 80a20ce:	4633      	mov	r3, r6
 80a20d0:	4641      	mov	r1, r8
 80a20d2:	4638      	mov	r0, r7
 80a20d4:	47d8      	blx	fp
 80a20d6:	e7ea      	b.n	80a20ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a20d8:	2300      	movs	r3, #0
 80a20da:	7323      	strb	r3, [r4, #12]
 80a20dc:	e7d9      	b.n	80a2092 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a20de:	bf00      	nop
 80a20e0:	e000ed00 	.word	0xe000ed00

080a20e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a20e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a20e8:	469b      	mov	fp, r3
 80a20ea:	4b1a      	ldr	r3, [pc, #104]	; (80a2154 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a20ec:	4680      	mov	r8, r0
 80a20ee:	685b      	ldr	r3, [r3, #4]
 80a20f0:	4689      	mov	r9, r1
 80a20f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a20f6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a20f8:	b96b      	cbnz	r3, 80a2116 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a20fa:	f7ff fe65 	bl	80a1dc8 <_ZN5spark10LogManager8instanceEv>
 80a20fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2100:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2104:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a2106:	9301      	str	r3, [sp, #4]
 80a2108:	f7fe fd28 	bl	80a0b5c <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a210c:	7b23      	ldrb	r3, [r4, #12]
 80a210e:	b12b      	cbz	r3, 80a211c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a2110:	a801      	add	r0, sp, #4
 80a2112:	f7ff ff9e 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2116:	b003      	add	sp, #12
 80a2118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a211c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a211e:	b2f6      	uxtb	r6, r6
 80a2120:	7323      	strb	r3, [r4, #12]
 80a2122:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a2126:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a212a:	4555      	cmp	r5, sl
 80a212c:	d00e      	beq.n	80a214c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a212e:	f855 7b04 	ldr.w	r7, [r5], #4
 80a2132:	4659      	mov	r1, fp
 80a2134:	1d38      	adds	r0, r7, #4
 80a2136:	f7ff fdcb 	bl	80a1cd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a213a:	4286      	cmp	r6, r0
 80a213c:	d3f5      	bcc.n	80a212a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a213e:	683b      	ldr	r3, [r7, #0]
 80a2140:	464a      	mov	r2, r9
 80a2142:	4641      	mov	r1, r8
 80a2144:	4638      	mov	r0, r7
 80a2146:	68db      	ldr	r3, [r3, #12]
 80a2148:	4798      	blx	r3
 80a214a:	e7ee      	b.n	80a212a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a214c:	2300      	movs	r3, #0
 80a214e:	7323      	strb	r3, [r4, #12]
 80a2150:	e7de      	b.n	80a2110 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a2152:	bf00      	nop
 80a2154:	e000ed00 	.word	0xe000ed00

080a2158 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a2158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a215c:	4b16      	ldr	r3, [pc, #88]	; (80a21b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a215e:	4605      	mov	r5, r0
 80a2160:	685b      	ldr	r3, [r3, #4]
 80a2162:	460f      	mov	r7, r1
 80a2164:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a2168:	bb1b      	cbnz	r3, 80a21b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a216a:	f7ff fe2d 	bl	80a1dc8 <_ZN5spark10LogManager8instanceEv>
 80a216e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2170:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2174:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a2176:	9301      	str	r3, [sp, #4]
 80a2178:	f7fe fcf0 	bl	80a0b5c <os_mutex_recursive_lock>
 80a217c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a2180:	2446      	movs	r4, #70	; 0x46
 80a2182:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2186:	45b0      	cmp	r8, r6
 80a2188:	d109      	bne.n	80a219e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a218a:	a801      	add	r0, sp, #4
 80a218c:	f7ff ff61 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a2190:	42a5      	cmp	r5, r4
 80a2192:	bfb4      	ite	lt
 80a2194:	2000      	movlt	r0, #0
 80a2196:	2001      	movge	r0, #1
}
 80a2198:	b002      	add	sp, #8
 80a219a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a219e:	f856 0b04 	ldr.w	r0, [r6], #4
 80a21a2:	4639      	mov	r1, r7
 80a21a4:	3004      	adds	r0, #4
 80a21a6:	f7ff fd93 	bl	80a1cd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a21aa:	4284      	cmp	r4, r0
 80a21ac:	bfa8      	it	ge
 80a21ae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a21b0:	e7e9      	b.n	80a2186 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a21b2:	2000      	movs	r0, #0
 80a21b4:	e7f0      	b.n	80a2198 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a21b6:	bf00      	nop
 80a21b8:	e000ed00 	.word	0xe000ed00

080a21bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a21bc:	460b      	mov	r3, r1
 80a21be:	b570      	push	{r4, r5, r6, lr}
 80a21c0:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a21c2:	c805      	ldmia	r0, {r0, r2}
 80a21c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a21c8:	4282      	cmp	r2, r0
 80a21ca:	d007      	beq.n	80a21dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a21cc:	4601      	mov	r1, r0
            if (*p == value) {
 80a21ce:	681d      	ldr	r5, [r3, #0]
 80a21d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80a21d4:	42ae      	cmp	r6, r5
 80a21d6:	d003      	beq.n	80a21e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a21d8:	4608      	mov	r0, r1
 80a21da:	e7f5      	b.n	80a21c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a21dc:	2000      	movs	r0, #0
}
 80a21de:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a21e0:	1a52      	subs	r2, r2, r1
 80a21e2:	f001 fe11 	bl	80a3e08 <memmove>
    --size_;
 80a21e6:	6863      	ldr	r3, [r4, #4]
    return true;
 80a21e8:	2001      	movs	r0, #1
    --size_;
 80a21ea:	3b01      	subs	r3, #1
 80a21ec:	6063      	str	r3, [r4, #4]
    return true;
 80a21ee:	e7f6      	b.n	80a21de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a21f0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a21f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a21f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a21f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a21f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a21fa:	9101      	str	r1, [sp, #4]
 80a21fc:	9303      	str	r3, [sp, #12]
 80a21fe:	f7fe fcad 	bl	80a0b5c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a2202:	4620      	mov	r0, r4
 80a2204:	a901      	add	r1, sp, #4
 80a2206:	f7ff ffd9 	bl	80a21bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a220a:	b118      	cbz	r0, 80a2214 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a220c:	6863      	ldr	r3, [r4, #4]
 80a220e:	b90b      	cbnz	r3, 80a2214 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a2210:	f7ff fe06 	bl	80a1e20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2214:	a803      	add	r0, sp, #12
 80a2216:	f7ff ff1c 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a221a:	b004      	add	sp, #16
 80a221c:	bd10      	pop	{r4, pc}

080a221e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a221e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a2220:	b570      	push	{r4, r5, r6, lr}
 80a2222:	4604      	mov	r4, r0
 80a2224:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a2228:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a222c:	42ae      	cmp	r6, r5
 80a222e:	d015      	beq.n	80a225c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a2230:	4620      	mov	r0, r4
 80a2232:	f105 0110 	add.w	r1, r5, #16
 80a2236:	f7ff ffc1 	bl	80a21bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a223a:	6863      	ldr	r3, [r4, #4]
 80a223c:	b90b      	cbnz	r3, 80a2242 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a223e:	f7ff fdef 	bl	80a1e20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a2242:	69e0      	ldr	r0, [r4, #28]
 80a2244:	6929      	ldr	r1, [r5, #16]
 80a2246:	6803      	ldr	r3, [r0, #0]
 80a2248:	68db      	ldr	r3, [r3, #12]
 80a224a:	4798      	blx	r3
        if (h.stream) {
 80a224c:	6969      	ldr	r1, [r5, #20]
 80a224e:	b119      	cbz	r1, 80a2258 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a2250:	6a20      	ldr	r0, [r4, #32]
 80a2252:	6803      	ldr	r3, [r0, #0]
 80a2254:	68db      	ldr	r3, [r3, #12]
 80a2256:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2258:	3518      	adds	r5, #24
 80a225a:	e7e7      	b.n	80a222c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a225c:	2618      	movs	r6, #24
 80a225e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a2262:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a2266:	42ae      	cmp	r6, r5
 80a2268:	d004      	beq.n	80a2274 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a226a:	4628      	mov	r0, r5
 80a226c:	f000 fd5f 	bl	80a2d2e <_ZN6StringD1Ev>
 80a2270:	3518      	adds	r5, #24
 80a2272:	e7f8      	b.n	80a2266 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a2274:	2300      	movs	r3, #0
 80a2276:	6163      	str	r3, [r4, #20]
}
 80a2278:	bd70      	pop	{r4, r5, r6, pc}

080a227a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a227a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a227c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a227e:	f7ff fdcf 	bl	80a1e20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2282:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a2286:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2288:	9301      	str	r3, [sp, #4]
 80a228a:	f7fe fc67 	bl	80a0b5c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a228e:	4620      	mov	r0, r4
 80a2290:	f7ff ffc5 	bl	80a221e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a2294:	a801      	add	r0, sp, #4
 80a2296:	f7ff fedc 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a229a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a229c:	b108      	cbz	r0, 80a22a2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a229e:	f7fe fc55 	bl	80a0b4c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a22a2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a22a6:	2618      	movs	r6, #24
 80a22a8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a22ac:	42ae      	cmp	r6, r5
 80a22ae:	d004      	beq.n	80a22ba <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a22b0:	4628      	mov	r0, r5
 80a22b2:	f000 fd3c 	bl	80a2d2e <_ZN6StringD1Ev>
 80a22b6:	3518      	adds	r5, #24
 80a22b8:	e7f8      	b.n	80a22ac <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a22ba:	6920      	ldr	r0, [r4, #16]
 80a22bc:	f7fe feac 	bl	80a1018 <free>
 80a22c0:	6820      	ldr	r0, [r4, #0]
 80a22c2:	f7fe fea9 	bl	80a1018 <free>
}
 80a22c6:	4620      	mov	r0, r4
 80a22c8:	b002      	add	sp, #8
 80a22ca:	bd70      	pop	{r4, r5, r6, pc}

080a22cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a22cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a22ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22d0:	4606      	mov	r6, r0
 80a22d2:	460c      	mov	r4, r1
 80a22d4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a22d6:	d927      	bls.n	80a2328 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a22d8:	4290      	cmp	r0, r2
 80a22da:	d226      	bcs.n	80a232a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a22dc:	2600      	movs	r6, #0
            --end;
 80a22de:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a22e2:	1a6c      	subs	r4, r5, r1
 80a22e4:	f1a1 0714 	sub.w	r7, r1, #20
 80a22e8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a22ea:	42af      	cmp	r7, r5
 80a22ec:	d03d      	beq.n	80a236a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a22ee:	b1a4      	cbz	r4, 80a231a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a22f0:	682b      	ldr	r3, [r5, #0]
 80a22f2:	6023      	str	r3, [r4, #0]
 80a22f4:	88ab      	ldrh	r3, [r5, #4]
 80a22f6:	80a3      	strh	r3, [r4, #4]
 80a22f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a22fc:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a2300:	6126      	str	r6, [r4, #16]
 80a2302:	80e3      	strh	r3, [r4, #6]
 80a2304:	68ab      	ldr	r3, [r5, #8]
 80a2306:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2308:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a230a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a230c:	68ea      	ldr	r2, [r5, #12]
 80a230e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2310:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2312:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2314:	692a      	ldr	r2, [r5, #16]
 80a2316:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2318:	612b      	str	r3, [r5, #16]
 80a231a:	f105 0008 	add.w	r0, r5, #8
 80a231e:	f7ff fe2f 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a2322:	3d14      	subs	r5, #20
 80a2324:	3c14      	subs	r4, #20
 80a2326:	e7e0      	b.n	80a22ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a2328:	d01f      	beq.n	80a236a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a232a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a232c:	42ac      	cmp	r4, r5
 80a232e:	d01c      	beq.n	80a236a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a2330:	b1a6      	cbz	r6, 80a235c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a2332:	6823      	ldr	r3, [r4, #0]
 80a2334:	6033      	str	r3, [r6, #0]
 80a2336:	88a3      	ldrh	r3, [r4, #4]
 80a2338:	80b3      	strh	r3, [r6, #4]
 80a233a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a233e:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a2342:	6137      	str	r7, [r6, #16]
 80a2344:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a2346:	68a3      	ldr	r3, [r4, #8]
 80a2348:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a234a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a234c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a234e:	68e2      	ldr	r2, [r4, #12]
 80a2350:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2352:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2354:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2356:	6922      	ldr	r2, [r4, #16]
 80a2358:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a235a:	6123      	str	r3, [r4, #16]
 80a235c:	f104 0008 	add.w	r0, r4, #8
 80a2360:	f7ff fe0e 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a2364:	3414      	adds	r4, #20
 80a2366:	3614      	adds	r6, #20
 80a2368:	e7e0      	b.n	80a232c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a236c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a236e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a2372:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a2374:	4604      	mov	r4, r0
 80a2376:	460e      	mov	r6, r1
 80a2378:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a237a:	db0d      	blt.n	80a2398 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a237c:	3501      	adds	r5, #1
        if (n > 0) {
 80a237e:	2d00      	cmp	r5, #0
 80a2380:	6800      	ldr	r0, [r0, #0]
 80a2382:	dd04      	ble.n	80a238e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a2384:	00a9      	lsls	r1, r5, #2
 80a2386:	f7fe fe4f 	bl	80a1028 <realloc>
            if (!d) {
 80a238a:	b918      	cbnz	r0, 80a2394 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a238c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a238e:	f7fe fe43 	bl	80a1018 <free>
        T* d = nullptr;
 80a2392:	2000      	movs	r0, #0
        data_ = d;
 80a2394:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a2396:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a2398:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a239a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a239c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a23a0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a23a2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a23a6:	1d08      	adds	r0, r1, #4
 80a23a8:	f001 fd2e 	bl	80a3e08 <memmove>
    new(p) T(std::move(value));
 80a23ac:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a23b0:	6863      	ldr	r3, [r4, #4]
    return true;
 80a23b2:	2001      	movs	r0, #1
    ++size_;
 80a23b4:	3301      	adds	r3, #1
 80a23b6:	6063      	str	r3, [r4, #4]
    return true;
 80a23b8:	e7e8      	b.n	80a238c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a23ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23bc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a23be:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a23c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a23c4:	460d      	mov	r5, r1
 80a23c6:	9301      	str	r3, [sp, #4]
 80a23c8:	f7fe fbc8 	bl	80a0b5c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a23cc:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a23d0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a23d4:	4283      	cmp	r3, r0
 80a23d6:	461a      	mov	r2, r3
 80a23d8:	d00a      	beq.n	80a23f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a23da:	6812      	ldr	r2, [r2, #0]
 80a23dc:	3304      	adds	r3, #4
 80a23de:	42aa      	cmp	r2, r5
 80a23e0:	d1f8      	bne.n	80a23d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a23e2:	a801      	add	r0, sp, #4
 80a23e4:	f7ff fe35 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a23e8:	2500      	movs	r5, #0
}
 80a23ea:	4628      	mov	r0, r5
 80a23ec:	b003      	add	sp, #12
 80a23ee:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a23f0:	462a      	mov	r2, r5
 80a23f2:	4620      	mov	r0, r4
 80a23f4:	f7ff ffba 	bl	80a236c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a23f8:	4605      	mov	r5, r0
 80a23fa:	2800      	cmp	r0, #0
 80a23fc:	d0f1      	beq.n	80a23e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a23fe:	6863      	ldr	r3, [r4, #4]
 80a2400:	2b01      	cmp	r3, #1
 80a2402:	d101      	bne.n	80a2408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a2404:	f7ff fd00 	bl	80a1e08 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2408:	a801      	add	r0, sp, #4
 80a240a:	f7ff fe22 	bl	80a2052 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a240e:	e7ec      	b.n	80a23ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a2410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a2410:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a2412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2414:	4604      	mov	r4, r0
 80a2416:	460d      	mov	r5, r1
 80a2418:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a241a:	d914      	bls.n	80a2446 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a241c:	4290      	cmp	r0, r2
 80a241e:	d213      	bcs.n	80a2448 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a2420:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a2424:	1a75      	subs	r5, r6, r1
 80a2426:	f1a1 0710 	sub.w	r7, r1, #16
 80a242a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a242c:	42b7      	cmp	r7, r6
 80a242e:	d018      	beq.n	80a2462 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a2430:	b11c      	cbz	r4, 80a243a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a2432:	4631      	mov	r1, r6
 80a2434:	4620      	mov	r0, r4
 80a2436:	f000 fcf4 	bl	80a2e22 <_ZN6StringC1EOS_>
                end->~T();
 80a243a:	4630      	mov	r0, r6
 80a243c:	f000 fc77 	bl	80a2d2e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a2440:	3e10      	subs	r6, #16
 80a2442:	3c10      	subs	r4, #16
 80a2444:	e7f2      	b.n	80a242c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a2446:	d00c      	beq.n	80a2462 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a2448:	42b5      	cmp	r5, r6
 80a244a:	d00a      	beq.n	80a2462 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a244c:	b11c      	cbz	r4, 80a2456 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a244e:	4629      	mov	r1, r5
 80a2450:	4620      	mov	r0, r4
 80a2452:	f000 fce6 	bl	80a2e22 <_ZN6StringC1EOS_>
                p->~T();
 80a2456:	4628      	mov	r0, r5
 80a2458:	f000 fc69 	bl	80a2d2e <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a245c:	3510      	adds	r5, #16
 80a245e:	3410      	adds	r4, #16
 80a2460:	e7f2      	b.n	80a2448 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a2462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2464 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a2464:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a2466:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a2468:	4605      	mov	r5, r0
        if (n > 0) {
 80a246a:	dd11      	ble.n	80a2490 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a246c:	0130      	lsls	r0, r6, #4
 80a246e:	f7fe fdcb 	bl	80a1008 <malloc>
            if (!d) {
 80a2472:	4604      	mov	r4, r0
 80a2474:	b158      	cbz	r0, 80a248e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a2476:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a247a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a247e:	f7ff ffc7 	bl	80a2410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a2482:	6828      	ldr	r0, [r5, #0]
 80a2484:	f7fe fdc8 	bl	80a1018 <free>
        return true;
 80a2488:	2001      	movs	r0, #1
        data_ = d;
 80a248a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a248c:	60ae      	str	r6, [r5, #8]
    }
 80a248e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a2490:	2400      	movs	r4, #0
 80a2492:	e7f6      	b.n	80a2482 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a2494 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2498:	4691      	mov	r9, r2
        capacity_(0) {
 80a249a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a249c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a249e:	b097      	sub	sp, #92	; 0x5c
 80a24a0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a24a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a24a6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a24a8:	4299      	cmp	r1, r3
        capacity_(0) {
 80a24aa:	e9c0 3300 	strd	r3, r3, [r0]
 80a24ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a24b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a24b6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a24ba:	7602      	strb	r2, [r0, #24]
 80a24bc:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a24be:	dc23      	bgt.n	80a2508 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a24c0:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a24c4:	2314      	movs	r3, #20
 80a24c6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a24ca:	42af      	cmp	r7, r5
 80a24cc:	d03b      	beq.n	80a2546 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a24ce:	4629      	mov	r1, r5
 80a24d0:	a80d      	add	r0, sp, #52	; 0x34
 80a24d2:	f000 fca6 	bl	80a2e22 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a24d6:	a90d      	add	r1, sp, #52	; 0x34
 80a24d8:	a811      	add	r0, sp, #68	; 0x44
 80a24da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a24dc:	f000 fca1 	bl	80a2e22 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a24e0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a24e4:	4299      	cmp	r1, r3
 80a24e6:	da1b      	bge.n	80a2520 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a24e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a24ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a24ec:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a24f0:	4631      	mov	r1, r6
 80a24f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a24f6:	f106 0010 	add.w	r0, r6, #16
 80a24fa:	f7ff ff89 	bl	80a2410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a24fe:	b9ee      	cbnz	r6, 80a253c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a2500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2502:	3301      	adds	r3, #1
 80a2504:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a2506:	e011      	b.n	80a252c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a2508:	a80a      	add	r0, sp, #40	; 0x28
 80a250a:	f7ff ffab 	bl	80a2464 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a250e:	2800      	cmp	r0, #0
 80a2510:	d1d6      	bne.n	80a24c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a2512:	a80a      	add	r0, sp, #40	; 0x28
 80a2514:	f7ff fd48 	bl	80a1fa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a2518:	4620      	mov	r0, r4
 80a251a:	b017      	add	sp, #92	; 0x5c
 80a251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2520:	3101      	adds	r1, #1
 80a2522:	a80a      	add	r0, sp, #40	; 0x28
 80a2524:	f7ff ff9e 	bl	80a2464 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2528:	2800      	cmp	r0, #0
 80a252a:	d1dd      	bne.n	80a24e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a252c:	a811      	add	r0, sp, #68	; 0x44
 80a252e:	f000 fbfe 	bl	80a2d2e <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a2532:	a80d      	add	r0, sp, #52	; 0x34
 80a2534:	f000 fbfb 	bl	80a2d2e <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a2538:	3514      	adds	r5, #20
 80a253a:	e7c6      	b.n	80a24ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a253c:	4630      	mov	r0, r6
 80a253e:	a911      	add	r1, sp, #68	; 0x44
 80a2540:	f000 fc6f 	bl	80a2e22 <_ZN6StringC1EOS_>
 80a2544:	e7dc      	b.n	80a2500 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a2546:	2600      	movs	r6, #0
 80a2548:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a254c:	4637      	mov	r7, r6
 80a254e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a2552:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a2554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a2558:	429e      	cmp	r6, r3
 80a255a:	f280 8097 	bge.w	80a268c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a255e:	0133      	lsls	r3, r6, #4
 80a2560:	58d3      	ldr	r3, [r2, r3]
 80a2562:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a2564:	b90b      	cbnz	r3, 80a256a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a2566:	3601      	adds	r6, #1
 80a2568:	e7f4      	b.n	80a2554 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a256a:	fb0a f306 	mul.w	r3, sl, r6
 80a256e:	9709      	str	r7, [sp, #36]	; 0x24
 80a2570:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a2572:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a2574:	a909      	add	r1, sp, #36	; 0x24
 80a2576:	a808      	add	r0, sp, #32
 80a2578:	f7ff fae2 	bl	80a1b40 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a257c:	4683      	mov	fp, r0
 80a257e:	2800      	cmp	r0, #0
 80a2580:	d0f1      	beq.n	80a2566 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2582:	4601      	mov	r1, r0
 80a2584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2586:	4628      	mov	r0, r5
 80a2588:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a258c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2590:	f7ff fb60 	bl	80a1c54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2594:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2598:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a259a:	f1b8 0f00 	cmp.w	r8, #0
 80a259e:	d166      	bne.n	80a266e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a25a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a25a4:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a25a8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a25ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a25b0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a25b4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a25b8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25bc:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a25c0:	4293      	cmp	r3, r2
 80a25c2:	db1a      	blt.n	80a25fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a25c4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a25c8:	f1bb 0f00 	cmp.w	fp, #0
 80a25cc:	dd4a      	ble.n	80a2664 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a25ce:	fb0a f00b 	mul.w	r0, sl, fp
 80a25d2:	f7fe fd19 	bl	80a1008 <malloc>
            if (!d) {
 80a25d6:	9004      	str	r0, [sp, #16]
 80a25d8:	2800      	cmp	r0, #0
 80a25da:	d045      	beq.n	80a2668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a25dc:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a25e0:	fb0a 1202 	mla	r2, sl, r2, r1
 80a25e4:	f7ff fe72 	bl	80a22cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a25e8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a25ea:	6828      	ldr	r0, [r5, #0]
 80a25ec:	9304      	str	r3, [sp, #16]
 80a25ee:	f7fe fd13 	bl	80a1018 <free>
        data_ = d;
 80a25f2:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a25f4:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a25f8:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a25fa:	9b01      	ldr	r3, [sp, #4]
 80a25fc:	f8d5 b000 	ldr.w	fp, [r5]
 80a2600:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a2604:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a2606:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a260a:	f101 0014 	add.w	r0, r1, #20
 80a260e:	fb0a b202 	mla	r2, sl, r2, fp
 80a2612:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a2614:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a2616:	f7ff fe59 	bl	80a22cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a261a:	9904      	ldr	r1, [sp, #16]
 80a261c:	b1a9      	cbz	r1, 80a264a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a261e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a2620:	9b05      	ldr	r3, [sp, #20]
 80a2622:	f84b 2003 	str.w	r2, [fp, r3]
 80a2626:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a262a:	808b      	strh	r3, [r1, #4]
 80a262c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a2630:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a2634:	610f      	str	r7, [r1, #16]
 80a2636:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a2638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a263a:	608b      	str	r3, [r1, #8]
 80a263c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a263e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a2640:	60cb      	str	r3, [r1, #12]
 80a2642:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a2644:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a2646:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2648:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a264a:	686b      	ldr	r3, [r5, #4]
 80a264c:	3301      	adds	r3, #1
 80a264e:	606b      	str	r3, [r5, #4]
 80a2650:	a813      	add	r0, sp, #76	; 0x4c
 80a2652:	f7ff fc95 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2656:	f1b8 0f00 	cmp.w	r8, #0
 80a265a:	d008      	beq.n	80a266e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a265c:	a80d      	add	r0, sp, #52	; 0x34
 80a265e:	f7ff fc8f 	bl	80a1f80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2662:	e756      	b.n	80a2512 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a2664:	4643      	mov	r3, r8
 80a2666:	e7c0      	b.n	80a25ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2668:	f04f 0801 	mov.w	r8, #1
 80a266c:	e7f0      	b.n	80a2650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a266e:	9b01      	ldr	r3, [sp, #4]
 80a2670:	682d      	ldr	r5, [r5, #0]
 80a2672:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a2676:	9b08      	ldr	r3, [sp, #32]
 80a2678:	781b      	ldrb	r3, [r3, #0]
 80a267a:	b92b      	cbnz	r3, 80a2688 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a267c:	f8d9 3000 	ldr.w	r3, [r9]
 80a2680:	9a02      	ldr	r2, [sp, #8]
 80a2682:	4413      	add	r3, r2
 80a2684:	7c1b      	ldrb	r3, [r3, #16]
 80a2686:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a2688:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a268a:	e773      	b.n	80a2574 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a268c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a268e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2690:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2692:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2694:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2696:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a2698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a269a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a269c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a269e:	60a2      	str	r2, [r4, #8]
 80a26a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a26a2:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26a4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a26a6:	60e2      	str	r2, [r4, #12]
 80a26a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a26aa:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26ac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a26ae:	6122      	str	r2, [r4, #16]
 80a26b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a26b2:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a26b4:	9b03      	ldr	r3, [sp, #12]
 80a26b6:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a26b8:	6162      	str	r2, [r4, #20]
 80a26ba:	7623      	strb	r3, [r4, #24]
 80a26bc:	e7ce      	b.n	80a265c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a26c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a26c2:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a26c4:	460e      	mov	r6, r1
 80a26c6:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a26c8:	4b08      	ldr	r3, [pc, #32]	; (80a26ec <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a26ca:	4611      	mov	r1, r2
 80a26cc:	f845 3b04 	str.w	r3, [r5], #4
 80a26d0:	a801      	add	r0, sp, #4
 80a26d2:	f7fd ff40 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a26d6:	4631      	mov	r1, r6
 80a26d8:	aa01      	add	r2, sp, #4
 80a26da:	4628      	mov	r0, r5
 80a26dc:	f7ff feda 	bl	80a2494 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a26e0:	a801      	add	r0, sp, #4
 80a26e2:	f7fd fef7 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a26e6:	4620      	mov	r0, r4
 80a26e8:	b004      	add	sp, #16
 80a26ea:	bd70      	pop	{r4, r5, r6, pc}
 80a26ec:	080a4274 	.word	0x080a4274

080a26f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a26f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a26f2:	460f      	mov	r7, r1
 80a26f4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a26f6:	4638      	mov	r0, r7
 80a26f8:	4925      	ldr	r1, [pc, #148]	; (80a2790 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a26fa:	4616      	mov	r6, r2
 80a26fc:	461d      	mov	r5, r3
 80a26fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2700:	f001 fbdf 	bl	80a3ec2 <strcmp>
 80a2704:	bb00      	cbnz	r0, 80a2748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a2706:	b1e4      	cbz	r4, 80a2742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a2708:	4629      	mov	r1, r5
 80a270a:	4668      	mov	r0, sp
 80a270c:	f7ff fc92 	bl	80a2034 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2710:	2024      	movs	r0, #36	; 0x24
 80a2712:	4920      	ldr	r1, [pc, #128]	; (80a2794 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2714:	f001 fa39 	bl	80a3b8a <_ZnwjRKSt9nothrow_t>
 80a2718:	4605      	mov	r5, r0
 80a271a:	b170      	cbz	r0, 80a273a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a271c:	4669      	mov	r1, sp
 80a271e:	a803      	add	r0, sp, #12
 80a2720:	f7fd ff19 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2724:	4631      	mov	r1, r6
 80a2726:	aa03      	add	r2, sp, #12
 80a2728:	4628      	mov	r0, r5
 80a272a:	f7ff ffc9 	bl	80a26c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a272e:	a803      	add	r0, sp, #12
 80a2730:	f7fd fed0 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a2734:	4b18      	ldr	r3, [pc, #96]	; (80a2798 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a2736:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a2738:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a273a:	4668      	mov	r0, sp
 80a273c:	f7fd feca 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2740:	462c      	mov	r4, r5
}
 80a2742:	4620      	mov	r0, r4
 80a2744:	b007      	add	sp, #28
 80a2746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a2748:	4638      	mov	r0, r7
 80a274a:	4914      	ldr	r1, [pc, #80]	; (80a279c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a274c:	f001 fbb9 	bl	80a3ec2 <strcmp>
 80a2750:	b9e0      	cbnz	r0, 80a278c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a2752:	2c00      	cmp	r4, #0
 80a2754:	d0f5      	beq.n	80a2742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a2756:	4629      	mov	r1, r5
 80a2758:	4668      	mov	r0, sp
 80a275a:	f7ff fc6b 	bl	80a2034 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a275e:	2024      	movs	r0, #36	; 0x24
 80a2760:	490c      	ldr	r1, [pc, #48]	; (80a2794 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2762:	f001 fa12 	bl	80a3b8a <_ZnwjRKSt9nothrow_t>
 80a2766:	4605      	mov	r5, r0
 80a2768:	2800      	cmp	r0, #0
 80a276a:	d0e6      	beq.n	80a273a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a276c:	4669      	mov	r1, sp
 80a276e:	a803      	add	r0, sp, #12
 80a2770:	f7fd fef1 	bl	80a0556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2774:	4631      	mov	r1, r6
 80a2776:	aa03      	add	r2, sp, #12
 80a2778:	4628      	mov	r0, r5
 80a277a:	f7ff ffa1 	bl	80a26c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a277e:	a803      	add	r0, sp, #12
 80a2780:	f7fd fea8 	bl	80a04d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2784:	4b06      	ldr	r3, [pc, #24]	; (80a27a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a2786:	622c      	str	r4, [r5, #32]
 80a2788:	602b      	str	r3, [r5, #0]
}
 80a278a:	e7d6      	b.n	80a273a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a278c:	2400      	movs	r4, #0
 80a278e:	e7d8      	b.n	80a2742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a2790:	080a438f 	.word	0x080a438f
 80a2794:	080a45e4 	.word	0x080a45e4
 80a2798:	080a4424 	.word	0x080a4424
 80a279c:	080a4393 	.word	0x080a4393
 80a27a0:	080a440c 	.word	0x080a440c

080a27a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a27a4:	4b01      	ldr	r3, [pc, #4]	; (80a27ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a27a6:	4a02      	ldr	r2, [pc, #8]	; (80a27b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a27a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a27aa:	4770      	bx	lr
 80a27ac:	20000d14 	.word	0x20000d14
 80a27b0:	080a43a4 	.word	0x080a43a4

080a27b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a27b8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a27ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27be:	4604      	mov	r4, r0
 80a27c0:	460e      	mov	r6, r1
 80a27c2:	4617      	mov	r7, r2
 80a27c4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a27c6:	f000 ff85 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a27ca:	4581      	cmp	r9, r0
 80a27cc:	d04d      	beq.n	80a286a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a27ce:	792b      	ldrb	r3, [r5, #4]
 80a27d0:	0719      	lsls	r1, r3, #28
 80a27d2:	d504      	bpl.n	80a27de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a27d4:	4620      	mov	r0, r4
 80a27d6:	696a      	ldr	r2, [r5, #20]
 80a27d8:	4954      	ldr	r1, [pc, #336]	; (80a292c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a27da:	f7ff fa2b 	bl	80a1c34 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a27de:	f1b8 0f00 	cmp.w	r8, #0
 80a27e2:	d00d      	beq.n	80a2800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a27e4:	215b      	movs	r1, #91	; 0x5b
 80a27e6:	4620      	mov	r0, r4
 80a27e8:	f7ff fa18 	bl	80a1c1c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a27ec:	4641      	mov	r1, r8
 80a27ee:	4620      	mov	r0, r4
 80a27f0:	f7ff fa06 	bl	80a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a27f4:	6823      	ldr	r3, [r4, #0]
 80a27f6:	2202      	movs	r2, #2
 80a27f8:	4620      	mov	r0, r4
 80a27fa:	68db      	ldr	r3, [r3, #12]
 80a27fc:	494c      	ldr	r1, [pc, #304]	; (80a2930 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a27fe:	4798      	blx	r3
    if (attr.has_file) {
 80a2800:	792b      	ldrb	r3, [r5, #4]
 80a2802:	07da      	lsls	r2, r3, #31
 80a2804:	d524      	bpl.n	80a2850 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a2806:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a280a:	212f      	movs	r1, #47	; 0x2f
 80a280c:	4640      	mov	r0, r8
 80a280e:	f001 fba0 	bl	80a3f52 <strrchr>
    if (s1) {
 80a2812:	b108      	cbz	r0, 80a2818 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a2814:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a2818:	4641      	mov	r1, r8
 80a281a:	4620      	mov	r0, r4
 80a281c:	f7ff f9f0 	bl	80a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a2820:	792b      	ldrb	r3, [r5, #4]
 80a2822:	079b      	lsls	r3, r3, #30
 80a2824:	d508      	bpl.n	80a2838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a2826:	213a      	movs	r1, #58	; 0x3a
 80a2828:	4620      	mov	r0, r4
 80a282a:	f7ff f9f7 	bl	80a1c1c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a282e:	4620      	mov	r0, r4
 80a2830:	68ea      	ldr	r2, [r5, #12]
 80a2832:	4940      	ldr	r1, [pc, #256]	; (80a2934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a2834:	f7ff f9fe 	bl	80a1c34 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a2838:	792a      	ldrb	r2, [r5, #4]
 80a283a:	6823      	ldr	r3, [r4, #0]
 80a283c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a2840:	4620      	mov	r0, r4
            write(", ", 2);
 80a2842:	f04f 0202 	mov.w	r2, #2
 80a2846:	68db      	ldr	r3, [r3, #12]
 80a2848:	bf14      	ite	ne
 80a284a:	493b      	ldrne	r1, [pc, #236]	; (80a2938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a284c:	493b      	ldreq	r1, [pc, #236]	; (80a293c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a284e:	4798      	blx	r3
    if (attr.has_function) {
 80a2850:	792b      	ldrb	r3, [r5, #4]
 80a2852:	0758      	lsls	r0, r3, #29
 80a2854:	d51d      	bpl.n	80a2892 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2856:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2858:	460b      	mov	r3, r1
 80a285a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a285c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a2860:	b160      	cbz	r0, 80a287c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a2862:	2820      	cmp	r0, #32
 80a2864:	d108      	bne.n	80a2878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a2866:	4619      	mov	r1, r3
 80a2868:	e7f7      	b.n	80a285a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a286a:	4835      	ldr	r0, [pc, #212]	; (80a2940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a286c:	f000 f967 	bl	80a2b3e <_ZN5spark12NetworkClass9listeningEv>
 80a2870:	2800      	cmp	r0, #0
 80a2872:	d0ac      	beq.n	80a27ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a2874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a2878:	2828      	cmp	r0, #40	; 0x28
 80a287a:	d1ee      	bne.n	80a285a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a287c:	6823      	ldr	r3, [r4, #0]
 80a287e:	1a52      	subs	r2, r2, r1
 80a2880:	4620      	mov	r0, r4
 80a2882:	68db      	ldr	r3, [r3, #12]
 80a2884:	4798      	blx	r3
        write("(): ", 4);
 80a2886:	6823      	ldr	r3, [r4, #0]
 80a2888:	2204      	movs	r2, #4
 80a288a:	4620      	mov	r0, r4
 80a288c:	68db      	ldr	r3, [r3, #12]
 80a288e:	492d      	ldr	r1, [pc, #180]	; (80a2944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a2890:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a2892:	2100      	movs	r1, #0
 80a2894:	4638      	mov	r0, r7
 80a2896:	f7fe faeb 	bl	80a0e70 <log_level_name>
 80a289a:	4601      	mov	r1, r0
    write(s);
 80a289c:	4620      	mov	r0, r4
 80a289e:	f7ff f9af 	bl	80a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a28a2:	6823      	ldr	r3, [r4, #0]
 80a28a4:	2202      	movs	r2, #2
 80a28a6:	4620      	mov	r0, r4
 80a28a8:	68db      	ldr	r3, [r3, #12]
 80a28aa:	4924      	ldr	r1, [pc, #144]	; (80a293c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a28ac:	4798      	blx	r3
    if (msg) {
 80a28ae:	b11e      	cbz	r6, 80a28b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a28b0:	4631      	mov	r1, r6
 80a28b2:	4620      	mov	r0, r4
 80a28b4:	f7ff f9a4 	bl	80a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a28b8:	792b      	ldrb	r3, [r5, #4]
 80a28ba:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a28be:	d02c      	beq.n	80a291a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a28c0:	6823      	ldr	r3, [r4, #0]
 80a28c2:	4921      	ldr	r1, [pc, #132]	; (80a2948 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a28c4:	68db      	ldr	r3, [r3, #12]
 80a28c6:	2202      	movs	r2, #2
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	4798      	blx	r3
        if (attr.has_code) {
 80a28cc:	792b      	ldrb	r3, [r5, #4]
 80a28ce:	06d9      	lsls	r1, r3, #27
 80a28d0:	d50a      	bpl.n	80a28e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a28d2:	6823      	ldr	r3, [r4, #0]
 80a28d4:	2207      	movs	r2, #7
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	491c      	ldr	r1, [pc, #112]	; (80a294c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a28da:	68db      	ldr	r3, [r3, #12]
 80a28dc:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a28de:	4620      	mov	r0, r4
 80a28e0:	69aa      	ldr	r2, [r5, #24]
 80a28e2:	491b      	ldr	r1, [pc, #108]	; (80a2950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a28e4:	f7ff f9a6 	bl	80a1c34 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a28e8:	792b      	ldrb	r3, [r5, #4]
 80a28ea:	069a      	lsls	r2, r3, #26
 80a28ec:	d511      	bpl.n	80a2912 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a28ee:	06db      	lsls	r3, r3, #27
 80a28f0:	d505      	bpl.n	80a28fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a28f2:	6823      	ldr	r3, [r4, #0]
 80a28f4:	2202      	movs	r2, #2
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	68db      	ldr	r3, [r3, #12]
 80a28fa:	490f      	ldr	r1, [pc, #60]	; (80a2938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a28fc:	4798      	blx	r3
            write("details = ", 10);
 80a28fe:	6823      	ldr	r3, [r4, #0]
 80a2900:	4620      	mov	r0, r4
 80a2902:	4914      	ldr	r1, [pc, #80]	; (80a2954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2904:	220a      	movs	r2, #10
 80a2906:	68db      	ldr	r3, [r3, #12]
 80a2908:	4798      	blx	r3
            write(attr.details);
 80a290a:	4620      	mov	r0, r4
 80a290c:	69e9      	ldr	r1, [r5, #28]
 80a290e:	f7ff f977 	bl	80a1c00 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a2912:	215d      	movs	r1, #93	; 0x5d
 80a2914:	4620      	mov	r0, r4
 80a2916:	f7ff f981 	bl	80a1c1c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a291a:	6823      	ldr	r3, [r4, #0]
 80a291c:	4620      	mov	r0, r4
}
 80a291e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a2922:	2202      	movs	r2, #2
 80a2924:	68db      	ldr	r3, [r3, #12]
 80a2926:	490c      	ldr	r1, [pc, #48]	; (80a2958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a2928:	4718      	bx	r3
 80a292a:	bf00      	nop
 80a292c:	080a43a8 	.word	0x080a43a8
 80a2930:	080a43af 	.word	0x080a43af
 80a2934:	080a436c 	.word	0x080a436c
 80a2938:	080a43b2 	.word	0x080a43b2
 80a293c:	080a43b7 	.word	0x080a43b7
 80a2940:	20000d40 	.word	0x20000d40
 80a2944:	080a43b5 	.word	0x080a43b5
 80a2948:	080a43ba 	.word	0x080a43ba
 80a294c:	080a43bd 	.word	0x080a43bd
 80a2950:	080a43c5 	.word	0x080a43c5
 80a2954:	080a43c8 	.word	0x080a43c8
 80a2958:	080a42ef 	.word	0x080a42ef

080a295c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a295c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2960:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a2962:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2966:	4605      	mov	r5, r0
 80a2968:	460f      	mov	r7, r1
 80a296a:	4690      	mov	r8, r2
 80a296c:	461e      	mov	r6, r3
 80a296e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2970:	f000 feb0 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a2974:	4581      	cmp	r9, r0
 80a2976:	d105      	bne.n	80a2984 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a2978:	4849      	ldr	r0, [pc, #292]	; (80a2aa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a297a:	f000 f8e0 	bl	80a2b3e <_ZN5spark12NetworkClass9listeningEv>
 80a297e:	2800      	cmp	r0, #0
 80a2980:	f040 808a 	bne.w	80a2a98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a2984:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a2988:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a298a:	4a46      	ldr	r2, [pc, #280]	; (80a2aa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a298c:	a801      	add	r0, sp, #4
 80a298e:	9201      	str	r2, [sp, #4]
 80a2990:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a2992:	f88d 9008 	strb.w	r9, [sp, #8]
 80a2996:	f7ff f81e 	bl	80a19d6 <_ZN5spark10JSONWriter11beginObjectEv>
 80a299a:	4649      	mov	r1, r9
 80a299c:	4640      	mov	r0, r8
 80a299e:	f7fe fa67 	bl	80a0e70 <log_level_name>
 80a29a2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a29a4:	4940      	ldr	r1, [pc, #256]	; (80a2aa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a29a6:	2201      	movs	r2, #1
 80a29a8:	a801      	add	r0, sp, #4
 80a29aa:	f7ff f89d 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29ae:	4641      	mov	r1, r8
 80a29b0:	f7ff f919 	bl	80a1be6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a29b4:	b13f      	cbz	r7, 80a29c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a29b6:	493d      	ldr	r1, [pc, #244]	; (80a2aac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a29b8:	2201      	movs	r2, #1
 80a29ba:	a801      	add	r0, sp, #4
 80a29bc:	f7ff f894 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29c0:	4639      	mov	r1, r7
 80a29c2:	f7ff f910 	bl	80a1be6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a29c6:	b13e      	cbz	r6, 80a29d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a29c8:	4939      	ldr	r1, [pc, #228]	; (80a2ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a29ca:	2201      	movs	r2, #1
 80a29cc:	a801      	add	r0, sp, #4
 80a29ce:	f7ff f88b 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29d2:	4631      	mov	r1, r6
 80a29d4:	f7ff f907 	bl	80a1be6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a29d8:	7923      	ldrb	r3, [r4, #4]
 80a29da:	07df      	lsls	r7, r3, #31
 80a29dc:	d50e      	bpl.n	80a29fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a29de:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a29e0:	212f      	movs	r1, #47	; 0x2f
 80a29e2:	4630      	mov	r0, r6
 80a29e4:	f001 fab5 	bl	80a3f52 <strrchr>
    if (s1) {
 80a29e8:	b100      	cbz	r0, 80a29ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a29ea:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a29ec:	4931      	ldr	r1, [pc, #196]	; (80a2ab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a29ee:	2201      	movs	r2, #1
 80a29f0:	a801      	add	r0, sp, #4
 80a29f2:	f7ff f879 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a29f6:	4631      	mov	r1, r6
 80a29f8:	f7ff f8f5 	bl	80a1be6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a29fc:	7923      	ldrb	r3, [r4, #4]
 80a29fe:	079e      	lsls	r6, r3, #30
 80a2a00:	d507      	bpl.n	80a2a12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2a02:	492d      	ldr	r1, [pc, #180]	; (80a2ab8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2a04:	2202      	movs	r2, #2
 80a2a06:	a801      	add	r0, sp, #4
 80a2a08:	f7ff f86e 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a0c:	68e1      	ldr	r1, [r4, #12]
 80a2a0e:	f7fe ffef 	bl	80a19f0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a2a12:	7923      	ldrb	r3, [r4, #4]
 80a2a14:	0758      	lsls	r0, r3, #29
 80a2a16:	d514      	bpl.n	80a2a42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2a18:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2a1a:	4633      	mov	r3, r6
 80a2a1c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a2a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2a22:	b12a      	cbz	r2, 80a2a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a2a24:	2a20      	cmp	r2, #32
 80a2a26:	d101      	bne.n	80a2a2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a2a28:	461e      	mov	r6, r3
 80a2a2a:	e7f7      	b.n	80a2a1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a2a2c:	2a28      	cmp	r2, #40	; 0x28
 80a2a2e:	d1f5      	bne.n	80a2a1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a2a30:	2202      	movs	r2, #2
 80a2a32:	4922      	ldr	r1, [pc, #136]	; (80a2abc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2a34:	a801      	add	r0, sp, #4
 80a2a36:	f7ff f857 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a3a:	4631      	mov	r1, r6
 80a2a3c:	1bba      	subs	r2, r7, r6
 80a2a3e:	f7ff f862 	bl	80a1b06 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a2a42:	7923      	ldrb	r3, [r4, #4]
 80a2a44:	0719      	lsls	r1, r3, #28
 80a2a46:	d507      	bpl.n	80a2a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a2a48:	491d      	ldr	r1, [pc, #116]	; (80a2ac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a2a4a:	2201      	movs	r2, #1
 80a2a4c:	a801      	add	r0, sp, #4
 80a2a4e:	f7ff f84b 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a52:	6961      	ldr	r1, [r4, #20]
 80a2a54:	f7fe ffde 	bl	80a1a14 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a2a58:	7923      	ldrb	r3, [r4, #4]
 80a2a5a:	06da      	lsls	r2, r3, #27
 80a2a5c:	d508      	bpl.n	80a2a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a2a5e:	2204      	movs	r2, #4
 80a2a60:	4918      	ldr	r1, [pc, #96]	; (80a2ac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a2a62:	eb0d 0002 	add.w	r0, sp, r2
 80a2a66:	f7ff f83f 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a6a:	69a1      	ldr	r1, [r4, #24]
 80a2a6c:	f7fe ffc0 	bl	80a19f0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2a70:	7923      	ldrb	r3, [r4, #4]
 80a2a72:	069b      	lsls	r3, r3, #26
 80a2a74:	d507      	bpl.n	80a2a86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2a76:	4914      	ldr	r1, [pc, #80]	; (80a2ac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2a78:	2206      	movs	r2, #6
 80a2a7a:	a801      	add	r0, sp, #4
 80a2a7c:	f7ff f834 	bl	80a1ae8 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2a80:	69e1      	ldr	r1, [r4, #28]
 80a2a82:	f7ff f8b0 	bl	80a1be6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2a86:	a801      	add	r0, sp, #4
 80a2a88:	f7fe ff8f 	bl	80a19aa <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2a8c:	6a28      	ldr	r0, [r5, #32]
 80a2a8e:	2202      	movs	r2, #2
 80a2a90:	6803      	ldr	r3, [r0, #0]
 80a2a92:	490e      	ldr	r1, [pc, #56]	; (80a2acc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2a94:	68db      	ldr	r3, [r3, #12]
 80a2a96:	4798      	blx	r3
}
 80a2a98:	b005      	add	sp, #20
 80a2a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2a9e:	bf00      	nop
 80a2aa0:	20000d40 	.word	0x20000d40
 80a2aa4:	080a43f4 	.word	0x080a43f4
 80a2aa8:	080a4382 	.word	0x080a4382
 80a2aac:	080a43d3 	.word	0x080a43d3
 80a2ab0:	080a43d5 	.word	0x080a43d5
 80a2ab4:	080a43d7 	.word	0x080a43d7
 80a2ab8:	080a43d9 	.word	0x080a43d9
 80a2abc:	080a43dc 	.word	0x080a43dc
 80a2ac0:	080a417f 	.word	0x080a417f
 80a2ac4:	080a43df 	.word	0x080a43df
 80a2ac8:	080a43e4 	.word	0x080a43e4
 80a2acc:	080a42ef 	.word	0x080a42ef

080a2ad0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ad0:	2300      	movs	r3, #0
 80a2ad2:	6840      	ldr	r0, [r0, #4]
 80a2ad4:	461a      	mov	r2, r3
 80a2ad6:	f7fe ba37 	b.w	80a0f48 <network_connect>

080a2ada <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2ada:	2200      	movs	r2, #0
 80a2adc:	2102      	movs	r1, #2
 80a2ade:	6840      	ldr	r0, [r0, #4]
 80a2ae0:	f7fe ba42 	b.w	80a0f68 <network_disconnect>

080a2ae4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ae4:	2200      	movs	r2, #0
 80a2ae6:	6840      	ldr	r0, [r0, #4]
 80a2ae8:	4611      	mov	r1, r2
 80a2aea:	f7fe ba35 	b.w	80a0f58 <network_connecting>

080a2aee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2aee:	2200      	movs	r2, #0
 80a2af0:	6840      	ldr	r0, [r0, #4]
 80a2af2:	4611      	mov	r1, r2
 80a2af4:	f7fe ba40 	b.w	80a0f78 <network_ready>

080a2af8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2af8:	2300      	movs	r3, #0
 80a2afa:	6840      	ldr	r0, [r0, #4]
 80a2afc:	461a      	mov	r2, r3
 80a2afe:	4619      	mov	r1, r3
 80a2b00:	f7fe ba42 	b.w	80a0f88 <network_on>

080a2b04 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2b04:	2300      	movs	r3, #0
 80a2b06:	6840      	ldr	r0, [r0, #4]
 80a2b08:	461a      	mov	r2, r3
 80a2b0a:	4619      	mov	r1, r3
 80a2b0c:	f7fe ba44 	b.w	80a0f98 <network_off>

080a2b10 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2b10:	2100      	movs	r1, #0
 80a2b12:	6840      	ldr	r0, [r0, #4]
 80a2b14:	f7fe ba68 	b.w	80a0fe8 <network_is_on>

080a2b18 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2b18:	2100      	movs	r1, #0
 80a2b1a:	6840      	ldr	r0, [r0, #4]
 80a2b1c:	f7fe ba6c 	b.w	80a0ff8 <network_is_off>

080a2b20 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2b20:	2200      	movs	r2, #0
 80a2b22:	6840      	ldr	r0, [r0, #4]
 80a2b24:	f081 0101 	eor.w	r1, r1, #1
 80a2b28:	f7fe ba3e 	b.w	80a0fa8 <network_listen>

080a2b2c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2b2c:	2200      	movs	r2, #0
 80a2b2e:	6840      	ldr	r0, [r0, #4]
 80a2b30:	f7fe ba4a 	b.w	80a0fc8 <network_set_listen_timeout>

080a2b34 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2b34:	2200      	movs	r2, #0
 80a2b36:	6840      	ldr	r0, [r0, #4]
 80a2b38:	4611      	mov	r1, r2
 80a2b3a:	f7fe ba4d 	b.w	80a0fd8 <network_get_listen_timeout>

080a2b3e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2b3e:	2200      	movs	r2, #0
 80a2b40:	6840      	ldr	r0, [r0, #4]
 80a2b42:	4611      	mov	r1, r2
 80a2b44:	f7fe ba38 	b.w	80a0fb8 <network_listening>

080a2b48 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2b48:	b570      	push	{r4, r5, r6, lr}
 80a2b4a:	4615      	mov	r5, r2
 80a2b4c:	b08e      	sub	sp, #56	; 0x38
 80a2b4e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2b50:	a808      	add	r0, sp, #32
 80a2b52:	f7fe fdbd 	bl	80a16d0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2b56:	2211      	movs	r2, #17
 80a2b58:	2100      	movs	r1, #0
 80a2b5a:	a803      	add	r0, sp, #12
 80a2b5c:	f001 f96e 	bl	80a3e3c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2b60:	2600      	movs	r6, #0
 80a2b62:	4628      	mov	r0, r5
 80a2b64:	f001 f9db 	bl	80a3f1e <strlen>
 80a2b68:	4b0a      	ldr	r3, [pc, #40]	; (80a2b94 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2b6a:	9600      	str	r6, [sp, #0]
 80a2b6c:	b281      	uxth	r1, r0
 80a2b6e:	685b      	ldr	r3, [r3, #4]
 80a2b70:	4628      	mov	r0, r5
 80a2b72:	aa03      	add	r2, sp, #12
 80a2b74:	f7fe f964 	bl	80a0e40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b78:	b130      	cbz	r0, 80a2b88 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2b7a:	4631      	mov	r1, r6
 80a2b7c:	4620      	mov	r0, r4
 80a2b7e:	f7fe fdc7 	bl	80a1710 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2b82:	4620      	mov	r0, r4
 80a2b84:	b00e      	add	sp, #56	; 0x38
 80a2b86:	bd70      	pop	{r4, r5, r6, pc}
 80a2b88:	4620      	mov	r0, r4
 80a2b8a:	a903      	add	r1, sp, #12
 80a2b8c:	f7fe fdae 	bl	80a16ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2b90:	e7f7      	b.n	80a2b82 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2b92:	bf00      	nop
 80a2b94:	200011c0 	.word	0x200011c0

080a2b98 <_ZN5spark12NetworkClass4fromEm>:
}
 80a2b98:	4a03      	ldr	r2, [pc, #12]	; (80a2ba8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2b9a:	4b04      	ldr	r3, [pc, #16]	; (80a2bac <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2b9c:	2804      	cmp	r0, #4
 80a2b9e:	bf14      	ite	ne
 80a2ba0:	4610      	movne	r0, r2
 80a2ba2:	4618      	moveq	r0, r3
 80a2ba4:	4770      	bx	lr
 80a2ba6:	bf00      	nop
 80a2ba8:	20000d40 	.word	0x20000d40
 80a2bac:	200011c0 	.word	0x200011c0

080a2bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2bb0:	4b02      	ldr	r3, [pc, #8]	; (80a2bbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2bb2:	4a03      	ldr	r2, [pc, #12]	; (80a2bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2bb4:	601a      	str	r2, [r3, #0]
 80a2bb6:	2200      	movs	r2, #0
 80a2bb8:	605a      	str	r2, [r3, #4]

} // spark
 80a2bba:	4770      	bx	lr
 80a2bbc:	20000d40 	.word	0x20000d40
 80a2bc0:	080a446c 	.word	0x080a446c

080a2bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2bc6:	4606      	mov	r6, r0
 80a2bc8:	460d      	mov	r5, r1
  size_t n = 0;
 80a2bca:	2400      	movs	r4, #0
 80a2bcc:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2bce:	42bd      	cmp	r5, r7
 80a2bd0:	d00c      	beq.n	80a2bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2bd2:	6833      	ldr	r3, [r6, #0]
 80a2bd4:	4630      	mov	r0, r6
 80a2bd6:	689b      	ldr	r3, [r3, #8]
 80a2bd8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2bdc:	4798      	blx	r3
     if (chunk>=0)
 80a2bde:	1e03      	subs	r3, r0, #0
 80a2be0:	db01      	blt.n	80a2be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2be2:	441c      	add	r4, r3
  while (size--) {
 80a2be4:	e7f3      	b.n	80a2bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2be6:	2c00      	cmp	r4, #0
 80a2be8:	bf08      	it	eq
 80a2bea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2bec:	4620      	mov	r0, r4
 80a2bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2bf0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2bf0:	b570      	push	{r4, r5, r6, lr}
 80a2bf2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2bf4:	460c      	mov	r4, r1
    }
 80a2bf6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2bf8:	b149      	cbz	r1, 80a2c0e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2bfa:	f001 f990 	bl	80a3f1e <strlen>
 80a2bfe:	682b      	ldr	r3, [r5, #0]
 80a2c00:	4602      	mov	r2, r0
 80a2c02:	4621      	mov	r1, r4
 80a2c04:	4628      	mov	r0, r5
    }
 80a2c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2c0a:	68db      	ldr	r3, [r3, #12]
 80a2c0c:	4718      	bx	r3
    }
 80a2c0e:	bd70      	pop	{r4, r5, r6, pc}

080a2c10 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2c10:	b508      	push	{r3, lr}
  return write(str);
 80a2c12:	f7ff ffed 	bl	80a2bf0 <_ZN5Print5writeEPKc>
}
 80a2c16:	bd08      	pop	{r3, pc}

080a2c18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2c18:	6803      	ldr	r3, [r0, #0]
 80a2c1a:	689b      	ldr	r3, [r3, #8]
 80a2c1c:	4718      	bx	r3

080a2c1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2c20:	210d      	movs	r1, #13
{
 80a2c22:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2c24:	f7ff fff8 	bl	80a2c18 <_ZN5Print5printEc>
  n += print('\n');
 80a2c28:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2c2a:	4604      	mov	r4, r0
  n += print('\n');
 80a2c2c:	4628      	mov	r0, r5
 80a2c2e:	f7ff fff3 	bl	80a2c18 <_ZN5Print5printEc>
  return n;
}
 80a2c32:	4420      	add	r0, r4
 80a2c34:	bd38      	pop	{r3, r4, r5, pc}

080a2c36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2c36:	b538      	push	{r3, r4, r5, lr}
 80a2c38:	4605      	mov	r5, r0
  return write(str);
 80a2c3a:	f7ff ffd9 	bl	80a2bf0 <_ZN5Print5writeEPKc>
 80a2c3e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2c40:	4628      	mov	r0, r5
 80a2c42:	f7ff ffec 	bl	80a2c1e <_ZN5Print7printlnEv>
  return n;
}
 80a2c46:	4420      	add	r0, r4
 80a2c48:	bd38      	pop	{r3, r4, r5, pc}

080a2c4a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2c4a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2c4c:	2a01      	cmp	r2, #1
 80a2c4e:	bf98      	it	ls
 80a2c50:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2c52:	b530      	push	{r4, r5, lr}
 80a2c54:	b08b      	sub	sp, #44	; 0x2c
 80a2c56:	460c      	mov	r4, r1
  *str = '\0';
 80a2c58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2c5c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2c5e:	4625      	mov	r5, r4
 80a2c60:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2c64:	fb04 5312 	mls	r3, r4, r2, r5
 80a2c68:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c6a:	2b09      	cmp	r3, #9
 80a2c6c:	bf94      	ite	ls
 80a2c6e:	3330      	addls	r3, #48	; 0x30
 80a2c70:	3337      	addhi	r3, #55	; 0x37
 80a2c72:	b2db      	uxtb	r3, r3
  } while(n);
 80a2c74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2c76:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2c7a:	d9f0      	bls.n	80a2c5e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2c7c:	f7ff ffb8 	bl	80a2bf0 <_ZN5Print5writeEPKc>
}
 80a2c80:	b00b      	add	sp, #44	; 0x2c
 80a2c82:	bd30      	pop	{r4, r5, pc}

080a2c84 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c88:	b086      	sub	sp, #24
 80a2c8a:	af00      	add	r7, sp, #0
 80a2c8c:	4605      	mov	r5, r0
 80a2c8e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2c90:	1d38      	adds	r0, r7, #4
 80a2c92:	2114      	movs	r1, #20
{
 80a2c94:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2c96:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2c98:	f7fe f9ce 	bl	80a1038 <vsnprintf>

    if (n<bufsize)
 80a2c9c:	2813      	cmp	r0, #19
 80a2c9e:	d80e      	bhi.n	80a2cbe <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2ca0:	4628      	mov	r0, r5
 80a2ca2:	1d39      	adds	r1, r7, #4
 80a2ca4:	f7ff ffa4 	bl	80a2bf0 <_ZN5Print5writeEPKc>
 80a2ca8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2caa:	b11e      	cbz	r6, 80a2cb4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2cac:	4628      	mov	r0, r5
 80a2cae:	f7ff ffb6 	bl	80a2c1e <_ZN5Print7printlnEv>
 80a2cb2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2cb4:	4620      	mov	r0, r4
 80a2cb6:	3718      	adds	r7, #24
 80a2cb8:	46bd      	mov	sp, r7
 80a2cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2cbe:	f100 0308 	add.w	r3, r0, #8
 80a2cc2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2cc6:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2cc8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2ccc:	4622      	mov	r2, r4
 80a2cce:	1c41      	adds	r1, r0, #1
 80a2cd0:	683b      	ldr	r3, [r7, #0]
 80a2cd2:	4668      	mov	r0, sp
 80a2cd4:	f7fe f9b0 	bl	80a1038 <vsnprintf>
  return write(str);
 80a2cd8:	4669      	mov	r1, sp
 80a2cda:	4628      	mov	r0, r5
 80a2cdc:	f7ff ff88 	bl	80a2bf0 <_ZN5Print5writeEPKc>
 80a2ce0:	4604      	mov	r4, r0
 80a2ce2:	46c5      	mov	sp, r8
 80a2ce4:	e7e1      	b.n	80a2caa <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2ce6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2ce6:	b510      	push	{r4, lr}
 80a2ce8:	4604      	mov	r4, r0
 80a2cea:	f7fe f9ea 	bl	80a10c2 <_ZNSt14_Function_baseD1Ev>
 80a2cee:	4620      	mov	r0, r4
 80a2cf0:	bd10      	pop	{r4, pc}
	...

080a2cf4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2cf4:	2300      	movs	r3, #0
 80a2cf6:	4803      	ldr	r0, [pc, #12]	; (80a2d04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2cf8:	4a03      	ldr	r2, [pc, #12]	; (80a2d08 <_GLOBAL__sub_I_RGB+0x14>)
 80a2cfa:	4904      	ldr	r1, [pc, #16]	; (80a2d0c <_GLOBAL__sub_I_RGB+0x18>)
 80a2cfc:	6083      	str	r3, [r0, #8]
 80a2cfe:	f000 bf3d 	b.w	80a3b7c <__aeabi_atexit>
 80a2d02:	bf00      	nop
 80a2d04:	20000d48 	.word	0x20000d48
 80a2d08:	20000084 	.word	0x20000084
 80a2d0c:	080a2ce7 	.word	0x080a2ce7

080a2d10 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2d10:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2d12:	2600      	movs	r6, #0
 80a2d14:	4604      	mov	r4, r0
 80a2d16:	460d      	mov	r5, r1
 80a2d18:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2d1c:	f7fd ff0e 	bl	80a0b3c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2d20:	4628      	mov	r0, r5
    _spi = spi;
 80a2d22:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2d24:	f7fd ffe4 	bl	80a0cf0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2d28:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2d2a:	6066      	str	r6, [r4, #4]
}
 80a2d2c:	bd70      	pop	{r4, r5, r6, pc}

080a2d2e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2d2e:	b510      	push	{r4, lr}
 80a2d30:	4604      	mov	r4, r0
{
	free(buffer);
 80a2d32:	6800      	ldr	r0, [r0, #0]
 80a2d34:	f7fe f970 	bl	80a1018 <free>
}
 80a2d38:	4620      	mov	r0, r4
 80a2d3a:	bd10      	pop	{r4, pc}

080a2d3c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2d3c:	b510      	push	{r4, lr}
 80a2d3e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2d40:	6800      	ldr	r0, [r0, #0]
 80a2d42:	b108      	cbz	r0, 80a2d48 <_ZN6String10invalidateEv+0xc>
 80a2d44:	f7fe f968 	bl	80a1018 <free>
	buffer = NULL;
 80a2d48:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2d4a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2d4e:	6023      	str	r3, [r4, #0]
}
 80a2d50:	bd10      	pop	{r4, pc}

080a2d52 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2d52:	b538      	push	{r3, r4, r5, lr}
 80a2d54:	4604      	mov	r4, r0
 80a2d56:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2d58:	6800      	ldr	r0, [r0, #0]
 80a2d5a:	3101      	adds	r1, #1
 80a2d5c:	f7fe f964 	bl	80a1028 <realloc>
	if (newbuffer) {
 80a2d60:	b110      	cbz	r0, 80a2d68 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2d62:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2d66:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2d68:	bd38      	pop	{r3, r4, r5, pc}

080a2d6a <_ZN6String7reserveEj>:
{
 80a2d6a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2d6c:	6803      	ldr	r3, [r0, #0]
{
 80a2d6e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2d70:	b123      	cbz	r3, 80a2d7c <_ZN6String7reserveEj+0x12>
 80a2d72:	6843      	ldr	r3, [r0, #4]
 80a2d74:	428b      	cmp	r3, r1
 80a2d76:	d301      	bcc.n	80a2d7c <_ZN6String7reserveEj+0x12>
 80a2d78:	2001      	movs	r0, #1
}
 80a2d7a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2d7c:	4620      	mov	r0, r4
 80a2d7e:	f7ff ffe8 	bl	80a2d52 <_ZN6String12changeBufferEj>
 80a2d82:	2800      	cmp	r0, #0
 80a2d84:	d0f9      	beq.n	80a2d7a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2d86:	68a3      	ldr	r3, [r4, #8]
 80a2d88:	2b00      	cmp	r3, #0
 80a2d8a:	d1f5      	bne.n	80a2d78 <_ZN6String7reserveEj+0xe>
 80a2d8c:	6822      	ldr	r2, [r4, #0]
 80a2d8e:	7013      	strb	r3, [r2, #0]
 80a2d90:	e7f2      	b.n	80a2d78 <_ZN6String7reserveEj+0xe>

080a2d92 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2d92:	b570      	push	{r4, r5, r6, lr}
 80a2d94:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2d96:	4611      	mov	r1, r2
{
 80a2d98:	4604      	mov	r4, r0
 80a2d9a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2d9c:	f7ff ffe5 	bl	80a2d6a <_ZN6String7reserveEj>
 80a2da0:	b920      	cbnz	r0, 80a2dac <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2da2:	4620      	mov	r0, r4
 80a2da4:	f7ff ffca 	bl	80a2d3c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2da8:	4620      	mov	r0, r4
 80a2daa:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2dac:	462a      	mov	r2, r5
 80a2dae:	4631      	mov	r1, r6
 80a2db0:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2db2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2db4:	f001 f81a 	bl	80a3dec <memcpy>
	buffer[len] = 0;
 80a2db8:	2100      	movs	r1, #0
 80a2dba:	6822      	ldr	r2, [r4, #0]
 80a2dbc:	68a3      	ldr	r3, [r4, #8]
 80a2dbe:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2dc0:	e7f2      	b.n	80a2da8 <_ZN6String4copyEPKcj+0x16>

080a2dc2 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2dc2:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2dc4:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a2dc6:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2dc8:	460d      	mov	r5, r1
	capacity = 0;
 80a2dca:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2dce:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2dd0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2dd2:	b139      	cbz	r1, 80a2de4 <_ZN6StringC1EPKc+0x22>
 80a2dd4:	4608      	mov	r0, r1
 80a2dd6:	f001 f8a2 	bl	80a3f1e <strlen>
 80a2dda:	4629      	mov	r1, r5
 80a2ddc:	4602      	mov	r2, r0
 80a2dde:	4620      	mov	r0, r4
 80a2de0:	f7ff ffd7 	bl	80a2d92 <_ZN6String4copyEPKcj>
}
 80a2de4:	4620      	mov	r0, r4
 80a2de6:	bd38      	pop	{r3, r4, r5, pc}

080a2de8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2de8:	b538      	push	{r3, r4, r5, lr}
 80a2dea:	4605      	mov	r5, r0
	if (buffer) {
 80a2dec:	6800      	ldr	r0, [r0, #0]
{
 80a2dee:	460c      	mov	r4, r1
	if (buffer) {
 80a2df0:	b168      	cbz	r0, 80a2e0e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a2df2:	686a      	ldr	r2, [r5, #4]
 80a2df4:	688b      	ldr	r3, [r1, #8]
 80a2df6:	429a      	cmp	r2, r3
 80a2df8:	d307      	bcc.n	80a2e0a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a2dfa:	6809      	ldr	r1, [r1, #0]
 80a2dfc:	f001 f86b 	bl	80a3ed6 <strcpy>
			len = rhs.len;
 80a2e00:	68a3      	ldr	r3, [r4, #8]
 80a2e02:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2e04:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a2e06:	60a3      	str	r3, [r4, #8]
}
 80a2e08:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a2e0a:	f7fe f905 	bl	80a1018 <free>
	buffer = rhs.buffer;
 80a2e0e:	6823      	ldr	r3, [r4, #0]
 80a2e10:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2e12:	6863      	ldr	r3, [r4, #4]
 80a2e14:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2e16:	68a3      	ldr	r3, [r4, #8]
 80a2e18:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2e1a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a2e1c:	e9c4 3300 	strd	r3, r3, [r4]
 80a2e20:	e7f1      	b.n	80a2e06 <_ZN6String4moveERS_+0x1e>

080a2e22 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a2e22:	2300      	movs	r3, #0
String::String(String &&rval)
 80a2e24:	b510      	push	{r4, lr}
 80a2e26:	4604      	mov	r4, r0
	capacity = 0;
 80a2e28:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2e2c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e2e:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a2e30:	f7ff ffda 	bl	80a2de8 <_ZN6String4moveERS_>
}
 80a2e34:	4620      	mov	r0, r4
 80a2e36:	bd10      	pop	{r4, pc}

080a2e38 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2e38:	4288      	cmp	r0, r1
{
 80a2e3a:	b510      	push	{r4, lr}
 80a2e3c:	460b      	mov	r3, r1
 80a2e3e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2e40:	d004      	beq.n	80a2e4c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2e42:	6809      	ldr	r1, [r1, #0]
 80a2e44:	b121      	cbz	r1, 80a2e50 <_ZN6StringaSERKS_+0x18>
 80a2e46:	689a      	ldr	r2, [r3, #8]
 80a2e48:	f7ff ffa3 	bl	80a2d92 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e4c:	4620      	mov	r0, r4
 80a2e4e:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2e50:	f7ff ff74 	bl	80a2d3c <_ZN6String10invalidateEv>
 80a2e54:	e7fa      	b.n	80a2e4c <_ZN6StringaSERKS_+0x14>

080a2e56 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2e56:	2300      	movs	r3, #0
String::String(const String &value)
 80a2e58:	b510      	push	{r4, lr}
 80a2e5a:	4604      	mov	r4, r0
	capacity = 0;
 80a2e5c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2e60:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2e62:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2e64:	f7ff ffe8 	bl	80a2e38 <_ZN6StringaSERKS_>
}
 80a2e68:	4620      	mov	r0, r4
 80a2e6a:	bd10      	pop	{r4, pc}

080a2e6c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2e6c:	b538      	push	{r3, r4, r5, lr}
 80a2e6e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2e70:	460c      	mov	r4, r1
 80a2e72:	b149      	cbz	r1, 80a2e88 <_ZN6StringaSEPKc+0x1c>
 80a2e74:	4608      	mov	r0, r1
 80a2e76:	f001 f852 	bl	80a3f1e <strlen>
 80a2e7a:	4621      	mov	r1, r4
 80a2e7c:	4602      	mov	r2, r0
 80a2e7e:	4628      	mov	r0, r5
 80a2e80:	f7ff ff87 	bl	80a2d92 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2e84:	4628      	mov	r0, r5
 80a2e86:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2e88:	f7ff ff58 	bl	80a2d3c <_ZN6String10invalidateEv>
 80a2e8c:	e7fa      	b.n	80a2e84 <_ZN6StringaSEPKc+0x18>

080a2e8e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2e8e:	b570      	push	{r4, r5, r6, lr}
 80a2e90:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a2e92:	460e      	mov	r6, r1
 80a2e94:	b909      	cbnz	r1, 80a2e9a <_ZN6String6concatEPKcj+0xc>
 80a2e96:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2e98:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2e9a:	b16a      	cbz	r2, 80a2eb8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2e9c:	6884      	ldr	r4, [r0, #8]
 80a2e9e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2ea0:	4621      	mov	r1, r4
 80a2ea2:	f7ff ff62 	bl	80a2d6a <_ZN6String7reserveEj>
 80a2ea6:	2800      	cmp	r0, #0
 80a2ea8:	d0f5      	beq.n	80a2e96 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2eaa:	6828      	ldr	r0, [r5, #0]
 80a2eac:	68ab      	ldr	r3, [r5, #8]
 80a2eae:	4631      	mov	r1, r6
 80a2eb0:	4418      	add	r0, r3
 80a2eb2:	f001 f810 	bl	80a3ed6 <strcpy>
	len = newlen;
 80a2eb6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2eb8:	2001      	movs	r0, #1
 80a2eba:	e7ed      	b.n	80a2e98 <_ZN6String6concatEPKcj+0xa>

080a2ebc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a2ebc:	688a      	ldr	r2, [r1, #8]
 80a2ebe:	6809      	ldr	r1, [r1, #0]
 80a2ec0:	f7ff bfe5 	b.w	80a2e8e <_ZN6String6concatEPKcj>

080a2ec4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2ec4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2ec6:	688a      	ldr	r2, [r1, #8]
 80a2ec8:	6809      	ldr	r1, [r1, #0]
{
 80a2eca:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2ecc:	f7ff ffdf 	bl	80a2e8e <_ZN6String6concatEPKcj>
 80a2ed0:	b910      	cbnz	r0, 80a2ed8 <_ZplRK15StringSumHelperRK6String+0x14>
 80a2ed2:	4620      	mov	r0, r4
 80a2ed4:	f7ff ff32 	bl	80a2d3c <_ZN6String10invalidateEv>
	return a;
}
 80a2ed8:	4620      	mov	r0, r4
 80a2eda:	bd10      	pop	{r4, pc}

080a2edc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2edc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2ede:	6882      	ldr	r2, [r0, #8]
 80a2ee0:	b93a      	cbnz	r2, 80a2ef2 <_ZNK6String6equalsEPKc+0x16>
 80a2ee2:	b121      	cbz	r1, 80a2eee <_ZNK6String6equalsEPKc+0x12>
 80a2ee4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a2ee6:	fab0 f080 	clz	r0, r0
 80a2eea:	0940      	lsrs	r0, r0, #5
 80a2eec:	e000      	b.n	80a2ef0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2eee:	2001      	movs	r0, #1
}
 80a2ef0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2ef2:	6800      	ldr	r0, [r0, #0]
 80a2ef4:	b909      	cbnz	r1, 80a2efa <_ZNK6String6equalsEPKc+0x1e>
 80a2ef6:	7800      	ldrb	r0, [r0, #0]
 80a2ef8:	e7f5      	b.n	80a2ee6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a2efa:	f000 ffe2 	bl	80a3ec2 <strcmp>
 80a2efe:	e7f2      	b.n	80a2ee6 <_ZNK6String6equalsEPKc+0xa>

080a2f00 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a2f00:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a2f02:	6883      	ldr	r3, [r0, #8]
 80a2f04:	4293      	cmp	r3, r2
 80a2f06:	d907      	bls.n	80a2f18 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a2f08:	6804      	ldr	r4, [r0, #0]
 80a2f0a:	6809      	ldr	r1, [r1, #0]
 80a2f0c:	18a0      	adds	r0, r4, r2
 80a2f0e:	f001 f834 	bl	80a3f7a <strstr>
	if (found == NULL) return -1;
 80a2f12:	b108      	cbz	r0, 80a2f18 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a2f14:	1b00      	subs	r0, r0, r4
}
 80a2f16:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a2f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2f1c:	e7fb      	b.n	80a2f16 <_ZNK6String7indexOfERKS_j+0x16>

080a2f1e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a2f1e:	2200      	movs	r2, #0
 80a2f20:	f7ff bfee 	b.w	80a2f00 <_ZNK6String7indexOfERKS_j>

080a2f24 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f26:	461d      	mov	r5, r3
	if (left > right) {
 80a2f28:	429a      	cmp	r2, r3
 80a2f2a:	bf88      	it	hi
 80a2f2c:	4613      	movhi	r3, r2
{
 80a2f2e:	460f      	mov	r7, r1
 80a2f30:	4614      	mov	r4, r2
	if (left > right) {
 80a2f32:	bf88      	it	hi
 80a2f34:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a2f36:	490b      	ldr	r1, [pc, #44]	; (80a2f64 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a2f38:	bf88      	it	hi
 80a2f3a:	461d      	movhi	r5, r3
{
 80a2f3c:	4606      	mov	r6, r0
	String out;
 80a2f3e:	f7ff ff40 	bl	80a2dc2 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a2f42:	68ba      	ldr	r2, [r7, #8]
 80a2f44:	42a2      	cmp	r2, r4
 80a2f46:	d30a      	bcc.n	80a2f5e <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a2f48:	6839      	ldr	r1, [r7, #0]
 80a2f4a:	42aa      	cmp	r2, r5
 80a2f4c:	bf94      	ite	ls
 80a2f4e:	ebc4 0202 	rsbls	r2, r4, r2
 80a2f52:	ebc4 0205 	rsbhi	r2, r4, r5
 80a2f56:	4630      	mov	r0, r6
 80a2f58:	4421      	add	r1, r4
 80a2f5a:	f7ff ff1a 	bl	80a2d92 <_ZN6String4copyEPKcj>
	return out;
}
 80a2f5e:	4630      	mov	r0, r6
 80a2f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2f62:	bf00      	nop
 80a2f64:	080a42f1 	.word	0x080a42f1

080a2f68 <_ZNK6String9substringEj>:
{
 80a2f68:	b510      	push	{r4, lr}
 80a2f6a:	4604      	mov	r4, r0
	return substring(left, len);
 80a2f6c:	688b      	ldr	r3, [r1, #8]
 80a2f6e:	f7ff ffd9 	bl	80a2f24 <_ZNK6String9substringEjj>
}
 80a2f72:	4620      	mov	r0, r4
 80a2f74:	bd10      	pop	{r4, pc}

080a2f76 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a2f76:	6800      	ldr	r0, [r0, #0]
 80a2f78:	b108      	cbz	r0, 80a2f7e <_ZNK6String5toIntEv+0x8>
 80a2f7a:	f000 bf25 	b.w	80a3dc8 <atol>
	return 0;
}
 80a2f7e:	4770      	bx	lr

080a2f80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a2f80:	b510      	push	{r4, lr}
 80a2f82:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2f84:	6800      	ldr	r0, [r0, #0]
 80a2f86:	b118      	cbz	r0, 80a2f90 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a2f88:	f7fe f846 	bl	80a1018 <free>
            wakeupSource_ = nullptr;
 80a2f8c:	2300      	movs	r3, #0
 80a2f8e:	6023      	str	r3, [r4, #0]
        }
    }
 80a2f90:	bd10      	pop	{r4, pc}

080a2f92 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2f92:	b510      	push	{r4, lr}
 80a2f94:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a2f96:	f7ff fff3 	bl	80a2f80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a2f9a:	4620      	mov	r0, r4
 80a2f9c:	bd10      	pop	{r4, pc}
	...

080a2fa0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2fa0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a2fa2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2fa4:	b510      	push	{r4, lr}
 80a2fa6:	4b08      	ldr	r3, [pc, #32]	; (80a2fc8 <_GLOBAL__sub_I_System+0x28>)
 80a2fa8:	4c08      	ldr	r4, [pc, #32]	; (80a2fcc <_GLOBAL__sub_I_System+0x2c>)
 80a2faa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a2fac:	4b08      	ldr	r3, [pc, #32]	; (80a2fd0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a2fae:	6020      	str	r0, [r4, #0]
 80a2fb0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a2fb2:	71a0      	strb	r0, [r4, #6]
 80a2fb4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2fb6:	f7fd ff6b 	bl	80a0e90 <set_system_mode>
SystemClass System;
 80a2fba:	4620      	mov	r0, r4
 80a2fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a2fc0:	4a04      	ldr	r2, [pc, #16]	; (80a2fd4 <_GLOBAL__sub_I_System+0x34>)
 80a2fc2:	4905      	ldr	r1, [pc, #20]	; (80a2fd8 <_GLOBAL__sub_I_System+0x38>)
 80a2fc4:	f000 bdda 	b.w	80a3b7c <__aeabi_atexit>
 80a2fc8:	20000d64 	.word	0x20000d64
 80a2fcc:	20000d58 	.word	0x20000d58
 80a2fd0:	ffff0000 	.word	0xffff0000
 80a2fd4:	20000084 	.word	0x20000084
 80a2fd8:	080a2f93 	.word	0x080a2f93

080a2fdc <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2fdc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2fde:	6803      	ldr	r3, [r0, #0]
{
 80a2fe0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2fe4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2fe6:	2201      	movs	r2, #1
 80a2fe8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2fec:	f10d 0107 	add.w	r1, sp, #7
 80a2ff0:	47a0      	blx	r4
}
 80a2ff2:	b002      	add	sp, #8
 80a2ff4:	bd10      	pop	{r4, pc}

080a2ff6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2ff6:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2ff8:	6803      	ldr	r3, [r0, #0]
 80a2ffa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2ffc:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3000:	46a4      	mov	ip, r4
}
 80a3002:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3004:	4760      	bx	ip

080a3006 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3006:	b513      	push	{r0, r1, r4, lr}
 80a3008:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a300a:	6802      	ldr	r2, [r0, #0]
{
 80a300c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3010:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3012:	f10d 0107 	add.w	r1, sp, #7
 80a3016:	2201      	movs	r2, #1
 80a3018:	47a0      	blx	r4
}
 80a301a:	b002      	add	sp, #8
 80a301c:	bd10      	pop	{r4, pc}

080a301e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a301e:	4770      	bx	lr

080a3020 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3020:	4770      	bx	lr
	...

080a3024 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3024:	b510      	push	{r4, lr}
 80a3026:	4604      	mov	r4, r0
	    ||
 80a3028:	4b06      	ldr	r3, [pc, #24]	; (80a3044 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a302a:	4608      	mov	r0, r1
	    ||
 80a302c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a302e:	f104 040c 	add.w	r4, r4, #12
 80a3032:	d004      	beq.n	80a303e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3034:	f000 fdb0 	bl	80a3b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3038:	2800      	cmp	r0, #0
	return nullptr;
 80a303a:	bf08      	it	eq
 80a303c:	2400      	moveq	r4, #0
      }
 80a303e:	4620      	mov	r0, r4
 80a3040:	bd10      	pop	{r4, pc}
 80a3042:	bf00      	nop
 80a3044:	080a44d8 	.word	0x080a44d8

080a3048 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3048:	b510      	push	{r4, lr}
 80a304a:	4604      	mov	r4, r0
 80a304c:	21ac      	movs	r1, #172	; 0xac
 80a304e:	f000 fd9a 	bl	80a3b86 <_ZdlPvj>
 80a3052:	4620      	mov	r0, r4
 80a3054:	bd10      	pop	{r4, pc}

080a3056 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3056:	f7fd b822 	b.w	80a009e <_ZdlPv>
	...

080a305c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a305c:	b538      	push	{r3, r4, r5, lr}
 80a305e:	4b0b      	ldr	r3, [pc, #44]	; (80a308c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3060:	6984      	ldr	r4, [r0, #24]
 80a3062:	4605      	mov	r5, r0
 80a3064:	6003      	str	r3, [r0, #0]
 80a3066:	b17c      	cbz	r4, 80a3088 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3068:	6863      	ldr	r3, [r4, #4]
 80a306a:	3b01      	subs	r3, #1
 80a306c:	6063      	str	r3, [r4, #4]
 80a306e:	b95b      	cbnz	r3, 80a3088 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3070:	6823      	ldr	r3, [r4, #0]
 80a3072:	4620      	mov	r0, r4
 80a3074:	689b      	ldr	r3, [r3, #8]
 80a3076:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3078:	68a3      	ldr	r3, [r4, #8]
 80a307a:	3b01      	subs	r3, #1
 80a307c:	60a3      	str	r3, [r4, #8]
 80a307e:	b91b      	cbnz	r3, 80a3088 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3080:	6823      	ldr	r3, [r4, #0]
 80a3082:	4620      	mov	r0, r4
 80a3084:	68db      	ldr	r3, [r3, #12]
 80a3086:	4798      	blx	r3
 80a3088:	4628      	mov	r0, r5
 80a308a:	bd38      	pop	{r3, r4, r5, pc}
 80a308c:	080a44e8 	.word	0x080a44e8

080a3090 <_ZN9TCPClientD0Ev>:
 80a3090:	b510      	push	{r4, lr}
 80a3092:	4604      	mov	r4, r0
 80a3094:	f7ff ffe2 	bl	80a305c <_ZN9TCPClientD1Ev>
 80a3098:	4620      	mov	r0, r4
 80a309a:	211c      	movs	r1, #28
 80a309c:	f000 fd73 	bl	80a3b86 <_ZdlPvj>
 80a30a0:	4620      	mov	r0, r4
 80a30a2:	bd10      	pop	{r4, pc}

080a30a4 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a30a4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a30a6:	4604      	mov	r4, r0
 80a30a8:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a30aa:	694d      	ldr	r5, [r1, #20]
 80a30ac:	4b04      	ldr	r3, [pc, #16]	; (80a30c0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a30ae:	358c      	adds	r5, #140	; 0x8c
 80a30b0:	f844 3b04 	str.w	r3, [r4], #4
 80a30b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a30b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a30b8:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a30ba:	4630      	mov	r0, r6
 80a30bc:	7023      	strb	r3, [r4, #0]
 80a30be:	bd70      	pop	{r4, r5, r6, pc}
 80a30c0:	080a4360 	.word	0x080a4360

080a30c4 <_ZN9TCPClient4peekEv>:
{
 80a30c4:	b510      	push	{r4, lr}
 80a30c6:	6943      	ldr	r3, [r0, #20]
 80a30c8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a30ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a30ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a30d2:	429a      	cmp	r2, r3
 80a30d4:	d005      	beq.n	80a30e2 <_ZN9TCPClient4peekEv+0x1e>
 80a30d6:	6963      	ldr	r3, [r4, #20]
 80a30d8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a30dc:	4413      	add	r3, r2
 80a30de:	7918      	ldrb	r0, [r3, #4]
}
 80a30e0:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a30e2:	6803      	ldr	r3, [r0, #0]
 80a30e4:	691b      	ldr	r3, [r3, #16]
 80a30e6:	4798      	blx	r3
 80a30e8:	2800      	cmp	r0, #0
 80a30ea:	d1f4      	bne.n	80a30d6 <_ZN9TCPClient4peekEv+0x12>
 80a30ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a30f0:	e7f6      	b.n	80a30e0 <_ZN9TCPClient4peekEv+0x1c>

080a30f2 <_ZN9TCPClient4readEv>:
{
 80a30f2:	b510      	push	{r4, lr}
 80a30f4:	6943      	ldr	r3, [r0, #20]
 80a30f6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a30f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a30fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3100:	429a      	cmp	r2, r3
 80a3102:	d008      	beq.n	80a3116 <_ZN9TCPClient4readEv+0x24>
 80a3104:	6963      	ldr	r3, [r4, #20]
 80a3106:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a310a:	1c51      	adds	r1, r2, #1
 80a310c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3110:	4413      	add	r3, r2
 80a3112:	7918      	ldrb	r0, [r3, #4]
}
 80a3114:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3116:	6803      	ldr	r3, [r0, #0]
 80a3118:	691b      	ldr	r3, [r3, #16]
 80a311a:	4798      	blx	r3
 80a311c:	2800      	cmp	r0, #0
 80a311e:	d1f1      	bne.n	80a3104 <_ZN9TCPClient4readEv+0x12>
 80a3120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3124:	e7f6      	b.n	80a3114 <_ZN9TCPClient4readEv+0x22>

080a3126 <_ZN9TCPClient4readEPhj>:
{
 80a3126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3128:	6943      	ldr	r3, [r0, #20]
 80a312a:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a312c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3130:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3134:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3136:	429a      	cmp	r2, r3
{
 80a3138:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a313a:	d016      	beq.n	80a316a <_ZN9TCPClient4readEPhj+0x44>
 80a313c:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a313e:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3140:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3144:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3148:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a314a:	42bc      	cmp	r4, r7
 80a314c:	bf28      	it	cs
 80a314e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3150:	3304      	adds	r3, #4
 80a3152:	4622      	mov	r2, r4
 80a3154:	4419      	add	r1, r3
 80a3156:	f000 fe49 	bl	80a3dec <memcpy>
 80a315a:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a315c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3160:	4423      	add	r3, r4
 80a3162:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3166:	4620      	mov	r0, r4
 80a3168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a316a:	6803      	ldr	r3, [r0, #0]
 80a316c:	691b      	ldr	r3, [r3, #16]
 80a316e:	4798      	blx	r3
 80a3170:	2800      	cmp	r0, #0
 80a3172:	d1e3      	bne.n	80a313c <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a3178:	e7f5      	b.n	80a3166 <_ZN9TCPClient4readEPhj+0x40>

080a317a <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a317a:	2300      	movs	r3, #0
 80a317c:	6942      	ldr	r2, [r0, #20]
 80a317e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3182:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3184:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3188:	4770      	bx	lr
	...

080a318c <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a318c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3190:	461f      	mov	r7, r3
    stop();
 80a3192:	6803      	ldr	r3, [r0, #0]
{
 80a3194:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3198:	4605      	mov	r5, r0
 80a319a:	460c      	mov	r4, r1
 80a319c:	4616      	mov	r6, r2
    stop();
 80a319e:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a31a0:	4638      	mov	r0, r7
 80a31a2:	f7ff fcf9 	bl	80a2b98 <_ZN5spark12NetworkClass4fromEm>
 80a31a6:	6803      	ldr	r3, [r0, #0]
 80a31a8:	68db      	ldr	r3, [r3, #12]
 80a31aa:	4798      	blx	r3
 80a31ac:	2800      	cmp	r0, #0
 80a31ae:	d054      	beq.n	80a325a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a31b0:	4633      	mov	r3, r6
 80a31b2:	2206      	movs	r2, #6
 80a31b4:	2101      	movs	r1, #1
 80a31b6:	2002      	movs	r0, #2
 80a31b8:	9700      	str	r7, [sp, #0]
 80a31ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a31be:	f7fd fd67 	bl	80a0c90 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a31c2:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a31c4:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a31c8:	f04f 0800 	mov.w	r8, #0
 80a31cc:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a31d0:	696b      	ldr	r3, [r5, #20]
 80a31d2:	2001      	movs	r0, #1
 80a31d4:	681b      	ldr	r3, [r3, #0]
 80a31d6:	4923      	ldr	r1, [pc, #140]	; (80a3264 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a31d8:	9301      	str	r3, [sp, #4]
 80a31da:	4b23      	ldr	r3, [pc, #140]	; (80a3268 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a31dc:	aa02      	add	r2, sp, #8
 80a31de:	9300      	str	r3, [sp, #0]
 80a31e0:	4643      	mov	r3, r8
 80a31e2:	f7fd fe3d 	bl	80a0e60 <log_message>
          if (socket_handle_valid(d_->sock))
 80a31e6:	696b      	ldr	r3, [r5, #20]
 80a31e8:	6818      	ldr	r0, [r3, #0]
 80a31ea:	f7fd fd49 	bl	80a0c80 <socket_handle_valid>
 80a31ee:	2800      	cmp	r0, #0
 80a31f0:	d033      	beq.n	80a325a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a31f2:	4628      	mov	r0, r5
 80a31f4:	f7ff ffc1 	bl	80a317a <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a31f8:	2302      	movs	r3, #2
 80a31fa:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a31fe:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3200:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3202:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3206:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3208:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a320c:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3210:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3212:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3216:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a321a:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a321e:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3222:	f7fd fe05 	bl	80a0e30 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3226:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3228:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a322a:	2210      	movs	r2, #16
 80a322c:	6818      	ldr	r0, [r3, #0]
 80a322e:	a902      	add	r1, sp, #8
 80a3230:	f7fd fd36 	bl	80a0ca0 <socket_connect>
 80a3234:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3236:	4630      	mov	r0, r6
 80a3238:	f7fd fdfa 	bl	80a0e30 <HAL_NET_SetNetWatchDog>
 80a323c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a323e:	696e      	ldr	r6, [r5, #20]
 80a3240:	368c      	adds	r6, #140	; 0x8c
 80a3242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3244:	6823      	ldr	r3, [r4, #0]
 80a3246:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3248:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a324a:	f1b9 0f00 	cmp.w	r9, #0
 80a324e:	d007      	beq.n	80a3260 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3250:	682b      	ldr	r3, [r5, #0]
 80a3252:	4628      	mov	r0, r5
 80a3254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3256:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3258:	4640      	mov	r0, r8
}
 80a325a:	b00b      	add	sp, #44	; 0x2c
 80a325c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3260:	2001      	movs	r0, #1
        return connected;
 80a3262:	e7fa      	b.n	80a325a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3264:	080a44a0 	.word	0x080a44a0
 80a3268:	080a44a7 	.word	0x080a44a7

080a326c <_ZN9TCPClient9availableEv>:
{
 80a326c:	b538      	push	{r3, r4, r5, lr}
 80a326e:	6942      	ldr	r2, [r0, #20]
 80a3270:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3272:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3276:	b12b      	cbz	r3, 80a3284 <_ZN9TCPClient9availableEv+0x18>
 80a3278:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a327c:	429a      	cmp	r2, r3
 80a327e:	d101      	bne.n	80a3284 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3280:	f7ff ff7b 	bl	80a317a <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3284:	6920      	ldr	r0, [r4, #16]
 80a3286:	f7ff fc87 	bl	80a2b98 <_ZN5spark12NetworkClass4fromEm>
 80a328a:	6803      	ldr	r3, [r0, #0]
 80a328c:	68db      	ldr	r3, [r3, #12]
 80a328e:	4798      	blx	r3
 80a3290:	b1f8      	cbz	r0, 80a32d2 <_ZN9TCPClient9availableEv+0x66>
 80a3292:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3294:	6818      	ldr	r0, [r3, #0]
 80a3296:	f7fd fcf3 	bl	80a0c80 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a329a:	b1d0      	cbz	r0, 80a32d2 <_ZN9TCPClient9availableEv+0x66>
 80a329c:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a329e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a32a2:	297f      	cmp	r1, #127	; 0x7f
 80a32a4:	d815      	bhi.n	80a32d2 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a32a6:	1d05      	adds	r5, r0, #4
 80a32a8:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a32ac:	2300      	movs	r3, #0
 80a32ae:	6800      	ldr	r0, [r0, #0]
 80a32b0:	4429      	add	r1, r5
 80a32b2:	f7fd fcfd 	bl	80a0cb0 <socket_receive>
            if (ret > 0)
 80a32b6:	2800      	cmp	r0, #0
 80a32b8:	dd0b      	ble.n	80a32d2 <_ZN9TCPClient9availableEv+0x66>
 80a32ba:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a32bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a32c0:	b90a      	cbnz	r2, 80a32c6 <_ZN9TCPClient9availableEv+0x5a>
 80a32c2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a32c6:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a32c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a32cc:	4410      	add	r0, r2
 80a32ce:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a32d2:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a32d4:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a32d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a32dc:	1ac0      	subs	r0, r0, r3
 80a32de:	bd38      	pop	{r3, r4, r5, pc}

080a32e0 <_ZN9TCPClient4stopEv>:
{
 80a32e0:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a32e2:	6943      	ldr	r3, [r0, #20]
{
 80a32e4:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a32e6:	6818      	ldr	r0, [r3, #0]
 80a32e8:	f7fd fcca 	bl	80a0c80 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a32ec:	b118      	cbz	r0, 80a32f6 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a32ee:	6963      	ldr	r3, [r4, #20]
 80a32f0:	6818      	ldr	r0, [r3, #0]
 80a32f2:	f7fd fce5 	bl	80a0cc0 <socket_close>
 80a32f6:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a32f8:	f7fd fcea 	bl	80a0cd0 <socket_handle_invalid>
 80a32fc:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a32fe:	6960      	ldr	r0, [r4, #20]
 80a3300:	2211      	movs	r2, #17
 80a3302:	2100      	movs	r1, #0
 80a3304:	308c      	adds	r0, #140	; 0x8c
 80a3306:	f000 fd99 	bl	80a3e3c <memset>
  flush_buffer();
 80a330a:	4620      	mov	r0, r4
}
 80a330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3310:	f7ff bf33 	b.w	80a317a <_ZN9TCPClient12flush_bufferEv>

080a3314 <_ZN9TCPClient6statusEv>:
{
 80a3314:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3316:	6943      	ldr	r3, [r0, #20]
{
 80a3318:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a331a:	6818      	ldr	r0, [r3, #0]
 80a331c:	f7fd fcb0 	bl	80a0c80 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3320:	b908      	cbnz	r0, 80a3326 <_ZN9TCPClient6statusEv+0x12>
 80a3322:	2000      	movs	r0, #0
}
 80a3324:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3326:	6920      	ldr	r0, [r4, #16]
 80a3328:	f7ff fc36 	bl	80a2b98 <_ZN5spark12NetworkClass4fromEm>
 80a332c:	6803      	ldr	r3, [r0, #0]
 80a332e:	68db      	ldr	r3, [r3, #12]
 80a3330:	4798      	blx	r3
 80a3332:	2800      	cmp	r0, #0
 80a3334:	d0f5      	beq.n	80a3322 <_ZN9TCPClient6statusEv+0xe>
 80a3336:	6963      	ldr	r3, [r4, #20]
 80a3338:	6818      	ldr	r0, [r3, #0]
 80a333a:	f7fd fc99 	bl	80a0c70 <socket_active_status>
 80a333e:	fab0 f080 	clz	r0, r0
 80a3342:	0940      	lsrs	r0, r0, #5
 80a3344:	e7ee      	b.n	80a3324 <_ZN9TCPClient6statusEv+0x10>

080a3346 <_ZN9TCPClientcvbEv>:
{
 80a3346:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3348:	f7ff ffe4 	bl	80a3314 <_ZN9TCPClient6statusEv>
}
 80a334c:	3800      	subs	r0, #0
 80a334e:	bf18      	it	ne
 80a3350:	2001      	movne	r0, #1
 80a3352:	bd08      	pop	{r3, pc}

080a3354 <_ZN9TCPClient5writeEPKhjm>:
{
 80a3354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a3358:	2700      	movs	r7, #0
 80a335a:	6047      	str	r7, [r0, #4]
 80a335c:	4604      	mov	r4, r0
 80a335e:	460d      	mov	r5, r1
 80a3360:	4616      	mov	r6, r2
 80a3362:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3364:	f7ff ffd6 	bl	80a3314 <_ZN9TCPClient6statusEv>
 80a3368:	b170      	cbz	r0, 80a3388 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a336a:	e9cd 8700 	strd	r8, r7, [sp]
 80a336e:	6960      	ldr	r0, [r4, #20]
 80a3370:	463b      	mov	r3, r7
 80a3372:	4632      	mov	r2, r6
 80a3374:	4629      	mov	r1, r5
 80a3376:	6800      	ldr	r0, [r0, #0]
 80a3378:	f7fd fcb2 	bl	80a0ce0 <socket_send_ex>
    if (ret < 0) {
 80a337c:	2800      	cmp	r0, #0
 80a337e:	da00      	bge.n	80a3382 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3380:	6060      	str	r0, [r4, #4]
}
 80a3382:	b002      	add	sp, #8
 80a3384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a338c:	e7f8      	b.n	80a3380 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a338e <_ZN9TCPClient9connectedEv>:
{
 80a338e:	b570      	push	{r4, r5, r6, lr}
 80a3390:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3392:	f7ff ffbf 	bl	80a3314 <_ZN9TCPClient6statusEv>
 80a3396:	b9e8      	cbnz	r0, 80a33d4 <_ZN9TCPClient9connectedEv+0x46>
 80a3398:	696b      	ldr	r3, [r5, #20]
 80a339a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a339e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a33a2:	4291      	cmp	r1, r2
 80a33a4:	d116      	bne.n	80a33d4 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a33a6:	6818      	ldr	r0, [r3, #0]
 80a33a8:	f7fd fc6a 	bl	80a0c80 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a33ac:	b908      	cbnz	r0, 80a33b2 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a33ae:	2000      	movs	r0, #0
}
 80a33b0:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a33b2:	696b      	ldr	r3, [r5, #20]
 80a33b4:	6818      	ldr	r0, [r3, #0]
 80a33b6:	f7fd fc5b 	bl	80a0c70 <socket_active_status>
 80a33ba:	2801      	cmp	r0, #1
 80a33bc:	4604      	mov	r4, r0
 80a33be:	d1f6      	bne.n	80a33ae <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a33c0:	682b      	ldr	r3, [r5, #0]
 80a33c2:	4628      	mov	r0, r5
 80a33c4:	691b      	ldr	r3, [r3, #16]
 80a33c6:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a33c8:	b930      	cbnz	r0, 80a33d8 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a33ca:	682b      	ldr	r3, [r5, #0]
 80a33cc:	4628      	mov	r0, r5
 80a33ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a33d0:	4798      	blx	r3
 80a33d2:	e7ec      	b.n	80a33ae <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a33d4:	2001      	movs	r0, #1
 80a33d6:	e7eb      	b.n	80a33b0 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a33d8:	4620      	mov	r0, r4
 80a33da:	e7e9      	b.n	80a33b0 <_ZN9TCPClient9connectedEv+0x22>

080a33dc <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a33dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a33de:	b510      	push	{r4, lr}
 80a33e0:	4604      	mov	r4, r0
          total(0) {
 80a33e2:	6001      	str	r1, [r0, #0]
 80a33e4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a33e8:	3088      	adds	r0, #136	; 0x88
 80a33ea:	f7fe f971 	bl	80a16d0 <_ZN9IPAddressC1Ev>
}
 80a33ee:	4620      	mov	r0, r4
 80a33f0:	bd10      	pop	{r4, pc}
	...

080a33f4 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a33f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a33f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a33fa:	2300      	movs	r3, #0
 80a33fc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3400:	4a0d      	ldr	r2, [pc, #52]	; (80a3438 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3402:	6103      	str	r3, [r0, #16]
 80a3404:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3406:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3408:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a340a:	20ac      	movs	r0, #172	; 0xac
 80a340c:	460e      	mov	r6, r1
 80a340e:	f7fc fe42 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3412:	1e05      	subs	r5, r0, #0
 80a3414:	f105 070c 	add.w	r7, r5, #12
 80a3418:	d008      	beq.n	80a342c <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a341a:	2301      	movs	r3, #1
 80a341c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3420:	4b06      	ldr	r3, [pc, #24]	; (80a343c <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3422:	4631      	mov	r1, r6
 80a3424:	4638      	mov	r0, r7
 80a3426:	602b      	str	r3, [r5, #0]
 80a3428:	f7ff ffd8 	bl	80a33dc <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a342c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a342e:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3432:	f7ff fea2 	bl	80a317a <_ZN9TCPClient12flush_bufferEv>
}
 80a3436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3438:	080a44e8 	.word	0x080a44e8
 80a343c:	080a44c4 	.word	0x080a44c4

080a3440 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3440:	b510      	push	{r4, lr}
 80a3442:	4604      	mov	r4, r0
 80a3444:	f7fd fc44 	bl	80a0cd0 <socket_handle_invalid>
 80a3448:	4601      	mov	r1, r0
 80a344a:	4620      	mov	r0, r4
 80a344c:	f7ff ffd2 	bl	80a33f4 <_ZN9TCPClientC1Em>
}
 80a3450:	4620      	mov	r0, r4
 80a3452:	bd10      	pop	{r4, pc}

080a3454 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3454:	b510      	push	{r4, lr}
 80a3456:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3458:	6800      	ldr	r0, [r0, #0]
 80a345a:	f7fd fc11 	bl	80a0c80 <socket_handle_valid>
 80a345e:	b110      	cbz	r0, 80a3466 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3460:	6820      	ldr	r0, [r4, #0]
 80a3462:	f7fd fc2d 	bl	80a0cc0 <socket_close>
    }
}
 80a3466:	4620      	mov	r0, r4
 80a3468:	bd10      	pop	{r4, pc}

080a346a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a346a:	300c      	adds	r0, #12
 80a346c:	f7ff bff2 	b.w	80a3454 <_ZN9TCPClient4DataD1Ev>

080a3470 <_ZN9TCPClient7connectEPKctm>:
{
 80a3470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3474:	461f      	mov	r7, r3
    stop();
 80a3476:	6803      	ldr	r3, [r0, #0]
{
 80a3478:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a347c:	4606      	mov	r6, r0
 80a347e:	460d      	mov	r5, r1
 80a3480:	4690      	mov	r8, r2
    stop();
 80a3482:	4798      	blx	r3
    if (Network.ready())
 80a3484:	4813      	ldr	r0, [pc, #76]	; (80a34d4 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3486:	f7ff fb32 	bl	80a2aee <_ZN5spark12NetworkClass5readyEv>
 80a348a:	b1f0      	cbz	r0, 80a34ca <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a348c:	a802      	add	r0, sp, #8
 80a348e:	f7fe f91f 	bl	80a16d0 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3492:	4628      	mov	r0, r5
 80a3494:	f000 fd43 	bl	80a3f1e <strlen>
 80a3498:	2400      	movs	r4, #0
 80a349a:	b281      	uxth	r1, r0
 80a349c:	463b      	mov	r3, r7
 80a349e:	4628      	mov	r0, r5
 80a34a0:	9400      	str	r4, [sp, #0]
 80a34a2:	aa03      	add	r2, sp, #12
 80a34a4:	f7fd fccc 	bl	80a0e40 <inet_gethostbyname>
 80a34a8:	b990      	cbnz	r0, 80a34d0 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a34aa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a34ac:	ad09      	add	r5, sp, #36	; 0x24
 80a34ae:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a34b2:	4b09      	ldr	r3, [pc, #36]	; (80a34d8 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a34b4:	ac03      	add	r4, sp, #12
 80a34b6:	9308      	str	r3, [sp, #32]
 80a34b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a34ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a34bc:	6823      	ldr	r3, [r4, #0]
 80a34be:	4642      	mov	r2, r8
 80a34c0:	702b      	strb	r3, [r5, #0]
 80a34c2:	4630      	mov	r0, r6
 80a34c4:	463b      	mov	r3, r7
 80a34c6:	a908      	add	r1, sp, #32
 80a34c8:	47c8      	blx	r9
}
 80a34ca:	b00f      	add	sp, #60	; 0x3c
 80a34cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a34d0:	4620      	mov	r0, r4
 80a34d2:	e7fa      	b.n	80a34ca <_ZN9TCPClient7connectEPKctm+0x5a>
 80a34d4:	20000d40 	.word	0x20000d40
 80a34d8:	080a4360 	.word	0x080a4360

080a34dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a34dc:	4b02      	ldr	r3, [pc, #8]	; (80a34e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a34de:	681a      	ldr	r2, [r3, #0]
 80a34e0:	4b02      	ldr	r3, [pc, #8]	; (80a34ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a34e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a34e4:	4770      	bx	lr
 80a34e6:	bf00      	nop
 80a34e8:	2000001c 	.word	0x2000001c
 80a34ec:	20000d68 	.word	0x20000d68

080a34f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a34f0:	4770      	bx	lr

080a34f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a34f2:	7441      	strb	r1, [r0, #17]
}
 80a34f4:	4770      	bx	lr

080a34f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a34f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a34f8:	7c00      	ldrb	r0, [r0, #16]
 80a34fa:	f7fd fc49 	bl	80a0d90 <hal_usart_available_data_for_write>
}
 80a34fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3502:	bd08      	pop	{r3, pc}

080a3504 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3504:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3506:	7c00      	ldrb	r0, [r0, #16]
 80a3508:	f7fd fc1a 	bl	80a0d40 <hal_usart_available>
}
 80a350c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3510:	bd08      	pop	{r3, pc}

080a3512 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3512:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3514:	7c00      	ldrb	r0, [r0, #16]
 80a3516:	f7fd fc23 	bl	80a0d60 <hal_usart_peek>
}
 80a351a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a351e:	bd08      	pop	{r3, pc}

080a3520 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3520:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3522:	7c00      	ldrb	r0, [r0, #16]
 80a3524:	f7fd fc14 	bl	80a0d50 <hal_usart_read>
}
 80a3528:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a352c:	bd08      	pop	{r3, pc}

080a352e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a352e:	7c00      	ldrb	r0, [r0, #16]
 80a3530:	f7fd bc1e 	b.w	80a0d70 <hal_usart_flush>

080a3534 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3534:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3536:	7c46      	ldrb	r6, [r0, #17]
{
 80a3538:	4604      	mov	r4, r0
 80a353a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a353c:	b12e      	cbz	r6, 80a354a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a353e:	4629      	mov	r1, r5
 80a3540:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3546:	f7fd bbf3 	b.w	80a0d30 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a354a:	7c00      	ldrb	r0, [r0, #16]
 80a354c:	f7fd fc20 	bl	80a0d90 <hal_usart_available_data_for_write>
 80a3550:	2800      	cmp	r0, #0
 80a3552:	dcf4      	bgt.n	80a353e <_ZN11USARTSerial5writeEh+0xa>
}
 80a3554:	4630      	mov	r0, r6
 80a3556:	bd70      	pop	{r4, r5, r6, pc}

080a3558 <_ZN11USARTSerialD0Ev>:
 80a3558:	b510      	push	{r4, lr}
 80a355a:	4604      	mov	r4, r0
 80a355c:	2114      	movs	r1, #20
 80a355e:	f000 fb12 	bl	80a3b86 <_ZdlPvj>
 80a3562:	4620      	mov	r0, r4
 80a3564:	bd10      	pop	{r4, pc}
	...

080a3568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3568:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a356c:	b510      	push	{r4, lr}
 80a356e:	4604      	mov	r4, r0
 80a3570:	4608      	mov	r0, r1
 80a3572:	4611      	mov	r1, r2
 80a3574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3578:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a357c:	4a04      	ldr	r2, [pc, #16]	; (80a3590 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a357e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3580:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a3582:	2201      	movs	r2, #1
 80a3584:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a3586:	461a      	mov	r2, r3
 80a3588:	f7fd fbc2 	bl	80a0d10 <hal_usart_init>
}
 80a358c:	4620      	mov	r0, r4
 80a358e:	bd10      	pop	{r4, pc}
 80a3590:	080a4550 	.word	0x080a4550

080a3594 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a3594:	2300      	movs	r3, #0
 80a3596:	7c00      	ldrb	r0, [r0, #16]
 80a3598:	f7fd bc02 	b.w	80a0da0 <hal_usart_begin_config>

080a359c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a359c:	2200      	movs	r2, #0
 80a359e:	f7ff bff9 	b.w	80a3594 <_ZN11USARTSerial5beginEmm>

080a35a2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a35a2:	7c00      	ldrb	r0, [r0, #16]
 80a35a4:	f7fd bbbc 	b.w	80a0d20 <hal_usart_end>

080a35a8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a35a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a35aa:	4d0d      	ldr	r5, [pc, #52]	; (80a35e0 <_Z22__fetch_global_Serial1v+0x38>)
 80a35ac:	7829      	ldrb	r1, [r5, #0]
 80a35ae:	f3bf 8f5b 	dmb	ish
 80a35b2:	f011 0401 	ands.w	r4, r1, #1
 80a35b6:	d111      	bne.n	80a35dc <_Z22__fetch_global_Serial1v+0x34>
 80a35b8:	4628      	mov	r0, r5
 80a35ba:	f7fc fd7d 	bl	80a00b8 <__cxa_guard_acquire>
 80a35be:	b168      	cbz	r0, 80a35dc <_Z22__fetch_global_Serial1v+0x34>
 80a35c0:	4621      	mov	r1, r4
 80a35c2:	4a08      	ldr	r2, [pc, #32]	; (80a35e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a35c4:	4b08      	ldr	r3, [pc, #32]	; (80a35e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a35c6:	4809      	ldr	r0, [pc, #36]	; (80a35ec <_Z22__fetch_global_Serial1v+0x44>)
 80a35c8:	f7ff ffce 	bl	80a3568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a35cc:	4628      	mov	r0, r5
 80a35ce:	f7fc fd78 	bl	80a00c2 <__cxa_guard_release>
 80a35d2:	4a07      	ldr	r2, [pc, #28]	; (80a35f0 <_Z22__fetch_global_Serial1v+0x48>)
 80a35d4:	4907      	ldr	r1, [pc, #28]	; (80a35f4 <_Z22__fetch_global_Serial1v+0x4c>)
 80a35d6:	4805      	ldr	r0, [pc, #20]	; (80a35ec <_Z22__fetch_global_Serial1v+0x44>)
 80a35d8:	f000 fad0 	bl	80a3b7c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a35dc:	4803      	ldr	r0, [pc, #12]	; (80a35ec <_Z22__fetch_global_Serial1v+0x44>)
 80a35de:	bd38      	pop	{r3, r4, r5, pc}
 80a35e0:	20000d6c 	.word	0x20000d6c
 80a35e4:	20000d70 	.word	0x20000d70
 80a35e8:	20000df4 	.word	0x20000df4
 80a35ec:	20000e78 	.word	0x20000e78
 80a35f0:	20000084 	.word	0x20000084
 80a35f4:	080a34f1 	.word	0x080a34f1

080a35f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a35f8:	7441      	strb	r1, [r0, #17]
}
 80a35fa:	4770      	bx	lr

080a35fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a35fc:	4770      	bx	lr

080a35fe <_ZN9USBSerial4readEv>:
{
 80a35fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3600:	2100      	movs	r1, #0
 80a3602:	7c00      	ldrb	r0, [r0, #16]
 80a3604:	f7fd fbfc 	bl	80a0e00 <HAL_USB_USART_Receive_Data>
}
 80a3608:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a360c:	bd08      	pop	{r3, pc}

080a360e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a360e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3610:	2101      	movs	r1, #1
 80a3612:	7c00      	ldrb	r0, [r0, #16]
 80a3614:	f7fd fbf4 	bl	80a0e00 <HAL_USB_USART_Receive_Data>
}
 80a3618:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a361c:	bd08      	pop	{r3, pc}

080a361e <_ZN9USBSerial17availableForWriteEv>:
{
 80a361e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3620:	7c00      	ldrb	r0, [r0, #16]
 80a3622:	f7fd fbe5 	bl	80a0df0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3626:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a362a:	bd08      	pop	{r3, pc}

080a362c <_ZN9USBSerial9availableEv>:
{
 80a362c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a362e:	7c00      	ldrb	r0, [r0, #16]
 80a3630:	f7fd fbd6 	bl	80a0de0 <HAL_USB_USART_Available_Data>
}
 80a3634:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3638:	bd08      	pop	{r3, pc}

080a363a <_ZN9USBSerial5writeEh>:
{
 80a363a:	b538      	push	{r3, r4, r5, lr}
 80a363c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a363e:	7c00      	ldrb	r0, [r0, #16]
{
 80a3640:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3642:	f7fd fbd5 	bl	80a0df0 <HAL_USB_USART_Available_Data_For_Write>
 80a3646:	2800      	cmp	r0, #0
 80a3648:	dc01      	bgt.n	80a364e <_ZN9USBSerial5writeEh+0x14>
 80a364a:	7c60      	ldrb	r0, [r4, #17]
 80a364c:	b128      	cbz	r0, 80a365a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a364e:	4629      	mov	r1, r5
 80a3650:	7c20      	ldrb	r0, [r4, #16]
 80a3652:	f7fd fbdd 	bl	80a0e10 <HAL_USB_USART_Send_Data>
 80a3656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a365a:	bd38      	pop	{r3, r4, r5, pc}

080a365c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a365c:	7c00      	ldrb	r0, [r0, #16]
 80a365e:	f7fd bbdf 	b.w	80a0e20 <HAL_USB_USART_Flush_Data>

080a3662 <_ZN9USBSerialD0Ev>:
 80a3662:	b510      	push	{r4, lr}
 80a3664:	4604      	mov	r4, r0
 80a3666:	2114      	movs	r1, #20
 80a3668:	f000 fa8d 	bl	80a3b86 <_ZdlPvj>
 80a366c:	4620      	mov	r0, r4
 80a366e:	bd10      	pop	{r4, pc}

080a3670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3670:	b510      	push	{r4, lr}
 80a3672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3676:	4604      	mov	r4, r0
 80a3678:	4608      	mov	r0, r1
 80a367a:	2100      	movs	r1, #0
 80a367c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3680:	4b04      	ldr	r3, [pc, #16]	; (80a3694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3682:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3684:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3686:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3688:	4611      	mov	r1, r2
  _blocking = true;
 80a368a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a368c:	f7fd fb90 	bl	80a0db0 <HAL_USB_USART_Init>
}
 80a3690:	4620      	mov	r0, r4
 80a3692:	bd10      	pop	{r4, pc}
 80a3694:	080a4580 	.word	0x080a4580

080a3698 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3698:	2200      	movs	r2, #0
 80a369a:	7c00      	ldrb	r0, [r0, #16]
 80a369c:	f7fd bb90 	b.w	80a0dc0 <HAL_USB_USART_Begin>

080a36a0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a36a0:	7c00      	ldrb	r0, [r0, #16]
 80a36a2:	f7fd bb95 	b.w	80a0dd0 <HAL_USB_USART_End>
	...

080a36a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a36a8:	b510      	push	{r4, lr}
 80a36aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a36ac:	2214      	movs	r2, #20
 80a36ae:	2100      	movs	r1, #0
 80a36b0:	f000 fbc4 	bl	80a3e3c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a36b4:	4b05      	ldr	r3, [pc, #20]	; (80a36cc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a36b6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a36b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a36ba:	4b05      	ldr	r3, [pc, #20]	; (80a36d0 <_Z19acquireSerialBufferv+0x28>)
 80a36bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a36be:	f240 1301 	movw	r3, #257	; 0x101
 80a36c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a36c4:	2381      	movs	r3, #129	; 0x81
 80a36c6:	8223      	strh	r3, [r4, #16]
}
 80a36c8:	bd10      	pop	{r4, pc}
 80a36ca:	bf00      	nop
 80a36cc:	20000ebc 	.word	0x20000ebc
 80a36d0:	20000fbd 	.word	0x20000fbd

080a36d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a36d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a36d6:	4d0f      	ldr	r5, [pc, #60]	; (80a3714 <_Z16_fetch_usbserialv+0x40>)
{
 80a36d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a36da:	a801      	add	r0, sp, #4
 80a36dc:	f7ff ffe4 	bl	80a36a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a36e0:	7829      	ldrb	r1, [r5, #0]
 80a36e2:	f3bf 8f5b 	dmb	ish
 80a36e6:	f011 0401 	ands.w	r4, r1, #1
 80a36ea:	d110      	bne.n	80a370e <_Z16_fetch_usbserialv+0x3a>
 80a36ec:	4628      	mov	r0, r5
 80a36ee:	f7fc fce3 	bl	80a00b8 <__cxa_guard_acquire>
 80a36f2:	b160      	cbz	r0, 80a370e <_Z16_fetch_usbserialv+0x3a>
 80a36f4:	4621      	mov	r1, r4
 80a36f6:	aa01      	add	r2, sp, #4
 80a36f8:	4807      	ldr	r0, [pc, #28]	; (80a3718 <_Z16_fetch_usbserialv+0x44>)
 80a36fa:	f7ff ffb9 	bl	80a3670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a36fe:	4628      	mov	r0, r5
 80a3700:	f7fc fcdf 	bl	80a00c2 <__cxa_guard_release>
 80a3704:	4a05      	ldr	r2, [pc, #20]	; (80a371c <_Z16_fetch_usbserialv+0x48>)
 80a3706:	4906      	ldr	r1, [pc, #24]	; (80a3720 <_Z16_fetch_usbserialv+0x4c>)
 80a3708:	4803      	ldr	r0, [pc, #12]	; (80a3718 <_Z16_fetch_usbserialv+0x44>)
 80a370a:	f000 fa37 	bl	80a3b7c <__aeabi_atexit>
	return _usbserial;
}
 80a370e:	4802      	ldr	r0, [pc, #8]	; (80a3718 <_Z16_fetch_usbserialv+0x44>)
 80a3710:	b007      	add	sp, #28
 80a3712:	bd30      	pop	{r4, r5, pc}
 80a3714:	20000e8c 	.word	0x20000e8c
 80a3718:	20000e94 	.word	0x20000e94
 80a371c:	20000084 	.word	0x20000084
 80a3720:	080a35fd 	.word	0x080a35fd

080a3724 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3724:	b510      	push	{r4, lr}
 80a3726:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3728:	2214      	movs	r2, #20
 80a372a:	2100      	movs	r1, #0
 80a372c:	f000 fb86 	bl	80a3e3c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3730:	4b05      	ldr	r3, [pc, #20]	; (80a3748 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3732:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a3734:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3736:	4b05      	ldr	r3, [pc, #20]	; (80a374c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3738:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a373a:	f240 1301 	movw	r3, #257	; 0x101
 80a373e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3740:	2381      	movs	r3, #129	; 0x81
 80a3742:	8223      	strh	r3, [r4, #16]
}
 80a3744:	bd10      	pop	{r4, pc}
 80a3746:	bf00      	nop
 80a3748:	2000103e 	.word	0x2000103e
 80a374c:	2000113f 	.word	0x2000113f

080a3750 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3750:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3752:	4c0f      	ldr	r4, [pc, #60]	; (80a3790 <_Z17_fetch_usbserial1v+0x40>)
{
 80a3754:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3756:	a801      	add	r0, sp, #4
 80a3758:	f7ff ffe4 	bl	80a3724 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a375c:	7823      	ldrb	r3, [r4, #0]
 80a375e:	f3bf 8f5b 	dmb	ish
 80a3762:	07db      	lsls	r3, r3, #31
 80a3764:	d410      	bmi.n	80a3788 <_Z17_fetch_usbserial1v+0x38>
 80a3766:	4620      	mov	r0, r4
 80a3768:	f7fc fca6 	bl	80a00b8 <__cxa_guard_acquire>
 80a376c:	b160      	cbz	r0, 80a3788 <_Z17_fetch_usbserial1v+0x38>
 80a376e:	2101      	movs	r1, #1
 80a3770:	aa01      	add	r2, sp, #4
 80a3772:	4808      	ldr	r0, [pc, #32]	; (80a3794 <_Z17_fetch_usbserial1v+0x44>)
 80a3774:	f7ff ff7c 	bl	80a3670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3778:	4620      	mov	r0, r4
 80a377a:	f7fc fca2 	bl	80a00c2 <__cxa_guard_release>
 80a377e:	4a06      	ldr	r2, [pc, #24]	; (80a3798 <_Z17_fetch_usbserial1v+0x48>)
 80a3780:	4906      	ldr	r1, [pc, #24]	; (80a379c <_Z17_fetch_usbserial1v+0x4c>)
 80a3782:	4804      	ldr	r0, [pc, #16]	; (80a3794 <_Z17_fetch_usbserial1v+0x44>)
 80a3784:	f000 f9fa 	bl	80a3b7c <__aeabi_atexit>
  return _usbserial1;
}
 80a3788:	4802      	ldr	r0, [pc, #8]	; (80a3794 <_Z17_fetch_usbserial1v+0x44>)
 80a378a:	b006      	add	sp, #24
 80a378c:	bd10      	pop	{r4, pc}
 80a378e:	bf00      	nop
 80a3790:	20000e90 	.word	0x20000e90
 80a3794:	20000ea8 	.word	0x20000ea8
 80a3798:	20000084 	.word	0x20000084
 80a379c:	080a35fd 	.word	0x080a35fd

080a37a0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a37a0:	2200      	movs	r2, #0
 80a37a2:	6840      	ldr	r0, [r0, #4]
 80a37a4:	4611      	mov	r1, r2
 80a37a6:	f7fd bbe7 	b.w	80a0f78 <network_ready>

080a37aa <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a37aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a37ac:	4615      	mov	r5, r2
 80a37ae:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a37b0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a37b2:	460e      	mov	r6, r1
 80a37b4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a37b6:	2100      	movs	r1, #0
 80a37b8:	a803      	add	r0, sp, #12
 80a37ba:	f000 fb3f 	bl	80a3e3c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a37be:	4628      	mov	r0, r5
 80a37c0:	f000 fbad 	bl	80a3f1e <strlen>
 80a37c4:	2700      	movs	r7, #0
 80a37c6:	b281      	uxth	r1, r0
 80a37c8:	6873      	ldr	r3, [r6, #4]
 80a37ca:	4628      	mov	r0, r5
 80a37cc:	9700      	str	r7, [sp, #0]
 80a37ce:	aa03      	add	r2, sp, #12
 80a37d0:	f7fd fb36 	bl	80a0e40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a37d4:	b130      	cbz	r0, 80a37e4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a37d6:	4639      	mov	r1, r7
 80a37d8:	4620      	mov	r0, r4
 80a37da:	f7fd ff99 	bl	80a1710 <_ZN9IPAddressC1Em>
    }
 80a37de:	4620      	mov	r0, r4
 80a37e0:	b009      	add	sp, #36	; 0x24
 80a37e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a37e4:	4620      	mov	r0, r4
 80a37e6:	a903      	add	r1, sp, #12
 80a37e8:	f7fd ff80 	bl	80a16ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a37ec:	e7f7      	b.n	80a37de <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a37ee <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a37ee:	2200      	movs	r2, #0
 80a37f0:	6840      	ldr	r0, [r0, #4]
 80a37f2:	4611      	mov	r1, r2
 80a37f4:	f7fd bbe0 	b.w	80a0fb8 <network_listening>

080a37f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a37f8:	2200      	movs	r2, #0
 80a37fa:	6840      	ldr	r0, [r0, #4]
 80a37fc:	4611      	mov	r1, r2
 80a37fe:	f7fd bbeb 	b.w	80a0fd8 <network_get_listen_timeout>

080a3802 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3802:	2200      	movs	r2, #0
 80a3804:	6840      	ldr	r0, [r0, #4]
 80a3806:	f7fd bbdf 	b.w	80a0fc8 <network_set_listen_timeout>

080a380a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a380a:	2200      	movs	r2, #0
 80a380c:	6840      	ldr	r0, [r0, #4]
 80a380e:	f081 0101 	eor.w	r1, r1, #1
 80a3812:	f7fd bbc9 	b.w	80a0fa8 <network_listen>

080a3816 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3816:	2300      	movs	r3, #0
 80a3818:	6840      	ldr	r0, [r0, #4]
 80a381a:	461a      	mov	r2, r3
 80a381c:	4619      	mov	r1, r3
 80a381e:	f7fd bbbb 	b.w	80a0f98 <network_off>

080a3822 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a3822:	2300      	movs	r3, #0
 80a3824:	6840      	ldr	r0, [r0, #4]
 80a3826:	461a      	mov	r2, r3
 80a3828:	4619      	mov	r1, r3
 80a382a:	f7fd bbad 	b.w	80a0f88 <network_on>

080a382e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a382e:	2200      	movs	r2, #0
 80a3830:	6840      	ldr	r0, [r0, #4]
 80a3832:	4611      	mov	r1, r2
 80a3834:	f7fd bb90 	b.w	80a0f58 <network_connecting>

080a3838 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3838:	2200      	movs	r2, #0
 80a383a:	2102      	movs	r1, #2
 80a383c:	6840      	ldr	r0, [r0, #4]
 80a383e:	f7fd bb93 	b.w	80a0f68 <network_disconnect>

080a3842 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3842:	2300      	movs	r3, #0
 80a3844:	6840      	ldr	r0, [r0, #4]
 80a3846:	461a      	mov	r2, r3
 80a3848:	f7fd bb7e 	b.w	80a0f48 <network_connect>

080a384c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a384c:	2204      	movs	r2, #4
 80a384e:	4b02      	ldr	r3, [pc, #8]	; (80a3858 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3850:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3852:	4a02      	ldr	r2, [pc, #8]	; (80a385c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3854:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3856:	4770      	bx	lr
 80a3858:	200011c0 	.word	0x200011c0
 80a385c:	080a45b0 	.word	0x080a45b0

080a3860 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a3860:	4b01      	ldr	r3, [pc, #4]	; (80a3868 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a3862:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a3864:	4770      	bx	lr
 80a3866:	bf00      	nop
 80a3868:	20000020 	.word	0x20000020

080a386c <serialEventRun>:
{
 80a386c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a386e:	4b13      	ldr	r3, [pc, #76]	; (80a38bc <serialEventRun+0x50>)
 80a3870:	b143      	cbz	r3, 80a3884 <serialEventRun+0x18>
 80a3872:	f7ff ff2f 	bl	80a36d4 <_Z16_fetch_usbserialv>
 80a3876:	6803      	ldr	r3, [r0, #0]
 80a3878:	691b      	ldr	r3, [r3, #16]
 80a387a:	4798      	blx	r3
 80a387c:	2800      	cmp	r0, #0
 80a387e:	dd01      	ble.n	80a3884 <serialEventRun+0x18>
        serialEvent();
 80a3880:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3884:	4b0e      	ldr	r3, [pc, #56]	; (80a38c0 <serialEventRun+0x54>)
 80a3886:	b143      	cbz	r3, 80a389a <serialEventRun+0x2e>
 80a3888:	f7ff fe8e 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
 80a388c:	6803      	ldr	r3, [r0, #0]
 80a388e:	691b      	ldr	r3, [r3, #16]
 80a3890:	4798      	blx	r3
 80a3892:	2800      	cmp	r0, #0
 80a3894:	dd01      	ble.n	80a389a <serialEventRun+0x2e>
        serialEvent1();
 80a3896:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a389a:	4b0a      	ldr	r3, [pc, #40]	; (80a38c4 <serialEventRun+0x58>)
 80a389c:	b10b      	cbz	r3, 80a38a2 <serialEventRun+0x36>
 80a389e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a38a2:	4b09      	ldr	r3, [pc, #36]	; (80a38c8 <serialEventRun+0x5c>)
 80a38a4:	b143      	cbz	r3, 80a38b8 <serialEventRun+0x4c>
 80a38a6:	f7ff ff53 	bl	80a3750 <_Z17_fetch_usbserial1v>
 80a38aa:	6803      	ldr	r3, [r0, #0]
 80a38ac:	691b      	ldr	r3, [r3, #16]
 80a38ae:	4798      	blx	r3
 80a38b0:	2800      	cmp	r0, #0
 80a38b2:	dd01      	ble.n	80a38b8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a38b4:	f3af 8000 	nop.w
}
 80a38b8:	bd08      	pop	{r3, pc}
 80a38ba:	bf00      	nop
	...

080a38cc <_post_loop>:
{
 80a38cc:	b508      	push	{r3, lr}
	serialEventRun();
 80a38ce:	f7ff ffcd 	bl	80a386c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a38d2:	f7fd f963 	bl	80a0b9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a38d6:	4b01      	ldr	r3, [pc, #4]	; (80a38dc <_post_loop+0x10>)
 80a38d8:	6018      	str	r0, [r3, #0]
}
 80a38da:	bd08      	pop	{r3, pc}
 80a38dc:	200011e0 	.word	0x200011e0

080a38e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a38e0:	4802      	ldr	r0, [pc, #8]	; (80a38ec <_Z33system_initialize_user_backup_ramv+0xc>)
 80a38e2:	4a03      	ldr	r2, [pc, #12]	; (80a38f0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a38e4:	4903      	ldr	r1, [pc, #12]	; (80a38f4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a38e6:	1a12      	subs	r2, r2, r0
 80a38e8:	f000 ba80 	b.w	80a3dec <memcpy>
 80a38ec:	40024000 	.word	0x40024000
 80a38f0:	40024004 	.word	0x40024004
 80a38f4:	080a4800 	.word	0x080a4800

080a38f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a38f8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a38fa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a38fc:	461a      	mov	r2, r3
 80a38fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3902:	9300      	str	r3, [sp, #0]
 80a3904:	f7fd faf6 	bl	80a0ef4 <system_ctrl_set_result>
}
 80a3908:	b003      	add	sp, #12
 80a390a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3910 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3910:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3912:	8843      	ldrh	r3, [r0, #2]
 80a3914:	2b0a      	cmp	r3, #10
 80a3916:	d008      	beq.n	80a392a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3918:	2b50      	cmp	r3, #80	; 0x50
 80a391a:	d10b      	bne.n	80a3934 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a391c:	4b09      	ldr	r3, [pc, #36]	; (80a3944 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a391e:	681b      	ldr	r3, [r3, #0]
 80a3920:	b14b      	cbz	r3, 80a3936 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3922:	b003      	add	sp, #12
 80a3924:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3928:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a392a:	f7ff ffe5 	bl	80a38f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a392e:	b003      	add	sp, #12
 80a3930:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3934:	2300      	movs	r3, #0
 80a3936:	461a      	mov	r2, r3
 80a3938:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a393c:	9300      	str	r3, [sp, #0]
 80a393e:	f7fd fad9 	bl	80a0ef4 <system_ctrl_set_result>
}
 80a3942:	e7f4      	b.n	80a392e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3944:	200011cc 	.word	0x200011cc

080a3948 <module_user_init_hook>:
{
 80a3948:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a394a:	4c12      	ldr	r4, [pc, #72]	; (80a3994 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a394c:	2100      	movs	r1, #0
 80a394e:	4812      	ldr	r0, [pc, #72]	; (80a3998 <module_user_init_hook+0x50>)
 80a3950:	f7fd fb8a 	bl	80a1068 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3954:	4d11      	ldr	r5, [pc, #68]	; (80a399c <module_user_init_hook+0x54>)
 80a3956:	6823      	ldr	r3, [r4, #0]
 80a3958:	42ab      	cmp	r3, r5
 80a395a:	bf0c      	ite	eq
 80a395c:	2201      	moveq	r2, #1
 80a395e:	2200      	movne	r2, #0
 80a3960:	4b0f      	ldr	r3, [pc, #60]	; (80a39a0 <module_user_init_hook+0x58>)
 80a3962:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3964:	d002      	beq.n	80a396c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a3966:	f7ff ffbb 	bl	80a38e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a396a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a396c:	f7fd f906 	bl	80a0b7c <HAL_RNG_GetRandomNumber>
 80a3970:	4604      	mov	r4, r0
    srand(seed);
 80a3972:	f000 fa6b 	bl	80a3e4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3976:	4b0b      	ldr	r3, [pc, #44]	; (80a39a4 <module_user_init_hook+0x5c>)
 80a3978:	b113      	cbz	r3, 80a3980 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a397a:	4620      	mov	r0, r4
 80a397c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3980:	2100      	movs	r1, #0
 80a3982:	4808      	ldr	r0, [pc, #32]	; (80a39a4 <module_user_init_hook+0x5c>)
 80a3984:	f7fd fad8 	bl	80a0f38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a398c:	2100      	movs	r1, #0
 80a398e:	4806      	ldr	r0, [pc, #24]	; (80a39a8 <module_user_init_hook+0x60>)
 80a3990:	f7fd baa6 	b.w	80a0ee0 <system_ctrl_set_app_request_handler>
 80a3994:	40024000 	.word	0x40024000
 80a3998:	080a3861 	.word	0x080a3861
 80a399c:	9a271c1e 	.word	0x9a271c1e
 80a39a0:	200011c8 	.word	0x200011c8
 80a39a4:	00000000 	.word	0x00000000
 80a39a8:	080a3911 	.word	0x080a3911

080a39ac <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a39ac:	b510      	push	{r4, lr}
 80a39ae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a39b0:	6880      	ldr	r0, [r0, #8]
 80a39b2:	b108      	cbz	r0, 80a39b8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a39b4:	f7fd f8ca 	bl	80a0b4c <os_mutex_recursive_destroy>
 80a39b8:	4620      	mov	r0, r4
 80a39ba:	bd10      	pop	{r4, pc}

080a39bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a39bc:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a39be:	b570      	push	{r4, r5, r6, lr}
 80a39c0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a39c2:	d901      	bls.n	80a39c8 <pinAvailable+0xc>
    return false;
 80a39c4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a39c6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a39c8:	f1a0 030d 	sub.w	r3, r0, #13
 80a39cc:	2b02      	cmp	r3, #2
 80a39ce:	d90b      	bls.n	80a39e8 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a39d0:	2801      	cmp	r0, #1
 80a39d2:	d826      	bhi.n	80a3a22 <pinAvailable+0x66>
 80a39d4:	f000 f892 	bl	80a3afc <_Z19__fetch_global_Wirev>
 80a39d8:	2100      	movs	r1, #0
 80a39da:	7c00      	ldrb	r0, [r0, #16]
 80a39dc:	f7fd f936 	bl	80a0c4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a39e0:	f080 0001 	eor.w	r0, r0, #1
 80a39e4:	b2c0      	uxtb	r0, r0
 80a39e6:	e7ee      	b.n	80a39c6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a39e8:	4e13      	ldr	r6, [pc, #76]	; (80a3a38 <pinAvailable+0x7c>)
 80a39ea:	7831      	ldrb	r1, [r6, #0]
 80a39ec:	f3bf 8f5b 	dmb	ish
 80a39f0:	f011 0501 	ands.w	r5, r1, #1
 80a39f4:	d10f      	bne.n	80a3a16 <pinAvailable+0x5a>
 80a39f6:	4630      	mov	r0, r6
 80a39f8:	f7fc fb5e 	bl	80a00b8 <__cxa_guard_acquire>
 80a39fc:	b158      	cbz	r0, 80a3a16 <pinAvailable+0x5a>
 80a39fe:	4629      	mov	r1, r5
 80a3a00:	480e      	ldr	r0, [pc, #56]	; (80a3a3c <pinAvailable+0x80>)
 80a3a02:	f7ff f985 	bl	80a2d10 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3a06:	4630      	mov	r0, r6
 80a3a08:	f7fc fb5b 	bl	80a00c2 <__cxa_guard_release>
 80a3a0c:	4a0c      	ldr	r2, [pc, #48]	; (80a3a40 <pinAvailable+0x84>)
 80a3a0e:	490d      	ldr	r1, [pc, #52]	; (80a3a44 <pinAvailable+0x88>)
 80a3a10:	480a      	ldr	r0, [pc, #40]	; (80a3a3c <pinAvailable+0x80>)
 80a3a12:	f000 f8b3 	bl	80a3b7c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3a16:	4b09      	ldr	r3, [pc, #36]	; (80a3a3c <pinAvailable+0x80>)
 80a3a18:	7818      	ldrb	r0, [r3, #0]
 80a3a1a:	f7fd f971 	bl	80a0d00 <hal_spi_is_enabled>
 80a3a1e:	2800      	cmp	r0, #0
 80a3a20:	d1d0      	bne.n	80a39c4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3a22:	3c12      	subs	r4, #18
 80a3a24:	2c01      	cmp	r4, #1
 80a3a26:	d805      	bhi.n	80a3a34 <pinAvailable+0x78>
 80a3a28:	f7ff fdbe 	bl	80a35a8 <_Z22__fetch_global_Serial1v>
 80a3a2c:	7c00      	ldrb	r0, [r0, #16]
 80a3a2e:	f7fd f9a7 	bl	80a0d80 <hal_usart_is_enabled>
 80a3a32:	e7d5      	b.n	80a39e0 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3a34:	2001      	movs	r0, #1
 80a3a36:	e7c6      	b.n	80a39c6 <pinAvailable+0xa>
 80a3a38:	200011d0 	.word	0x200011d0
 80a3a3c:	200011d4 	.word	0x200011d4
 80a3a40:	20000084 	.word	0x20000084
 80a3a44:	080a39ad 	.word	0x080a39ad

080a3a48 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a48:	2817      	cmp	r0, #23
{
 80a3a4a:	b538      	push	{r3, r4, r5, lr}
 80a3a4c:	4604      	mov	r4, r0
 80a3a4e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a50:	d80a      	bhi.n	80a3a68 <pinMode+0x20>
 80a3a52:	29ff      	cmp	r1, #255	; 0xff
 80a3a54:	d008      	beq.n	80a3a68 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3a56:	f7ff ffb1 	bl	80a39bc <pinAvailable>
 80a3a5a:	b128      	cbz	r0, 80a3a68 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3a5c:	4629      	mov	r1, r5
 80a3a5e:	4620      	mov	r0, r4
}
 80a3a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3a64:	f7fd b8aa 	b.w	80a0bbc <HAL_Pin_Mode>
}
 80a3a68:	bd38      	pop	{r3, r4, r5, pc}

080a3a6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3a6a:	b538      	push	{r3, r4, r5, lr}
 80a3a6c:	4604      	mov	r4, r0
 80a3a6e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3a70:	f7fd f8ac 	bl	80a0bcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3a74:	28ff      	cmp	r0, #255	; 0xff
 80a3a76:	d010      	beq.n	80a3a9a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3a78:	2806      	cmp	r0, #6
 80a3a7a:	d804      	bhi.n	80a3a86 <digitalWrite+0x1c>
 80a3a7c:	234d      	movs	r3, #77	; 0x4d
 80a3a7e:	fa23 f000 	lsr.w	r0, r3, r0
 80a3a82:	07c3      	lsls	r3, r0, #31
 80a3a84:	d409      	bmi.n	80a3a9a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3a86:	4620      	mov	r0, r4
 80a3a88:	f7ff ff98 	bl	80a39bc <pinAvailable>
 80a3a8c:	b128      	cbz	r0, 80a3a9a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3a8e:	4629      	mov	r1, r5
 80a3a90:	4620      	mov	r0, r4
}
 80a3a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3a96:	f7fd b8a1 	b.w	80a0bdc <HAL_GPIO_Write>
}
 80a3a9a:	bd38      	pop	{r3, r4, r5, pc}

080a3a9c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3a9c:	b510      	push	{r4, lr}
 80a3a9e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3aa0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3aa2:	bf9c      	itt	ls
 80a3aa4:	340a      	addls	r4, #10
 80a3aa6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3aa8:	4620      	mov	r0, r4
 80a3aaa:	f7ff ff87 	bl	80a39bc <pinAvailable>
 80a3aae:	b150      	cbz	r0, 80a3ac6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3ab0:	2103      	movs	r1, #3
 80a3ab2:	4620      	mov	r0, r4
 80a3ab4:	f7fd f87a 	bl	80a0bac <HAL_Validate_Pin_Function>
 80a3ab8:	2803      	cmp	r0, #3
 80a3aba:	d104      	bne.n	80a3ac6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a3abc:	4620      	mov	r0, r4
}
 80a3abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3ac2:	f7fd b893 	b.w	80a0bec <hal_adc_read>
}
 80a3ac6:	2000      	movs	r0, #0
 80a3ac8:	bd10      	pop	{r4, pc}
	...

080a3acc <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3acc:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3ace:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3ad0:	2520      	movs	r5, #32
 80a3ad2:	8043      	strh	r3, [r0, #2]
 80a3ad4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ad6:	4e08      	ldr	r6, [pc, #32]	; (80a3af8 <_Z17acquireWireBufferv+0x2c>)
{
 80a3ad8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3ada:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3adc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3ade:	6085      	str	r5, [r0, #8]
 80a3ae0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ae2:	4628      	mov	r0, r5
 80a3ae4:	f000 f853 	bl	80a3b8e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ae8:	4631      	mov	r1, r6
	};
 80a3aea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3aec:	4628      	mov	r0, r5
 80a3aee:	f000 f84e 	bl	80a3b8e <_ZnajRKSt9nothrow_t>
	};
 80a3af2:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3af4:	4620      	mov	r0, r4
 80a3af6:	bd70      	pop	{r4, r5, r6, pc}
 80a3af8:	080a45e4 	.word	0x080a45e4

080a3afc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3afc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3afe:	4d0f      	ldr	r5, [pc, #60]	; (80a3b3c <_Z19__fetch_global_Wirev+0x40>)
{
 80a3b00:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b02:	7829      	ldrb	r1, [r5, #0]
 80a3b04:	f3bf 8f5b 	dmb	ish
 80a3b08:	f011 0401 	ands.w	r4, r1, #1
 80a3b0c:	d113      	bne.n	80a3b36 <_Z19__fetch_global_Wirev+0x3a>
 80a3b0e:	4628      	mov	r0, r5
 80a3b10:	f7fc fad2 	bl	80a00b8 <__cxa_guard_acquire>
 80a3b14:	b178      	cbz	r0, 80a3b36 <_Z19__fetch_global_Wirev+0x3a>
 80a3b16:	a801      	add	r0, sp, #4
 80a3b18:	f7ff ffd8 	bl	80a3acc <_Z17acquireWireBufferv>
 80a3b1c:	4621      	mov	r1, r4
 80a3b1e:	aa01      	add	r2, sp, #4
 80a3b20:	4807      	ldr	r0, [pc, #28]	; (80a3b40 <_Z19__fetch_global_Wirev+0x44>)
 80a3b22:	f7fd fda9 	bl	80a1678 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3b26:	4628      	mov	r0, r5
 80a3b28:	f7fc facb 	bl	80a00c2 <__cxa_guard_release>
 80a3b2c:	4a05      	ldr	r2, [pc, #20]	; (80a3b44 <_Z19__fetch_global_Wirev+0x48>)
 80a3b2e:	4906      	ldr	r1, [pc, #24]	; (80a3b48 <_Z19__fetch_global_Wirev+0x4c>)
 80a3b30:	4803      	ldr	r0, [pc, #12]	; (80a3b40 <_Z19__fetch_global_Wirev+0x44>)
 80a3b32:	f000 f823 	bl	80a3b7c <__aeabi_atexit>
	return wire;
}
 80a3b36:	4802      	ldr	r0, [pc, #8]	; (80a3b40 <_Z19__fetch_global_Wirev+0x44>)
 80a3b38:	b007      	add	sp, #28
 80a3b3a:	bd30      	pop	{r4, r5, pc}
 80a3b3c:	200011e4 	.word	0x200011e4
 80a3b40:	200011e8 	.word	0x200011e8
 80a3b44:	20000084 	.word	0x20000084
 80a3b48:	080a1621 	.word	0x080a1621

080a3b4c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3b4c:	2300      	movs	r3, #0
 80a3b4e:	b513      	push	{r0, r1, r4, lr}
 80a3b50:	4c07      	ldr	r4, [pc, #28]	; (80a3b70 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3b52:	461a      	mov	r2, r3
 80a3b54:	4619      	mov	r1, r3
 80a3b56:	4620      	mov	r0, r4
 80a3b58:	9300      	str	r3, [sp, #0]
 80a3b5a:	f7fd fdef 	bl	80a173c <_ZN9IPAddressC1Ehhhh>
 80a3b5e:	4620      	mov	r0, r4
 80a3b60:	4a04      	ldr	r2, [pc, #16]	; (80a3b74 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3b62:	4905      	ldr	r1, [pc, #20]	; (80a3b78 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3b64:	b002      	add	sp, #8
 80a3b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3b6a:	f000 b807 	b.w	80a3b7c <__aeabi_atexit>
 80a3b6e:	bf00      	nop
 80a3b70:	200011fc 	.word	0x200011fc
 80a3b74:	20000084 	.word	0x20000084
 80a3b78:	080a00c9 	.word	0x080a00c9

080a3b7c <__aeabi_atexit>:
 80a3b7c:	460b      	mov	r3, r1
 80a3b7e:	4601      	mov	r1, r0
 80a3b80:	4618      	mov	r0, r3
 80a3b82:	f000 b925 	b.w	80a3dd0 <__cxa_atexit>

080a3b86 <_ZdlPvj>:
 80a3b86:	f7fc ba8a 	b.w	80a009e <_ZdlPv>

080a3b8a <_ZnwjRKSt9nothrow_t>:
 80a3b8a:	f7fc ba84 	b.w	80a0096 <_Znwj>

080a3b8e <_ZnajRKSt9nothrow_t>:
 80a3b8e:	f7fc ba84 	b.w	80a009a <_Znaj>

080a3b92 <_ZSt25__throw_bad_function_callv>:
 80a3b92:	b508      	push	{r3, lr}
 80a3b94:	f7fd fa58 	bl	80a1048 <abort>

080a3b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a3b98:	4901      	ldr	r1, [pc, #4]	; (80a3ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a3b9a:	f000 b8fb 	b.w	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3b9e:	bf00      	nop
 80a3ba0:	080a4600 	.word	0x080a4600

080a3ba4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3ba6:	2400      	movs	r4, #0
 80a3ba8:	2310      	movs	r3, #16
 80a3baa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3bae:	6803      	ldr	r3, [r0, #0]
 80a3bb0:	4615      	mov	r5, r2
 80a3bb2:	699e      	ldr	r6, [r3, #24]
 80a3bb4:	6812      	ldr	r2, [r2, #0]
 80a3bb6:	466b      	mov	r3, sp
 80a3bb8:	9400      	str	r4, [sp, #0]
 80a3bba:	f88d 4004 	strb.w	r4, [sp, #4]
 80a3bbe:	47b0      	blx	r6
 80a3bc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3bc4:	f003 0306 	and.w	r3, r3, #6
 80a3bc8:	2b06      	cmp	r3, #6
 80a3bca:	bf09      	itett	eq
 80a3bcc:	2001      	moveq	r0, #1
 80a3bce:	4620      	movne	r0, r4
 80a3bd0:	9b00      	ldreq	r3, [sp, #0]
 80a3bd2:	602b      	streq	r3, [r5, #0]
 80a3bd4:	b004      	add	sp, #16
 80a3bd6:	bd70      	pop	{r4, r5, r6, pc}

080a3bd8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a3bd8:	9800      	ldr	r0, [sp, #0]
 80a3bda:	4290      	cmp	r0, r2
 80a3bdc:	bf14      	ite	ne
 80a3bde:	2001      	movne	r0, #1
 80a3be0:	2006      	moveq	r0, #6
 80a3be2:	4770      	bx	lr

080a3be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3be4:	b510      	push	{r4, lr}
 80a3be6:	4604      	mov	r4, r0
 80a3be8:	4b02      	ldr	r3, [pc, #8]	; (80a3bf4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a3bea:	6003      	str	r3, [r0, #0]
 80a3bec:	f000 f8cf 	bl	80a3d8e <_ZNSt9type_infoD1Ev>
 80a3bf0:	4620      	mov	r0, r4
 80a3bf2:	bd10      	pop	{r4, pc}
 80a3bf4:	080a4640 	.word	0x080a4640

080a3bf8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a3bf8:	b510      	push	{r4, lr}
 80a3bfa:	4604      	mov	r4, r0
 80a3bfc:	f7ff fff2 	bl	80a3be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3c00:	4620      	mov	r0, r4
 80a3c02:	2108      	movs	r1, #8
 80a3c04:	f7ff ffbf 	bl	80a3b86 <_ZdlPvj>
 80a3c08:	4620      	mov	r0, r4
 80a3c0a:	bd10      	pop	{r4, pc}

080a3c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a3c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3c14:	461f      	mov	r7, r3
 80a3c16:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a3c1a:	4598      	cmp	r8, r3
 80a3c1c:	4606      	mov	r6, r0
 80a3c1e:	4615      	mov	r5, r2
 80a3c20:	d107      	bne.n	80a3c32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3c22:	9907      	ldr	r1, [sp, #28]
 80a3c24:	f000 f8b6 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3c28:	b118      	cbz	r0, 80a3c32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3c2a:	7165      	strb	r5, [r4, #5]
 80a3c2c:	2000      	movs	r0, #0
 80a3c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3c32:	4639      	mov	r1, r7
 80a3c34:	4630      	mov	r0, r6
 80a3c36:	f000 f8ad 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3c3a:	2800      	cmp	r0, #0
 80a3c3c:	d0f6      	beq.n	80a3c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a3c3e:	2301      	movs	r3, #1
 80a3c40:	f8c4 8000 	str.w	r8, [r4]
 80a3c44:	7125      	strb	r5, [r4, #4]
 80a3c46:	71a3      	strb	r3, [r4, #6]
 80a3c48:	e7f0      	b.n	80a3c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a3c4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a3c4a:	b538      	push	{r3, r4, r5, lr}
 80a3c4c:	4615      	mov	r5, r2
 80a3c4e:	461c      	mov	r4, r3
 80a3c50:	f000 f8a0 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3c54:	b120      	cbz	r0, 80a3c60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a3c56:	2308      	movs	r3, #8
 80a3c58:	60e3      	str	r3, [r4, #12]
 80a3c5a:	2306      	movs	r3, #6
 80a3c5c:	6025      	str	r5, [r4, #0]
 80a3c5e:	7123      	strb	r3, [r4, #4]
 80a3c60:	bd38      	pop	{r3, r4, r5, pc}

080a3c62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a3c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c66:	4605      	mov	r5, r0
 80a3c68:	460c      	mov	r4, r1
 80a3c6a:	4616      	mov	r6, r2
 80a3c6c:	461f      	mov	r7, r3
 80a3c6e:	f000 f891 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3c72:	b948      	cbnz	r0, 80a3c88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3c74:	2f03      	cmp	r7, #3
 80a3c76:	d807      	bhi.n	80a3c88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3c78:	6823      	ldr	r3, [r4, #0]
 80a3c7a:	4632      	mov	r2, r6
 80a3c7c:	4629      	mov	r1, r5
 80a3c7e:	4620      	mov	r0, r4
 80a3c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c84:	695b      	ldr	r3, [r3, #20]
 80a3c86:	4718      	bx	r3
 80a3c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3c8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a3c8c:	b510      	push	{r4, lr}
 80a3c8e:	4604      	mov	r4, r0
 80a3c90:	4b02      	ldr	r3, [pc, #8]	; (80a3c9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a3c92:	6003      	str	r3, [r0, #0]
 80a3c94:	f7ff ffa6 	bl	80a3be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3c98:	4620      	mov	r0, r4
 80a3c9a:	bd10      	pop	{r4, pc}
 80a3c9c:	080a46a0 	.word	0x080a46a0

080a3ca0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a3ca0:	b510      	push	{r4, lr}
 80a3ca2:	4604      	mov	r4, r0
 80a3ca4:	f7ff fff2 	bl	80a3c8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a3ca8:	4620      	mov	r0, r4
 80a3caa:	210c      	movs	r1, #12
 80a3cac:	f7ff ff6b 	bl	80a3b86 <_ZdlPvj>
 80a3cb0:	4620      	mov	r0, r4
 80a3cb2:	bd10      	pop	{r4, pc}

080a3cb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a3cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3cb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3cbc:	4606      	mov	r6, r0
 80a3cbe:	4590      	cmp	r8, r2
 80a3cc0:	460f      	mov	r7, r1
 80a3cc2:	4615      	mov	r5, r2
 80a3cc4:	461c      	mov	r4, r3
 80a3cc6:	d00b      	beq.n	80a3ce0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a3cc8:	68b0      	ldr	r0, [r6, #8]
 80a3cca:	462a      	mov	r2, r5
 80a3ccc:	6803      	ldr	r3, [r0, #0]
 80a3cce:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3cd2:	6a1e      	ldr	r6, [r3, #32]
 80a3cd4:	4639      	mov	r1, r7
 80a3cd6:	4623      	mov	r3, r4
 80a3cd8:	46b4      	mov	ip, r6
 80a3cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3cde:	4760      	bx	ip
 80a3ce0:	4619      	mov	r1, r3
 80a3ce2:	f000 f857 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3ce6:	2800      	cmp	r0, #0
 80a3ce8:	d0ee      	beq.n	80a3cc8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a3cea:	2006      	movs	r0, #6
 80a3cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3cf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3cf0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3cf4:	460d      	mov	r5, r1
 80a3cf6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a3cfa:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3cfe:	4619      	mov	r1, r3
 80a3d00:	4681      	mov	r9, r0
 80a3d02:	4617      	mov	r7, r2
 80a3d04:	4698      	mov	r8, r3
 80a3d06:	f000 f845 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3d0a:	b190      	cbz	r0, 80a3d32 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3d0c:	2d00      	cmp	r5, #0
 80a3d0e:	6034      	str	r4, [r6, #0]
 80a3d10:	7137      	strb	r7, [r6, #4]
 80a3d12:	db09      	blt.n	80a3d28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3d14:	442c      	add	r4, r5
 80a3d16:	45a2      	cmp	sl, r4
 80a3d18:	bf0c      	ite	eq
 80a3d1a:	2406      	moveq	r4, #6
 80a3d1c:	2401      	movne	r4, #1
 80a3d1e:	71b4      	strb	r4, [r6, #6]
 80a3d20:	2000      	movs	r0, #0
 80a3d22:	b001      	add	sp, #4
 80a3d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d28:	3502      	adds	r5, #2
 80a3d2a:	d1f9      	bne.n	80a3d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d2c:	2301      	movs	r3, #1
 80a3d2e:	71b3      	strb	r3, [r6, #6]
 80a3d30:	e7f6      	b.n	80a3d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d32:	4554      	cmp	r4, sl
 80a3d34:	d106      	bne.n	80a3d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3d36:	4659      	mov	r1, fp
 80a3d38:	4648      	mov	r0, r9
 80a3d3a:	f000 f82b 	bl	80a3d94 <_ZNKSt9type_infoeqERKS_>
 80a3d3e:	b108      	cbz	r0, 80a3d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3d40:	7177      	strb	r7, [r6, #5]
 80a3d42:	e7ed      	b.n	80a3d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3d44:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a3d48:	463a      	mov	r2, r7
 80a3d4a:	6803      	ldr	r3, [r0, #0]
 80a3d4c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a3d50:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a3d54:	69dc      	ldr	r4, [r3, #28]
 80a3d56:	4629      	mov	r1, r5
 80a3d58:	4643      	mov	r3, r8
 80a3d5a:	46a4      	mov	ip, r4
 80a3d5c:	b001      	add	sp, #4
 80a3d5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d62:	4760      	bx	ip

080a3d64 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a3d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d68:	4607      	mov	r7, r0
 80a3d6a:	460c      	mov	r4, r1
 80a3d6c:	4615      	mov	r5, r2
 80a3d6e:	461e      	mov	r6, r3
 80a3d70:	f7ff ff6b 	bl	80a3c4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a3d74:	b948      	cbnz	r0, 80a3d8a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a3d76:	68b8      	ldr	r0, [r7, #8]
 80a3d78:	462a      	mov	r2, r5
 80a3d7a:	6803      	ldr	r3, [r0, #0]
 80a3d7c:	4621      	mov	r1, r4
 80a3d7e:	699f      	ldr	r7, [r3, #24]
 80a3d80:	4633      	mov	r3, r6
 80a3d82:	46bc      	mov	ip, r7
 80a3d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d88:	4760      	bx	ip
 80a3d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3d8e <_ZNSt9type_infoD1Ev>:
 80a3d8e:	4770      	bx	lr

080a3d90 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a3d90:	2000      	movs	r0, #0
 80a3d92:	4770      	bx	lr

080a3d94 <_ZNKSt9type_infoeqERKS_>:
 80a3d94:	4281      	cmp	r1, r0
 80a3d96:	b508      	push	{r3, lr}
 80a3d98:	d00e      	beq.n	80a3db8 <_ZNKSt9type_infoeqERKS_+0x24>
 80a3d9a:	6840      	ldr	r0, [r0, #4]
 80a3d9c:	7803      	ldrb	r3, [r0, #0]
 80a3d9e:	2b2a      	cmp	r3, #42	; 0x2a
 80a3da0:	d00c      	beq.n	80a3dbc <_ZNKSt9type_infoeqERKS_+0x28>
 80a3da2:	6849      	ldr	r1, [r1, #4]
 80a3da4:	780b      	ldrb	r3, [r1, #0]
 80a3da6:	2b2a      	cmp	r3, #42	; 0x2a
 80a3da8:	bf08      	it	eq
 80a3daa:	3101      	addeq	r1, #1
 80a3dac:	f000 f889 	bl	80a3ec2 <strcmp>
 80a3db0:	fab0 f080 	clz	r0, r0
 80a3db4:	0940      	lsrs	r0, r0, #5
 80a3db6:	bd08      	pop	{r3, pc}
 80a3db8:	2001      	movs	r0, #1
 80a3dba:	e7fc      	b.n	80a3db6 <_ZNKSt9type_infoeqERKS_+0x22>
 80a3dbc:	2000      	movs	r0, #0
 80a3dbe:	e7fa      	b.n	80a3db6 <_ZNKSt9type_infoeqERKS_+0x22>

080a3dc0 <atoi>:
 80a3dc0:	220a      	movs	r2, #10
 80a3dc2:	2100      	movs	r1, #0
 80a3dc4:	f000 b96a 	b.w	80a409c <strtol>

080a3dc8 <atol>:
 80a3dc8:	220a      	movs	r2, #10
 80a3dca:	2100      	movs	r1, #0
 80a3dcc:	f000 b966 	b.w	80a409c <strtol>

080a3dd0 <__cxa_atexit>:
 80a3dd0:	b510      	push	{r4, lr}
 80a3dd2:	4604      	mov	r4, r0
 80a3dd4:	4804      	ldr	r0, [pc, #16]	; (80a3de8 <__cxa_atexit+0x18>)
 80a3dd6:	4613      	mov	r3, r2
 80a3dd8:	b120      	cbz	r0, 80a3de4 <__cxa_atexit+0x14>
 80a3dda:	460a      	mov	r2, r1
 80a3ddc:	2002      	movs	r0, #2
 80a3dde:	4621      	mov	r1, r4
 80a3de0:	f3af 8000 	nop.w
 80a3de4:	bd10      	pop	{r4, pc}
 80a3de6:	bf00      	nop
 80a3de8:	00000000 	.word	0x00000000

080a3dec <memcpy>:
 80a3dec:	440a      	add	r2, r1
 80a3dee:	4291      	cmp	r1, r2
 80a3df0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3df4:	d100      	bne.n	80a3df8 <memcpy+0xc>
 80a3df6:	4770      	bx	lr
 80a3df8:	b510      	push	{r4, lr}
 80a3dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3dfe:	4291      	cmp	r1, r2
 80a3e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3e04:	d1f9      	bne.n	80a3dfa <memcpy+0xe>
 80a3e06:	bd10      	pop	{r4, pc}

080a3e08 <memmove>:
 80a3e08:	4288      	cmp	r0, r1
 80a3e0a:	b510      	push	{r4, lr}
 80a3e0c:	eb01 0402 	add.w	r4, r1, r2
 80a3e10:	d902      	bls.n	80a3e18 <memmove+0x10>
 80a3e12:	4284      	cmp	r4, r0
 80a3e14:	4623      	mov	r3, r4
 80a3e16:	d807      	bhi.n	80a3e28 <memmove+0x20>
 80a3e18:	1e43      	subs	r3, r0, #1
 80a3e1a:	42a1      	cmp	r1, r4
 80a3e1c:	d008      	beq.n	80a3e30 <memmove+0x28>
 80a3e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3e26:	e7f8      	b.n	80a3e1a <memmove+0x12>
 80a3e28:	4601      	mov	r1, r0
 80a3e2a:	4402      	add	r2, r0
 80a3e2c:	428a      	cmp	r2, r1
 80a3e2e:	d100      	bne.n	80a3e32 <memmove+0x2a>
 80a3e30:	bd10      	pop	{r4, pc}
 80a3e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3e3a:	e7f7      	b.n	80a3e2c <memmove+0x24>

080a3e3c <memset>:
 80a3e3c:	4603      	mov	r3, r0
 80a3e3e:	4402      	add	r2, r0
 80a3e40:	4293      	cmp	r3, r2
 80a3e42:	d100      	bne.n	80a3e46 <memset+0xa>
 80a3e44:	4770      	bx	lr
 80a3e46:	f803 1b01 	strb.w	r1, [r3], #1
 80a3e4a:	e7f9      	b.n	80a3e40 <memset+0x4>

080a3e4c <srand>:
 80a3e4c:	b538      	push	{r3, r4, r5, lr}
 80a3e4e:	4b0d      	ldr	r3, [pc, #52]	; (80a3e84 <srand+0x38>)
 80a3e50:	4604      	mov	r4, r0
 80a3e52:	681d      	ldr	r5, [r3, #0]
 80a3e54:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3e56:	b97b      	cbnz	r3, 80a3e78 <srand+0x2c>
 80a3e58:	2018      	movs	r0, #24
 80a3e5a:	f7fd f8d5 	bl	80a1008 <malloc>
 80a3e5e:	4a0a      	ldr	r2, [pc, #40]	; (80a3e88 <srand+0x3c>)
 80a3e60:	4b0a      	ldr	r3, [pc, #40]	; (80a3e8c <srand+0x40>)
 80a3e62:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3e64:	e9c0 2300 	strd	r2, r3, [r0]
 80a3e68:	4b09      	ldr	r3, [pc, #36]	; (80a3e90 <srand+0x44>)
 80a3e6a:	2201      	movs	r2, #1
 80a3e6c:	6083      	str	r3, [r0, #8]
 80a3e6e:	230b      	movs	r3, #11
 80a3e70:	8183      	strh	r3, [r0, #12]
 80a3e72:	2300      	movs	r3, #0
 80a3e74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3e78:	2200      	movs	r2, #0
 80a3e7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3e7c:	611c      	str	r4, [r3, #16]
 80a3e7e:	615a      	str	r2, [r3, #20]
 80a3e80:	bd38      	pop	{r3, r4, r5, pc}
 80a3e82:	bf00      	nop
 80a3e84:	20000020 	.word	0x20000020
 80a3e88:	abcd330e 	.word	0xabcd330e
 80a3e8c:	e66d1234 	.word	0xe66d1234
 80a3e90:	0005deec 	.word	0x0005deec

080a3e94 <strchr>:
 80a3e94:	4603      	mov	r3, r0
 80a3e96:	b2c9      	uxtb	r1, r1
 80a3e98:	4618      	mov	r0, r3
 80a3e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3e9e:	b112      	cbz	r2, 80a3ea6 <strchr+0x12>
 80a3ea0:	428a      	cmp	r2, r1
 80a3ea2:	d1f9      	bne.n	80a3e98 <strchr+0x4>
 80a3ea4:	4770      	bx	lr
 80a3ea6:	2900      	cmp	r1, #0
 80a3ea8:	bf18      	it	ne
 80a3eaa:	2000      	movne	r0, #0
 80a3eac:	4770      	bx	lr

080a3eae <strchrnul>:
 80a3eae:	b510      	push	{r4, lr}
 80a3eb0:	4604      	mov	r4, r0
 80a3eb2:	f7ff ffef 	bl	80a3e94 <strchr>
 80a3eb6:	b918      	cbnz	r0, 80a3ec0 <strchrnul+0x12>
 80a3eb8:	4620      	mov	r0, r4
 80a3eba:	f000 f830 	bl	80a3f1e <strlen>
 80a3ebe:	4420      	add	r0, r4
 80a3ec0:	bd10      	pop	{r4, pc}

080a3ec2 <strcmp>:
 80a3ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3eca:	2a01      	cmp	r2, #1
 80a3ecc:	bf28      	it	cs
 80a3ece:	429a      	cmpcs	r2, r3
 80a3ed0:	d0f7      	beq.n	80a3ec2 <strcmp>
 80a3ed2:	1ad0      	subs	r0, r2, r3
 80a3ed4:	4770      	bx	lr

080a3ed6 <strcpy>:
 80a3ed6:	4603      	mov	r3, r0
 80a3ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3edc:	f803 2b01 	strb.w	r2, [r3], #1
 80a3ee0:	2a00      	cmp	r2, #0
 80a3ee2:	d1f9      	bne.n	80a3ed8 <strcpy+0x2>
 80a3ee4:	4770      	bx	lr
	...

080a3ee8 <strdup>:
 80a3ee8:	4b02      	ldr	r3, [pc, #8]	; (80a3ef4 <strdup+0xc>)
 80a3eea:	4601      	mov	r1, r0
 80a3eec:	6818      	ldr	r0, [r3, #0]
 80a3eee:	f000 b803 	b.w	80a3ef8 <_strdup_r>
 80a3ef2:	bf00      	nop
 80a3ef4:	20000020 	.word	0x20000020

080a3ef8 <_strdup_r>:
 80a3ef8:	b570      	push	{r4, r5, r6, lr}
 80a3efa:	4604      	mov	r4, r0
 80a3efc:	4608      	mov	r0, r1
 80a3efe:	460d      	mov	r5, r1
 80a3f00:	f000 f80d 	bl	80a3f1e <strlen>
 80a3f04:	1c46      	adds	r6, r0, #1
 80a3f06:	4631      	mov	r1, r6
 80a3f08:	4620      	mov	r0, r4
 80a3f0a:	f7fd f8a5 	bl	80a1058 <_malloc_r>
 80a3f0e:	4604      	mov	r4, r0
 80a3f10:	b118      	cbz	r0, 80a3f1a <_strdup_r+0x22>
 80a3f12:	4632      	mov	r2, r6
 80a3f14:	4629      	mov	r1, r5
 80a3f16:	f7ff ff69 	bl	80a3dec <memcpy>
 80a3f1a:	4620      	mov	r0, r4
 80a3f1c:	bd70      	pop	{r4, r5, r6, pc}

080a3f1e <strlen>:
 80a3f1e:	4603      	mov	r3, r0
 80a3f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3f24:	2a00      	cmp	r2, #0
 80a3f26:	d1fb      	bne.n	80a3f20 <strlen+0x2>
 80a3f28:	1a18      	subs	r0, r3, r0
 80a3f2a:	3801      	subs	r0, #1
 80a3f2c:	4770      	bx	lr

080a3f2e <strncmp>:
 80a3f2e:	b510      	push	{r4, lr}
 80a3f30:	b16a      	cbz	r2, 80a3f4e <strncmp+0x20>
 80a3f32:	3901      	subs	r1, #1
 80a3f34:	1884      	adds	r4, r0, r2
 80a3f36:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a3f3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a3f3e:	4293      	cmp	r3, r2
 80a3f40:	d103      	bne.n	80a3f4a <strncmp+0x1c>
 80a3f42:	42a0      	cmp	r0, r4
 80a3f44:	d001      	beq.n	80a3f4a <strncmp+0x1c>
 80a3f46:	2b00      	cmp	r3, #0
 80a3f48:	d1f5      	bne.n	80a3f36 <strncmp+0x8>
 80a3f4a:	1a98      	subs	r0, r3, r2
 80a3f4c:	bd10      	pop	{r4, pc}
 80a3f4e:	4610      	mov	r0, r2
 80a3f50:	e7fc      	b.n	80a3f4c <strncmp+0x1e>

080a3f52 <strrchr>:
 80a3f52:	b538      	push	{r3, r4, r5, lr}
 80a3f54:	4603      	mov	r3, r0
 80a3f56:	460c      	mov	r4, r1
 80a3f58:	b969      	cbnz	r1, 80a3f76 <strrchr+0x24>
 80a3f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3f5e:	f7ff bf99 	b.w	80a3e94 <strchr>
 80a3f62:	4605      	mov	r5, r0
 80a3f64:	1c43      	adds	r3, r0, #1
 80a3f66:	4621      	mov	r1, r4
 80a3f68:	4618      	mov	r0, r3
 80a3f6a:	f7ff ff93 	bl	80a3e94 <strchr>
 80a3f6e:	2800      	cmp	r0, #0
 80a3f70:	d1f7      	bne.n	80a3f62 <strrchr+0x10>
 80a3f72:	4628      	mov	r0, r5
 80a3f74:	bd38      	pop	{r3, r4, r5, pc}
 80a3f76:	2500      	movs	r5, #0
 80a3f78:	e7f5      	b.n	80a3f66 <strrchr+0x14>

080a3f7a <strstr>:
 80a3f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3f7c:	780c      	ldrb	r4, [r1, #0]
 80a3f7e:	b164      	cbz	r4, 80a3f9a <strstr+0x20>
 80a3f80:	4603      	mov	r3, r0
 80a3f82:	781a      	ldrb	r2, [r3, #0]
 80a3f84:	4618      	mov	r0, r3
 80a3f86:	1c5e      	adds	r6, r3, #1
 80a3f88:	b90a      	cbnz	r2, 80a3f8e <strstr+0x14>
 80a3f8a:	4610      	mov	r0, r2
 80a3f8c:	e005      	b.n	80a3f9a <strstr+0x20>
 80a3f8e:	4294      	cmp	r4, r2
 80a3f90:	d108      	bne.n	80a3fa4 <strstr+0x2a>
 80a3f92:	460d      	mov	r5, r1
 80a3f94:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a3f98:	b902      	cbnz	r2, 80a3f9c <strstr+0x22>
 80a3f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3f9c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a3fa0:	4297      	cmp	r7, r2
 80a3fa2:	d0f7      	beq.n	80a3f94 <strstr+0x1a>
 80a3fa4:	4633      	mov	r3, r6
 80a3fa6:	e7ec      	b.n	80a3f82 <strstr+0x8>

080a3fa8 <_strtol_l.isra.0>:
 80a3fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3fac:	468c      	mov	ip, r1
 80a3fae:	4686      	mov	lr, r0
 80a3fb0:	4e39      	ldr	r6, [pc, #228]	; (80a4098 <_strtol_l.isra.0+0xf0>)
 80a3fb2:	4660      	mov	r0, ip
 80a3fb4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3fb8:	5da5      	ldrb	r5, [r4, r6]
 80a3fba:	f015 0508 	ands.w	r5, r5, #8
 80a3fbe:	d1f8      	bne.n	80a3fb2 <_strtol_l.isra.0+0xa>
 80a3fc0:	2c2d      	cmp	r4, #45	; 0x2d
 80a3fc2:	d133      	bne.n	80a402c <_strtol_l.isra.0+0x84>
 80a3fc4:	f04f 0801 	mov.w	r8, #1
 80a3fc8:	f89c 4000 	ldrb.w	r4, [ip]
 80a3fcc:	f100 0c02 	add.w	ip, r0, #2
 80a3fd0:	2b00      	cmp	r3, #0
 80a3fd2:	d05c      	beq.n	80a408e <_strtol_l.isra.0+0xe6>
 80a3fd4:	2b10      	cmp	r3, #16
 80a3fd6:	d10c      	bne.n	80a3ff2 <_strtol_l.isra.0+0x4a>
 80a3fd8:	2c30      	cmp	r4, #48	; 0x30
 80a3fda:	d10a      	bne.n	80a3ff2 <_strtol_l.isra.0+0x4a>
 80a3fdc:	f89c 0000 	ldrb.w	r0, [ip]
 80a3fe0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3fe4:	2858      	cmp	r0, #88	; 0x58
 80a3fe6:	d14d      	bne.n	80a4084 <_strtol_l.isra.0+0xdc>
 80a3fe8:	2310      	movs	r3, #16
 80a3fea:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a3fee:	f10c 0c02 	add.w	ip, ip, #2
 80a3ff2:	2600      	movs	r6, #0
 80a3ff4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a3ff8:	3f01      	subs	r7, #1
 80a3ffa:	fbb7 f9f3 	udiv	r9, r7, r3
 80a3ffe:	4630      	mov	r0, r6
 80a4000:	fb03 7a19 	mls	sl, r3, r9, r7
 80a4004:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a4008:	2d09      	cmp	r5, #9
 80a400a:	d818      	bhi.n	80a403e <_strtol_l.isra.0+0x96>
 80a400c:	462c      	mov	r4, r5
 80a400e:	42a3      	cmp	r3, r4
 80a4010:	dd24      	ble.n	80a405c <_strtol_l.isra.0+0xb4>
 80a4012:	1c75      	adds	r5, r6, #1
 80a4014:	d007      	beq.n	80a4026 <_strtol_l.isra.0+0x7e>
 80a4016:	4581      	cmp	r9, r0
 80a4018:	d31d      	bcc.n	80a4056 <_strtol_l.isra.0+0xae>
 80a401a:	d101      	bne.n	80a4020 <_strtol_l.isra.0+0x78>
 80a401c:	45a2      	cmp	sl, r4
 80a401e:	db1a      	blt.n	80a4056 <_strtol_l.isra.0+0xae>
 80a4020:	2601      	movs	r6, #1
 80a4022:	fb00 4003 	mla	r0, r0, r3, r4
 80a4026:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a402a:	e7eb      	b.n	80a4004 <_strtol_l.isra.0+0x5c>
 80a402c:	2c2b      	cmp	r4, #43	; 0x2b
 80a402e:	bf08      	it	eq
 80a4030:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a4034:	46a8      	mov	r8, r5
 80a4036:	bf08      	it	eq
 80a4038:	f100 0c02 	addeq.w	ip, r0, #2
 80a403c:	e7c8      	b.n	80a3fd0 <_strtol_l.isra.0+0x28>
 80a403e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a4042:	2d19      	cmp	r5, #25
 80a4044:	d801      	bhi.n	80a404a <_strtol_l.isra.0+0xa2>
 80a4046:	3c37      	subs	r4, #55	; 0x37
 80a4048:	e7e1      	b.n	80a400e <_strtol_l.isra.0+0x66>
 80a404a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a404e:	2d19      	cmp	r5, #25
 80a4050:	d804      	bhi.n	80a405c <_strtol_l.isra.0+0xb4>
 80a4052:	3c57      	subs	r4, #87	; 0x57
 80a4054:	e7db      	b.n	80a400e <_strtol_l.isra.0+0x66>
 80a4056:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a405a:	e7e4      	b.n	80a4026 <_strtol_l.isra.0+0x7e>
 80a405c:	1c73      	adds	r3, r6, #1
 80a405e:	d106      	bne.n	80a406e <_strtol_l.isra.0+0xc6>
 80a4060:	2322      	movs	r3, #34	; 0x22
 80a4062:	4638      	mov	r0, r7
 80a4064:	f8ce 3000 	str.w	r3, [lr]
 80a4068:	b942      	cbnz	r2, 80a407c <_strtol_l.isra.0+0xd4>
 80a406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a406e:	f1b8 0f00 	cmp.w	r8, #0
 80a4072:	d000      	beq.n	80a4076 <_strtol_l.isra.0+0xce>
 80a4074:	4240      	negs	r0, r0
 80a4076:	2a00      	cmp	r2, #0
 80a4078:	d0f7      	beq.n	80a406a <_strtol_l.isra.0+0xc2>
 80a407a:	b10e      	cbz	r6, 80a4080 <_strtol_l.isra.0+0xd8>
 80a407c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a4080:	6011      	str	r1, [r2, #0]
 80a4082:	e7f2      	b.n	80a406a <_strtol_l.isra.0+0xc2>
 80a4084:	2430      	movs	r4, #48	; 0x30
 80a4086:	2b00      	cmp	r3, #0
 80a4088:	d1b3      	bne.n	80a3ff2 <_strtol_l.isra.0+0x4a>
 80a408a:	2308      	movs	r3, #8
 80a408c:	e7b1      	b.n	80a3ff2 <_strtol_l.isra.0+0x4a>
 80a408e:	2c30      	cmp	r4, #48	; 0x30
 80a4090:	d0a4      	beq.n	80a3fdc <_strtol_l.isra.0+0x34>
 80a4092:	230a      	movs	r3, #10
 80a4094:	e7ad      	b.n	80a3ff2 <_strtol_l.isra.0+0x4a>
 80a4096:	bf00      	nop
 80a4098:	080a46da 	.word	0x080a46da

080a409c <strtol>:
 80a409c:	4613      	mov	r3, r2
 80a409e:	460a      	mov	r2, r1
 80a40a0:	4601      	mov	r1, r0
 80a40a2:	4802      	ldr	r0, [pc, #8]	; (80a40ac <strtol+0x10>)
 80a40a4:	6800      	ldr	r0, [r0, #0]
 80a40a6:	f7ff bf7f 	b.w	80a3fa8 <_strtol_l.isra.0>
 80a40aa:	bf00      	nop
 80a40ac:	20000020 	.word	0x20000020

080a40b0 <dynalib_user>:
 80a40b0:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a40c0:	00000000 6c616e61 6176676f 0065756c     ....analogvalue.
 80a40d0:	6970612f 4547002f 75460054 44206c6c     /api/.GET.Full D
 80a40e0:	00617461 00545550 20455548 41544144     ata.PUT.HUE DATA
 80a40f0:	73754400 227b006b 3a226e6f 75727420     .Dusk.{"on": tru
 80a4100:	22202c65 6e656373 203a2265 52706422     e, "scene": "dpR
 80a4110:	44537161 6d364876 32786e30 22202c22     aqSDvH6m0nx2", "
 80a4120:	6e617274 69746973 69746e6f 3a22656d     transitiontime":
 80a4130:	7d303320 73754400 0032206b 6e6f227b      30}.Dusk 2.{"on
 80a4140:	74203a22 2c657572 63732220 22656e65     ": true, "scene"
 80a4150:	4f22203a 52775032 4c446c58 41796c73     : "O2PwRXlDLslyA
 80a4160:	2c226449 72742220 69736e61 6e6f6974     Id", "transition
 80a4170:	656d6974 33203a22 4e007d30 74686769     time": 30}.Night
 80a4180:	6f227b00 203a226e 65757274 7322202c     .{"on": true, "s
 80a4190:	656e6563 22203a22 2d496262 72374741     cene": "bbI-AG7r
 80a41a0:	56565864 22497879 7422202c 736e6172     dXVVyxI", "trans
 80a41b0:	6f697469 6d69746e 203a2265 007d3033     itiontime": 30}.
 80a41c0:	00594144 6e6f227b 74203a22 2c657572     DAY.{"on": true,
 80a41d0:	63732220 22656e65 7622203a 75616d59      "scene": "vYmau
 80a41e0:	67524359 7a46557a 2c222d33 72742220     YCRgzUFz3-", "tr
 80a41f0:	69736e61 6e6f6974 656d6974 33203a22     ansitiontime": 3
 80a4200:	44007d30 61007961 796a486b 49726158     0}.Day.akHjyXarI
 80a4210:	6d647a53 3465364e 6e4c6a72 63787035     SzdmN6e4rjLn5pxc
 80a4220:	67564970 4f7a4169 6c5a4733 006f312d     pIVgiAzO3GZl-1o.
 80a4230:	67696c2f 2f737468 672f0035 70756f72     /lights/5./group
 80a4240:	2f332f73 69746361 7b006e6f 61747322     s/3/action.{"sta
 80a4250:	3a226574 68227b20 3a226575 30312220     te": {"hue": "10
 80a4260:	22303030 6e007d7d 006c6c75              000"}}.null.

080a426c <_ZTVN5spark10LogHandlerE>:
	...
 80a427c:	080a00a5 080a00cb                       ........

080a4284 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a428c:	080a014d 080a0181 080a27b5 080a00cd     M........'......

080a429c <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
 80a42a4:	080a0101 080a0115 65636341 2a007470     ........Accept.*
 80a42b4:	20002a2f 50545448 302e312f 63000a0d     /*. HTTP/1.0...c
 80a42c4:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
 80a42d4:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
 80a42e4:	00687467 54534f50 0d0a0d00 0000000a     gth.POST........

080a42f4 <_ZTV10JsonBuffer>:
	...
 80a42fc:	080a0ab5 080a0ad1                       ........

080a4304 <_ZTV10JsonParser>:
	...
 80a430c:	080a0ae5 080a0b09                       ........

080a4314 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a431c:	080a10a7 080a10ad 080a10fd 080a10bb     ................
 80a432c:	080a10a9                                ....

080a4330 <_ZTV7TwoWire>:
	...
 80a4338:	080a1621 080a166b 080a1643 080a1623     !...k...C...#...
 80a4348:	080a164b 080a1653 080a165b 080a1663     K...S...[...c...

080a4358 <_ZTV9IPAddress>:
	...
 80a4360:	080a169d 080a00c9 080a0195 25006425     ............%d.%
 80a4370:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 80a4380:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 80a4390:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a43a0:	0072656c 00707061 30313025 5d002075     ler.app.%010u .]
 80a43b0:	202c0020 3a292800 5b200020 646f6300      ., .(): . [.cod
 80a43c0:	203d2065 00692500 61746564 20736c69     e = .%i.details 
 80a43d0:	6d00203d 66006300 006e6c00 63006e66     = .m.c.f.ln.fn.c
 80a43e0:	0065646f 61746564 00006c69              ode.detail..

080a43ec <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a43f4:	080a1b3f 080a1b65 080a1b25 080a1783     ?...e...%.......

080a4404 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a440c:	080a1fe1 080a1ff9 080a27b5 080a00cd     .........'......

080a441c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a4424:	080a200d 080a2021 080a295d 080a1b2d     . ..! ..])..-...

080a4434 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a443c:	080a1b3d 080a1b73 080a26f1 080a1b2f     =...s....&../...

080a444c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a4454:	080a1b3b 080a1b81 080a1f09 080a1b9d     ;...............

080a4464 <_ZTVN5spark12NetworkClassE>:
	...
 80a446c:	080a2ad1 080a2adb 080a2ae5 080a2aef     .*...*...*...*..
 80a447c:	080a2af9 080a2b05 080a2b11 080a2b19     .*...+...+...+..
 80a448c:	080a2b21 080a2b2d 080a2b35 080a2b3f     !+..-+..5+..?+..
 80a449c:	080a2b49 69726977 5400676e 6c435043     I+..wiring.TCPCl
 80a44ac:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a44bc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a44c4:	080a3021 080a3049 080a346b 080a3057     !0..I0..k4..W0..
 80a44d4:	080a3025                                %0..

080a44d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a44e0 <_ZTV9TCPClient>:
	...
 80a44e8:	080a305d 080a3091 080a2fdd 080a2ff7     ]0...0.../.../..
 80a44f8:	080a326d 080a30f3 080a30c5 080a301f     m2...0...0...0..
 80a4508:	080a318d 080a3471 080a3127 080a32e1     .1..q4..'1...2..
 80a4518:	080a338f 080a3347 080a3007 080a3355     .3..G3...0..U3..
 80a4528:	080a30a5 252d5925 64252d6d 3a482554     .0..%Y-%m-%dT%H:
 80a4538:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a4548 <_ZTV11USARTSerial>:
	...
 80a4550:	080a34f1 080a3559 080a3535 080a2bc5     .4..Y5..55...+..
 80a4560:	080a3505 080a3521 080a3513 080a352f     .5..!5...5../5..
 80a4570:	080a34f3 080a34f7                       .4...4..

080a4578 <_ZTV9USBSerial>:
	...
 80a4580:	080a35fd 080a3663 080a363b 080a2bc5     .5..c6..;6...+..
 80a4590:	080a362d 080a35ff 080a360f 080a365d     -6...5...6..]6..
 80a45a0:	080a361f 080a35f9                       .6...5..

080a45a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a45b0:	080a3843 080a3839 080a382f 080a37a1     C8..98../8...7..
 80a45c0:	080a3823 080a3817 080a2b11 080a2b19     #8...8...+...+..
 80a45d0:	080a380b 080a3803 080a37f9 080a37ef     .8...8...7...7..
 80a45e0:	080a37ab                                .7..

080a45e4 <_ZSt7nothrow>:
	...

080a45e5 <_ZTSSt19_Sp_make_shared_tag>:
 80a45e5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a45f5:	5f646572 00676174                        red_tag....

080a4600 <_ZTISt19_Sp_make_shared_tag>:
 80a4600:	080a4640 080a45e5                       @F...E..

080a4608 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a4608:	080a46a0 080a4614 080a46c4              .F...F...F..

080a4614 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a4614:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a4624:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a4634:	00000045                                E...

080a4638 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a4638:	00000000 080a4608 080a3be5 080a3bf9     .....F...;...;..
 80a4648:	080a3d91 080a3d91 080a3c63 080a3ba5     .=...=..c<...;..
 80a4658:	080a3c4b 080a3c0d 080a3bd9              K<...<...;..

080a4664 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a4664:	080a46a0 080a4670 080a4608              .F..pF...F..

080a4670 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a4670:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a4680:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a4690:	456f666e 00000000                       nfoE....

080a4698 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a4698:	00000000 080a4664 080a3c8d 080a3ca1     ....dF...<...<..
 80a46a8:	080a3d91 080a3d91 080a3c63 080a3ba5     .=...=..c<...;..
 80a46b8:	080a3d65 080a3cf1 080a3cb5              e=...<...<..

080a46c4 <_ZTISt9type_info>:
 80a46c4:	080a4640 080a46cc                       @F...F..

080a46cc <_ZTSSt9type_info>:
 80a46cc:	74397453 5f657079 6f666e69               St9type_info.

080a46d9 <_ctype_>:
 80a46d9:	20202000 20202020 28282020 20282828     .         ((((( 
 80a46e9:	20202020 20202020 20202020 20202020                     
 80a46f9:	10108820 10101010 10101010 10101010      ...............
 80a4709:	04040410 04040404 10040404 10101010     ................
 80a4719:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4729:	01010101 01010101 01010101 10101010     ................
 80a4739:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4749:	02020202 02020202 02020202 10101010     ................
 80a4759:	00000020 00000000 00000000 00000000      ...............
	...

080a47da <link_const_variable_data_end>:
	...

080a47dc <link_constructors_location>:
 80a47dc:	080a05bd 	.word	0x080a05bd
 80a47e0:	080a27a5 	.word	0x080a27a5
 80a47e4:	080a2bb1 	.word	0x080a2bb1
 80a47e8:	080a2cf5 	.word	0x080a2cf5
 80a47ec:	080a2fa1 	.word	0x080a2fa1
 80a47f0:	080a34dd 	.word	0x080a34dd
 80a47f4:	080a384d 	.word	0x080a384d
 80a47f8:	080a3b4d 	.word	0x080a3b4d

080a47fc <link_constructors_end>:
 80a47fc:	00000000 	.word	0x00000000
