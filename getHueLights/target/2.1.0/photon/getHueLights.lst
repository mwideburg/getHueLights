
/Users/michaelwideburg/Desktop/getHueLights/getHueLights/target/2.1.0/photon/getHueLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000049a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a49c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a49c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001198  20000084  20000084  00040084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4a48  080a4a48  00034a48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4a70  080a4a70  00034a70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00143884  00000000  00000000  00034a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000177da  00000000  00000000  001782f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002349b  00000000  00000000  0018fad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027a8  00000000  00000000  001b2f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006650  00000000  00000000  001b5715  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029aa2  00000000  00000000  001bbd65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035b6b  00000000  00000000  001e5807  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bb3b2  00000000  00000000  0021b372  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006ba8  00000000  00000000  002d6724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 ff9d 	bl	80a3f6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 ffbf 	bl	80a3fbc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a49c4 	.word	0x080a49c4
 80a004c:	20000084 	.word	0x20000084
 80a0050:	20000084 	.word	0x20000084
 80a0054:	2000121c 	.word	0x2000121c
 80a0058:	2000121c 	.word	0x2000121c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fd33 	bl	80a3ac8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a4994 	.word	0x080a4994
 80a0080:	080a49b4 	.word	0x080a49b4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b88e 	b.w	80a01a4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fa07 	bl	80a049c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f003 bcdb 	b.w	80a3a4c <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 b877 	b.w	80a1188 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 b875 	b.w	80a1188 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 b87b 	b.w	80a1198 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 ff90 	bl	80a0fd0 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0d0d 	.word	0x080a0d0d

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00cc:	6a00      	ldr	r0, [r0, #32]
 80a00ce:	6803      	ldr	r3, [r0, #0]
 80a00d0:	68db      	ldr	r3, [r3, #12]
 80a00d2:	4718      	bx	r3

080a00d4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	3004      	adds	r0, #4
 80a00da:	f002 fee8 	bl	80a2eae <_ZN6StringD1Ev>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN14http_request_tD1Ev>:
} http_request_t;
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	303c      	adds	r0, #60	; 0x3c
 80a00e8:	f002 fee1 	bl	80a2eae <_ZN6StringD1Ev>
 80a00ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00f0:	f002 fedd 	bl	80a2eae <_ZN6StringD1Ev>
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f002 feda 	bl	80a2eae <_ZN6StringD1Ev>
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	bd10      	pop	{r4, pc}
	...

080a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	4b02      	ldr	r3, [pc, #8]	; (80a0110 <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
 80a0106:	6003      	str	r3, [r0, #0]
 80a0108:	f000 fdac 	bl	80a0c64 <_ZN10JsonParserD1Ev>
 80a010c:	4620      	mov	r0, r4
 80a010e:	bd10      	pop	{r4, pc}
 80a0110:	080a445c 	.word	0x080a445c

080a0114 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	f7ff fff2 	bl	80a0100 <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
 80a011c:	4620      	mov	r0, r4
 80a011e:	f240 714c 	movw	r1, #1868	; 0x74c
 80a0122:	f003 fdf0 	bl	80a3d06 <_ZdlPvj>
 80a0126:	4620      	mov	r0, r4
 80a0128:	bd10      	pop	{r4, pc}
	...

080a012c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a012c:	b513      	push	{r0, r1, r4, lr}
 80a012e:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0130:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0132:	2200      	movs	r2, #0
 80a0134:	781b      	ldrb	r3, [r3, #0]
 80a0136:	f88d 3000 	strb.w	r3, [sp]
 80a013a:	233c      	movs	r3, #60	; 0x3c
 80a013c:	f001 f9ba 	bl	80a14b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 80a0140:	4620      	mov	r0, r4
 80a0142:	b002      	add	sp, #8
 80a0144:	bd10      	pop	{r4, pc}
 80a0146:	bf00      	nop
 80a0148:	200000e8 	.word	0x200000e8

080a014c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a014c:	b510      	push	{r4, lr}
 80a014e:	4604      	mov	r4, r0
 80a0150:	4b09      	ldr	r3, [pc, #36]	; (80a0178 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a0152:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0154:	f001 fef8 	bl	80a1f48 <_ZN5spark10LogManager8instanceEv>
 80a0158:	4621      	mov	r1, r4
 80a015a:	f002 f909 	bl	80a2370 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a015e:	f003 fb79 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0162:	f003 fb5d 	bl	80a3820 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a0166:	4620      	mov	r0, r4
 80a0168:	4b04      	ldr	r3, [pc, #16]	; (80a017c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a016a:	f840 3b04 	str.w	r3, [r0], #4
 80a016e:	f001 ffed 	bl	80a214c <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0172:	4620      	mov	r0, r4
 80a0174:	bd10      	pop	{r4, pc}
 80a0176:	bf00      	nop
 80a0178:	080a4444 	.word	0x080a4444
 80a017c:	080a442c 	.word	0x080a442c

080a0180 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0180:	b510      	push	{r4, lr}
 80a0182:	4604      	mov	r4, r0
    }
 80a0184:	f7ff ffe2 	bl	80a014c <_ZN5spark16SerialLogHandlerD1Ev>
 80a0188:	4620      	mov	r0, r4
 80a018a:	2124      	movs	r1, #36	; 0x24
 80a018c:	f003 fdbb 	bl	80a3d06 <_ZdlPvj>
 80a0190:	4620      	mov	r0, r4
 80a0192:	bd10      	pop	{r4, pc}

080a0194 <_ZN9IPAddressD0Ev>:
 80a0194:	b510      	push	{r4, lr}
 80a0196:	4604      	mov	r4, r0
 80a0198:	2118      	movs	r1, #24
 80a019a:	f003 fdb4 	bl	80a3d06 <_ZdlPvj>
 80a019e:	4620      	mov	r0, r4
 80a01a0:	bd10      	pop	{r4, pc}
	...

080a01a4 <setup>:
int trigger = 0;
bool lightStatus = false;
String last = "null";


void setup() {
 80a01a4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a01a6:	4e10      	ldr	r6, [pc, #64]	; (80a01e8 <setup+0x44>)
 80a01a8:	4d10      	ldr	r5, [pc, #64]	; (80a01ec <setup+0x48>)
 80a01aa:	f106 0414 	add.w	r4, r6, #20
 80a01ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01b2:	682b      	ldr	r3, [r5, #0]
 80a01b4:	7023      	strb	r3, [r4, #0]
  // Put initialization like pinMode and begin functions here.
  request.ip = hueIP;
  request.port = 80;
 80a01b6:	2350      	movs	r3, #80	; 0x50
 80a01b8:	63b3      	str	r3, [r6, #56]	; 0x38
  Serial.begin(9600);
 80a01ba:	f003 fb4b 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a01be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01c2:	f003 fb29 	bl	80a3818 <_ZN9USBSerial5beginEl>
  // First, declare all of our pins. This lets our device know which ones
  // will be used for outputting voltage, and which ones will read
  // incoming voltage.
  pinMode(LED_PIN, OUTPUT); // Our LED pin is output (lighting up the LED)
 80a01c6:	2101      	movs	r1, #1
 80a01c8:	2006      	movs	r0, #6
 80a01ca:	f003 fcfd 	bl	80a3bc8 <pinMode>
  digitalWrite(LED_PIN, LOW);
 80a01ce:	2100      	movs	r1, #0
 80a01d0:	2006      	movs	r0, #6
 80a01d2:	f003 fd0a 	bl	80a3bea <digitalWrite>

  // We are going to declare a Particle.variable() here so that we can
  // access the value of the photosensor from the cloud.
  Particle.variable("analogvalue", analogvalue);
}
 80a01d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a01da:	2300      	movs	r3, #0
 80a01dc:	2202      	movs	r2, #2
 80a01de:	4904      	ldr	r1, [pc, #16]	; (80a01f0 <setup+0x4c>)
 80a01e0:	4804      	ldr	r0, [pc, #16]	; (80a01f4 <setup+0x50>)
 80a01e2:	f000 bf51 	b.w	80a1088 <spark_variable>
 80a01e6:	bf00      	nop
 80a01e8:	20000cac 	.word	0x20000cac
 80a01ec:	20000514 	.word	0x20000514
 80a01f0:	200000ec 	.word	0x200000ec
 80a01f4:	080a4244 	.word	0x080a4244

080a01f8 <_Z12setHueLights6String>:
  Serial.println("count");
  Serial.println(count);
  Serial.println("------------------");
}

void setHueLights(String command){
 80a01f8:	b530      	push	{r4, r5, lr}
 80a01fa:	b087      	sub	sp, #28
 80a01fc:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01fe:	4911      	ldr	r1, [pc, #68]	; (80a0244 <_Z12setHueLights6String+0x4c>)
 80a0200:	a802      	add	r0, sp, #8
 80a0202:	f002 fe9e 	bl	80a2f42 <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + LIGHT_PATH;
 80a0206:	4910      	ldr	r1, [pc, #64]	; (80a0248 <_Z12setHueLights6String+0x50>)
 80a0208:	a802      	add	r0, sp, #8
 80a020a:	f002 ff1b 	bl	80a3044 <_ZplRK15StringSumHelperRK6String>
 80a020e:	490f      	ldr	r1, [pc, #60]	; (80a024c <_Z12setHueLights6String+0x54>)
 80a0210:	f002 ff18 	bl	80a3044 <_ZplRK15StringSumHelperRK6String>
 80a0214:	4c0e      	ldr	r4, [pc, #56]	; (80a0250 <_Z12setHueLights6String+0x58>)
 80a0216:	4601      	mov	r1, r0
 80a0218:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a021c:	f002 fecc 	bl	80a2fb8 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a0220:	a802      	add	r0, sp, #8
 80a0222:	f002 fe44 	bl	80a2eae <_ZN6StringD1Ev>
  request.body = command;
 80a0226:	4629      	mov	r1, r5
 80a0228:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a022c:	f002 fec4 	bl	80a2fb8 <_ZN6StringaSERKS_>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
 80a0230:	4b08      	ldr	r3, [pc, #32]	; (80a0254 <_Z12setHueLights6String+0x5c>)
 80a0232:	4621      	mov	r1, r4
 80a0234:	9300      	str	r3, [sp, #0]
 80a0236:	4a08      	ldr	r2, [pc, #32]	; (80a0258 <_Z12setHueLights6String+0x60>)
 80a0238:	4b08      	ldr	r3, [pc, #32]	; (80a025c <_Z12setHueLights6String+0x64>)
 80a023a:	4809      	ldr	r0, [pc, #36]	; (80a0260 <_Z12setHueLights6String+0x68>)
 80a023c:	f000 fbd4 	bl	80a09e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  http.put(request, response, headers);

}
 80a0240:	b007      	add	sp, #28
 80a0242:	bd30      	pop	{r4, r5, pc}
 80a0244:	080a4250 	.word	0x080a4250
 80a0248:	200000a8 	.word	0x200000a8
 80a024c:	20000088 	.word	0x20000088
 80a0250:	20000cac 	.word	0x20000cac
 80a0254:	080a4256 	.word	0x080a4256
 80a0258:	20000cf8 	.word	0x20000cf8
 80a025c:	20000000 	.word	0x20000000
 80a0260:	200000f4 	.word	0x200000f4

080a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0264:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0266:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0268:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a026a:	b17c      	cbz	r4, 80a028c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a026c:	6863      	ldr	r3, [r4, #4]
 80a026e:	3b01      	subs	r3, #1
 80a0270:	6063      	str	r3, [r4, #4]
 80a0272:	b95b      	cbnz	r3, 80a028c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0274:	6823      	ldr	r3, [r4, #0]
 80a0276:	4620      	mov	r0, r4
 80a0278:	689b      	ldr	r3, [r3, #8]
 80a027a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a027c:	68a3      	ldr	r3, [r4, #8]
 80a027e:	3b01      	subs	r3, #1
 80a0280:	60a3      	str	r3, [r4, #8]
 80a0282:	b91b      	cbnz	r3, 80a028c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0284:	6823      	ldr	r3, [r4, #0]
 80a0286:	4620      	mov	r0, r4
 80a0288:	68db      	ldr	r3, [r3, #12]
 80a028a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a028c:	4628      	mov	r0, r5
 80a028e:	bd38      	pop	{r3, r4, r5, pc}

080a0290 <_ZN10HttpClientD1Ev>:
class HttpClient {
 80a0290:	b510      	push	{r4, lr}
 80a0292:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0294:	4b03      	ldr	r3, [pc, #12]	; (80a02a4 <_ZN10HttpClientD1Ev+0x14>)
 80a0296:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a029a:	f7ff ffe3 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a029e:	4620      	mov	r0, r4
 80a02a0:	bd10      	pop	{r4, pc}
 80a02a2:	bf00      	nop
 80a02a4:	080a46a0 	.word	0x080a46a0

080a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a02aa:	2614      	movs	r6, #20
 80a02ac:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02b0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a02b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a02b6:	42ae      	cmp	r6, r5
 80a02b8:	d004      	beq.n	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a02ba:	4628      	mov	r0, r5
 80a02bc:	f002 fdf7 	bl	80a2eae <_ZN6StringD1Ev>
 80a02c0:	3514      	adds	r5, #20
 80a02c2:	e7f8      	b.n	80a02b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a02c4:	6820      	ldr	r0, [r4, #0]
 80a02c6:	f000 ff67 	bl	80a1198 <free>
    AllocatorT::free(data_);
}
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	bd70      	pop	{r4, r5, r6, pc}

080a02ce <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 80a02ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02d0:	4605      	mov	r5, r0
 80a02d2:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a02d4:	4616      	mov	r6, r2
 80a02d6:	b94a      	cbnz	r2, 80a02ec <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
 80a02d8:	6803      	ldr	r3, [r0, #0]
 80a02da:	b2c9      	uxtb	r1, r1
 80a02dc:	689b      	ldr	r3, [r3, #8]
 80a02de:	4798      	blx	r3
 80a02e0:	4607      	mov	r7, r0
        n += println();
 80a02e2:	4628      	mov	r0, r5
 80a02e4:	f002 fd5b 	bl	80a2d9e <_ZN5Print7printlnEv>
    }
 80a02e8:	4438      	add	r0, r7
 80a02ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a02ec:	2900      	cmp	r1, #0
 80a02ee:	da0c      	bge.n	80a030a <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
 80a02f0:	2a0a      	cmp	r2, #10
 80a02f2:	d10a      	bne.n	80a030a <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
 80a02f4:	212d      	movs	r1, #45	; 0x2d
 80a02f6:	f002 fd4f 	bl	80a2d98 <_ZN5Print5printEc>
 80a02fa:	4607      	mov	r7, r0
            val = -n;
 80a02fc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a02fe:	4628      	mov	r0, r5
 80a0300:	b2f2      	uxtb	r2, r6
 80a0302:	f002 fd62 	bl	80a2dca <_ZN5Print11printNumberEmh>
 80a0306:	4407      	add	r7, r0
 80a0308:	e7eb      	b.n	80a02e2 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
 80a030a:	4621      	mov	r1, r4
        size_t t = 0;
 80a030c:	2700      	movs	r7, #0
 80a030e:	e7f6      	b.n	80a02fe <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

080a0310 <_ZN5Print7printlnIbLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80a0310:	b538      	push	{r3, r4, r5, lr}
 80a0312:	4605      	mov	r5, r0
    if (base == 0) {
 80a0314:	b942      	cbnz	r2, 80a0328 <_ZN5Print7printlnIbLi0EEEjT_i+0x18>
        return write(n);
 80a0316:	6803      	ldr	r3, [r0, #0]
 80a0318:	689b      	ldr	r3, [r3, #8]
 80a031a:	4798      	blx	r3
        return printNumber(val, base) + t;
 80a031c:	4604      	mov	r4, r0
        n += println();
 80a031e:	4628      	mov	r0, r5
 80a0320:	f002 fd3d 	bl	80a2d9e <_ZN5Print7printlnEv>
    }
 80a0324:	4420      	add	r0, r4
 80a0326:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80a0328:	b2d2      	uxtb	r2, r2
 80a032a:	f002 fd4e 	bl	80a2dca <_ZN5Print11printNumberEmh>
 80a032e:	e7f5      	b.n	80a031c <_ZN5Print7printlnIbLi0EEEjT_i+0xc>

080a0330 <_Z9getLightsv>:
void getLights(){
 80a0330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0334:	b08a      	sub	sp, #40	; 0x28
	StringSumHelper(const char *p) : String(p) {}
 80a0336:	4949      	ldr	r1, [pc, #292]	; (80a045c <_Z9getLightsv+0x12c>)
 80a0338:	a806      	add	r0, sp, #24
 80a033a:	f002 fe02 	bl	80a2f42 <_ZN6StringC1EPKc>
  request.path = "/api/" + API_USERNAME + BEDROOM_PATH;
 80a033e:	4948      	ldr	r1, [pc, #288]	; (80a0460 <_Z9getLightsv+0x130>)
 80a0340:	a806      	add	r0, sp, #24
 80a0342:	f002 fe7f 	bl	80a3044 <_ZplRK15StringSumHelperRK6String>
 80a0346:	4947      	ldr	r1, [pc, #284]	; (80a0464 <_Z9getLightsv+0x134>)
 80a0348:	f002 fe7c 	bl	80a3044 <_ZplRK15StringSumHelperRK6String>
 80a034c:	4d46      	ldr	r5, [pc, #280]	; (80a0468 <_Z9getLightsv+0x138>)
 80a034e:	4601      	mov	r1, r0
 80a0350:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80a0354:	f002 fe30 	bl	80a2fb8 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80a0358:	a806      	add	r0, sp, #24
 80a035a:	f002 fda8 	bl	80a2eae <_ZN6StringD1Ev>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
 80a035e:	4c43      	ldr	r4, [pc, #268]	; (80a046c <_Z9getLightsv+0x13c>)
 80a0360:	4b43      	ldr	r3, [pc, #268]	; (80a0470 <_Z9getLightsv+0x140>)
 80a0362:	4622      	mov	r2, r4
 80a0364:	4629      	mov	r1, r5
 80a0366:	9300      	str	r3, [sp, #0]
 80a0368:	4842      	ldr	r0, [pc, #264]	; (80a0474 <_Z9getLightsv+0x144>)
 80a036a:	4b43      	ldr	r3, [pc, #268]	; (80a0478 <_Z9getLightsv+0x148>)
 80a036c:	f000 fb3c 	bl	80a09e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  Serial.println(lightStatus);
 80a0370:	4e42      	ldr	r6, [pc, #264]	; (80a047c <_Z9getLightsv+0x14c>)
  String data = response.body.c_str();
 80a0372:	6861      	ldr	r1, [r4, #4]
 80a0374:	a802      	add	r0, sp, #8
 80a0376:	f002 fde4 	bl	80a2f42 <_ZN6StringC1EPKc>
  Serial.println("Full Data");
 80a037a:	f003 fa6b 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a037e:	4940      	ldr	r1, [pc, #256]	; (80a0480 <_Z9getLightsv+0x150>)
 80a0380:	f002 fd19 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  Serial.println(lightStatus);
 80a0384:	f003 fa66 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0388:	220a      	movs	r2, #10
 80a038a:	7831      	ldrb	r1, [r6, #0]
 80a038c:	f7ff ffc0 	bl	80a0310 <_ZN5Print7printlnIbLi0EEEjT_i>
  count ++;
 80a0390:	4c3c      	ldr	r4, [pc, #240]	; (80a0484 <_Z9getLightsv+0x154>)
  Serial.println(data);
 80a0392:	f003 fa5f 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0396:	9902      	ldr	r1, [sp, #8]
 80a0398:	f002 fd0d 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  Serial.println();
 80a039c:	f003 fa5a 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a03a0:	f002 fcfd 	bl	80a2d9e <_ZN5Print7printlnEv>
  count ++;
 80a03a4:	6823      	ldr	r3, [r4, #0]
  Serial.println("count");
 80a03a6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80a0498 <_Z9getLightsv+0x168>
  count ++;
 80a03aa:	3301      	adds	r3, #1
 80a03ac:	6023      	str	r3, [r4, #0]
  Serial.println("------------------");
 80a03ae:	4f36      	ldr	r7, [pc, #216]	; (80a0488 <_Z9getLightsv+0x158>)
  Serial.println("count");
 80a03b0:	f003 fa50 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a03b4:	4641      	mov	r1, r8
 80a03b6:	f002 fcfe 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  Serial.println(count);
 80a03ba:	f003 fa4b 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a03be:	220a      	movs	r2, #10
 80a03c0:	6821      	ldr	r1, [r4, #0]
 80a03c2:	f7ff ff84 	bl	80a02ce <_ZN5Print7printlnIiLi0EEEjT_i>
  Serial.println("------------------");
 80a03c6:	f003 fa45 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a03ca:	4639      	mov	r1, r7
 80a03cc:	f002 fcf3 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  int pos = data.indexOf("h") + 5;
 80a03d0:	492e      	ldr	r1, [pc, #184]	; (80a048c <_Z9getLightsv+0x15c>)
 80a03d2:	a806      	add	r0, sp, #24
 80a03d4:	f002 fdb5 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a03d8:	a906      	add	r1, sp, #24
 80a03da:	a802      	add	r0, sp, #8
 80a03dc:	f002 fe5f 	bl	80a309e <_ZNK6String7indexOfERKS_>
 80a03e0:	4605      	mov	r5, r0
 80a03e2:	a806      	add	r0, sp, #24
 80a03e4:	f002 fd63 	bl	80a2eae <_ZN6StringD1Ev>
  hue = data.substring(pos, pos + 4).toInt();
 80a03e8:	1d6a      	adds	r2, r5, #5
 80a03ea:	a902      	add	r1, sp, #8
 80a03ec:	f105 0309 	add.w	r3, r5, #9
 80a03f0:	a806      	add	r0, sp, #24
 80a03f2:	f002 fe57 	bl	80a30a4 <_ZNK6String9substringEjj>
 80a03f6:	a806      	add	r0, sp, #24
 80a03f8:	f002 fe7d 	bl	80a30f6 <_ZNK6String5toIntEv>
 80a03fc:	4b24      	ldr	r3, [pc, #144]	; (80a0490 <_Z9getLightsv+0x160>)
 80a03fe:	6018      	str	r0, [r3, #0]
 80a0400:	a806      	add	r0, sp, #24
 80a0402:	f002 fd54 	bl	80a2eae <_ZN6StringD1Ev>
  delay(1000);
 80a0406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a040a:	f000 fef5 	bl	80a11f8 <delay>
  lightStatus = true;
 80a040e:	2301      	movs	r3, #1
 80a0410:	7033      	strb	r3, [r6, #0]
  Serial.println("2 seconds");
 80a0412:	f003 fa1f 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0416:	491f      	ldr	r1, [pc, #124]	; (80a0494 <_Z9getLightsv+0x164>)
 80a0418:	f002 fccd 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  Serial.println(lightStatus);
 80a041c:	f003 fa1a 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0420:	220a      	movs	r2, #10
 80a0422:	7831      	ldrb	r1, [r6, #0]
 80a0424:	f7ff ff74 	bl	80a0310 <_ZN5Print7printlnIbLi0EEEjT_i>
  count++ ;
 80a0428:	6823      	ldr	r3, [r4, #0]
 80a042a:	3301      	adds	r3, #1
 80a042c:	6023      	str	r3, [r4, #0]
  Serial.println("count");
 80a042e:	f003 fa11 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0432:	4641      	mov	r1, r8
 80a0434:	f002 fcbf 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  Serial.println(count);
 80a0438:	f003 fa0c 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a043c:	220a      	movs	r2, #10
 80a043e:	6821      	ldr	r1, [r4, #0]
 80a0440:	f7ff ff45 	bl	80a02ce <_ZN5Print7printlnIiLi0EEEjT_i>
  Serial.println("------------------");
 80a0444:	f003 fa06 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0448:	4639      	mov	r1, r7
 80a044a:	f002 fcb4 	bl	80a2db6 <_ZN5Print7printlnEPKc>
  String data = response.body.c_str();
 80a044e:	a802      	add	r0, sp, #8
 80a0450:	f002 fd2d 	bl	80a2eae <_ZN6StringD1Ev>
}
 80a0454:	b00a      	add	sp, #40	; 0x28
 80a0456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a045a:	bf00      	nop
 80a045c:	080a4250 	.word	0x080a4250
 80a0460:	200000a8 	.word	0x200000a8
 80a0464:	200000b8 	.word	0x200000b8
 80a0468:	20000cac 	.word	0x20000cac
 80a046c:	20000cf8 	.word	0x20000cf8
 80a0470:	080a425a 	.word	0x080a425a
 80a0474:	200000f4 	.word	0x200000f4
 80a0478:	20000000 	.word	0x20000000
 80a047c:	20000538 	.word	0x20000538
 80a0480:	080a425e 	.word	0x080a425e
 80a0484:	200000f0 	.word	0x200000f0
 80a0488:	080a426e 	.word	0x080a426e
 80a048c:	080a449e 	.word	0x080a449e
 80a0490:	20000010 	.word	0x20000010
 80a0494:	080a4281 	.word	0x080a4281
 80a0498:	080a4268 	.word	0x080a4268

080a049c <loop>:
void loop() {
 80a049c:	b5f0      	push	{r4, r5, r6, r7, lr}
    count = 0;
 80a049e:	2600      	movs	r6, #0
 80a04a0:	4c62      	ldr	r4, [pc, #392]	; (80a062c <loop+0x190>)
void loop() {
 80a04a2:	b089      	sub	sp, #36	; 0x24
    analogvalue = analogRead(SENSOR_PIN);
 80a04a4:	200a      	movs	r0, #10
    count = 0;
 80a04a6:	6026      	str	r6, [r4, #0]
    analogvalue = analogRead(SENSOR_PIN);
 80a04a8:	f003 fbb8 	bl	80a3c1c <analogRead>
    lightStatus = false;
 80a04ac:	4d60      	ldr	r5, [pc, #384]	; (80a0630 <loop+0x194>)
    analogvalue = analogRead(SENSOR_PIN);
 80a04ae:	4f61      	ldr	r7, [pc, #388]	; (80a0634 <loop+0x198>)
    lightStatus = false;
 80a04b0:	702e      	strb	r6, [r5, #0]
    Serial.println(hue);
 80a04b2:	4e61      	ldr	r6, [pc, #388]	; (80a0638 <loop+0x19c>)
    analogvalue = analogRead(SENSOR_PIN);
 80a04b4:	6038      	str	r0, [r7, #0]
    getLights();
 80a04b6:	f7ff ff3b 	bl	80a0330 <_Z9getLightsv>
    Serial.println("HUE DATA");
 80a04ba:	f003 f9cb 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04be:	495f      	ldr	r1, [pc, #380]	; (80a063c <loop+0x1a0>)
 80a04c0:	f002 fc79 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    Serial.println(hue);
 80a04c4:	f003 f9c6 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04c8:	6831      	ldr	r1, [r6, #0]
 80a04ca:	220a      	movs	r2, #10
 80a04cc:	f7ff feff 	bl	80a02ce <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println();
 80a04d0:	f003 f9c0 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04d4:	f002 fc63 	bl	80a2d9e <_ZN5Print7printlnEv>
    Serial.println(lightStatus);
 80a04d8:	f003 f9bc 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04dc:	220a      	movs	r2, #10
 80a04de:	7829      	ldrb	r1, [r5, #0]
 80a04e0:	f7ff ff16 	bl	80a0310 <_ZN5Print7printlnIbLi0EEEjT_i>
    count++;
 80a04e4:	6823      	ldr	r3, [r4, #0]
 80a04e6:	3301      	adds	r3, #1
 80a04e8:	6023      	str	r3, [r4, #0]
    Serial.println("count");
 80a04ea:	f003 f9b3 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04ee:	4954      	ldr	r1, [pc, #336]	; (80a0640 <loop+0x1a4>)
 80a04f0:	f002 fc61 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    Serial.println(count);
 80a04f4:	f003 f9ae 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a04f8:	220a      	movs	r2, #10
 80a04fa:	6821      	ldr	r1, [r4, #0]
 80a04fc:	f7ff fee7 	bl	80a02ce <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("------------------");
 80a0500:	f003 f9a8 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0504:	494f      	ldr	r1, [pc, #316]	; (80a0644 <loop+0x1a8>)
 80a0506:	f002 fc56 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    if (hue != 8418 && lightStatus == true && trigger >= 3)
 80a050a:	f242 03e2 	movw	r3, #8418	; 0x20e2
 80a050e:	6832      	ldr	r2, [r6, #0]
 80a0510:	462e      	mov	r6, r5
 80a0512:	429a      	cmp	r2, r3
 80a0514:	4d4c      	ldr	r5, [pc, #304]	; (80a0648 <loop+0x1ac>)
 80a0516:	d027      	beq.n	80a0568 <loop+0xcc>
 80a0518:	7833      	ldrb	r3, [r6, #0]
 80a051a:	b32b      	cbz	r3, 80a0568 <loop+0xcc>
 80a051c:	682b      	ldr	r3, [r5, #0]
 80a051e:	2b02      	cmp	r3, #2
 80a0520:	dd22      	ble.n	80a0568 <loop+0xcc>
      if (analogvalue >= 8 && analogvalue < 10)
 80a0522:	683b      	ldr	r3, [r7, #0]
 80a0524:	f1a3 0208 	sub.w	r2, r3, #8
 80a0528:	2a01      	cmp	r2, #1
 80a052a:	d84e      	bhi.n	80a05ca <loop+0x12e>
          Particle.publish("Dusk");
 80a052c:	4947      	ldr	r1, [pc, #284]	; (80a064c <loop+0x1b0>)
 80a052e:	a804      	add	r0, sp, #16
 80a0530:	f7ff fdfc 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a0534:	a805      	add	r0, sp, #20
 80a0536:	f7ff fe95 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          last = "Dusk";
 80a053a:	4944      	ldr	r1, [pc, #272]	; (80a064c <loop+0x1b0>)
 80a053c:	4844      	ldr	r0, [pc, #272]	; (80a0650 <loop+0x1b4>)
 80a053e:	f002 fd55 	bl	80a2fec <_ZN6StringaSEPKc>
          String command = "{\"on\": true, \"scene\": \"dpRaqSDvH6m0nx2\", \"transitiontime\": 30}";
 80a0542:	4668      	mov	r0, sp
 80a0544:	4943      	ldr	r1, [pc, #268]	; (80a0654 <loop+0x1b8>)
 80a0546:	f002 fcfc 	bl	80a2f42 <_ZN6StringC1EPKc>
          setHueLights(command);
 80a054a:	4669      	mov	r1, sp
 80a054c:	a804      	add	r0, sp, #16
 80a054e:	f002 fd42 	bl	80a2fd6 <_ZN6StringC1ERKS_>
 80a0552:	a804      	add	r0, sp, #16
 80a0554:	f7ff fe50 	bl	80a01f8 <_Z12setHueLights6String>
 80a0558:	a804      	add	r0, sp, #16
 80a055a:	f002 fca8 	bl	80a2eae <_ZN6StringD1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a055e:	4668      	mov	r0, sp
 80a0560:	f002 fca5 	bl	80a2eae <_ZN6StringD1Ev>
        trigger = 0;
 80a0564:	2300      	movs	r3, #0
 80a0566:	602b      	str	r3, [r5, #0]
    Serial.println("------------------");
 80a0568:	f003 f974 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a056c:	4935      	ldr	r1, [pc, #212]	; (80a0644 <loop+0x1a8>)
 80a056e:	f002 fc22 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    Serial.println("This is main loop");
 80a0572:	f003 f96f 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0576:	4938      	ldr	r1, [pc, #224]	; (80a0658 <loop+0x1bc>)
 80a0578:	f002 fc1d 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    Serial.println(lightStatus);
 80a057c:	f003 f96a 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0580:	220a      	movs	r2, #10
 80a0582:	7831      	ldrb	r1, [r6, #0]
 80a0584:	f7ff fec4 	bl	80a0310 <_ZN5Print7printlnIbLi0EEEjT_i>
    count++;
 80a0588:	6823      	ldr	r3, [r4, #0]
 80a058a:	3301      	adds	r3, #1
 80a058c:	6023      	str	r3, [r4, #0]
    Serial.println("count");
 80a058e:	f003 f961 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a0592:	492b      	ldr	r1, [pc, #172]	; (80a0640 <loop+0x1a4>)
 80a0594:	f002 fc0f 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    Serial.println(count);
 80a0598:	f003 f95c 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a059c:	220a      	movs	r2, #10
 80a059e:	6821      	ldr	r1, [r4, #0]
 80a05a0:	f7ff fe95 	bl	80a02ce <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("------------------");
 80a05a4:	f003 f956 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a05a8:	4926      	ldr	r1, [pc, #152]	; (80a0644 <loop+0x1a8>)
 80a05aa:	f002 fc04 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    delay(500);
 80a05ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a05b2:	f000 fe21 	bl	80a11f8 <delay>
    if (trigger > 3)
 80a05b6:	682b      	ldr	r3, [r5, #0]
 80a05b8:	2b03      	cmp	r3, #3
      trigger = 0;
 80a05ba:	bfc4      	itt	gt
 80a05bc:	2300      	movgt	r3, #0
 80a05be:	602b      	strgt	r3, [r5, #0]
    trigger ++;
 80a05c0:	682b      	ldr	r3, [r5, #0]
 80a05c2:	3301      	adds	r3, #1
 80a05c4:	602b      	str	r3, [r5, #0]
  }
 80a05c6:	b009      	add	sp, #36	; 0x24
 80a05c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (analogvalue >= 4 && analogvalue < 8)
 80a05ca:	1f1a      	subs	r2, r3, #4
 80a05cc:	2a03      	cmp	r2, #3
 80a05ce:	d80f      	bhi.n	80a05f0 <loop+0x154>
          Particle.publish("Dusk 2");
 80a05d0:	4922      	ldr	r1, [pc, #136]	; (80a065c <loop+0x1c0>)
 80a05d2:	a804      	add	r0, sp, #16
 80a05d4:	f7ff fdaa 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a05d8:	a805      	add	r0, sp, #20
 80a05da:	f7ff fe43 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"O2PwRXlDLslyAId\", \"transitiontime\": 30}";
 80a05de:	4920      	ldr	r1, [pc, #128]	; (80a0660 <loop+0x1c4>)
 80a05e0:	4668      	mov	r0, sp
 80a05e2:	f002 fcae 	bl	80a2f42 <_ZN6StringC1EPKc>
          last = "Dusk 2";
 80a05e6:	491d      	ldr	r1, [pc, #116]	; (80a065c <loop+0x1c0>)
          last = "Day";
 80a05e8:	4819      	ldr	r0, [pc, #100]	; (80a0650 <loop+0x1b4>)
 80a05ea:	f002 fcff 	bl	80a2fec <_ZN6StringaSEPKc>
 80a05ee:	e7ac      	b.n	80a054a <loop+0xae>
        else if (analogvalue <= 2 && analogvalue < 4)
 80a05f0:	2b02      	cmp	r3, #2
 80a05f2:	dc0c      	bgt.n	80a060e <loop+0x172>
          Particle.publish("Night");
 80a05f4:	491b      	ldr	r1, [pc, #108]	; (80a0664 <loop+0x1c8>)
 80a05f6:	a804      	add	r0, sp, #16
 80a05f8:	f7ff fd98 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a05fc:	a805      	add	r0, sp, #20
 80a05fe:	f7ff fe31 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"bbI-AG7rdXVVyxI\", \"transitiontime\": 30}";
 80a0602:	4919      	ldr	r1, [pc, #100]	; (80a0668 <loop+0x1cc>)
 80a0604:	4668      	mov	r0, sp
 80a0606:	f002 fc9c 	bl	80a2f42 <_ZN6StringC1EPKc>
          last = "Night";
 80a060a:	4916      	ldr	r1, [pc, #88]	; (80a0664 <loop+0x1c8>)
 80a060c:	e7ec      	b.n	80a05e8 <loop+0x14c>
        else if (analogvalue >= 10)
 80a060e:	2b09      	cmp	r3, #9
 80a0610:	dda8      	ble.n	80a0564 <loop+0xc8>
          Particle.publish("DAY");
 80a0612:	4916      	ldr	r1, [pc, #88]	; (80a066c <loop+0x1d0>)
 80a0614:	a804      	add	r0, sp, #16
 80a0616:	f7ff fd89 	bl	80a012c <_ZN10CloudClass7publishEPKc.isra.0>
 80a061a:	a805      	add	r0, sp, #20
 80a061c:	f7ff fe22 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          String command = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0620:	4913      	ldr	r1, [pc, #76]	; (80a0670 <loop+0x1d4>)
 80a0622:	4668      	mov	r0, sp
 80a0624:	f002 fc8d 	bl	80a2f42 <_ZN6StringC1EPKc>
          last = "Day";
 80a0628:	4912      	ldr	r1, [pc, #72]	; (80a0674 <loop+0x1d8>)
 80a062a:	e7dd      	b.n	80a05e8 <loop+0x14c>
 80a062c:	200000f0 	.word	0x200000f0
 80a0630:	20000538 	.word	0x20000538
 80a0634:	200000ec 	.word	0x200000ec
 80a0638:	20000010 	.word	0x20000010
 80a063c:	080a428b 	.word	0x080a428b
 80a0640:	080a4268 	.word	0x080a4268
 80a0644:	080a426e 	.word	0x080a426e
 80a0648:	20000d0c 	.word	0x20000d0c
 80a064c:	080a4294 	.word	0x080a4294
 80a0650:	20000528 	.word	0x20000528
 80a0654:	080a4299 	.word	0x080a4299
 80a0658:	080a43aa 	.word	0x080a43aa
 80a065c:	080a42d8 	.word	0x080a42d8
 80a0660:	080a42df 	.word	0x080a42df
 80a0664:	080a431e 	.word	0x080a431e
 80a0668:	080a4324 	.word	0x080a4324
 80a066c:	080a4363 	.word	0x080a4363
 80a0670:	080a4367 	.word	0x080a4367
 80a0674:	080a43a6 	.word	0x080a43a6

080a0678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0678:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a067a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a067c:	4604      	mov	r4, r0
 80a067e:	460d      	mov	r5, r1
 80a0680:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a0682:	d916      	bls.n	80a06b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0684:	4290      	cmp	r0, r2
 80a0686:	d215      	bcs.n	80a06b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0688:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a068c:	1a75      	subs	r5, r6, r1
 80a068e:	f1a1 0714 	sub.w	r7, r1, #20
 80a0692:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a0694:	42b7      	cmp	r7, r6
 80a0696:	d01c      	beq.n	80a06d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0698:	b12c      	cbz	r4, 80a06a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a069a:	4631      	mov	r1, r6
 80a069c:	4620      	mov	r0, r4
 80a069e:	f002 fc80 	bl	80a2fa2 <_ZN6StringC1EOS_>
 80a06a2:	7c33      	ldrb	r3, [r6, #16]
 80a06a4:	7423      	strb	r3, [r4, #16]
 80a06a6:	4630      	mov	r0, r6
 80a06a8:	f002 fc01 	bl	80a2eae <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a06ac:	3e14      	subs	r6, #20
 80a06ae:	3c14      	subs	r4, #20
 80a06b0:	e7f0      	b.n	80a0694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a06b2:	d00e      	beq.n	80a06d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a06b4:	42b5      	cmp	r5, r6
 80a06b6:	d00c      	beq.n	80a06d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a06b8:	b12c      	cbz	r4, 80a06c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a06ba:	4629      	mov	r1, r5
 80a06bc:	4620      	mov	r0, r4
 80a06be:	f002 fc70 	bl	80a2fa2 <_ZN6StringC1EOS_>
 80a06c2:	7c2b      	ldrb	r3, [r5, #16]
 80a06c4:	7423      	strb	r3, [r4, #16]
 80a06c6:	4628      	mov	r0, r5
 80a06c8:	f002 fbf1 	bl	80a2eae <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a06cc:	3514      	adds	r5, #20
 80a06ce:	3414      	adds	r4, #20
 80a06d0:	e7f0      	b.n	80a06b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a06d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a06d4:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a06d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a06da:	e9c0 3300 	strd	r3, r3, [r0]
 80a06de:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a06e0:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a06e2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a06e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a06e6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a06e8:	dd24      	ble.n	80a0734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a06ea:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a06ee:	fb08 f007 	mul.w	r0, r8, r7
 80a06f2:	f000 fd49 	bl	80a1188 <malloc>
            if (!d) {
 80a06f6:	4605      	mov	r5, r0
 80a06f8:	b1e0      	cbz	r0, 80a0734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a06fa:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a06fe:	fb08 1202 	mla	r2, r8, r2, r1
 80a0702:	f7ff ffb9 	bl	80a0678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a0706:	6820      	ldr	r0, [r4, #0]
 80a0708:	f000 fd46 	bl	80a1198 <free>
        data_ = d;
 80a070c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a070e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a0710:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a0714:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a0718:	45b8      	cmp	r8, r7
 80a071a:	d009      	beq.n	80a0730 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a071c:	4639      	mov	r1, r7
 80a071e:	4628      	mov	r0, r5
 80a0720:	f002 fc59 	bl	80a2fd6 <_ZN6StringC1ERKS_>
 80a0724:	7c3b      	ldrb	r3, [r7, #16]
 80a0726:	3514      	adds	r5, #20
 80a0728:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a072c:	3714      	adds	r7, #20
 80a072e:	e7f3      	b.n	80a0718 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a0730:	6873      	ldr	r3, [r6, #4]
 80a0732:	6063      	str	r3, [r4, #4]
}
 80a0734:	4620      	mov	r0, r4
 80a0736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a073c <_GLOBAL__sub_I_logHandler>:
}
 80a073c:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
 80a073e:	2400      	movs	r4, #0
 80a0740:	4b6d      	ldr	r3, [pc, #436]	; (80a08f8 <_GLOBAL__sub_I_logHandler+0x1bc>)
 80a0742:	b08f      	sub	sp, #60	; 0x3c
 80a0744:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a0746:	4621      	mov	r1, r4
 80a0748:	2001      	movs	r0, #1
 80a074a:	f000 fc71 	bl	80a1030 <system_thread_set_state>
        capacity_(0) {
 80a074e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a0752:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 80a0754:	f003 f87e 	bl	80a3854 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a0758:	4d68      	ldr	r5, [pc, #416]	; (80a08fc <_GLOBAL__sub_I_logHandler+0x1c0>)
 80a075a:	4604      	mov	r4, r0
 80a075c:	462e      	mov	r6, r5
 80a075e:	a902      	add	r1, sp, #8
 80a0760:	a805      	add	r0, sp, #20
 80a0762:	f7ff ffb7 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a0766:	a905      	add	r1, sp, #20
 80a0768:	a808      	add	r0, sp, #32
 80a076a:	f7ff ffb3 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a076e:	4b64      	ldr	r3, [pc, #400]	; (80a0900 <_GLOBAL__sub_I_logHandler+0x1c4>)
 80a0770:	a908      	add	r1, sp, #32
 80a0772:	f846 3b04 	str.w	r3, [r6], #4
 80a0776:	a80b      	add	r0, sp, #44	; 0x2c
 80a0778:	f7ff ffac 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a077c:	aa0b      	add	r2, sp, #44	; 0x2c
 80a077e:	211e      	movs	r1, #30
 80a0780:	4630      	mov	r0, r6
 80a0782:	f001 ff47 	bl	80a2614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0786:	a80b      	add	r0, sp, #44	; 0x2c
 80a0788:	f7ff fd8e 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a078c:	a808      	add	r0, sp, #32
 80a078e:	f7ff fd8b 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0792:	4b5c      	ldr	r3, [pc, #368]	; (80a0904 <_GLOBAL__sub_I_logHandler+0x1c8>)
 80a0794:	622c      	str	r4, [r5, #32]
 80a0796:	602b      	str	r3, [r5, #0]
 80a0798:	a805      	add	r0, sp, #20
 80a079a:	f7ff fd85 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a079e:	4b5a      	ldr	r3, [pc, #360]	; (80a0908 <_GLOBAL__sub_I_logHandler+0x1cc>)
SerialLogHandler logHandler;
 80a07a0:	4c5a      	ldr	r4, [pc, #360]	; (80a090c <_GLOBAL__sub_I_logHandler+0x1d0>)
 80a07a2:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a07a4:	f003 f856 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a07a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07ac:	f003 f834 	bl	80a3818 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a07b0:	f001 fbca 	bl	80a1f48 <_ZN5spark10LogManager8instanceEv>
 80a07b4:	4629      	mov	r1, r5
 80a07b6:	f001 fec0 	bl	80a253a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a07ba:	4e55      	ldr	r6, [pc, #340]	; (80a0910 <_GLOBAL__sub_I_logHandler+0x1d4>)
SerialLogHandler logHandler;
 80a07bc:	a802      	add	r0, sp, #8
 80a07be:	f7ff fd73 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a07c2:	4622      	mov	r2, r4
 80a07c4:	4628      	mov	r0, r5
 80a07c6:	4953      	ldr	r1, [pc, #332]	; (80a0914 <_GLOBAL__sub_I_logHandler+0x1d8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a07c8:	4d53      	ldr	r5, [pc, #332]	; (80a0918 <_GLOBAL__sub_I_logHandler+0x1dc>)
SerialLogHandler logHandler;
 80a07ca:	f003 fa97 	bl	80a3cfc <__aeabi_atexit>
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a07ce:	4630      	mov	r0, r6
 80a07d0:	4952      	ldr	r1, [pc, #328]	; (80a091c <_GLOBAL__sub_I_logHandler+0x1e0>)
 80a07d2:	f002 fbb6 	bl	80a2f42 <_ZN6StringC1EPKc>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a07d6:	4f52      	ldr	r7, [pc, #328]	; (80a0920 <_GLOBAL__sub_I_logHandler+0x1e4>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a07d8:	4630      	mov	r0, r6
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a07da:	4e52      	ldr	r6, [pc, #328]	; (80a0924 <_GLOBAL__sub_I_logHandler+0x1e8>)
const String API_USERNAME = "akHjyXarISzdmN6e4rjLn5pxcpIVgiAzO3GZl-1o";
 80a07dc:	4622      	mov	r2, r4
 80a07de:	4629      	mov	r1, r5
 80a07e0:	f003 fa8c 	bl	80a3cfc <__aeabi_atexit>
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a07e4:	4639      	mov	r1, r7
 80a07e6:	4630      	mov	r0, r6
 80a07e8:	f002 fbab 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a07ec:	4630      	mov	r0, r6
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a07ee:	4e4e      	ldr	r6, [pc, #312]	; (80a0928 <_GLOBAL__sub_I_logHandler+0x1ec>)
const String BEDROOM_PATH = "/lights/5";  // Local HUE bridge port
 80a07f0:	4622      	mov	r2, r4
 80a07f2:	4629      	mov	r1, r5
 80a07f4:	f003 fa82 	bl	80a3cfc <__aeabi_atexit>
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a07f8:	4639      	mov	r1, r7
 80a07fa:	4630      	mov	r0, r6
 80a07fc:	f002 fba1 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0800:	4630      	mov	r0, r6
const String LIGHT_PATH = "/groups/3/action";
 80a0802:	4e4a      	ldr	r6, [pc, #296]	; (80a092c <_GLOBAL__sub_I_logHandler+0x1f0>)
const String BATHROOM_PATH = "/lights/5"; // Local HUE bridge port
 80a0804:	4622      	mov	r2, r4
 80a0806:	4629      	mov	r1, r5
 80a0808:	f003 fa78 	bl	80a3cfc <__aeabi_atexit>
const String LIGHT_PATH = "/groups/3/action";
 80a080c:	4630      	mov	r0, r6
 80a080e:	4948      	ldr	r1, [pc, #288]	; (80a0930 <_GLOBAL__sub_I_logHandler+0x1f4>)
 80a0810:	f002 fb97 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0814:	4630      	mov	r0, r6
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0816:	4e47      	ldr	r6, [pc, #284]	; (80a0934 <_GLOBAL__sub_I_logHandler+0x1f8>)
const String LIGHT_PATH = "/groups/3/action";
 80a0818:	4622      	mov	r2, r4
 80a081a:	4629      	mov	r1, r5
 80a081c:	f003 fa6e 	bl	80a3cfc <__aeabi_atexit>
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a0820:	4630      	mov	r0, r6
 80a0822:	4945      	ldr	r1, [pc, #276]	; (80a0938 <_GLOBAL__sub_I_logHandler+0x1fc>)
 80a0824:	f002 fb8d 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0828:	4630      	mov	r0, r6
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a082a:	4e44      	ldr	r6, [pc, #272]	; (80a093c <_GLOBAL__sub_I_logHandler+0x200>)
const String REQUEST_ON = "{\"on\": true, \"scene\": \"vYmauYCRgzUFz3-\", \"transitiontime\": 30}";
 80a082c:	4622      	mov	r2, r4
 80a082e:	4629      	mov	r1, r5
 80a0830:	f003 fa64 	bl	80a3cfc <__aeabi_atexit>
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a0834:	4630      	mov	r0, r6
 80a0836:	4942      	ldr	r1, [pc, #264]	; (80a0940 <_GLOBAL__sub_I_logHandler+0x204>)
 80a0838:	f002 fb83 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a083c:	4630      	mov	r0, r6
HttpClient http;
 80a083e:	4e41      	ldr	r6, [pc, #260]	; (80a0944 <_GLOBAL__sub_I_logHandler+0x208>)
const String test = "{\"state\": {\"hue\": \"10000\"}}";
 80a0840:	4622      	mov	r2, r4
 80a0842:	4629      	mov	r1, r5
 80a0844:	f003 fa5a 	bl	80a3cfc <__aeabi_atexit>
HttpClient http;
 80a0848:	4630      	mov	r0, r6
 80a084a:	f000 f897 	bl	80a097c <_ZN10HttpClientC1Ev>
 80a084e:	4622      	mov	r2, r4
 80a0850:	4630      	mov	r0, r6
 80a0852:	493d      	ldr	r1, [pc, #244]	; (80a0948 <_GLOBAL__sub_I_logHandler+0x20c>)
 80a0854:	f003 fa52 	bl	80a3cfc <__aeabi_atexit>
IPAddress hueIP(192, 168, 1, 157);
 80a0858:	239d      	movs	r3, #157	; 0x9d
 80a085a:	4e3c      	ldr	r6, [pc, #240]	; (80a094c <_GLOBAL__sub_I_logHandler+0x210>)
 80a085c:	9300      	str	r3, [sp, #0]
 80a085e:	22a8      	movs	r2, #168	; 0xa8
 80a0860:	2301      	movs	r3, #1
 80a0862:	21c0      	movs	r1, #192	; 0xc0
 80a0864:	4630      	mov	r0, r6
 80a0866:	f001 f829 	bl	80a18bc <_ZN9IPAddressC1Ehhhh>
} http_request_t;
 80a086a:	4f39      	ldr	r7, [pc, #228]	; (80a0950 <_GLOBAL__sub_I_logHandler+0x214>)
 80a086c:	4630      	mov	r0, r6
 80a086e:	4e39      	ldr	r6, [pc, #228]	; (80a0954 <_GLOBAL__sub_I_logHandler+0x218>)
 80a0870:	4622      	mov	r2, r4
 80a0872:	4939      	ldr	r1, [pc, #228]	; (80a0958 <_GLOBAL__sub_I_logHandler+0x21c>)
 80a0874:	f003 fa42 	bl	80a3cfc <__aeabi_atexit>
 80a0878:	4639      	mov	r1, r7
 80a087a:	4630      	mov	r0, r6
 80a087c:	f002 fb61 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0880:	f106 0010 	add.w	r0, r6, #16
 80a0884:	f000 ffe4 	bl	80a1850 <_ZN9IPAddressC1Ev>
 80a0888:	4639      	mov	r1, r7
 80a088a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80a088e:	f002 fb58 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0892:	4639      	mov	r1, r7
 80a0894:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 80a0898:	f002 fb53 	bl	80a2f42 <_ZN6StringC1EPKc>
http_request_t request;
 80a089c:	4630      	mov	r0, r6
} http_response_t;
 80a089e:	4e2f      	ldr	r6, [pc, #188]	; (80a095c <_GLOBAL__sub_I_logHandler+0x220>)
 80a08a0:	4622      	mov	r2, r4
 80a08a2:	492f      	ldr	r1, [pc, #188]	; (80a0960 <_GLOBAL__sub_I_logHandler+0x224>)
 80a08a4:	f003 fa2a 	bl	80a3cfc <__aeabi_atexit>
 80a08a8:	4639      	mov	r1, r7
 80a08aa:	1d30      	adds	r0, r6, #4
 80a08ac:	f002 fb49 	bl	80a2f42 <_ZN6StringC1EPKc>
http_response_t response;
 80a08b0:	4622      	mov	r2, r4
 80a08b2:	4630      	mov	r0, r6
 80a08b4:	492b      	ldr	r1, [pc, #172]	; (80a0964 <_GLOBAL__sub_I_logHandler+0x228>)
 80a08b6:	f003 fa21 	bl	80a3cfc <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a08ba:	2332      	movs	r3, #50	; 0x32
 80a08bc:	4e2a      	ldr	r6, [pc, #168]	; (80a0968 <_GLOBAL__sub_I_logHandler+0x22c>)
 80a08be:	9300      	str	r3, [sp, #0]
 80a08c0:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 80a08c4:	f206 432c 	addw	r3, r6, #1068	; 0x42c
 80a08c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a08cc:	4630      	mov	r0, r6
 80a08ce:	f000 f9e5 	bl	80a0c9c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 80a08d2:	4b26      	ldr	r3, [pc, #152]	; (80a096c <_GLOBAL__sub_I_logHandler+0x230>)
JsonParserStatic<1024, 50> parse1;
 80a08d4:	4630      	mov	r0, r6
 80a08d6:	6033      	str	r3, [r6, #0]
String last = "null";
 80a08d8:	4e25      	ldr	r6, [pc, #148]	; (80a0970 <_GLOBAL__sub_I_logHandler+0x234>)
JsonParserStatic<1024, 50> parse1;
 80a08da:	4622      	mov	r2, r4
 80a08dc:	4925      	ldr	r1, [pc, #148]	; (80a0974 <_GLOBAL__sub_I_logHandler+0x238>)
 80a08de:	f003 fa0d 	bl	80a3cfc <__aeabi_atexit>
String last = "null";
 80a08e2:	4630      	mov	r0, r6
 80a08e4:	4924      	ldr	r1, [pc, #144]	; (80a0978 <_GLOBAL__sub_I_logHandler+0x23c>)
 80a08e6:	f002 fb2c 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a08ea:	4622      	mov	r2, r4
 80a08ec:	4629      	mov	r1, r5
 80a08ee:	4630      	mov	r0, r6
 80a08f0:	f003 fa04 	bl	80a3cfc <__aeabi_atexit>
}
 80a08f4:	b00f      	add	sp, #60	; 0x3c
 80a08f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a08f8:	200000e8 	.word	0x200000e8
 80a08fc:	2000053c 	.word	0x2000053c
 80a0900:	080a442c 	.word	0x080a442c
 80a0904:	080a45c4 	.word	0x080a45c4
 80a0908:	080a4444 	.word	0x080a4444
 80a090c:	20000084 	.word	0x20000084
 80a0910:	200000a8 	.word	0x200000a8
 80a0914:	080a014d 	.word	0x080a014d
 80a0918:	080a2eaf 	.word	0x080a2eaf
 80a091c:	080a43bc 	.word	0x080a43bc
 80a0920:	080a43e5 	.word	0x080a43e5
 80a0924:	200000b8 	.word	0x200000b8
 80a0928:	200000c8 	.word	0x200000c8
 80a092c:	20000088 	.word	0x20000088
 80a0930:	080a43ef 	.word	0x080a43ef
 80a0934:	20000098 	.word	0x20000098
 80a0938:	080a4367 	.word	0x080a4367
 80a093c:	200000d8 	.word	0x200000d8
 80a0940:	080a4400 	.word	0x080a4400
 80a0944:	200000f4 	.word	0x200000f4
 80a0948:	080a0291 	.word	0x080a0291
 80a094c:	20000510 	.word	0x20000510
 80a0950:	080a44a9 	.word	0x080a44a9
 80a0954:	20000cac 	.word	0x20000cac
 80a0958:	080a00c9 	.word	0x080a00c9
 80a095c:	20000cf8 	.word	0x20000cf8
 80a0960:	080a00e3 	.word	0x080a00e3
 80a0964:	080a00d5 	.word	0x080a00d5
 80a0968:	20000560 	.word	0x20000560
 80a096c:	080a445c 	.word	0x080a445c
 80a0970:	20000528 	.word	0x20000528
 80a0974:	080a0101 	.word	0x080a0101
 80a0978:	080a441c 	.word	0x080a441c

080a097c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a097c:	b510      	push	{r4, lr}
 80a097e:	4604      	mov	r4, r0
 80a0980:	f002 fe1e 	bl	80a35c0 <_ZN9TCPClientC1Ev>
{

}
 80a0984:	4620      	mov	r0, r4
 80a0986:	bd10      	pop	{r4, pc}

080a0988 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0988:	b538      	push	{r3, r4, r5, lr}
 80a098a:	4604      	mov	r4, r0
 80a098c:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a098e:	f002 f9ff 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0992:	4620      	mov	r0, r4
 80a0994:	4904      	ldr	r1, [pc, #16]	; (80a09a8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a0996:	f002 f9fb 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a099a:	4629      	mov	r1, r5
 80a099c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a099e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
 80a09a2:	f002 ba08 	b.w	80a2db6 <_ZN5Print7printlnEPKc>
 80a09a6:	bf00      	nop
 80a09a8:	080a456f 	.word	0x080a456f

080a09ac <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a09ac:	b538      	push	{r3, r4, r5, lr}
 80a09ae:	4605      	mov	r5, r0
 80a09b0:	4614      	mov	r4, r2
    client.print(aHeaderName);
 80a09b2:	f002 f9ed 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.print(": ");
 80a09b6:	4628      	mov	r0, r5
 80a09b8:	490a      	ldr	r1, [pc, #40]	; (80a09e4 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
 80a09ba:	f002 f9e9 	bl	80a2d90 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
 80a09be:	2c00      	cmp	r4, #0
 80a09c0:	da0d      	bge.n	80a09de <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
 80a09c2:	212d      	movs	r1, #45	; 0x2d
 80a09c4:	4628      	mov	r0, r5
 80a09c6:	f002 f9e7 	bl	80a2d98 <_ZN5Print5printEc>
            val = -n;
 80a09ca:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a09cc:	4628      	mov	r0, r5
 80a09ce:	220a      	movs	r2, #10
 80a09d0:	f002 f9fb 	bl	80a2dca <_ZN5Print11printNumberEmh>
        n += println();
 80a09d4:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a09d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a09da:	f002 b9e0 	b.w	80a2d9e <_ZN5Print7printlnEv>
            val = n;
 80a09de:	4621      	mov	r1, r4
 80a09e0:	e7f4      	b.n	80a09cc <_ZN10HttpClient10sendHeaderEPKci+0x20>
 80a09e2:	bf00      	nop
 80a09e4:	080a456f 	.word	0x080a456f

080a09e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a09e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09ec:	460e      	mov	r6, r1
 80a09ee:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a09f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 80a09f4:	b091      	sub	sp, #68	; 0x44
    aResponse.status = -1;
 80a09f6:	6013      	str	r3, [r2, #0]
{
 80a09f8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a09fa:	2100      	movs	r1, #0
 80a09fc:	4630      	mov	r0, r6
 80a09fe:	4617      	mov	r7, r2
 80a0a00:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80a0a04:	f002 fb2a 	bl	80a305c <_ZNK6String6equalsEPKc>
 80a0a08:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a0a0c:	4603      	mov	r3, r0
 80a0a0e:	b998      	cbnz	r0, 80a0a38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
 80a0a10:	f1be 0f00 	cmp.w	lr, #0
 80a0a14:	bf14      	ite	ne
 80a0a16:	4672      	movne	r2, lr
 80a0a18:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	6831      	ldr	r1, [r6, #0]
 80a0a1e:	b292      	uxth	r2, r2
 80a0a20:	f002 fde6 	bl	80a35f0 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0a24:	1e05      	subs	r5, r0, #0
 80a0a26:	bf18      	it	ne
 80a0a28:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a0a2a:	b9c5      	cbnz	r5, 80a0a5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a0a2c:	4620      	mov	r0, r4
 80a0a2e:	f002 fd17 	bl	80a3460 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a0a32:	b011      	add	sp, #68	; 0x44
 80a0a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0a38:	4b74      	ldr	r3, [pc, #464]	; (80a0c0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a0a3a:	ad0b      	add	r5, sp, #44	; 0x2c
 80a0a3c:	f106 0c14 	add.w	ip, r6, #20
 80a0a40:	930a      	str	r3, [sp, #40]	; 0x28
 80a0a42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0a48:	f8dc 3000 	ldr.w	r3, [ip]
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0a4c:	4620      	mov	r0, r4
 80a0a4e:	702b      	strb	r3, [r5, #0]
 80a0a50:	fa1f f28e 	uxth.w	r2, lr
 80a0a54:	2300      	movs	r3, #0
 80a0a56:	a90a      	add	r1, sp, #40	; 0x28
 80a0a58:	f002 fc58 	bl	80a330c <_ZN9TCPClient7connectE9IPAddresstm>
 80a0a5c:	e7e2      	b.n	80a0a24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
 80a0a5e:	4649      	mov	r1, r9
 80a0a60:	4620      	mov	r0, r4
 80a0a62:	f002 f995 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.print(" ");
 80a0a66:	496a      	ldr	r1, [pc, #424]	; (80a0c10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a0a68:	4620      	mov	r0, r4
 80a0a6a:	f002 f991 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a0a6e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80a0a70:	4620      	mov	r0, r4
 80a0a72:	f002 f98d 	bl	80a2d90 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a0a76:	4967      	ldr	r1, [pc, #412]	; (80a0c14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0a78:	4620      	mov	r0, r4
 80a0a7a:	f002 f989 	bl	80a2d90 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a0a7e:	4620      	mov	r0, r4
 80a0a80:	4965      	ldr	r1, [pc, #404]	; (80a0c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a0a82:	4a66      	ldr	r2, [pc, #408]	; (80a0c1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a0a84:	f7ff ff80 	bl	80a0988 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0a88:	2100      	movs	r1, #0
 80a0a8a:	4630      	mov	r0, r6
 80a0a8c:	f002 fae6 	bl	80a305c <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a0a90:	b920      	cbnz	r0, 80a0a9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a0a92:	4620      	mov	r0, r4
 80a0a94:	6832      	ldr	r2, [r6, #0]
 80a0a96:	4962      	ldr	r1, [pc, #392]	; (80a0c20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
 80a0a98:	f7ff ff76 	bl	80a0988 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
 80a0a9c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
 80a0aa0:	2100      	movs	r1, #0
 80a0aa2:	4650      	mov	r0, sl
 80a0aa4:	f002 fada 	bl	80a305c <_ZNK6String6equalsEPKc>
 80a0aa8:	b928      	cbnz	r0, 80a0ab6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
 80a0aaa:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
 80a0aac:	4620      	mov	r0, r4
 80a0aae:	495d      	ldr	r1, [pc, #372]	; (80a0c24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
 80a0ab0:	f7ff ff7c 	bl	80a09ac <_ZN10HttpClient10sendHeaderEPKci>
 80a0ab4:	e006      	b.n	80a0ac4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a0ab6:	4648      	mov	r0, r9
 80a0ab8:	495b      	ldr	r1, [pc, #364]	; (80a0c28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
 80a0aba:	f003 fac2 	bl	80a4042 <strcmp>
 80a0abe:	4602      	mov	r2, r0
 80a0ac0:	2800      	cmp	r0, #0
 80a0ac2:	d0f3      	beq.n	80a0aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
 80a0ac4:	f1b8 0f00 	cmp.w	r8, #0
 80a0ac8:	d00e      	beq.n	80a0ae8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
 80a0aca:	f8d8 1000 	ldr.w	r1, [r8]
 80a0ace:	b159      	cbz	r1, 80a0ae8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
 80a0ad0:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a0ad4:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
 80a0ad6:	b122      	cbz	r2, 80a0ae2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
 80a0ad8:	f7ff ff56 	bl	80a0988 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
 80a0adc:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
 80a0ae0:	e7f3      	b.n	80a0aca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
 80a0ae2:	f002 f968 	bl	80a2db6 <_ZN5Print7printlnEPKc>
}
 80a0ae6:	e7f9      	b.n	80a0adc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
 80a0ae8:	4620      	mov	r0, r4
 80a0aea:	f002 f958 	bl	80a2d9e <_ZN5Print7printlnEv>
    client.flush();
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	f002 fb55 	bl	80a319e <_ZN9TCPClient5flushEv>
 80a0af4:	2100      	movs	r1, #0
 80a0af6:	4650      	mov	r0, sl
 80a0af8:	f002 fab0 	bl	80a305c <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
 80a0afc:	b918      	cbnz	r0, 80a0b06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80a0b02:	f002 f958 	bl	80a2db6 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
 80a0b06:	f104 0a1c 	add.w	sl, r4, #28
 80a0b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0b0e:	2100      	movs	r1, #0
 80a0b10:	4650      	mov	r0, sl
 80a0b12:	f003 fa53 	bl	80a3fbc <memset>
    bool error = false;
 80a0b16:	f04f 0800 	mov.w	r8, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b1a:	f000 f8ff 	bl	80a0d1c <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
 80a0b1e:	4646      	mov	r6, r8
 80a0b20:	9001      	str	r0, [sp, #4]
    } while (client.connected() && !timeout && !error);
 80a0b22:	f241 3b88 	movw	fp, #5000	; 0x1388
 80a0b26:	f000 f8f9 	bl	80a0d1c <HAL_Timer_Get_Milli_Seconds>
        while (client.available()) {
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	f002 fc5e 	bl	80a33ec <_ZN9TCPClient9availableEv>
 80a0b30:	b1d8      	cbz	r0, 80a0b6a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
 80a0b32:	4620      	mov	r0, r4
 80a0b34:	f002 fb9d 	bl	80a3272 <_ZN9TCPClient4readEv>
 80a0b38:	4681      	mov	r9, r0
 80a0b3a:	f000 f8ef 	bl	80a0d1c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
 80a0b3e:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a0b42:	429e      	cmp	r6, r3
 80a0b44:	9001      	str	r0, [sp, #4]
 80a0b46:	d804      	bhi.n	80a0b52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
 80a0b48:	19a3      	adds	r3, r4, r6
            char c = client.read();
 80a0b4a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
 80a0b4e:	3601      	adds	r6, #1
        while (client.available()) {
 80a0b50:	e7eb      	b.n	80a0b2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a0b52:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a0b56:	429e      	cmp	r6, r3
 80a0b58:	d1f9      	bne.n	80a0b4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0b5a:	2300      	movs	r3, #0
                client.stop();
 80a0b5c:	4620      	mov	r0, r4
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0b5e:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a0b62:	f002 fc7d 	bl	80a3460 <_ZN9TCPClient4stopEv>
                error = true;
 80a0b66:	46a8      	mov	r8, r5
 80a0b68:	e7f1      	b.n	80a0b4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0b6a:	19a3      	adds	r3, r4, r6
 80a0b6c:	7718      	strb	r0, [r3, #28]
 80a0b6e:	f000 f8d5 	bl	80a0d1c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
 80a0b72:	9b01      	ldr	r3, [sp, #4]
 80a0b74:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
 80a0b78:	f1b8 0f00 	cmp.w	r8, #0
 80a0b7c:	d104      	bne.n	80a0b88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
 80a0b7e:	45d9      	cmp	r9, fp
 80a0b80:	d802      	bhi.n	80a0b88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
 80a0b82:	20c8      	movs	r0, #200	; 0xc8
 80a0b84:	f000 fb38 	bl	80a11f8 <delay>
    } while (client.connected() && !timeout && !error);
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	f002 fcc0 	bl	80a350e <_ZN9TCPClient9connectedEv>
 80a0b8e:	b120      	cbz	r0, 80a0b9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0b90:	45d9      	cmp	r9, fp
 80a0b92:	d802      	bhi.n	80a0b9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
 80a0b94:	f1b8 0f00 	cmp.w	r8, #0
 80a0b98:	d0c7      	beq.n	80a0b2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
 80a0b9a:	4620      	mov	r0, r4
 80a0b9c:	f002 fc60 	bl	80a3460 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
 80a0ba0:	4651      	mov	r1, sl
 80a0ba2:	a802      	add	r0, sp, #8
 80a0ba4:	f002 f9cd 	bl	80a2f42 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
 80a0ba8:	230c      	movs	r3, #12
 80a0baa:	2209      	movs	r2, #9
 80a0bac:	a902      	add	r1, sp, #8
 80a0bae:	a806      	add	r0, sp, #24
 80a0bb0:	f002 fa78 	bl	80a30a4 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a0bb4:	491d      	ldr	r1, [pc, #116]	; (80a0c2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
 80a0bb6:	a80a      	add	r0, sp, #40	; 0x28
 80a0bb8:	f002 f9c3 	bl	80a2f42 <_ZN6StringC1EPKc>
 80a0bbc:	a90a      	add	r1, sp, #40	; 0x28
 80a0bbe:	a802      	add	r0, sp, #8
 80a0bc0:	f002 fa6d 	bl	80a309e <_ZNK6String7indexOfERKS_>
 80a0bc4:	4604      	mov	r4, r0
 80a0bc6:	a80a      	add	r0, sp, #40	; 0x28
 80a0bc8:	f002 f971 	bl	80a2eae <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a0bcc:	1c63      	adds	r3, r4, #1
 80a0bce:	d106      	bne.n	80a0bde <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f6>
    String statusCode = raw_response.substring(9,12);
 80a0bd0:	a806      	add	r0, sp, #24
 80a0bd2:	f002 f96c 	bl	80a2eae <_ZN6StringD1Ev>
    String raw_response(buffer);
 80a0bd6:	a802      	add	r0, sp, #8
 80a0bd8:	f002 f969 	bl	80a2eae <_ZN6StringD1Ev>
 80a0bdc:	e729      	b.n	80a0a32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
 80a0bde:	1d3d      	adds	r5, r7, #4
 80a0be0:	4913      	ldr	r1, [pc, #76]	; (80a0c30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
 80a0be2:	4628      	mov	r0, r5
 80a0be4:	f002 fa02 	bl	80a2fec <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0be8:	1d22      	adds	r2, r4, #4
 80a0bea:	a902      	add	r1, sp, #8
 80a0bec:	a80a      	add	r0, sp, #40	; 0x28
 80a0bee:	f002 fa7b 	bl	80a30e8 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0bf2:	a90a      	add	r1, sp, #40	; 0x28
 80a0bf4:	4628      	mov	r0, r5
 80a0bf6:	f002 fa21 	bl	80a303c <_ZN6String6concatERKS_>
 80a0bfa:	a80a      	add	r0, sp, #40	; 0x28
 80a0bfc:	f002 f957 	bl	80a2eae <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0c00:	9806      	ldr	r0, [sp, #24]
 80a0c02:	f003 f99d 	bl	80a3f40 <atoi>
 80a0c06:	6038      	str	r0, [r7, #0]
 80a0c08:	e7e2      	b.n	80a0bd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
 80a0c0a:	bf00      	nop
 80a0c0c:	080a4518 	.word	0x080a4518
 80a0c10:	080a456b 	.word	0x080a456b
 80a0c14:	080a446f 	.word	0x080a446f
 80a0c18:	080a4481 	.word	0x080a4481
 80a0c1c:	080a447b 	.word	0x080a447b
 80a0c20:	080a448c 	.word	0x080a448c
 80a0c24:	080a4491 	.word	0x080a4491
 80a0c28:	080a44a0 	.word	0x080a44a0
 80a0c2c:	080a44a5 	.word	0x080a44a5
 80a0c30:	080a44a9 	.word	0x080a44a9

080a0c34 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a0c34:	b510      	push	{r4, lr}
 80a0c36:	4b05      	ldr	r3, [pc, #20]	; (80a0c4c <_ZN10JsonBufferD1Ev+0x18>)
 80a0c38:	4604      	mov	r4, r0
 80a0c3a:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a0c3c:	7c03      	ldrb	r3, [r0, #16]
 80a0c3e:	b91b      	cbnz	r3, 80a0c48 <_ZN10JsonBufferD1Ev+0x14>
 80a0c40:	6840      	ldr	r0, [r0, #4]
 80a0c42:	b108      	cbz	r0, 80a0c48 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a0c44:	f000 faa8 	bl	80a1198 <free>
	}
}
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	bd10      	pop	{r4, pc}
 80a0c4c:	080a44b4 	.word	0x080a44b4

080a0c50 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a0c50:	b510      	push	{r4, lr}
 80a0c52:	4604      	mov	r4, r0
}
 80a0c54:	f7ff ffee 	bl	80a0c34 <_ZN10JsonBufferD1Ev>
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	2114      	movs	r1, #20
 80a0c5c:	f003 f853 	bl	80a3d06 <_ZdlPvj>
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	bd10      	pop	{r4, pc}

080a0c64 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a0c64:	b510      	push	{r4, lr}
 80a0c66:	4b07      	ldr	r3, [pc, #28]	; (80a0c84 <_ZN10JsonParserD1Ev+0x20>)
 80a0c68:	4604      	mov	r4, r0
 80a0c6a:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a0c6c:	7c03      	ldrb	r3, [r0, #16]
 80a0c6e:	b91b      	cbnz	r3, 80a0c78 <_ZN10JsonParserD1Ev+0x14>
 80a0c70:	6940      	ldr	r0, [r0, #20]
 80a0c72:	b108      	cbz	r0, 80a0c78 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a0c74:	f000 fa90 	bl	80a1198 <free>
JsonParser::~JsonParser() {
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	f7ff ffdb 	bl	80a0c34 <_ZN10JsonBufferD1Ev>
	}
}
 80a0c7e:	4620      	mov	r0, r4
 80a0c80:	bd10      	pop	{r4, pc}
 80a0c82:	bf00      	nop
 80a0c84:	080a44c4 	.word	0x080a44c4

080a0c88 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a0c88:	b510      	push	{r4, lr}
 80a0c8a:	4604      	mov	r4, r0
}
 80a0c8c:	f7ff ffea 	bl	80a0c64 <_ZN10JsonParserD1Ev>
 80a0c90:	4620      	mov	r0, r4
 80a0c92:	212c      	movs	r1, #44	; 0x2c
 80a0c94:	f003 f837 	bl	80a3d06 <_ZdlPvj>
 80a0c98:	4620      	mov	r0, r4
 80a0c9a:	bd10      	pop	{r4, pc}

080a0c9c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0c9c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a0ca0:	2200      	movs	r2, #0
 80a0ca2:	60c2      	str	r2, [r0, #12]
 80a0ca4:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a0ca6:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a0ca8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a0caa:	6143      	str	r3, [r0, #20]
 80a0cac:	4a02      	ldr	r2, [pc, #8]	; (80a0cb8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a0cae:	9b02      	ldr	r3, [sp, #8]
 80a0cb0:	6002      	str	r2, [r0, #0]
 80a0cb2:	61c3      	str	r3, [r0, #28]
}
 80a0cb4:	bd10      	pop	{r4, pc}
 80a0cb6:	bf00      	nop
 80a0cb8:	080a44c4 	.word	0x080a44c4

080a0cbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <os_mutex_recursive_create+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601d0 	.word	0x080601d0

080a0ccc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <os_mutex_recursive_destroy+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601d0 	.word	0x080601d0

080a0cdc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <os_mutex_recursive_lock+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601d0 	.word	0x080601d0

080a0cec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <os_mutex_recursive_unlock+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601d0 	.word	0x080601d0

080a0cfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_RNG_GetRandomNumber+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	685b      	ldr	r3, [r3, #4]
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	0806019c 	.word	0x0806019c

080a0d0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_Delay_Microseconds+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	68db      	ldr	r3, [r3, #12]
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	0806019c 	.word	0x0806019c

080a0d1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	695b      	ldr	r3, [r3, #20]
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	0806019c 	.word	0x0806019c

080a0d2c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <HAL_Validate_Pin_Function+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	685b      	ldr	r3, [r3, #4]
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601b0 	.word	0x080601b0

080a0d3c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <HAL_Pin_Mode+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	689b      	ldr	r3, [r3, #8]
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601b0 	.word	0x080601b0

080a0d4c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <HAL_Get_Pin_Mode+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	68db      	ldr	r3, [r3, #12]
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601b0 	.word	0x080601b0

080a0d5c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <HAL_GPIO_Write+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	691b      	ldr	r3, [r3, #16]
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601b0 	.word	0x080601b0

080a0d6c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <hal_adc_read+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601b0 	.word	0x080601b0

080a0d7c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <hal_i2c_write+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601ac 	.word	0x080601ac

080a0d8c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <hal_i2c_available+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601ac 	.word	0x080601ac

080a0d9c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <hal_i2c_read+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601ac 	.word	0x080601ac

080a0dac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <hal_i2c_peek+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601ac 	.word	0x080601ac

080a0dbc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <hal_i2c_flush+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601ac 	.word	0x080601ac

080a0dcc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <hal_i2c_is_enabled+0xc>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0dd4:	9301      	str	r3, [sp, #4]
 80a0dd6:	bd08      	pop	{r3, pc}
 80a0dd8:	080601ac 	.word	0x080601ac

080a0ddc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0ddc:	b508      	push	{r3, lr}
 80a0dde:	4b03      	ldr	r3, [pc, #12]	; (80a0dec <hal_i2c_init+0x10>)
 80a0de0:	681b      	ldr	r3, [r3, #0]
 80a0de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0de6:	9301      	str	r3, [sp, #4]
 80a0de8:	bd08      	pop	{r3, pc}
 80a0dea:	0000      	.short	0x0000
 80a0dec:	080601ac 	.word	0x080601ac

080a0df0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <socket_active_status+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	681b      	ldr	r3, [r3, #0]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601bc 	.word	0x080601bc

080a0e00 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <socket_handle_valid+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	685b      	ldr	r3, [r3, #4]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601bc 	.word	0x080601bc

080a0e10 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <socket_create+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	689b      	ldr	r3, [r3, #8]
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601bc 	.word	0x080601bc

080a0e20 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <socket_connect+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	68db      	ldr	r3, [r3, #12]
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601bc 	.word	0x080601bc

080a0e30 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <socket_receive+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	691b      	ldr	r3, [r3, #16]
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601bc 	.word	0x080601bc

080a0e40 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <socket_close+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6a1b      	ldr	r3, [r3, #32]
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601bc 	.word	0x080601bc

080a0e50 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <socket_handle_invalid+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601bc 	.word	0x080601bc

080a0e60 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <socket_send_ex+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601bc 	.word	0x080601bc

080a0e70 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <hal_spi_init+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	69db      	ldr	r3, [r3, #28]
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601b4 	.word	0x080601b4

080a0e80 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <hal_spi_is_enabled+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6a1b      	ldr	r3, [r3, #32]
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601b4 	.word	0x080601b4

080a0e90 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <hal_usart_init+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	699b      	ldr	r3, [r3, #24]
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601c4 	.word	0x080601c4

080a0ea0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <hal_usart_end+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6a1b      	ldr	r3, [r3, #32]
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601c4 	.word	0x080601c4

080a0eb0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <hal_usart_write+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601c4 	.word	0x080601c4

080a0ec0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <hal_usart_available+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601c4 	.word	0x080601c4

080a0ed0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <hal_usart_read+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601c4 	.word	0x080601c4

080a0ee0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <hal_usart_peek+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601c4 	.word	0x080601c4

080a0ef0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <hal_usart_flush+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601c4 	.word	0x080601c4

080a0f00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <hal_usart_is_enabled+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601c4 	.word	0x080601c4

080a0f10 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <hal_usart_available_data_for_write+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601c4 	.word	0x080601c4

080a0f20 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <hal_usart_begin_config+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601c4 	.word	0x080601c4

080a0f30 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <HAL_USB_USART_Init+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	681b      	ldr	r3, [r3, #0]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601d8 	.word	0x080601d8

080a0f40 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <HAL_USB_USART_Begin+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	685b      	ldr	r3, [r3, #4]
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601d8 	.word	0x080601d8

080a0f50 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <HAL_USB_USART_End+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	689b      	ldr	r3, [r3, #8]
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601d8 	.word	0x080601d8

080a0f60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <HAL_USB_USART_Available_Data+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	691b      	ldr	r3, [r3, #16]
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601d8 	.word	0x080601d8

080a0f70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	695b      	ldr	r3, [r3, #20]
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601d8 	.word	0x080601d8

080a0f80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <HAL_USB_USART_Receive_Data+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	699b      	ldr	r3, [r3, #24]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601d8 	.word	0x080601d8

080a0f90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <HAL_USB_USART_Send_Data+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	69db      	ldr	r3, [r3, #28]
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601d8 	.word	0x080601d8

080a0fa0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <HAL_USB_USART_Flush_Data+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	6a1b      	ldr	r3, [r3, #32]
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601d8 	.word	0x080601d8

080a0fb0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <HAL_NET_SetNetWatchDog+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601c0 	.word	0x080601c0

080a0fc0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <inet_gethostbyname+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	080601c0 	.word	0x080601c0

080a0fd0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <panic_+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	080201a8 	.word	0x080201a8

080a0fe0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <log_message+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	080201a8 	.word	0x080201a8

080a0ff0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <log_level_name+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080201a8 	.word	0x080201a8

080a1000 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <log_set_callbacks+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080201a8 	.word	0x080201a8

080a1010 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <set_system_mode+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	685b      	ldr	r3, [r3, #4]
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601a4 	.word	0x080601a4

080a1020 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <system_delay_ms+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	695b      	ldr	r3, [r3, #20]
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601a4 	.word	0x080601a4

080a1030 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <system_thread_set_state+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601a4 	.word	0x080601a4

080a1040 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <application_thread_current+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601a4 	.word	0x080601a4

080a1050 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <application_thread_invoke+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601a4 	.word	0x080601a4

080a1060 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b03      	ldr	r3, [pc, #12]	; (80a1070 <system_ctrl_set_app_request_handler+0x10>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a106a:	9301      	str	r3, [sp, #4]
 80a106c:	bd08      	pop	{r3, pc}
 80a106e:	0000      	.short	0x0000
 80a1070:	080601a4 	.word	0x080601a4

080a1074 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1074:	b508      	push	{r3, lr}
 80a1076:	4b03      	ldr	r3, [pc, #12]	; (80a1084 <system_ctrl_set_result+0x10>)
 80a1078:	681b      	ldr	r3, [r3, #0]
 80a107a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a107e:	9301      	str	r3, [sp, #4]
 80a1080:	bd08      	pop	{r3, pc}
 80a1082:	0000      	.short	0x0000
 80a1084:	080601a4 	.word	0x080601a4

080a1088 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <spark_variable+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	681b      	ldr	r3, [r3, #0]
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601cc 	.word	0x080601cc

080a1098 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1098:	b508      	push	{r3, lr}
 80a109a:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <spark_cloud_flag_connected+0xc>)
 80a109c:	681b      	ldr	r3, [r3, #0]
 80a109e:	695b      	ldr	r3, [r3, #20]
 80a10a0:	9301      	str	r3, [sp, #4]
 80a10a2:	bd08      	pop	{r3, pc}
 80a10a4:	080601cc 	.word	0x080601cc

080a10a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a10a8:	b508      	push	{r3, lr}
 80a10aa:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <spark_send_event+0xc>)
 80a10ac:	681b      	ldr	r3, [r3, #0]
 80a10ae:	6a1b      	ldr	r3, [r3, #32]
 80a10b0:	9301      	str	r3, [sp, #4]
 80a10b2:	bd08      	pop	{r3, pc}
 80a10b4:	080601cc 	.word	0x080601cc

080a10b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b02      	ldr	r3, [pc, #8]	; (80a10c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a10c0:	9301      	str	r3, [sp, #4]
 80a10c2:	bd08      	pop	{r3, pc}
 80a10c4:	080601cc 	.word	0x080601cc

080a10c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10c8:	b508      	push	{r3, lr}
 80a10ca:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <network_connect+0xc>)
 80a10cc:	681b      	ldr	r3, [r3, #0]
 80a10ce:	685b      	ldr	r3, [r3, #4]
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	bd08      	pop	{r3, pc}
 80a10d4:	080601c8 	.word	0x080601c8

080a10d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <network_connecting+0xc>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	689b      	ldr	r3, [r3, #8]
 80a10e0:	9301      	str	r3, [sp, #4]
 80a10e2:	bd08      	pop	{r3, pc}
 80a10e4:	080601c8 	.word	0x080601c8

080a10e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a10e8:	b508      	push	{r3, lr}
 80a10ea:	4b02      	ldr	r3, [pc, #8]	; (80a10f4 <network_disconnect+0xc>)
 80a10ec:	681b      	ldr	r3, [r3, #0]
 80a10ee:	68db      	ldr	r3, [r3, #12]
 80a10f0:	9301      	str	r3, [sp, #4]
 80a10f2:	bd08      	pop	{r3, pc}
 80a10f4:	080601c8 	.word	0x080601c8

080a10f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a10f8:	b508      	push	{r3, lr}
 80a10fa:	4b02      	ldr	r3, [pc, #8]	; (80a1104 <network_ready+0xc>)
 80a10fc:	681b      	ldr	r3, [r3, #0]
 80a10fe:	691b      	ldr	r3, [r3, #16]
 80a1100:	9301      	str	r3, [sp, #4]
 80a1102:	bd08      	pop	{r3, pc}
 80a1104:	080601c8 	.word	0x080601c8

080a1108 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1108:	b508      	push	{r3, lr}
 80a110a:	4b02      	ldr	r3, [pc, #8]	; (80a1114 <network_on+0xc>)
 80a110c:	681b      	ldr	r3, [r3, #0]
 80a110e:	695b      	ldr	r3, [r3, #20]
 80a1110:	9301      	str	r3, [sp, #4]
 80a1112:	bd08      	pop	{r3, pc}
 80a1114:	080601c8 	.word	0x080601c8

080a1118 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1118:	b508      	push	{r3, lr}
 80a111a:	4b02      	ldr	r3, [pc, #8]	; (80a1124 <network_off+0xc>)
 80a111c:	681b      	ldr	r3, [r3, #0]
 80a111e:	699b      	ldr	r3, [r3, #24]
 80a1120:	9301      	str	r3, [sp, #4]
 80a1122:	bd08      	pop	{r3, pc}
 80a1124:	080601c8 	.word	0x080601c8

080a1128 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1128:	b508      	push	{r3, lr}
 80a112a:	4b02      	ldr	r3, [pc, #8]	; (80a1134 <network_listen+0xc>)
 80a112c:	681b      	ldr	r3, [r3, #0]
 80a112e:	69db      	ldr	r3, [r3, #28]
 80a1130:	9301      	str	r3, [sp, #4]
 80a1132:	bd08      	pop	{r3, pc}
 80a1134:	080601c8 	.word	0x080601c8

080a1138 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1138:	b508      	push	{r3, lr}
 80a113a:	4b02      	ldr	r3, [pc, #8]	; (80a1144 <network_listening+0xc>)
 80a113c:	681b      	ldr	r3, [r3, #0]
 80a113e:	6a1b      	ldr	r3, [r3, #32]
 80a1140:	9301      	str	r3, [sp, #4]
 80a1142:	bd08      	pop	{r3, pc}
 80a1144:	080601c8 	.word	0x080601c8

080a1148 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1148:	b508      	push	{r3, lr}
 80a114a:	4b02      	ldr	r3, [pc, #8]	; (80a1154 <network_set_listen_timeout+0xc>)
 80a114c:	681b      	ldr	r3, [r3, #0]
 80a114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1150:	9301      	str	r3, [sp, #4]
 80a1152:	bd08      	pop	{r3, pc}
 80a1154:	080601c8 	.word	0x080601c8

080a1158 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1158:	b508      	push	{r3, lr}
 80a115a:	4b02      	ldr	r3, [pc, #8]	; (80a1164 <network_get_listen_timeout+0xc>)
 80a115c:	681b      	ldr	r3, [r3, #0]
 80a115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1160:	9301      	str	r3, [sp, #4]
 80a1162:	bd08      	pop	{r3, pc}
 80a1164:	080601c8 	.word	0x080601c8

080a1168 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1168:	b508      	push	{r3, lr}
 80a116a:	4b02      	ldr	r3, [pc, #8]	; (80a1174 <network_is_on+0xc>)
 80a116c:	681b      	ldr	r3, [r3, #0]
 80a116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1170:	9301      	str	r3, [sp, #4]
 80a1172:	bd08      	pop	{r3, pc}
 80a1174:	080601c8 	.word	0x080601c8

080a1178 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1178:	b508      	push	{r3, lr}
 80a117a:	4b02      	ldr	r3, [pc, #8]	; (80a1184 <network_is_off+0xc>)
 80a117c:	681b      	ldr	r3, [r3, #0]
 80a117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	bd08      	pop	{r3, pc}
 80a1184:	080601c8 	.word	0x080601c8

080a1188 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1188:	b508      	push	{r3, lr}
 80a118a:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <malloc+0xc>)
 80a118c:	681b      	ldr	r3, [r3, #0]
 80a118e:	681b      	ldr	r3, [r3, #0]
 80a1190:	9301      	str	r3, [sp, #4]
 80a1192:	bd08      	pop	{r3, pc}
 80a1194:	080601a0 	.word	0x080601a0

080a1198 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1198:	b508      	push	{r3, lr}
 80a119a:	4b02      	ldr	r3, [pc, #8]	; (80a11a4 <free+0xc>)
 80a119c:	681b      	ldr	r3, [r3, #0]
 80a119e:	685b      	ldr	r3, [r3, #4]
 80a11a0:	9301      	str	r3, [sp, #4]
 80a11a2:	bd08      	pop	{r3, pc}
 80a11a4:	080601a0 	.word	0x080601a0

080a11a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a11a8:	b508      	push	{r3, lr}
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <realloc+0xc>)
 80a11ac:	681b      	ldr	r3, [r3, #0]
 80a11ae:	689b      	ldr	r3, [r3, #8]
 80a11b0:	9301      	str	r3, [sp, #4]
 80a11b2:	bd08      	pop	{r3, pc}
 80a11b4:	080601a0 	.word	0x080601a0

080a11b8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a11b8:	b508      	push	{r3, lr}
 80a11ba:	4b02      	ldr	r3, [pc, #8]	; (80a11c4 <vsnprintf+0xc>)
 80a11bc:	681b      	ldr	r3, [r3, #0]
 80a11be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a11c0:	9301      	str	r3, [sp, #4]
 80a11c2:	bd08      	pop	{r3, pc}
 80a11c4:	080601a0 	.word	0x080601a0

080a11c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a11c8:	b508      	push	{r3, lr}
 80a11ca:	4b02      	ldr	r3, [pc, #8]	; (80a11d4 <abort+0xc>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	bd08      	pop	{r3, pc}
 80a11d4:	080601a0 	.word	0x080601a0

080a11d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <_malloc_r+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601a0 	.word	0x080601a0

080a11e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <newlib_impure_ptr_callback+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	080601a0 	.word	0x080601a0

080a11f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a11f8:	2100      	movs	r1, #0
 80a11fa:	f7ff bf11 	b.w	80a1020 <system_delay_ms>

080a11fe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a11fe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1200:	6883      	ldr	r3, [r0, #8]
 80a1202:	4604      	mov	r4, r0
 80a1204:	b90b      	cbnz	r3, 80a120a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1206:	f002 fd84 	bl	80a3d12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a120a:	68c3      	ldr	r3, [r0, #12]
 80a120c:	4798      	blx	r3
      if (_M_manager)
 80a120e:	68a3      	ldr	r3, [r4, #8]
 80a1210:	b11b      	cbz	r3, 80a121a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1212:	2203      	movs	r2, #3
 80a1214:	4621      	mov	r1, r4
 80a1216:	4620      	mov	r0, r4
 80a1218:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a121a:	4620      	mov	r0, r4
}
 80a121c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a1220:	2110      	movs	r1, #16
 80a1222:	f002 bd70 	b.w	80a3d06 <_ZdlPvj>

080a1226 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1226:	4770      	bx	lr

080a1228 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1228:	2000      	movs	r0, #0
 80a122a:	4770      	bx	lr

080a122c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a122c:	b510      	push	{r4, lr}
 80a122e:	4604      	mov	r4, r0
 80a1230:	2110      	movs	r1, #16
 80a1232:	f002 fd68 	bl	80a3d06 <_ZdlPvj>
 80a1236:	4620      	mov	r0, r4
 80a1238:	bd10      	pop	{r4, pc}

080a123a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a123a:	b508      	push	{r3, lr}
      { delete this; }
 80a123c:	f7ff fff6 	bl	80a122c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1240:	bd08      	pop	{r3, pc}

080a1242 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a1242:	b510      	push	{r4, lr}
      if (_M_manager)
 80a1244:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1246:	4604      	mov	r4, r0
      if (_M_manager)
 80a1248:	b113      	cbz	r3, 80a1250 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a124a:	2203      	movs	r2, #3
 80a124c:	4601      	mov	r1, r0
 80a124e:	4798      	blx	r3
    }
 80a1250:	4620      	mov	r0, r4
 80a1252:	bd10      	pop	{r4, pc}

080a1254 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1254:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1256:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1258:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a125c:	6002      	str	r2, [r0, #0]
 80a125e:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1260:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1262:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1264:	680c      	ldr	r4, [r1, #0]
 80a1266:	8085      	strh	r5, [r0, #4]
 80a1268:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a126a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a126c:	bd30      	pop	{r4, r5, pc}

080a126e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a126e:	b510      	push	{r4, lr}
 80a1270:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1272:	6800      	ldr	r0, [r0, #0]
 80a1274:	f7ff ff90 	bl	80a1198 <free>
}
 80a1278:	4620      	mov	r0, r4
 80a127a:	bd10      	pop	{r4, pc}

080a127c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a127c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a127e:	68c4      	ldr	r4, [r0, #12]
 80a1280:	b1f4      	cbz	r4, 80a12c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1282:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1284:	2b02      	cmp	r3, #2
 80a1286:	d103      	bne.n	80a1290 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1288:	f104 000c 	add.w	r0, r4, #12
 80a128c:	f7ff ffef 	bl	80a126e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1290:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1292:	b135      	cbz	r5, 80a12a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1294:	4628      	mov	r0, r5
 80a1296:	f7ff ffd4 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
 80a129a:	2110      	movs	r1, #16
 80a129c:	4628      	mov	r0, r5
 80a129e:	f002 fd32 	bl	80a3d06 <_ZdlPvj>
 80a12a2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a12a4:	b135      	cbz	r5, 80a12b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a12a6:	4628      	mov	r0, r5
 80a12a8:	f7ff ffcb 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
 80a12ac:	2110      	movs	r1, #16
 80a12ae:	4628      	mov	r0, r5
 80a12b0:	f002 fd29 	bl	80a3d06 <_ZdlPvj>
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a12ba:	2114      	movs	r1, #20
 80a12bc:	f002 bd23 	b.w	80a3d06 <_ZdlPvj>
 80a12c0:	bd38      	pop	{r3, r4, r5, pc}

080a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a12c2:	680b      	ldr	r3, [r1, #0]
 80a12c4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a12c6:	b113      	cbz	r3, 80a12ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a12c8:	685a      	ldr	r2, [r3, #4]
 80a12ca:	3201      	adds	r2, #1
 80a12cc:	605a      	str	r2, [r3, #4]
      }
 80a12ce:	4770      	bx	lr

080a12d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a12d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a12d2:	460e      	mov	r6, r1
 80a12d4:	4604      	mov	r4, r0
 80a12d6:	f856 3b04 	ldr.w	r3, [r6], #4
 80a12da:	460d      	mov	r5, r1
 80a12dc:	a801      	add	r0, sp, #4
 80a12de:	4631      	mov	r1, r6
 80a12e0:	9300      	str	r3, [sp, #0]
 80a12e2:	f7ff ffee 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12e6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a12e8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12ea:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a12ec:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a12ee:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a12f0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a12f2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a12f4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a12f6:	f7fe ffb5 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a12fa:	4630      	mov	r0, r6
 80a12fc:	f7fe ffb2 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1300:	4628      	mov	r0, r5
 80a1302:	2108      	movs	r1, #8
 80a1304:	f002 fcff 	bl	80a3d06 <_ZdlPvj>
        return p;
    }
 80a1308:	4620      	mov	r0, r4
 80a130a:	b002      	add	sp, #8
 80a130c:	bd70      	pop	{r4, r5, r6, pc}

080a130e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a130e:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1310:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1312:	460b      	mov	r3, r1
 80a1314:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1316:	c803      	ldmia	r0, {r0, r1}
 80a1318:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a131c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1320:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1324:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1328:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a132c:	b002      	add	sp, #8
 80a132e:	bd10      	pop	{r4, pc}

080a1330 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a1330:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1332:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1334:	b90a      	cbnz	r2, 80a133a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1336:	f002 fcec 	bl	80a3d12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a133a:	68c3      	ldr	r3, [r0, #12]
    }
 80a133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1340:	4718      	bx	r3

080a1342 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1342:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1344:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a1346:	f100 0110 	add.w	r1, r0, #16
 80a134a:	f7ff fff1 	bl	80a1330 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a134e:	bd08      	pop	{r3, pc}

080a1350 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a1350:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1352:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1354:	b90a      	cbnz	r2, 80a135a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1356:	f002 fcdc 	bl	80a3d12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a135a:	68c3      	ldr	r3, [r0, #12]
    }
 80a135c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1360:	4718      	bx	r3

080a1362 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1362:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1364:	6800      	ldr	r0, [r0, #0]
 80a1366:	f100 0110 	add.w	r1, r0, #16
 80a136a:	f7ff fff1 	bl	80a1350 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a136e:	bd08      	pop	{r3, pc}

080a1370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1370:	b538      	push	{r3, r4, r5, lr}
 80a1372:	2300      	movs	r3, #0
 80a1374:	4604      	mov	r4, r0
 80a1376:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1378:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a137a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a137c:	f7fe fe8b 	bl	80a0096 <_Znwj>
 80a1380:	b128      	cbz	r0, 80a138e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1382:	2301      	movs	r3, #1
 80a1384:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1388:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a138a:	60c5      	str	r5, [r0, #12]
 80a138c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a138e:	6020      	str	r0, [r4, #0]
	}
 80a1390:	4620      	mov	r0, r4
 80a1392:	bd38      	pop	{r3, r4, r5, pc}
 80a1394:	080a44d4 	.word	0x080a44d4

080a1398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1398:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a139a:	2300      	movs	r3, #0
 80a139c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a139e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a13a0:	4604      	mov	r4, r0
 80a13a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a13a4:	b12b      	cbz	r3, 80a13b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a13a6:	2202      	movs	r2, #2
 80a13a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a13aa:	68eb      	ldr	r3, [r5, #12]
 80a13ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a13ae:	68ab      	ldr	r3, [r5, #8]
 80a13b0:	60a3      	str	r3, [r4, #8]
    }
 80a13b2:	4620      	mov	r0, r4
 80a13b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a13b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13ba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a13bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a13be:	4668      	mov	r0, sp
 80a13c0:	f7ff ff48 	bl	80a1254 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a13c4:	f04f 0302 	mov.w	r3, #2
 80a13c8:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a13cc:	2a00      	cmp	r2, #0
 80a13ce:	d103      	bne.n	80a13d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a13d0:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a13d4:	2900      	cmp	r1, #0
 80a13d6:	d1f7      	bne.n	80a13c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a13d8:	d125      	bne.n	80a1426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a13da:	f104 050c 	add.w	r5, r4, #12
 80a13de:	4669      	mov	r1, sp
 80a13e0:	4628      	mov	r0, r5
 80a13e2:	f7ff ff37 	bl	80a1254 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a13e6:	2301      	movs	r3, #1
 80a13e8:	f3bf 8f5b 	dmb	ish
 80a13ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a13ee:	2000      	movs	r0, #0
 80a13f0:	f3bf 8f5b 	dmb	ish
 80a13f4:	f104 0308 	add.w	r3, r4, #8
 80a13f8:	e853 6f00 	ldrex	r6, [r3]
 80a13fc:	e843 0200 	strex	r2, r0, [r3]
 80a1400:	2a00      	cmp	r2, #0
 80a1402:	d1f9      	bne.n	80a13f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a1404:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1408:	b16e      	cbz	r6, 80a1426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a140a:	f7ff fe19 	bl	80a1040 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a140e:	b178      	cbz	r0, 80a1430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1410:	4629      	mov	r1, r5
 80a1412:	4630      	mov	r0, r6
 80a1414:	f7ff ff8c 	bl	80a1330 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1418:	4630      	mov	r0, r6
 80a141a:	f7ff ff12 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a141e:	2110      	movs	r1, #16
 80a1420:	4630      	mov	r0, r6
 80a1422:	f002 fc70 	bl	80a3d06 <_ZdlPvj>
        p_->setError(std::move(error));
 80a1426:	4668      	mov	r0, sp
 80a1428:	f7ff ff21 	bl	80a126e <_ZN8particle5ErrorD1Ev>
    }
 80a142c:	b009      	add	sp, #36	; 0x24
 80a142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1430:	4631      	mov	r1, r6
 80a1432:	a802      	add	r0, sp, #8
 80a1434:	f7ff ffb0 	bl	80a1398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1438:	68e0      	ldr	r0, [r4, #12]
 80a143a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a143e:	b108      	cbz	r0, 80a1444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a1440:	f002 fe12 	bl	80a4068 <strdup>
        type_(type) {
 80a1444:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1446:	2010      	movs	r0, #16
 80a1448:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a144c:	f7fe fe23 	bl	80a0096 <_Znwj>
 80a1450:	4605      	mov	r5, r0
 80a1452:	b1e8      	cbz	r0, 80a1490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a1454:	2700      	movs	r7, #0
 80a1456:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1458:	2018      	movs	r0, #24
 80a145a:	f7fe fe1c 	bl	80a0096 <_Znwj>
 80a145e:	4604      	mov	r4, r0
 80a1460:	b188      	cbz	r0, 80a1486 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a1462:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1464:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1466:	a802      	add	r0, sp, #8
 80a1468:	f7ff ff51 	bl	80a130e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a146c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a146e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1470:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1472:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1474:	9204      	str	r2, [sp, #16]
 80a1476:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1478:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a147a:	60e3      	str	r3, [r4, #12]
 80a147c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1480:	9205      	str	r2, [sp, #20]
 80a1482:	f7ff fee7 	bl	80a1254 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a1486:	4b08      	ldr	r3, [pc, #32]	; (80a14a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1488:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a148a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a148c:	4b07      	ldr	r3, [pc, #28]	; (80a14ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a148e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1490:	a806      	add	r0, sp, #24
 80a1492:	f7ff feec 	bl	80a126e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1496:	a802      	add	r0, sp, #8
 80a1498:	f7ff fed3 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a149c:	2200      	movs	r2, #0
 80a149e:	4629      	mov	r1, r5
 80a14a0:	4803      	ldr	r0, [pc, #12]	; (80a14b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a14a2:	f7ff fdd5 	bl	80a1050 <application_thread_invoke>
 80a14a6:	e7b7      	b.n	80a1418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a14a8:	080a1343 	.word	0x080a1343
 80a14ac:	080a15d9 	.word	0x080a15d9
 80a14b0:	080a11ff 	.word	0x080a11ff

080a14b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a14b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a14b8:	b08a      	sub	sp, #40	; 0x28
 80a14ba:	4605      	mov	r5, r0
 80a14bc:	460c      	mov	r4, r1
 80a14be:	4617      	mov	r7, r2
 80a14c0:	4698      	mov	r8, r3
 80a14c2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14c6:	f7ff fde7 	bl	80a1098 <spark_cloud_flag_connected>
 80a14ca:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a14cc:	4682      	mov	sl, r0
 80a14ce:	bb38      	cbnz	r0, 80a1520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a14d0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a14d4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a14d6:	a905      	add	r1, sp, #20
 80a14d8:	4630      	mov	r0, r6
 80a14da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a14de:	f7ff feb9 	bl	80a1254 <_ZN8particle5ErrorC1EOS0_>
 80a14e2:	2014      	movs	r0, #20
 80a14e4:	f7fe fdd7 	bl	80a0096 <_Znwj>
 80a14e8:	4604      	mov	r4, r0
 80a14ea:	b148      	cbz	r0, 80a1500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a14ec:	2302      	movs	r3, #2
 80a14ee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14f0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a14f2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14f6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a14f8:	4631      	mov	r1, r6
 80a14fa:	300c      	adds	r0, #12
 80a14fc:	f7ff feaa 	bl	80a1254 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1500:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a1502:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1504:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1508:	f7ff ff32 	bl	80a1370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a150c:	4630      	mov	r0, r6
 80a150e:	f7ff feae 	bl	80a126e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1512:	a805      	add	r0, sp, #20
 80a1514:	f7ff feab 	bl	80a126e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1518:	4628      	mov	r0, r5
 80a151a:	b00a      	add	sp, #40	; 0x28
 80a151c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1520:	230c      	movs	r3, #12
 80a1522:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1526:	2014      	movs	r0, #20
 80a1528:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a152c:	9307      	str	r3, [sp, #28]
 80a152e:	f7fe fdb2 	bl	80a0096 <_Znwj>
 80a1532:	4601      	mov	r1, r0
 80a1534:	b128      	cbz	r0, 80a1542 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1536:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a153a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a153e:	f880 a001 	strb.w	sl, [r0, #1]
 80a1542:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1544:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a1546:	f7ff ff13 	bl	80a1370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a154a:	4b22      	ldr	r3, [pc, #136]	; (80a15d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a154c:	2008      	movs	r0, #8
 80a154e:	9308      	str	r3, [sp, #32]
 80a1550:	f7fe fda1 	bl	80a0096 <_Znwj>
 80a1554:	4682      	mov	sl, r0
 80a1556:	b128      	cbz	r0, 80a1564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1558:	9b03      	ldr	r3, [sp, #12]
 80a155a:	a904      	add	r1, sp, #16
 80a155c:	f840 3b04 	str.w	r3, [r0], #4
 80a1560:	f7ff feaf 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1564:	4642      	mov	r2, r8
 80a1566:	4639      	mov	r1, r7
 80a1568:	4620      	mov	r0, r4
 80a156a:	9600      	str	r6, [sp, #0]
 80a156c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1570:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1574:	f7ff fd98 	bl	80a10a8 <spark_send_event>
 80a1578:	b9b8      	cbnz	r0, 80a15aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a157a:	9b03      	ldr	r3, [sp, #12]
 80a157c:	785b      	ldrb	r3, [r3, #1]
 80a157e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1582:	b993      	cbnz	r3, 80a15aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1584:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1588:	a905      	add	r1, sp, #20
 80a158a:	a803      	add	r0, sp, #12
 80a158c:	9205      	str	r2, [sp, #20]
 80a158e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1592:	f7ff ff11 	bl	80a13b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1596:	a805      	add	r0, sp, #20
 80a1598:	f7ff fe69 	bl	80a126e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a159c:	a805      	add	r0, sp, #20
 80a159e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a15a0:	f7ff fe96 	bl	80a12d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a15a4:	a806      	add	r0, sp, #24
 80a15a6:	f7fe fe5d 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a15aa:	9b03      	ldr	r3, [sp, #12]
 80a15ac:	a904      	add	r1, sp, #16
 80a15ae:	a806      	add	r0, sp, #24
 80a15b0:	9305      	str	r3, [sp, #20]
 80a15b2:	f7ff fe86 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a15b6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a15b8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a15ba:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a15bc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a15be:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a15c0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a15c2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a15c4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a15c6:	f7fe fe4d 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a15ca:	a804      	add	r0, sp, #16
 80a15cc:	f7fe fe4a 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a15d0:	e7a2      	b.n	80a1518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a15d2:	bf00      	nop
 80a15d4:	080a169d 	.word	0x080a169d

080a15d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a15d8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a15da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15dc:	4605      	mov	r5, r0
	  switch (__op)
 80a15de:	d007      	beq.n	80a15f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a15e0:	2a03      	cmp	r2, #3
 80a15e2:	d018      	beq.n	80a1616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a15e4:	2a01      	cmp	r2, #1
 80a15e6:	d101      	bne.n	80a15ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a15e8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a15ea:	6003      	str	r3, [r0, #0]
	}
 80a15ec:	2000      	movs	r0, #0
 80a15ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15f0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a15f2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15f4:	f7fe fd4f 	bl	80a0096 <_Znwj>
 80a15f8:	4604      	mov	r4, r0
 80a15fa:	b150      	cbz	r0, 80a1612 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a15fc:	4631      	mov	r1, r6
 80a15fe:	f7ff fecb 	bl	80a1398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1602:	6930      	ldr	r0, [r6, #16]
 80a1604:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1608:	b108      	cbz	r0, 80a160e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a160a:	f002 fd2d 	bl	80a4068 <strdup>
        type_(type) {
 80a160e:	6120      	str	r0, [r4, #16]
 80a1610:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1612:	602c      	str	r4, [r5, #0]
	}
 80a1614:	e7ea      	b.n	80a15ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1616:	6804      	ldr	r4, [r0, #0]
 80a1618:	2c00      	cmp	r4, #0
 80a161a:	d0e7      	beq.n	80a15ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a161c:	f104 0010 	add.w	r0, r4, #16
 80a1620:	f7ff fe25 	bl	80a126e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1624:	4620      	mov	r0, r4
 80a1626:	f7ff fe0c 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a162a:	2118      	movs	r1, #24
 80a162c:	4620      	mov	r0, r4
 80a162e:	f002 fb6a 	bl	80a3d06 <_ZdlPvj>
 80a1632:	e7db      	b.n	80a15ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a1634 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1634:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1636:	2300      	movs	r3, #0
 80a1638:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a163a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a163c:	4604      	mov	r4, r0
 80a163e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1640:	b12b      	cbz	r3, 80a164e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1642:	2202      	movs	r2, #2
 80a1644:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1646:	68eb      	ldr	r3, [r5, #12]
 80a1648:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a164a:	68ab      	ldr	r3, [r5, #8]
 80a164c:	60a3      	str	r3, [r4, #8]
    }
 80a164e:	4620      	mov	r0, r4
 80a1650:	bd38      	pop	{r3, r4, r5, pc}

080a1652 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a1652:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1654:	b570      	push	{r4, r5, r6, lr}
 80a1656:	4604      	mov	r4, r0
	  switch (__op)
 80a1658:	d007      	beq.n	80a166a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a165a:	2a03      	cmp	r2, #3
 80a165c:	d012      	beq.n	80a1684 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a165e:	2a01      	cmp	r2, #1
 80a1660:	d101      	bne.n	80a1666 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1662:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1664:	6003      	str	r3, [r0, #0]
	}
 80a1666:	2000      	movs	r0, #0
 80a1668:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a166a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a166c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a166e:	f7fe fd12 	bl	80a0096 <_Znwj>
 80a1672:	4605      	mov	r5, r0
 80a1674:	b120      	cbz	r0, 80a1680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a1676:	4631      	mov	r1, r6
 80a1678:	f7ff ffdc 	bl	80a1634 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a167c:	7c33      	ldrb	r3, [r6, #16]
 80a167e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1680:	6025      	str	r5, [r4, #0]
	}
 80a1682:	e7f0      	b.n	80a1666 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1684:	6804      	ldr	r4, [r0, #0]
 80a1686:	2c00      	cmp	r4, #0
 80a1688:	d0ed      	beq.n	80a1666 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a168a:	4620      	mov	r0, r4
 80a168c:	f7ff fdd9 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1690:	2114      	movs	r1, #20
 80a1692:	4620      	mov	r0, r4
 80a1694:	f002 fb37 	bl	80a3d06 <_ZdlPvj>
 80a1698:	e7e5      	b.n	80a1666 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a169c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a169e:	4604      	mov	r4, r0
 80a16a0:	b089      	sub	sp, #36	; 0x24
 80a16a2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a16a4:	a801      	add	r0, sp, #4
 80a16a6:	4611      	mov	r1, r2
 80a16a8:	f7ff fe12 	bl	80a12d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a16ac:	b1a4      	cbz	r4, 80a16d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a16ae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a16b0:	b11d      	cbz	r5, 80a16ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a16b2:	4628      	mov	r0, r5
 80a16b4:	f002 fcd8 	bl	80a4068 <strdup>
 80a16b8:	4605      	mov	r5, r0
 80a16ba:	a801      	add	r0, sp, #4
 80a16bc:	a903      	add	r1, sp, #12
        type_(type) {
 80a16be:	9503      	str	r5, [sp, #12]
 80a16c0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a16c4:	f7ff fe78 	bl	80a13b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a16c8:	a803      	add	r0, sp, #12
 80a16ca:	f7ff fdd0 	bl	80a126e <_ZN8particle5ErrorD1Ev>
 80a16ce:	a802      	add	r0, sp, #8
 80a16d0:	f7fe fdc8 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a16d4:	b009      	add	sp, #36	; 0x24
 80a16d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a16d8:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a16da:	9d01      	ldr	r5, [sp, #4]
 80a16dc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a16e0:	2a00      	cmp	r2, #0
 80a16e2:	d103      	bne.n	80a16ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a16e4:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a16e8:	2900      	cmp	r1, #0
 80a16ea:	d1f7      	bne.n	80a16dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a16ec:	d1ef      	bne.n	80a16ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a16ee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a16f0:	f3bf 8f5b 	dmb	ish
 80a16f4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a16f6:	f3bf 8f5b 	dmb	ish
 80a16fa:	1d2b      	adds	r3, r5, #4
 80a16fc:	e853 6f00 	ldrex	r6, [r3]
 80a1700:	e843 4200 	strex	r2, r4, [r3]
 80a1704:	2a00      	cmp	r2, #0
 80a1706:	d1f9      	bne.n	80a16fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1708:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a170c:	2e00      	cmp	r6, #0
 80a170e:	d0de      	beq.n	80a16ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1710:	4620      	mov	r0, r4
 80a1712:	f7ff fc95 	bl	80a1040 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1716:	4607      	mov	r7, r0
 80a1718:	b160      	cbz	r0, 80a1734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a171a:	4630      	mov	r0, r6
 80a171c:	f105 010c 	add.w	r1, r5, #12
 80a1720:	f7ff fe16 	bl	80a1350 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1724:	4630      	mov	r0, r6
 80a1726:	f7ff fd8c 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a172a:	2110      	movs	r1, #16
 80a172c:	4630      	mov	r0, r6
 80a172e:	f002 faea 	bl	80a3d06 <_ZdlPvj>
 80a1732:	e7cc      	b.n	80a16ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1734:	4631      	mov	r1, r6
 80a1736:	a803      	add	r0, sp, #12
 80a1738:	f7ff ff7c 	bl	80a1634 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a173c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a173e:	2010      	movs	r0, #16
 80a1740:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1744:	f7fe fca7 	bl	80a0096 <_Znwj>
 80a1748:	4605      	mov	r5, r0
 80a174a:	b1d0      	cbz	r0, 80a1782 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a174c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a174e:	2014      	movs	r0, #20
 80a1750:	f7fe fca1 	bl	80a0096 <_Znwj>
 80a1754:	4604      	mov	r4, r0
 80a1756:	b178      	cbz	r0, 80a1778 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1758:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a175a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a175c:	a803      	add	r0, sp, #12
 80a175e:	f7ff fdd6 	bl	80a130e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1762:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1764:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1766:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1768:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a176a:	9205      	str	r2, [sp, #20]
 80a176c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a176e:	60e3      	str	r3, [r4, #12]
 80a1770:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1774:	9206      	str	r2, [sp, #24]
 80a1776:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1778:	4b06      	ldr	r3, [pc, #24]	; (80a1794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a177a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a177c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a177e:	4b06      	ldr	r3, [pc, #24]	; (80a1798 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1780:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1782:	a803      	add	r0, sp, #12
 80a1784:	f7ff fd5d 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1788:	2200      	movs	r2, #0
 80a178a:	4629      	mov	r1, r5
 80a178c:	4803      	ldr	r0, [pc, #12]	; (80a179c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a178e:	f7ff fc5f 	bl	80a1050 <application_thread_invoke>
 80a1792:	e7c7      	b.n	80a1724 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1794:	080a1363 	.word	0x080a1363
 80a1798:	080a1653 	.word	0x080a1653
 80a179c:	080a11ff 	.word	0x080a11ff

080a17a0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a17a0:	4770      	bx	lr

080a17a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a17a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17a4:	4606      	mov	r6, r0
 80a17a6:	4615      	mov	r5, r2
 80a17a8:	460c      	mov	r4, r1
 80a17aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a17ac:	42bc      	cmp	r4, r7
 80a17ae:	d006      	beq.n	80a17be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a17b0:	6833      	ldr	r3, [r6, #0]
 80a17b2:	4630      	mov	r0, r6
 80a17b4:	689b      	ldr	r3, [r3, #8]
 80a17b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a17ba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a17bc:	e7f6      	b.n	80a17ac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a17be:	4628      	mov	r0, r5
 80a17c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17c2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a17c2:	2200      	movs	r2, #0
 80a17c4:	7c00      	ldrb	r0, [r0, #16]
 80a17c6:	f7ff bad9 	b.w	80a0d7c <hal_i2c_write>

080a17ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a17ca:	2100      	movs	r1, #0
 80a17cc:	7c00      	ldrb	r0, [r0, #16]
 80a17ce:	f7ff badd 	b.w	80a0d8c <hal_i2c_available>

080a17d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a17d2:	2100      	movs	r1, #0
 80a17d4:	7c00      	ldrb	r0, [r0, #16]
 80a17d6:	f7ff bae1 	b.w	80a0d9c <hal_i2c_read>

080a17da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a17da:	2100      	movs	r1, #0
 80a17dc:	7c00      	ldrb	r0, [r0, #16]
 80a17de:	f7ff bae5 	b.w	80a0dac <hal_i2c_peek>

080a17e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a17e2:	2100      	movs	r1, #0
 80a17e4:	7c00      	ldrb	r0, [r0, #16]
 80a17e6:	f7ff bae9 	b.w	80a0dbc <hal_i2c_flush>

080a17ea <_ZN7TwoWireD0Ev>:
 80a17ea:	b510      	push	{r4, lr}
 80a17ec:	4604      	mov	r4, r0
 80a17ee:	2114      	movs	r1, #20
 80a17f0:	f002 fa89 	bl	80a3d06 <_ZdlPvj>
 80a17f4:	4620      	mov	r0, r4
 80a17f6:	bd10      	pop	{r4, pc}

080a17f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a17f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a17fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a17fe:	4604      	mov	r4, r0
 80a1800:	4608      	mov	r0, r1
 80a1802:	2100      	movs	r1, #0
 80a1804:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1808:	4b03      	ldr	r3, [pc, #12]	; (80a1818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a180a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a180c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a180e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1810:	f7ff fae4 	bl	80a0ddc <hal_i2c_init>
}
 80a1814:	4620      	mov	r0, r4
 80a1816:	bd10      	pop	{r4, pc}
 80a1818:	080a44f0 	.word	0x080a44f0

080a181c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a181e:	460e      	mov	r6, r1
 80a1820:	2400      	movs	r4, #0
 80a1822:	f100 0708 	add.w	r7, r0, #8
 80a1826:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1828:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a182c:	220a      	movs	r2, #10
 80a182e:	4630      	mov	r0, r6
 80a1830:	f001 facb 	bl	80a2dca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1834:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1836:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1838:	d101      	bne.n	80a183e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a183a:	4620      	mov	r0, r4
 80a183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a183e:	2c00      	cmp	r4, #0
 80a1840:	d0f2      	beq.n	80a1828 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1842:	212e      	movs	r1, #46	; 0x2e
 80a1844:	4630      	mov	r0, r6
 80a1846:	f001 faa7 	bl	80a2d98 <_ZN5Print5printEc>
 80a184a:	4404      	add	r4, r0
 80a184c:	e7ec      	b.n	80a1828 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1850 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1850:	b510      	push	{r4, lr}
 80a1852:	4604      	mov	r4, r0
 80a1854:	4b04      	ldr	r3, [pc, #16]	; (80a1868 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1856:	2211      	movs	r2, #17
 80a1858:	2100      	movs	r1, #0
 80a185a:	f840 3b04 	str.w	r3, [r0], #4
 80a185e:	f002 fbad 	bl	80a3fbc <memset>
}
 80a1862:	4620      	mov	r0, r4
 80a1864:	bd10      	pop	{r4, pc}
 80a1866:	bf00      	nop
 80a1868:	080a4518 	.word	0x080a4518

080a186c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a186c:	4603      	mov	r3, r0
 80a186e:	4a07      	ldr	r2, [pc, #28]	; (80a188c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1870:	b510      	push	{r4, lr}
 80a1872:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1876:	f101 0210 	add.w	r2, r1, #16
 80a187a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a187e:	4291      	cmp	r1, r2
 80a1880:	f843 4b04 	str.w	r4, [r3], #4
 80a1884:	d1f9      	bne.n	80a187a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1886:	780a      	ldrb	r2, [r1, #0]
 80a1888:	701a      	strb	r2, [r3, #0]
}
 80a188a:	bd10      	pop	{r4, pc}
 80a188c:	080a4518 	.word	0x080a4518

080a1890 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1890:	4a02      	ldr	r2, [pc, #8]	; (80a189c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1892:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1896:	2204      	movs	r2, #4
 80a1898:	7502      	strb	r2, [r0, #20]
}
 80a189a:	4770      	bx	lr
 80a189c:	080a4518 	.word	0x080a4518

080a18a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a18a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a18a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a18a6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a18aa:	2304      	movs	r3, #4
 80a18ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a18b0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a18b4:	6044      	str	r4, [r0, #4]
 80a18b6:	7503      	strb	r3, [r0, #20]
}
 80a18b8:	bd10      	pop	{r4, pc}
	...

080a18bc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a18bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a18be:	4d04      	ldr	r5, [pc, #16]	; (80a18d0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a18c0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a18c2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a18c6:	9500      	str	r5, [sp, #0]
 80a18c8:	f7ff ffea 	bl	80a18a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a18cc:	b003      	add	sp, #12
 80a18ce:	bd30      	pop	{r4, r5, pc}
 80a18d0:	080a4518 	.word	0x080a4518

080a18d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a18d4:	2201      	movs	r2, #1
 80a18d6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a18da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a18de:	4618      	mov	r0, r3
 80a18e0:	2901      	cmp	r1, #1
 80a18e2:	d108      	bne.n	80a18f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a18e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a18e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a18ec:	3a01      	subs	r2, #1
 80a18ee:	f103 0310 	add.w	r3, r3, #16
 80a18f2:	d1f2      	bne.n	80a18da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a18f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a18f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a18f8:	bf04      	itt	eq
 80a18fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a18fe:	1852      	addeq	r2, r2, r1
 80a1900:	e7f4      	b.n	80a18ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a1902 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a1902:	b40e      	push	{r1, r2, r3}
 80a1904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1908:	b087      	sub	sp, #28
 80a190a:	af00      	add	r7, sp, #0
 80a190c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a1910:	f855 8b04 	ldr.w	r8, [r5], #4
 80a1914:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1916:	462b      	mov	r3, r5
 80a1918:	4642      	mov	r2, r8
 80a191a:	2110      	movs	r1, #16
 80a191c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a1920:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1922:	f7ff fc49 	bl	80a11b8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a1926:	280f      	cmp	r0, #15
 80a1928:	d91b      	bls.n	80a1962 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a192a:	f100 0308 	add.w	r3, r0, #8
 80a192e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a1932:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a1934:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1938:	4642      	mov	r2, r8
 80a193a:	1c41      	adds	r1, r0, #1
 80a193c:	462b      	mov	r3, r5
 80a193e:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a1940:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a1942:	f7ff fc39 	bl	80a11b8 <vsnprintf>
        if (n > 0) {
 80a1946:	1e02      	subs	r2, r0, #0
 80a1948:	dd04      	ble.n	80a1954 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a194a:	6823      	ldr	r3, [r4, #0]
 80a194c:	4669      	mov	r1, sp
 80a194e:	4620      	mov	r0, r4
 80a1950:	689b      	ldr	r3, [r3, #8]
 80a1952:	4798      	blx	r3
 80a1954:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a1956:	371c      	adds	r7, #28
 80a1958:	46bd      	mov	sp, r7
 80a195a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a195e:	b003      	add	sp, #12
 80a1960:	4770      	bx	lr
    } else if (n > 0) {
 80a1962:	2800      	cmp	r0, #0
 80a1964:	d0f7      	beq.n	80a1956 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a1966:	6823      	ldr	r3, [r4, #0]
 80a1968:	4602      	mov	r2, r0
 80a196a:	689b      	ldr	r3, [r3, #8]
 80a196c:	4620      	mov	r0, r4
 80a196e:	f107 0108 	add.w	r1, r7, #8
 80a1972:	4798      	blx	r3
}
 80a1974:	e7ef      	b.n	80a1956 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a1976 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1976:	b510      	push	{r4, lr}
 80a1978:	4604      	mov	r4, r0
          _M_dispose();
 80a197a:	6803      	ldr	r3, [r0, #0]
 80a197c:	689b      	ldr	r3, [r3, #8]
 80a197e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1980:	68a3      	ldr	r3, [r4, #8]
 80a1982:	3b01      	subs	r3, #1
 80a1984:	60a3      	str	r3, [r4, #8]
 80a1986:	b92b      	cbnz	r3, 80a1994 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1988:	6823      	ldr	r3, [r4, #0]
 80a198a:	4620      	mov	r0, r4
    }
 80a198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1990:	68db      	ldr	r3, [r3, #12]
 80a1992:	4718      	bx	r3
    }
 80a1994:	bd10      	pop	{r4, pc}

080a1996 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a1996:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1998:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a199a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a199e:	2201      	movs	r2, #1
 80a19a0:	689b      	ldr	r3, [r3, #8]
 80a19a2:	f10d 0107 	add.w	r1, sp, #7
 80a19a6:	4798      	blx	r3
}
 80a19a8:	b003      	add	sp, #12
 80a19aa:	f85d fb04 	ldr.w	pc, [sp], #4

080a19ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a19ae:	b538      	push	{r3, r4, r5, lr}
 80a19b0:	680b      	ldr	r3, [r1, #0]
 80a19b2:	4604      	mov	r4, r0
 80a19b4:	6003      	str	r3, [r0, #0]
 80a19b6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a19b8:	6843      	ldr	r3, [r0, #4]
 80a19ba:	429d      	cmp	r5, r3
 80a19bc:	d00c      	beq.n	80a19d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a19be:	b115      	cbz	r5, 80a19c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a19c0:	686b      	ldr	r3, [r5, #4]
 80a19c2:	3301      	adds	r3, #1
 80a19c4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a19c6:	6860      	ldr	r0, [r4, #4]
 80a19c8:	b128      	cbz	r0, 80a19d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a19ca:	6843      	ldr	r3, [r0, #4]
 80a19cc:	3b01      	subs	r3, #1
 80a19ce:	6043      	str	r3, [r0, #4]
 80a19d0:	b90b      	cbnz	r3, 80a19d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a19d2:	f7ff ffd0 	bl	80a1976 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a19d6:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a19d8:	4620      	mov	r0, r4
 80a19da:	bd38      	pop	{r3, r4, r5, pc}

080a19dc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a19dc:	460b      	mov	r3, r1
 80a19de:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a19e0:	2200      	movs	r2, #0
 80a19e2:	b510      	push	{r4, lr}
 80a19e4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a19e6:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a19ea:	6083      	str	r3, [r0, #8]
    if (t) {
 80a19ec:	b90b      	cbnz	r3, 80a19f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a19ee:	4620      	mov	r0, r4
 80a19f0:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a19f2:	f7ff ffdc 	bl	80a19ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a19f6:	e7fa      	b.n	80a19ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a19f8 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a19f8:	4603      	mov	r3, r0
    if (!t_) {
 80a19fa:	6880      	ldr	r0, [r0, #8]
 80a19fc:	b320      	cbz	r0, 80a1a48 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a19fe:	7802      	ldrb	r2, [r0, #0]
 80a1a00:	2a03      	cmp	r2, #3
 80a1a02:	d81a      	bhi.n	80a1a3a <_ZNK5spark9JSONValue4typeEv+0x42>
 80a1a04:	e8df f002 	tbb	[pc, r2]
 80a1a08:	1b021704 	.word	0x1b021704
 80a1a0c:	2005      	movs	r0, #5
 80a1a0e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	685a      	ldr	r2, [r3, #4]
 80a1a14:	6843      	ldr	r3, [r0, #4]
 80a1a16:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a1a18:	282d      	cmp	r0, #45	; 0x2d
 80a1a1a:	d012      	beq.n	80a1a42 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a1a1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a1a20:	2b09      	cmp	r3, #9
 80a1a22:	d90e      	bls.n	80a1a42 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a1a24:	2874      	cmp	r0, #116	; 0x74
 80a1a26:	d00e      	beq.n	80a1a46 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a1a28:	2866      	cmp	r0, #102	; 0x66
 80a1a2a:	d00c      	beq.n	80a1a46 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a1a2c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a1a30:	4258      	negs	r0, r3
 80a1a32:	4158      	adcs	r0, r3
 80a1a34:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a1a36:	2006      	movs	r0, #6
 80a1a38:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a1a3a:	2000      	movs	r0, #0
 80a1a3c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a1a3e:	2004      	movs	r0, #4
 80a1a40:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a1a42:	2003      	movs	r0, #3
 80a1a44:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a1a46:	2002      	movs	r0, #2
}
 80a1a48:	4770      	bx	lr

080a1a4a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a1a4a:	b510      	push	{r4, lr}
 80a1a4c:	4604      	mov	r4, r0
    switch (type()) {
 80a1a4e:	f7ff ffd3 	bl	80a19f8 <_ZNK5spark9JSONValue4typeEv>
 80a1a52:	2802      	cmp	r0, #2
 80a1a54:	d00e      	beq.n	80a1a74 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a1a56:	1ec3      	subs	r3, r0, #3
 80a1a58:	b2db      	uxtb	r3, r3
 80a1a5a:	2b01      	cmp	r3, #1
 80a1a5c:	d814      	bhi.n	80a1a88 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a1a5e:	6822      	ldr	r2, [r4, #0]
 80a1a60:	68a3      	ldr	r3, [r4, #8]
 80a1a62:	6850      	ldr	r0, [r2, #4]
 80a1a64:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a1a66:	220a      	movs	r2, #10
}
 80a1a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a1a6c:	2100      	movs	r1, #0
 80a1a6e:	4418      	add	r0, r3
 80a1a70:	f002 bbd4 	b.w	80a421c <strtol>
        const char* const s = d_->json + t_->start;
 80a1a74:	6822      	ldr	r2, [r4, #0]
 80a1a76:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a1a78:	6852      	ldr	r2, [r2, #4]
 80a1a7a:	685b      	ldr	r3, [r3, #4]
 80a1a7c:	5cd0      	ldrb	r0, [r2, r3]
 80a1a7e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a1a82:	4258      	negs	r0, r3
 80a1a84:	4158      	adcs	r0, r3
}
 80a1a86:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a1a88:	2000      	movs	r0, #0
 80a1a8a:	e7fc      	b.n	80a1a86 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a1a8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1a8c:	460b      	mov	r3, r1
 80a1a8e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1a90:	2200      	movs	r2, #0
 80a1a92:	b510      	push	{r4, lr}
 80a1a94:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1a96:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a1a9a:	480d      	ldr	r0, [pc, #52]	; (80a1ad0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a1a9c:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1aa0:	b1a3      	cbz	r3, 80a1acc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a1aa2:	781a      	ldrb	r2, [r3, #0]
 80a1aa4:	2a03      	cmp	r2, #3
 80a1aa6:	d006      	beq.n	80a1ab6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a1aa8:	b982      	cbnz	r2, 80a1acc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a1aaa:	680a      	ldr	r2, [r1, #0]
 80a1aac:	6850      	ldr	r0, [r2, #4]
 80a1aae:	685a      	ldr	r2, [r3, #4]
 80a1ab0:	5c82      	ldrb	r2, [r0, r2]
 80a1ab2:	2a6e      	cmp	r2, #110	; 0x6e
 80a1ab4:	d007      	beq.n	80a1ac6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a1ab6:	680a      	ldr	r2, [r1, #0]
 80a1ab8:	6858      	ldr	r0, [r3, #4]
 80a1aba:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a1abc:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a1abe:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1ac0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a1ac2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a1ac4:	60e3      	str	r3, [r4, #12]
 80a1ac6:	4620      	mov	r0, r4
 80a1ac8:	f7ff ff71 	bl	80a19ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	bd10      	pop	{r4, pc}
 80a1ad0:	080a44a9 	.word	0x080a44a9

080a1ad4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1ad4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a1ad6:	2500      	movs	r5, #0
 80a1ad8:	460b      	mov	r3, r1
 80a1ada:	4604      	mov	r4, r0
 80a1adc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1ade:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a1ae2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a1ae6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a1aea:	b14b      	cbz	r3, 80a1b00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a1aec:	781a      	ldrb	r2, [r3, #0]
 80a1aee:	2a01      	cmp	r2, #1
 80a1af0:	d106      	bne.n	80a1b00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a1af2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a1af6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a1af8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a1afa:	6143      	str	r3, [r0, #20]
 80a1afc:	f7ff ff57 	bl	80a19ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a1b00:	4620      	mov	r0, r4
 80a1b02:	bd38      	pop	{r3, r4, r5, pc}

080a1b04 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a1b04:	b510      	push	{r4, lr}
    if (!n_) {
 80a1b06:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a1b08:	4604      	mov	r4, r0
    if (!n_) {
 80a1b0a:	b163      	cbz	r3, 80a1b26 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a1b0c:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a1b0e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a1b10:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a1b12:	3010      	adds	r0, #16
 80a1b14:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a1b16:	6120      	str	r0, [r4, #16]
    --n_;
 80a1b18:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a1b1a:	b113      	cbz	r3, 80a1b22 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a1b1c:	f7ff feda 	bl	80a18d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a1b20:	60a0      	str	r0, [r4, #8]
    return true;
 80a1b22:	2001      	movs	r0, #1
 80a1b24:	e000      	b.n	80a1b28 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a1b26:	4618      	mov	r0, r3
}
 80a1b28:	bd10      	pop	{r4, pc}

080a1b2a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a1b2a:	b510      	push	{r4, lr}
    write('}');
 80a1b2c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a1b2e:	4604      	mov	r4, r0
    write('}');
 80a1b30:	f7ff ff31 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a1b34:	2301      	movs	r3, #1
}
 80a1b36:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1b38:	7123      	strb	r3, [r4, #4]
}
 80a1b3a:	bd10      	pop	{r4, pc}

080a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a1b3c:	b508      	push	{r3, lr}
    switch (state_) {
 80a1b3e:	7903      	ldrb	r3, [r0, #4]
 80a1b40:	2b01      	cmp	r3, #1
 80a1b42:	d002      	beq.n	80a1b4a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a1b44:	2b02      	cmp	r3, #2
 80a1b46:	d004      	beq.n	80a1b52 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a1b48:	bd08      	pop	{r3, pc}
        write(',');
 80a1b4a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a1b4c:	f7ff ff23 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
}
 80a1b50:	e7fa      	b.n	80a1b48 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a1b52:	213a      	movs	r1, #58	; 0x3a
 80a1b54:	e7fa      	b.n	80a1b4c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a1b56 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a1b56:	b510      	push	{r4, lr}
 80a1b58:	4604      	mov	r4, r0
    writeSeparator();
 80a1b5a:	f7ff ffef 	bl	80a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a1b5e:	4620      	mov	r0, r4
 80a1b60:	217b      	movs	r1, #123	; 0x7b
 80a1b62:	f7ff ff18 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a1b66:	2300      	movs	r3, #0
}
 80a1b68:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a1b6a:	7123      	strb	r3, [r4, #4]
}
 80a1b6c:	bd10      	pop	{r4, pc}
	...

080a1b70 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a1b70:	b538      	push	{r3, r4, r5, lr}
 80a1b72:	4604      	mov	r4, r0
 80a1b74:	460d      	mov	r5, r1
    writeSeparator();
 80a1b76:	f7ff ffe1 	bl	80a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a1b7a:	6823      	ldr	r3, [r4, #0]
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	462a      	mov	r2, r5
 80a1b80:	68db      	ldr	r3, [r3, #12]
 80a1b82:	4903      	ldr	r1, [pc, #12]	; (80a1b90 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a1b84:	4798      	blx	r3
    state_ = NEXT;
 80a1b86:	2301      	movs	r3, #1
}
 80a1b88:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1b8a:	7123      	strb	r3, [r4, #4]
}
 80a1b8c:	bd38      	pop	{r3, r4, r5, pc}
 80a1b8e:	bf00      	nop
 80a1b90:	080a4524 	.word	0x080a4524

080a1b94 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a1b94:	b538      	push	{r3, r4, r5, lr}
 80a1b96:	4604      	mov	r4, r0
 80a1b98:	460d      	mov	r5, r1
    writeSeparator();
 80a1b9a:	f7ff ffcf 	bl	80a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a1b9e:	6823      	ldr	r3, [r4, #0]
 80a1ba0:	4620      	mov	r0, r4
 80a1ba2:	462a      	mov	r2, r5
 80a1ba4:	68db      	ldr	r3, [r3, #12]
 80a1ba6:	4903      	ldr	r1, [pc, #12]	; (80a1bb4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a1ba8:	4798      	blx	r3
    state_ = NEXT;
 80a1baa:	2301      	movs	r3, #1
}
 80a1bac:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1bae:	7123      	strb	r3, [r4, #4]
}
 80a1bb0:	bd38      	pop	{r3, r4, r5, pc}
 80a1bb2:	bf00      	nop
 80a1bb4:	080a4527 	.word	0x080a4527

080a1bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1bbc:	460d      	mov	r5, r1
 80a1bbe:	4617      	mov	r7, r2
    write('"');
 80a1bc0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a1bc2:	4604      	mov	r4, r0
    write('"');
 80a1bc4:	f7ff fee7 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a1bc8:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a1bca:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a1c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a1bce:	442f      	add	r7, r5
    while (s != end) {
 80a1bd0:	42bd      	cmp	r5, r7
 80a1bd2:	462a      	mov	r2, r5
 80a1bd4:	d038      	beq.n	80a1c48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a1bd6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a1bda:	2e22      	cmp	r6, #34	; 0x22
 80a1bdc:	d003      	beq.n	80a1be6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1bde:	2e5c      	cmp	r6, #92	; 0x5c
 80a1be0:	d001      	beq.n	80a1be6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a1be2:	2e1f      	cmp	r6, #31
 80a1be4:	d8f4      	bhi.n	80a1bd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a1be6:	6823      	ldr	r3, [r4, #0]
 80a1be8:	1a52      	subs	r2, r2, r1
 80a1bea:	4620      	mov	r0, r4
 80a1bec:	689b      	ldr	r3, [r3, #8]
 80a1bee:	4798      	blx	r3
            write('\\');
 80a1bf0:	215c      	movs	r1, #92	; 0x5c
 80a1bf2:	4620      	mov	r0, r4
 80a1bf4:	f7ff fecf 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a1bf8:	2e0d      	cmp	r6, #13
 80a1bfa:	d80a      	bhi.n	80a1c12 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a1bfc:	2e07      	cmp	r6, #7
 80a1bfe:	d91c      	bls.n	80a1c3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1c00:	f1a6 0308 	sub.w	r3, r6, #8
 80a1c04:	2b05      	cmp	r3, #5
 80a1c06:	d818      	bhi.n	80a1c3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a1c08:	e8df f003 	tbb	[pc, r3]
 80a1c0c:	17110f0d 	.word	0x17110f0d
 80a1c10:	1513      	.short	0x1513
 80a1c12:	2e22      	cmp	r6, #34	; 0x22
 80a1c14:	d001      	beq.n	80a1c1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a1c16:	2e5c      	cmp	r6, #92	; 0x5c
 80a1c18:	d10f      	bne.n	80a1c3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a1c1a:	4631      	mov	r1, r6
                write('b');
 80a1c1c:	4620      	mov	r0, r4
 80a1c1e:	f7ff feba 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a1c22:	4629      	mov	r1, r5
    while (s != end) {
 80a1c24:	e7d4      	b.n	80a1bd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a1c26:	2162      	movs	r1, #98	; 0x62
 80a1c28:	e7f8      	b.n	80a1c1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a1c2a:	2174      	movs	r1, #116	; 0x74
 80a1c2c:	e7f6      	b.n	80a1c1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a1c2e:	216e      	movs	r1, #110	; 0x6e
 80a1c30:	e7f4      	b.n	80a1c1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a1c32:	2166      	movs	r1, #102	; 0x66
 80a1c34:	e7f2      	b.n	80a1c1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a1c36:	2172      	movs	r1, #114	; 0x72
 80a1c38:	e7f0      	b.n	80a1c1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a1c3a:	6823      	ldr	r3, [r4, #0]
 80a1c3c:	4632      	mov	r2, r6
 80a1c3e:	4641      	mov	r1, r8
 80a1c40:	4620      	mov	r0, r4
 80a1c42:	68db      	ldr	r3, [r3, #12]
 80a1c44:	4798      	blx	r3
                break;
 80a1c46:	e7ec      	b.n	80a1c22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a1c48:	428d      	cmp	r5, r1
 80a1c4a:	d004      	beq.n	80a1c56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a1c4c:	6823      	ldr	r3, [r4, #0]
 80a1c4e:	4620      	mov	r0, r4
 80a1c50:	689b      	ldr	r3, [r3, #8]
 80a1c52:	1a6a      	subs	r2, r5, r1
 80a1c54:	4798      	blx	r3
    }
    write('"');
 80a1c56:	2122      	movs	r1, #34	; 0x22
 80a1c58:	4620      	mov	r0, r4
 80a1c5a:	f7ff fe9c 	bl	80a1996 <_ZN5spark10JSONWriter5writeEc>
}
 80a1c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1c62:	bf00      	nop
 80a1c64:	080a452a 	.word	0x080a452a

080a1c68 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a1c68:	b570      	push	{r4, r5, r6, lr}
 80a1c6a:	4604      	mov	r4, r0
 80a1c6c:	460d      	mov	r5, r1
 80a1c6e:	4616      	mov	r6, r2
    writeSeparator();
 80a1c70:	f7ff ff64 	bl	80a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a1c74:	4620      	mov	r0, r4
 80a1c76:	4632      	mov	r2, r6
 80a1c78:	4629      	mov	r1, r5
 80a1c7a:	f7ff ff9d 	bl	80a1bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a1c7e:	2302      	movs	r3, #2
}
 80a1c80:	4620      	mov	r0, r4
    state_ = VALUE;
 80a1c82:	7123      	strb	r3, [r4, #4]
}
 80a1c84:	bd70      	pop	{r4, r5, r6, pc}

080a1c86 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a1c86:	b570      	push	{r4, r5, r6, lr}
 80a1c88:	4604      	mov	r4, r0
 80a1c8a:	460d      	mov	r5, r1
 80a1c8c:	4616      	mov	r6, r2
    writeSeparator();
 80a1c8e:	f7ff ff55 	bl	80a1b3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1c92:	4620      	mov	r0, r4
 80a1c94:	4632      	mov	r2, r6
 80a1c96:	4629      	mov	r1, r5
 80a1c98:	f7ff ff8e 	bl	80a1bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1c9c:	2301      	movs	r3, #1
}
 80a1c9e:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1ca0:	7123      	strb	r3, [r4, #4]
}
 80a1ca2:	bd70      	pop	{r4, r5, r6, pc}

080a1ca4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1ca4:	6880      	ldr	r0, [r0, #8]
 80a1ca6:	6803      	ldr	r3, [r0, #0]
 80a1ca8:	68db      	ldr	r3, [r3, #12]
 80a1caa:	4718      	bx	r3

080a1cac <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1cac:	4770      	bx	lr

080a1cae <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1cae:	4608      	mov	r0, r1
 80a1cb0:	b111      	cbz	r1, 80a1cb8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1cb2:	680b      	ldr	r3, [r1, #0]
 80a1cb4:	685b      	ldr	r3, [r3, #4]
 80a1cb6:	4718      	bx	r3
}
 80a1cb8:	4770      	bx	lr

080a1cba <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1cba:	4770      	bx	lr

080a1cbc <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1cbc:	4770      	bx	lr

080a1cbe <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1cbe:	4770      	bx	lr

080a1cc0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1cc0:	b538      	push	{r3, r4, r5, lr}
 80a1cc2:	4604      	mov	r4, r0
 80a1cc4:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1cc6:	6800      	ldr	r0, [r0, #0]
 80a1cc8:	212e      	movs	r1, #46	; 0x2e
 80a1cca:	f002 f9b0 	bl	80a402e <strchrnul>
    size = s - category;
 80a1cce:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1cd0:	4602      	mov	r2, r0
    size = s - category;
 80a1cd2:	1ac0      	subs	r0, r0, r3
 80a1cd4:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1cd6:	b120      	cbz	r0, 80a1ce2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1cd8:	7813      	ldrb	r3, [r2, #0]
 80a1cda:	b103      	cbz	r3, 80a1cde <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1cdc:	3201      	adds	r2, #1
 80a1cde:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ce0:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a1ce2:	bd38      	pop	{r3, r4, r5, pc}

080a1ce4 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1ce4:	b510      	push	{r4, lr}
 80a1ce6:	4604      	mov	r4, r0
 80a1ce8:	210c      	movs	r1, #12
 80a1cea:	f002 f80c 	bl	80a3d06 <_ZdlPvj>
 80a1cee:	4620      	mov	r0, r4
 80a1cf0:	bd10      	pop	{r4, pc}

080a1cf2 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1cf2:	b510      	push	{r4, lr}
 80a1cf4:	4604      	mov	r4, r0
 80a1cf6:	2104      	movs	r1, #4
 80a1cf8:	f002 f805 	bl	80a3d06 <_ZdlPvj>
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	bd10      	pop	{r4, pc}

080a1d00 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1d00:	b510      	push	{r4, lr}
 80a1d02:	4604      	mov	r4, r0
 80a1d04:	2104      	movs	r1, #4
 80a1d06:	f001 fffe 	bl	80a3d06 <_ZdlPvj>
 80a1d0a:	4620      	mov	r0, r4
 80a1d0c:	bd10      	pop	{r4, pc}

080a1d0e <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1d0e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1d10:	f002 f997 	bl	80a4042 <strcmp>
}
 80a1d14:	fab0 f080 	clz	r0, r0
 80a1d18:	0940      	lsrs	r0, r0, #5
 80a1d1a:	bd08      	pop	{r3, pc}

080a1d1c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1d1c:	b510      	push	{r4, lr}
 80a1d1e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1d20:	f001 fd98 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a1d24:	4284      	cmp	r4, r0
 80a1d26:	d105      	bne.n	80a1d34 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a1d28:	f001 fd94 	bl	80a3854 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1d30:	f001 bd76 	b.w	80a3820 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a1d34:	f001 fdcc 	bl	80a38d0 <_Z17_fetch_usbserial1v>
 80a1d38:	4284      	cmp	r4, r0
 80a1d3a:	d102      	bne.n	80a1d42 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1d3c:	f001 fdc8 	bl	80a38d0 <_Z17_fetch_usbserial1v>
 80a1d40:	e7f4      	b.n	80a1d2c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1d42:	f001 fcf1 	bl	80a3728 <_Z22__fetch_global_Serial1v>
 80a1d46:	4284      	cmp	r4, r0
 80a1d48:	d105      	bne.n	80a1d56 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1d4a:	f001 fced 	bl	80a3728 <_Z22__fetch_global_Serial1v>
}
 80a1d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1d52:	f001 bce6 	b.w	80a3722 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1d56:	b12c      	cbz	r4, 80a1d64 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a1d58:	6823      	ldr	r3, [r4, #0]
 80a1d5a:	4620      	mov	r0, r4
}
 80a1d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d60:	685b      	ldr	r3, [r3, #4]
 80a1d62:	4718      	bx	r3
 80a1d64:	bd10      	pop	{r4, pc}

080a1d66 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1d66:	b538      	push	{r3, r4, r5, lr}
 80a1d68:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1d6a:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1d6c:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1d6e:	f002 f996 	bl	80a409e <strlen>
 80a1d72:	4621      	mov	r1, r4
 80a1d74:	4602      	mov	r2, r0
 80a1d76:	4628      	mov	r0, r5
}
 80a1d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1d7c:	f7ff bf83 	b.w	80a1c86 <_ZN5spark10JSONWriter5valueEPKcj>

080a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1d80:	b570      	push	{r4, r5, r6, lr}
 80a1d82:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1d84:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a1d86:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1d88:	f002 f989 	bl	80a409e <strlen>
 80a1d8c:	6823      	ldr	r3, [r4, #0]
 80a1d8e:	4602      	mov	r2, r0
 80a1d90:	4629      	mov	r1, r5
 80a1d92:	4620      	mov	r0, r4
}
 80a1d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a1d98:	68db      	ldr	r3, [r3, #12]
 80a1d9a:	4718      	bx	r3

080a1d9c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1d9c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1d9e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1da0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1da4:	2201      	movs	r2, #1
 80a1da6:	68db      	ldr	r3, [r3, #12]
 80a1da8:	f10d 0107 	add.w	r1, sp, #7
 80a1dac:	4798      	blx	r3
}
 80a1dae:	b003      	add	sp, #12
 80a1db0:	f85d fb04 	ldr.w	pc, [sp], #4

080a1db4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a1db4:	b40e      	push	{r1, r2, r3}
 80a1db6:	b503      	push	{r0, r1, lr}
 80a1db8:	ab03      	add	r3, sp, #12
 80a1dba:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1dbe:	2100      	movs	r1, #0
 80a1dc0:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1dc2:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a1dc4:	f001 f81e 	bl	80a2e04 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a1dc8:	b002      	add	sp, #8
 80a1dca:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1dce:	b003      	add	sp, #12
 80a1dd0:	4770      	bx	lr
	...

080a1dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a1dd8:	f04f 0814 	mov.w	r8, #20
 80a1ddc:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a1de0:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1de2:	464c      	mov	r4, r9
 80a1de4:	fb08 f505 	mul.w	r5, r8, r5
 80a1de8:	9300      	str	r3, [sp, #0]
 80a1dea:	10ab      	asrs	r3, r5, #2
 80a1dec:	4d17      	ldr	r5, [pc, #92]	; (80a1e4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1dee:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1df0:	2d00      	cmp	r5, #0
 80a1df2:	dd23      	ble.n	80a1e3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a1df4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a1df6:	fb08 f006 	mul.w	r0, r8, r6
 80a1dfa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1dfe:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a1e02:	463a      	mov	r2, r7
 80a1e04:	455f      	cmp	r7, fp
 80a1e06:	bf28      	it	cs
 80a1e08:	465a      	movcs	r2, fp
 80a1e0a:	5820      	ldr	r0, [r4, r0]
 80a1e0c:	9101      	str	r1, [sp, #4]
 80a1e0e:	f002 f94e 	bl	80a40ae <strncmp>
                if (cmp == 0) {
 80a1e12:	2301      	movs	r3, #1
 80a1e14:	9901      	ldr	r1, [sp, #4]
 80a1e16:	b978      	cbnz	r0, 80a1e38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a1e18:	455f      	cmp	r7, fp
 80a1e1a:	d103      	bne.n	80a1e24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1e1c:	9a00      	ldr	r2, [sp, #0]
 80a1e1e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1e20:	4635      	mov	r5, r6
 80a1e22:	e7e5      	b.n	80a1df0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a1e24:	bf8c      	ite	hi
 80a1e26:	2001      	movhi	r0, #1
 80a1e28:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1e2a:	2800      	cmp	r0, #0
 80a1e2c:	d0f8      	beq.n	80a1e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1e2e:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a1e30:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a1e34:	3e01      	subs	r6, #1
 80a1e36:	e7f3      	b.n	80a1e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a1e38:	0fc0      	lsrs	r0, r0, #31
 80a1e3a:	e7f6      	b.n	80a1e2a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a1e3c:	eba4 0409 	sub.w	r4, r4, r9
}
 80a1e40:	4802      	ldr	r0, [pc, #8]	; (80a1e4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1e42:	10a4      	asrs	r4, r4, #2
 80a1e44:	4360      	muls	r0, r4
 80a1e46:	b003      	add	sp, #12
 80a1e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e4c:	cccccccd 	.word	0xcccccccd

080a1e50 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a1e52:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a1e54:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1e56:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a1e58:	b303      	cbz	r3, 80a1e9c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a1e5a:	b1f9      	cbz	r1, 80a1e9c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1e5c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1e5e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a1e62:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a1e64:	a903      	add	r1, sp, #12
 80a1e66:	a801      	add	r0, sp, #4
 80a1e68:	f7ff ff2a 	bl	80a1cc0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1e6c:	4601      	mov	r1, r0
 80a1e6e:	b1a8      	cbz	r0, 80a1e9c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1e70:	f10d 030b 	add.w	r3, sp, #11
 80a1e74:	4620      	mov	r0, r4
 80a1e76:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a1e78:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1e7c:	f7ff ffaa 	bl	80a1dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1e80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1e84:	b153      	cbz	r3, 80a1e9c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a1e86:	2314      	movs	r3, #20
 80a1e88:	6824      	ldr	r4, [r4, #0]
 80a1e8a:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1e8e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1e92:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1e94:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1e96:	bfa8      	it	ge
 80a1e98:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a1e9a:	e7e3      	b.n	80a1e64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1e9c:	4630      	mov	r0, r6
 80a1e9e:	b004      	add	sp, #16
 80a1ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1ea4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1ea4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1ea6:	4c0a      	ldr	r4, [pc, #40]	; (80a1ed0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1ea8:	7823      	ldrb	r3, [r4, #0]
 80a1eaa:	f3bf 8f5b 	dmb	ish
 80a1eae:	07db      	lsls	r3, r3, #31
 80a1eb0:	d40b      	bmi.n	80a1eca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1eb2:	4620      	mov	r0, r4
 80a1eb4:	f7fe f900 	bl	80a00b8 <__cxa_guard_acquire>
 80a1eb8:	b138      	cbz	r0, 80a1eca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1eba:	4620      	mov	r0, r4
 80a1ebc:	f7fe f901 	bl	80a00c2 <__cxa_guard_release>
 80a1ec0:	4a04      	ldr	r2, [pc, #16]	; (80a1ed4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1ec2:	4905      	ldr	r1, [pc, #20]	; (80a1ed8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1ec4:	4805      	ldr	r0, [pc, #20]	; (80a1edc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1ec6:	f001 ff19 	bl	80a3cfc <__aeabi_atexit>
}
 80a1eca:	4804      	ldr	r0, [pc, #16]	; (80a1edc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1ecc:	bd10      	pop	{r4, pc}
 80a1ece:	bf00      	nop
 80a1ed0:	20000d14 	.word	0x20000d14
 80a1ed4:	20000084 	.word	0x20000084
 80a1ed8:	080a1cbd 	.word	0x080a1cbd
 80a1edc:	20000014 	.word	0x20000014

080a1ee0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1ee0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1ee2:	4c0a      	ldr	r4, [pc, #40]	; (80a1f0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1ee4:	7823      	ldrb	r3, [r4, #0]
 80a1ee6:	f3bf 8f5b 	dmb	ish
 80a1eea:	07db      	lsls	r3, r3, #31
 80a1eec:	d40b      	bmi.n	80a1f06 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	f7fe f8e2 	bl	80a00b8 <__cxa_guard_acquire>
 80a1ef4:	b138      	cbz	r0, 80a1f06 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	f7fe f8e3 	bl	80a00c2 <__cxa_guard_release>
 80a1efc:	4a04      	ldr	r2, [pc, #16]	; (80a1f10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1efe:	4905      	ldr	r1, [pc, #20]	; (80a1f14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1f00:	4805      	ldr	r0, [pc, #20]	; (80a1f18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1f02:	f001 fefb 	bl	80a3cfc <__aeabi_atexit>
    return &factory;
}
 80a1f06:	4804      	ldr	r0, [pc, #16]	; (80a1f18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1f08:	bd10      	pop	{r4, pc}
 80a1f0a:	bf00      	nop
 80a1f0c:	20000d18 	.word	0x20000d18
 80a1f10:	20000084 	.word	0x20000084
 80a1f14:	080a1cbb 	.word	0x080a1cbb
 80a1f18:	20000018 	.word	0x20000018

080a1f1c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1f1c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1f1e:	2500      	movs	r5, #0
 80a1f20:	4604      	mov	r4, r0
 80a1f22:	e9c0 5500 	strd	r5, r5, [r0]
 80a1f26:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a1f2a:	6085      	str	r5, [r0, #8]
 80a1f2c:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1f2e:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1f32:	f7fe fec3 	bl	80a0cbc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1f36:	f7ff ffb5 	bl	80a1ea4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1f3a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1f3c:	f7ff ffd0 	bl	80a1ee0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1f40:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1f42:	6220      	str	r0, [r4, #32]
}
 80a1f44:	4620      	mov	r0, r4
 80a1f46:	bd38      	pop	{r3, r4, r5, pc}

080a1f48 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1f48:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1f4a:	4c0b      	ldr	r4, [pc, #44]	; (80a1f78 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1f4c:	7823      	ldrb	r3, [r4, #0]
 80a1f4e:	f3bf 8f5b 	dmb	ish
 80a1f52:	07db      	lsls	r3, r3, #31
 80a1f54:	d40e      	bmi.n	80a1f74 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1f56:	4620      	mov	r0, r4
 80a1f58:	f7fe f8ae 	bl	80a00b8 <__cxa_guard_acquire>
 80a1f5c:	b150      	cbz	r0, 80a1f74 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1f5e:	4807      	ldr	r0, [pc, #28]	; (80a1f7c <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1f60:	f7ff ffdc 	bl	80a1f1c <_ZN5spark10LogManagerC1Ev>
 80a1f64:	4620      	mov	r0, r4
 80a1f66:	f7fe f8ac 	bl	80a00c2 <__cxa_guard_release>
 80a1f6a:	4a05      	ldr	r2, [pc, #20]	; (80a1f80 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a1f6c:	4905      	ldr	r1, [pc, #20]	; (80a1f84 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a1f6e:	4803      	ldr	r0, [pc, #12]	; (80a1f7c <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1f70:	f001 fec4 	bl	80a3cfc <__aeabi_atexit>
    return &mgr;
}
 80a1f74:	4801      	ldr	r0, [pc, #4]	; (80a1f7c <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1f76:	bd10      	pop	{r4, pc}
 80a1f78:	20000d10 	.word	0x20000d10
 80a1f7c:	20000d20 	.word	0x20000d20
 80a1f80:	20000084 	.word	0x20000084
 80a1f84:	080a23fb 	.word	0x080a23fb

080a1f88 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1f88:	2300      	movs	r3, #0
 80a1f8a:	4a02      	ldr	r2, [pc, #8]	; (80a1f94 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1f8c:	4902      	ldr	r1, [pc, #8]	; (80a1f98 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1f8e:	4803      	ldr	r0, [pc, #12]	; (80a1f9c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1f90:	f7ff b836 	b.w	80a1000 <log_set_callbacks>
 80a1f94:	080a22d9 	.word	0x080a22d9
 80a1f98:	080a2265 	.word	0x080a2265
 80a1f9c:	080a21e5 	.word	0x080a21e5

080a1fa0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1fa0:	2300      	movs	r3, #0
 80a1fa2:	461a      	mov	r2, r3
 80a1fa4:	4619      	mov	r1, r3
 80a1fa6:	4618      	mov	r0, r3
 80a1fa8:	f7ff b82a 	b.w	80a1000 <log_set_callbacks>

080a1fac <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1fae:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1fb0:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1fb2:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1fb6:	a801      	add	r0, sp, #4
 80a1fb8:	9300      	str	r3, [sp, #0]
 80a1fba:	f7ff f982 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1fbe:	466a      	mov	r2, sp
 80a1fc0:	4629      	mov	r1, r5
 80a1fc2:	4620      	mov	r0, r4
 80a1fc4:	f7ff fd0a 	bl	80a19dc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1fc8:	a801      	add	r0, sp, #4
 80a1fca:	f7fe f94b 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1fce:	4620      	mov	r0, r4
 80a1fd0:	b003      	add	sp, #12
 80a1fd2:	bd30      	pop	{r4, r5, pc}

080a1fd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1fd6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1fd8:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1fda:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1fde:	a801      	add	r0, sp, #4
 80a1fe0:	9300      	str	r3, [sp, #0]
 80a1fe2:	f7ff f96e 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1fe6:	466a      	mov	r2, sp
 80a1fe8:	4629      	mov	r1, r5
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	f7ff fd72 	bl	80a1ad4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1ff0:	a801      	add	r0, sp, #4
 80a1ff2:	f7fe f937 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1ff6:	4620      	mov	r0, r4
 80a1ff8:	b003      	add	sp, #12
 80a1ffa:	bd30      	pop	{r4, r5, pc}

080a1ffc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1ffe:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a2000:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2002:	f851 3b04 	ldr.w	r3, [r1], #4
 80a2006:	a801      	add	r0, sp, #4
 80a2008:	9300      	str	r3, [sp, #0]
 80a200a:	f7ff f95a 	bl	80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a200e:	466a      	mov	r2, sp
 80a2010:	4629      	mov	r1, r5
 80a2012:	4620      	mov	r0, r4
 80a2014:	f7ff fd3a 	bl	80a1a8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a2018:	a801      	add	r0, sp, #4
 80a201a:	f7fe f923 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a201e:	4620      	mov	r0, r4
 80a2020:	b003      	add	sp, #12
 80a2022:	bd30      	pop	{r4, r5, pc}

080a2024 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a2024:	b570      	push	{r4, r5, r6, lr}
 80a2026:	b08a      	sub	sp, #40	; 0x28
 80a2028:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a202a:	4601      	mov	r1, r0
 80a202c:	a804      	add	r0, sp, #16
 80a202e:	f7ff ffd1 	bl	80a1fd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a2032:	4e14      	ldr	r6, [pc, #80]	; (80a2084 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a2034:	a804      	add	r0, sp, #16
 80a2036:	f7ff fd65 	bl	80a1b04 <_ZN5spark18JSONObjectIterator4nextEv>
 80a203a:	b1e8      	cbz	r0, 80a2078 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a203c:	4668      	mov	r0, sp
 80a203e:	a904      	add	r1, sp, #16
 80a2040:	f7ff ffdc 	bl	80a1ffc <_ZNK5spark18JSONObjectIterator4nameEv>
 80a2044:	4631      	mov	r1, r6
 80a2046:	9802      	ldr	r0, [sp, #8]
 80a2048:	f7ff fe61 	bl	80a1d0e <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a204c:	4604      	mov	r4, r0
 80a204e:	b110      	cbz	r0, 80a2056 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a2050:	1e2c      	subs	r4, r5, #0
 80a2052:	bf18      	it	ne
 80a2054:	2401      	movne	r4, #1
 80a2056:	a801      	add	r0, sp, #4
 80a2058:	f7fe f904 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a205c:	2c00      	cmp	r4, #0
 80a205e:	d0e9      	beq.n	80a2034 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a2060:	4668      	mov	r0, sp
 80a2062:	a904      	add	r1, sp, #16
 80a2064:	f7ff ffa2 	bl	80a1fac <_ZNK5spark18JSONObjectIterator5valueEv>
 80a2068:	4668      	mov	r0, sp
 80a206a:	f7ff fcee 	bl	80a1a4a <_ZNK5spark9JSONValue5toIntEv>
 80a206e:	6028      	str	r0, [r5, #0]
 80a2070:	a801      	add	r0, sp, #4
 80a2072:	f7fe f8f7 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2076:	e7dd      	b.n	80a2034 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a2078:	a805      	add	r0, sp, #20
 80a207a:	f7fe f8f3 	bl	80a0264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a207e:	b00a      	add	sp, #40	; 0x28
 80a2080:	bd70      	pop	{r4, r5, r6, pc}
 80a2082:	bf00      	nop
 80a2084:	080a4530 	.word	0x080a4530

080a2088 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a2088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a208a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a208c:	4919      	ldr	r1, [pc, #100]	; (80a20f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a208e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a2090:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a2092:	f001 ffd6 	bl	80a4042 <strcmp>
 80a2096:	b948      	cbnz	r0, 80a20ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a2098:	f001 fbdc 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a209c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a20a0:	f001 fbba 	bl	80a3818 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a20a4:	f001 fbd6 	bl	80a3854 <_Z16_fetch_usbserialv>
}
 80a20a8:	b003      	add	sp, #12
 80a20aa:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	4912      	ldr	r1, [pc, #72]	; (80a20f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a20b0:	f001 ffc7 	bl	80a4042 <strcmp>
 80a20b4:	b940      	cbnz	r0, 80a20c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a20b6:	f001 fc0b 	bl	80a38d0 <_Z17_fetch_usbserial1v>
 80a20ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a20be:	f001 fbab 	bl	80a3818 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a20c2:	f001 fc05 	bl	80a38d0 <_Z17_fetch_usbserial1v>
 80a20c6:	e7ef      	b.n	80a20a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a20c8:	4620      	mov	r0, r4
 80a20ca:	490c      	ldr	r1, [pc, #48]	; (80a20fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a20cc:	f001 ffb9 	bl	80a4042 <strcmp>
 80a20d0:	b970      	cbnz	r0, 80a20f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a20d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a20d6:	a901      	add	r1, sp, #4
 80a20d8:	4628      	mov	r0, r5
        int baud = 9600;
 80a20da:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a20dc:	f7ff ffa2 	bl	80a2024 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a20e0:	f001 fb22 	bl	80a3728 <_Z22__fetch_global_Serial1v>
 80a20e4:	9901      	ldr	r1, [sp, #4]
 80a20e6:	f001 fb19 	bl	80a371c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a20ea:	f001 fb1d 	bl	80a3728 <_Z22__fetch_global_Serial1v>
 80a20ee:	e7db      	b.n	80a20a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a20f0:	2000      	movs	r0, #0
 80a20f2:	e7d9      	b.n	80a20a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a20f4:	080a4535 	.word	0x080a4535
 80a20f8:	080a453c 	.word	0x080a453c
 80a20fc:	080a453f 	.word	0x080a453f

080a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2100:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a2102:	2614      	movs	r6, #20
 80a2104:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2108:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a210a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a210e:	42ae      	cmp	r6, r5
 80a2110:	d005      	beq.n	80a211e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a2112:	f105 0008 	add.w	r0, r5, #8
 80a2116:	f7ff fff3 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a211a:	3514      	adds	r5, #20
 80a211c:	e7f7      	b.n	80a210e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a211e:	6820      	ldr	r0, [r4, #0]
 80a2120:	f7ff f83a 	bl	80a1198 <free>
}
 80a2124:	4620      	mov	r0, r4
 80a2126:	bd70      	pop	{r4, r5, r6, pc}

080a2128 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2128:	b570      	push	{r4, r5, r6, lr}
 80a212a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a212c:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a2130:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a2134:	42ae      	cmp	r6, r5
 80a2136:	d004      	beq.n	80a2142 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a2138:	4628      	mov	r0, r5
 80a213a:	f000 feb8 	bl	80a2eae <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a213e:	3510      	adds	r5, #16
 80a2140:	e7f8      	b.n	80a2134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a2142:	6820      	ldr	r0, [r4, #0]
 80a2144:	f7ff f828 	bl	80a1198 <free>
}
 80a2148:	4620      	mov	r0, r4
 80a214a:	bd70      	pop	{r4, r5, r6, pc}

080a214c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a214c:	b510      	push	{r4, lr}
 80a214e:	4604      	mov	r4, r0
 80a2150:	300c      	adds	r0, #12
 80a2152:	f7ff ffd5 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2156:	4620      	mov	r0, r4
 80a2158:	f7ff ffe6 	bl	80a2128 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a215c:	4620      	mov	r0, r4
 80a215e:	bd10      	pop	{r4, pc}

080a2160 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a2160:	b510      	push	{r4, lr}
 80a2162:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a2164:	4b03      	ldr	r3, [pc, #12]	; (80a2174 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a2166:	f840 3b04 	str.w	r3, [r0], #4
 80a216a:	f7ff ffef 	bl	80a214c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a216e:	4620      	mov	r0, r4
 80a2170:	bd10      	pop	{r4, pc}
 80a2172:	bf00      	nop
 80a2174:	080a442c 	.word	0x080a442c

080a2178 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a2178:	b510      	push	{r4, lr}
 80a217a:	4604      	mov	r4, r0
 80a217c:	f7ff fff0 	bl	80a2160 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2180:	4620      	mov	r0, r4
 80a2182:	2124      	movs	r1, #36	; 0x24
 80a2184:	f001 fdbf 	bl	80a3d06 <_ZdlPvj>
 80a2188:	4620      	mov	r0, r4
 80a218a:	bd10      	pop	{r4, pc}

080a218c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a218c:	b510      	push	{r4, lr}
 80a218e:	4604      	mov	r4, r0
 80a2190:	4b02      	ldr	r3, [pc, #8]	; (80a219c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a2192:	6003      	str	r3, [r0, #0]
 80a2194:	f7ff ffe4 	bl	80a2160 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2198:	4620      	mov	r0, r4
 80a219a:	bd10      	pop	{r4, pc}
 80a219c:	080a45dc 	.word	0x080a45dc

080a21a0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a21a0:	b510      	push	{r4, lr}
 80a21a2:	4604      	mov	r4, r0
 80a21a4:	f7ff fff2 	bl	80a218c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	2124      	movs	r1, #36	; 0x24
 80a21ac:	f001 fdab 	bl	80a3d06 <_ZdlPvj>
 80a21b0:	4620      	mov	r0, r4
 80a21b2:	bd10      	pop	{r4, pc}

080a21b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a21b4:	2200      	movs	r2, #0
 80a21b6:	e9c0 2200 	strd	r2, r2, [r0]
 80a21ba:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a21bc:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a21be:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21c0:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a21c2:	6004      	str	r4, [r0, #0]
 80a21c4:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21c6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a21c8:	6044      	str	r4, [r0, #4]
 80a21ca:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21cc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a21ce:	6084      	str	r4, [r0, #8]
}
 80a21d0:	bd10      	pop	{r4, pc}

080a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a21d2:	b510      	push	{r4, lr}
 80a21d4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a21d6:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a21d8:	6818      	ldr	r0, [r3, #0]
 80a21da:	f7fe fd87 	bl	80a0cec <os_mutex_recursive_unlock>
 80a21de:	4620      	mov	r0, r4
 80a21e0:	bd10      	pop	{r4, pc}
	...

080a21e4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a21e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a21e8:	b087      	sub	sp, #28
 80a21ea:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a21ec:	4b1c      	ldr	r3, [pc, #112]	; (80a2260 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a21ee:	4680      	mov	r8, r0
 80a21f0:	685b      	ldr	r3, [r3, #4]
 80a21f2:	4689      	mov	r9, r1
 80a21f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a21f8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a21fa:	b96b      	cbnz	r3, 80a2218 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a21fc:	f7ff fea4 	bl	80a1f48 <_ZN5spark10LogManager8instanceEv>
 80a2200:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2202:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2206:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2208:	9305      	str	r3, [sp, #20]
 80a220a:	f7fe fd67 	bl	80a0cdc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a220e:	7b23      	ldrb	r3, [r4, #12]
 80a2210:	b12b      	cbz	r3, 80a221e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a2212:	a805      	add	r0, sp, #20
 80a2214:	f7ff ffdd 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a2218:	b007      	add	sp, #28
 80a221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a221e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a2220:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a2224:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a2226:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a222a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a222e:	45aa      	cmp	sl, r5
 80a2230:	d012      	beq.n	80a2258 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a2232:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a2236:	4631      	mov	r1, r6
 80a2238:	1d38      	adds	r0, r7, #4
 80a223a:	f7ff fe09 	bl	80a1e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a223e:	4581      	cmp	r9, r0
 80a2240:	d3f5      	bcc.n	80a222e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a2242:	9a03      	ldr	r2, [sp, #12]
 80a2244:	683b      	ldr	r3, [r7, #0]
 80a2246:	9200      	str	r2, [sp, #0]
 80a2248:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a224c:	464a      	mov	r2, r9
 80a224e:	4633      	mov	r3, r6
 80a2250:	4641      	mov	r1, r8
 80a2252:	4638      	mov	r0, r7
 80a2254:	47d8      	blx	fp
 80a2256:	e7ea      	b.n	80a222e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a2258:	2300      	movs	r3, #0
 80a225a:	7323      	strb	r3, [r4, #12]
 80a225c:	e7d9      	b.n	80a2212 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a225e:	bf00      	nop
 80a2260:	e000ed00 	.word	0xe000ed00

080a2264 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a2264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2268:	469b      	mov	fp, r3
 80a226a:	4b1a      	ldr	r3, [pc, #104]	; (80a22d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a226c:	4680      	mov	r8, r0
 80a226e:	685b      	ldr	r3, [r3, #4]
 80a2270:	4689      	mov	r9, r1
 80a2272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a2276:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a2278:	b96b      	cbnz	r3, 80a2296 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a227a:	f7ff fe65 	bl	80a1f48 <_ZN5spark10LogManager8instanceEv>
 80a227e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2280:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2284:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a2286:	9301      	str	r3, [sp, #4]
 80a2288:	f7fe fd28 	bl	80a0cdc <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a228c:	7b23      	ldrb	r3, [r4, #12]
 80a228e:	b12b      	cbz	r3, 80a229c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a2290:	a801      	add	r0, sp, #4
 80a2292:	f7ff ff9e 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a2296:	b003      	add	sp, #12
 80a2298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a229c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a229e:	b2f6      	uxtb	r6, r6
 80a22a0:	7323      	strb	r3, [r4, #12]
 80a22a2:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a22a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a22aa:	4555      	cmp	r5, sl
 80a22ac:	d00e      	beq.n	80a22cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a22ae:	f855 7b04 	ldr.w	r7, [r5], #4
 80a22b2:	4659      	mov	r1, fp
 80a22b4:	1d38      	adds	r0, r7, #4
 80a22b6:	f7ff fdcb 	bl	80a1e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a22ba:	4286      	cmp	r6, r0
 80a22bc:	d3f5      	bcc.n	80a22aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a22be:	683b      	ldr	r3, [r7, #0]
 80a22c0:	464a      	mov	r2, r9
 80a22c2:	4641      	mov	r1, r8
 80a22c4:	4638      	mov	r0, r7
 80a22c6:	68db      	ldr	r3, [r3, #12]
 80a22c8:	4798      	blx	r3
 80a22ca:	e7ee      	b.n	80a22aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a22cc:	2300      	movs	r3, #0
 80a22ce:	7323      	strb	r3, [r4, #12]
 80a22d0:	e7de      	b.n	80a2290 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a22d2:	bf00      	nop
 80a22d4:	e000ed00 	.word	0xe000ed00

080a22d8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a22d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a22dc:	4b16      	ldr	r3, [pc, #88]	; (80a2338 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a22de:	4605      	mov	r5, r0
 80a22e0:	685b      	ldr	r3, [r3, #4]
 80a22e2:	460f      	mov	r7, r1
 80a22e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a22e8:	bb1b      	cbnz	r3, 80a2332 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a22ea:	f7ff fe2d 	bl	80a1f48 <_ZN5spark10LogManager8instanceEv>
 80a22ee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a22f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a22f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a22f6:	9301      	str	r3, [sp, #4]
 80a22f8:	f7fe fcf0 	bl	80a0cdc <os_mutex_recursive_lock>
 80a22fc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a2300:	2446      	movs	r4, #70	; 0x46
 80a2302:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a2306:	45b0      	cmp	r8, r6
 80a2308:	d109      	bne.n	80a231e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a230a:	a801      	add	r0, sp, #4
 80a230c:	f7ff ff61 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a2310:	42a5      	cmp	r5, r4
 80a2312:	bfb4      	ite	lt
 80a2314:	2000      	movlt	r0, #0
 80a2316:	2001      	movge	r0, #1
}
 80a2318:	b002      	add	sp, #8
 80a231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a231e:	f856 0b04 	ldr.w	r0, [r6], #4
 80a2322:	4639      	mov	r1, r7
 80a2324:	3004      	adds	r0, #4
 80a2326:	f7ff fd93 	bl	80a1e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a232a:	4284      	cmp	r4, r0
 80a232c:	bfa8      	it	ge
 80a232e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a2330:	e7e9      	b.n	80a2306 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a2332:	2000      	movs	r0, #0
 80a2334:	e7f0      	b.n	80a2318 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a2336:	bf00      	nop
 80a2338:	e000ed00 	.word	0xe000ed00

080a233c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a233c:	460b      	mov	r3, r1
 80a233e:	b570      	push	{r4, r5, r6, lr}
 80a2340:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a2342:	c805      	ldmia	r0, {r0, r2}
 80a2344:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a2348:	4282      	cmp	r2, r0
 80a234a:	d007      	beq.n	80a235c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a234c:	4601      	mov	r1, r0
            if (*p == value) {
 80a234e:	681d      	ldr	r5, [r3, #0]
 80a2350:	f851 6b04 	ldr.w	r6, [r1], #4
 80a2354:	42ae      	cmp	r6, r5
 80a2356:	d003      	beq.n	80a2360 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a2358:	4608      	mov	r0, r1
 80a235a:	e7f5      	b.n	80a2348 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a235c:	2000      	movs	r0, #0
}
 80a235e:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a2360:	1a52      	subs	r2, r2, r1
 80a2362:	f001 fe11 	bl	80a3f88 <memmove>
    --size_;
 80a2366:	6863      	ldr	r3, [r4, #4]
    return true;
 80a2368:	2001      	movs	r0, #1
    --size_;
 80a236a:	3b01      	subs	r3, #1
 80a236c:	6063      	str	r3, [r4, #4]
    return true;
 80a236e:	e7f6      	b.n	80a235e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a2370 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a2370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2372:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a2374:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a2378:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a237a:	9101      	str	r1, [sp, #4]
 80a237c:	9303      	str	r3, [sp, #12]
 80a237e:	f7fe fcad 	bl	80a0cdc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a2382:	4620      	mov	r0, r4
 80a2384:	a901      	add	r1, sp, #4
 80a2386:	f7ff ffd9 	bl	80a233c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a238a:	b118      	cbz	r0, 80a2394 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a238c:	6863      	ldr	r3, [r4, #4]
 80a238e:	b90b      	cbnz	r3, 80a2394 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a2390:	f7ff fe06 	bl	80a1fa0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2394:	a803      	add	r0, sp, #12
 80a2396:	f7ff ff1c 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a239a:	b004      	add	sp, #16
 80a239c:	bd10      	pop	{r4, pc}

080a239e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a239e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a23a0:	b570      	push	{r4, r5, r6, lr}
 80a23a2:	4604      	mov	r4, r0
 80a23a4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a23a8:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a23ac:	42ae      	cmp	r6, r5
 80a23ae:	d015      	beq.n	80a23dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a23b0:	4620      	mov	r0, r4
 80a23b2:	f105 0110 	add.w	r1, r5, #16
 80a23b6:	f7ff ffc1 	bl	80a233c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a23ba:	6863      	ldr	r3, [r4, #4]
 80a23bc:	b90b      	cbnz	r3, 80a23c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a23be:	f7ff fdef 	bl	80a1fa0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a23c2:	69e0      	ldr	r0, [r4, #28]
 80a23c4:	6929      	ldr	r1, [r5, #16]
 80a23c6:	6803      	ldr	r3, [r0, #0]
 80a23c8:	68db      	ldr	r3, [r3, #12]
 80a23ca:	4798      	blx	r3
        if (h.stream) {
 80a23cc:	6969      	ldr	r1, [r5, #20]
 80a23ce:	b119      	cbz	r1, 80a23d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a23d0:	6a20      	ldr	r0, [r4, #32]
 80a23d2:	6803      	ldr	r3, [r0, #0]
 80a23d4:	68db      	ldr	r3, [r3, #12]
 80a23d6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a23d8:	3518      	adds	r5, #24
 80a23da:	e7e7      	b.n	80a23ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a23dc:	2618      	movs	r6, #24
 80a23de:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a23e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a23e6:	42ae      	cmp	r6, r5
 80a23e8:	d004      	beq.n	80a23f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a23ea:	4628      	mov	r0, r5
 80a23ec:	f000 fd5f 	bl	80a2eae <_ZN6StringD1Ev>
 80a23f0:	3518      	adds	r5, #24
 80a23f2:	e7f8      	b.n	80a23e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a23f4:	2300      	movs	r3, #0
 80a23f6:	6163      	str	r3, [r4, #20]
}
 80a23f8:	bd70      	pop	{r4, r5, r6, pc}

080a23fa <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a23fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a23fc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a23fe:	f7ff fdcf 	bl	80a1fa0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2402:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a2406:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2408:	9301      	str	r3, [sp, #4]
 80a240a:	f7fe fc67 	bl	80a0cdc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a240e:	4620      	mov	r0, r4
 80a2410:	f7ff ffc5 	bl	80a239e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a2414:	a801      	add	r0, sp, #4
 80a2416:	f7ff fedc 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a241a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a241c:	b108      	cbz	r0, 80a2422 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a241e:	f7fe fc55 	bl	80a0ccc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a2422:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a2426:	2618      	movs	r6, #24
 80a2428:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a242c:	42ae      	cmp	r6, r5
 80a242e:	d004      	beq.n	80a243a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a2430:	4628      	mov	r0, r5
 80a2432:	f000 fd3c 	bl	80a2eae <_ZN6StringD1Ev>
 80a2436:	3518      	adds	r5, #24
 80a2438:	e7f8      	b.n	80a242c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a243a:	6920      	ldr	r0, [r4, #16]
 80a243c:	f7fe feac 	bl	80a1198 <free>
 80a2440:	6820      	ldr	r0, [r4, #0]
 80a2442:	f7fe fea9 	bl	80a1198 <free>
}
 80a2446:	4620      	mov	r0, r4
 80a2448:	b002      	add	sp, #8
 80a244a:	bd70      	pop	{r4, r5, r6, pc}

080a244c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a244c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a244e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2450:	4606      	mov	r6, r0
 80a2452:	460c      	mov	r4, r1
 80a2454:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a2456:	d927      	bls.n	80a24a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a2458:	4290      	cmp	r0, r2
 80a245a:	d226      	bcs.n	80a24aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a245c:	2600      	movs	r6, #0
            --end;
 80a245e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a2462:	1a6c      	subs	r4, r5, r1
 80a2464:	f1a1 0714 	sub.w	r7, r1, #20
 80a2468:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a246a:	42af      	cmp	r7, r5
 80a246c:	d03d      	beq.n	80a24ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a246e:	b1a4      	cbz	r4, 80a249a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a2470:	682b      	ldr	r3, [r5, #0]
 80a2472:	6023      	str	r3, [r4, #0]
 80a2474:	88ab      	ldrh	r3, [r5, #4]
 80a2476:	80a3      	strh	r3, [r4, #4]
 80a2478:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a247c:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a2480:	6126      	str	r6, [r4, #16]
 80a2482:	80e3      	strh	r3, [r4, #6]
 80a2484:	68ab      	ldr	r3, [r5, #8]
 80a2486:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2488:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a248a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a248c:	68ea      	ldr	r2, [r5, #12]
 80a248e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2490:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2492:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2494:	692a      	ldr	r2, [r5, #16]
 80a2496:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2498:	612b      	str	r3, [r5, #16]
 80a249a:	f105 0008 	add.w	r0, r5, #8
 80a249e:	f7ff fe2f 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a24a2:	3d14      	subs	r5, #20
 80a24a4:	3c14      	subs	r4, #20
 80a24a6:	e7e0      	b.n	80a246a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a24a8:	d01f      	beq.n	80a24ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a24aa:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a24ac:	42ac      	cmp	r4, r5
 80a24ae:	d01c      	beq.n	80a24ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a24b0:	b1a6      	cbz	r6, 80a24dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a24b2:	6823      	ldr	r3, [r4, #0]
 80a24b4:	6033      	str	r3, [r6, #0]
 80a24b6:	88a3      	ldrh	r3, [r4, #4]
 80a24b8:	80b3      	strh	r3, [r6, #4]
 80a24ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a24be:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a24c2:	6137      	str	r7, [r6, #16]
 80a24c4:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a24c6:	68a3      	ldr	r3, [r4, #8]
 80a24c8:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24ca:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a24cc:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a24ce:	68e2      	ldr	r2, [r4, #12]
 80a24d0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24d2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a24d4:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a24d6:	6922      	ldr	r2, [r4, #16]
 80a24d8:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24da:	6123      	str	r3, [r4, #16]
 80a24dc:	f104 0008 	add.w	r0, r4, #8
 80a24e0:	f7ff fe0e 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a24e4:	3414      	adds	r4, #20
 80a24e6:	3614      	adds	r6, #20
 80a24e8:	e7e0      	b.n	80a24ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a24ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a24ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a24ee:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a24f2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a24f4:	4604      	mov	r4, r0
 80a24f6:	460e      	mov	r6, r1
 80a24f8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a24fa:	db0d      	blt.n	80a2518 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a24fc:	3501      	adds	r5, #1
        if (n > 0) {
 80a24fe:	2d00      	cmp	r5, #0
 80a2500:	6800      	ldr	r0, [r0, #0]
 80a2502:	dd04      	ble.n	80a250e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a2504:	00a9      	lsls	r1, r5, #2
 80a2506:	f7fe fe4f 	bl	80a11a8 <realloc>
            if (!d) {
 80a250a:	b918      	cbnz	r0, 80a2514 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a250c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a250e:	f7fe fe43 	bl	80a1198 <free>
        T* d = nullptr;
 80a2512:	2000      	movs	r0, #0
        data_ = d;
 80a2514:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a2516:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a2518:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a251a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a251c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a2520:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a2522:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a2526:	1d08      	adds	r0, r1, #4
 80a2528:	f001 fd2e 	bl	80a3f88 <memmove>
    new(p) T(std::move(value));
 80a252c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a2530:	6863      	ldr	r3, [r4, #4]
    return true;
 80a2532:	2001      	movs	r0, #1
    ++size_;
 80a2534:	3301      	adds	r3, #1
 80a2536:	6063      	str	r3, [r4, #4]
    return true;
 80a2538:	e7e8      	b.n	80a250c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a253a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a253a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a253c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a253e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2542:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a2544:	460d      	mov	r5, r1
 80a2546:	9301      	str	r3, [sp, #4]
 80a2548:	f7fe fbc8 	bl	80a0cdc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a254c:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a2550:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a2554:	4283      	cmp	r3, r0
 80a2556:	461a      	mov	r2, r3
 80a2558:	d00a      	beq.n	80a2570 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a255a:	6812      	ldr	r2, [r2, #0]
 80a255c:	3304      	adds	r3, #4
 80a255e:	42aa      	cmp	r2, r5
 80a2560:	d1f8      	bne.n	80a2554 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a2562:	a801      	add	r0, sp, #4
 80a2564:	f7ff fe35 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a2568:	2500      	movs	r5, #0
}
 80a256a:	4628      	mov	r0, r5
 80a256c:	b003      	add	sp, #12
 80a256e:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a2570:	462a      	mov	r2, r5
 80a2572:	4620      	mov	r0, r4
 80a2574:	f7ff ffba 	bl	80a24ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a2578:	4605      	mov	r5, r0
 80a257a:	2800      	cmp	r0, #0
 80a257c:	d0f1      	beq.n	80a2562 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a257e:	6863      	ldr	r3, [r4, #4]
 80a2580:	2b01      	cmp	r3, #1
 80a2582:	d101      	bne.n	80a2588 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a2584:	f7ff fd00 	bl	80a1f88 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a2588:	a801      	add	r0, sp, #4
 80a258a:	f7ff fe22 	bl	80a21d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a258e:	e7ec      	b.n	80a256a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a2590 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a2590:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a2592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2594:	4604      	mov	r4, r0
 80a2596:	460d      	mov	r5, r1
 80a2598:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a259a:	d914      	bls.n	80a25c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a259c:	4290      	cmp	r0, r2
 80a259e:	d213      	bcs.n	80a25c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a25a0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a25a4:	1a75      	subs	r5, r6, r1
 80a25a6:	f1a1 0710 	sub.w	r7, r1, #16
 80a25aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a25ac:	42b7      	cmp	r7, r6
 80a25ae:	d018      	beq.n	80a25e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a25b0:	b11c      	cbz	r4, 80a25ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a25b2:	4631      	mov	r1, r6
 80a25b4:	4620      	mov	r0, r4
 80a25b6:	f000 fcf4 	bl	80a2fa2 <_ZN6StringC1EOS_>
                end->~T();
 80a25ba:	4630      	mov	r0, r6
 80a25bc:	f000 fc77 	bl	80a2eae <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a25c0:	3e10      	subs	r6, #16
 80a25c2:	3c10      	subs	r4, #16
 80a25c4:	e7f2      	b.n	80a25ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a25c6:	d00c      	beq.n	80a25e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a25c8:	42b5      	cmp	r5, r6
 80a25ca:	d00a      	beq.n	80a25e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a25cc:	b11c      	cbz	r4, 80a25d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a25ce:	4629      	mov	r1, r5
 80a25d0:	4620      	mov	r0, r4
 80a25d2:	f000 fce6 	bl	80a2fa2 <_ZN6StringC1EOS_>
                p->~T();
 80a25d6:	4628      	mov	r0, r5
 80a25d8:	f000 fc69 	bl	80a2eae <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a25dc:	3510      	adds	r5, #16
 80a25de:	3410      	adds	r4, #16
 80a25e0:	e7f2      	b.n	80a25c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a25e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a25e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a25e4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a25e6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a25e8:	4605      	mov	r5, r0
        if (n > 0) {
 80a25ea:	dd11      	ble.n	80a2610 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a25ec:	0130      	lsls	r0, r6, #4
 80a25ee:	f7fe fdcb 	bl	80a1188 <malloc>
            if (!d) {
 80a25f2:	4604      	mov	r4, r0
 80a25f4:	b158      	cbz	r0, 80a260e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a25f6:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a25fa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a25fe:	f7ff ffc7 	bl	80a2590 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a2602:	6828      	ldr	r0, [r5, #0]
 80a2604:	f7fe fdc8 	bl	80a1198 <free>
        return true;
 80a2608:	2001      	movs	r0, #1
        data_ = d;
 80a260a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a260c:	60ae      	str	r6, [r5, #8]
    }
 80a260e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a2610:	2400      	movs	r4, #0
 80a2612:	e7f6      	b.n	80a2602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a2614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2618:	4691      	mov	r9, r2
        capacity_(0) {
 80a261a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a261c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a261e:	b097      	sub	sp, #92	; 0x5c
 80a2620:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a2622:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2626:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a2628:	4299      	cmp	r1, r3
        capacity_(0) {
 80a262a:	e9c0 3300 	strd	r3, r3, [r0]
 80a262e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a2632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a2636:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a263a:	7602      	strb	r2, [r0, #24]
 80a263c:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a263e:	dc23      	bgt.n	80a2688 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a2640:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a2644:	2314      	movs	r3, #20
 80a2646:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a264a:	42af      	cmp	r7, r5
 80a264c:	d03b      	beq.n	80a26c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a264e:	4629      	mov	r1, r5
 80a2650:	a80d      	add	r0, sp, #52	; 0x34
 80a2652:	f000 fca6 	bl	80a2fa2 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a2656:	a90d      	add	r1, sp, #52	; 0x34
 80a2658:	a811      	add	r0, sp, #68	; 0x44
 80a265a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a265c:	f000 fca1 	bl	80a2fa2 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2660:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a2664:	4299      	cmp	r1, r3
 80a2666:	da1b      	bge.n	80a26a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a2668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a266a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a266c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a2670:	4631      	mov	r1, r6
 80a2672:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a2676:	f106 0010 	add.w	r0, r6, #16
 80a267a:	f7ff ff89 	bl	80a2590 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a267e:	b9ee      	cbnz	r6, 80a26bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a2680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2682:	3301      	adds	r3, #1
 80a2684:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a2686:	e011      	b.n	80a26ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a2688:	a80a      	add	r0, sp, #40	; 0x28
 80a268a:	f7ff ffab 	bl	80a25e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a268e:	2800      	cmp	r0, #0
 80a2690:	d1d6      	bne.n	80a2640 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a2692:	a80a      	add	r0, sp, #40	; 0x28
 80a2694:	f7ff fd48 	bl	80a2128 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a2698:	4620      	mov	r0, r4
 80a269a:	b017      	add	sp, #92	; 0x5c
 80a269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a26a0:	3101      	adds	r1, #1
 80a26a2:	a80a      	add	r0, sp, #40	; 0x28
 80a26a4:	f7ff ff9e 	bl	80a25e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a26a8:	2800      	cmp	r0, #0
 80a26aa:	d1dd      	bne.n	80a2668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a26ac:	a811      	add	r0, sp, #68	; 0x44
 80a26ae:	f000 fbfe 	bl	80a2eae <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a26b2:	a80d      	add	r0, sp, #52	; 0x34
 80a26b4:	f000 fbfb 	bl	80a2eae <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a26b8:	3514      	adds	r5, #20
 80a26ba:	e7c6      	b.n	80a264a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a26bc:	4630      	mov	r0, r6
 80a26be:	a911      	add	r1, sp, #68	; 0x44
 80a26c0:	f000 fc6f 	bl	80a2fa2 <_ZN6StringC1EOS_>
 80a26c4:	e7dc      	b.n	80a2680 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a26c6:	2600      	movs	r6, #0
 80a26c8:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a26cc:	4637      	mov	r7, r6
 80a26ce:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a26d2:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a26d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a26d8:	429e      	cmp	r6, r3
 80a26da:	f280 8097 	bge.w	80a280c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a26de:	0133      	lsls	r3, r6, #4
 80a26e0:	58d3      	ldr	r3, [r2, r3]
 80a26e2:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a26e4:	b90b      	cbnz	r3, 80a26ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a26e6:	3601      	adds	r6, #1
 80a26e8:	e7f4      	b.n	80a26d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a26ea:	fb0a f306 	mul.w	r3, sl, r6
 80a26ee:	9709      	str	r7, [sp, #36]	; 0x24
 80a26f0:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a26f2:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a26f4:	a909      	add	r1, sp, #36	; 0x24
 80a26f6:	a808      	add	r0, sp, #32
 80a26f8:	f7ff fae2 	bl	80a1cc0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a26fc:	4683      	mov	fp, r0
 80a26fe:	2800      	cmp	r0, #0
 80a2700:	d0f1      	beq.n	80a26e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2702:	4601      	mov	r1, r0
 80a2704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2706:	4628      	mov	r0, r5
 80a2708:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a270c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2710:	f7ff fb60 	bl	80a1dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2714:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a2718:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a271a:	f1b8 0f00 	cmp.w	r8, #0
 80a271e:	d166      	bne.n	80a27ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a2720:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a2724:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a2728:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a2730:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a2734:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a2738:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a273c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a2740:	4293      	cmp	r3, r2
 80a2742:	db1a      	blt.n	80a277a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a2744:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a2748:	f1bb 0f00 	cmp.w	fp, #0
 80a274c:	dd4a      	ble.n	80a27e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a274e:	fb0a f00b 	mul.w	r0, sl, fp
 80a2752:	f7fe fd19 	bl	80a1188 <malloc>
            if (!d) {
 80a2756:	9004      	str	r0, [sp, #16]
 80a2758:	2800      	cmp	r0, #0
 80a275a:	d045      	beq.n	80a27e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a275c:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a2760:	fb0a 1202 	mla	r2, sl, r2, r1
 80a2764:	f7ff fe72 	bl	80a244c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a2768:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a276a:	6828      	ldr	r0, [r5, #0]
 80a276c:	9304      	str	r3, [sp, #16]
 80a276e:	f7fe fd13 	bl	80a1198 <free>
        data_ = d;
 80a2772:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a2774:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a2778:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a277a:	9b01      	ldr	r3, [sp, #4]
 80a277c:	f8d5 b000 	ldr.w	fp, [r5]
 80a2780:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a2784:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a2786:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a278a:	f101 0014 	add.w	r0, r1, #20
 80a278e:	fb0a b202 	mla	r2, sl, r2, fp
 80a2792:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a2794:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a2796:	f7ff fe59 	bl	80a244c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a279a:	9904      	ldr	r1, [sp, #16]
 80a279c:	b1a9      	cbz	r1, 80a27ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a279e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a27a0:	9b05      	ldr	r3, [sp, #20]
 80a27a2:	f84b 2003 	str.w	r2, [fp, r3]
 80a27a6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a27aa:	808b      	strh	r3, [r1, #4]
 80a27ac:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a27b0:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a27b4:	610f      	str	r7, [r1, #16]
 80a27b6:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a27b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a27ba:	608b      	str	r3, [r1, #8]
 80a27bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a27be:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a27c0:	60cb      	str	r3, [r1, #12]
 80a27c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a27c4:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a27c6:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a27c8:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a27ca:	686b      	ldr	r3, [r5, #4]
 80a27cc:	3301      	adds	r3, #1
 80a27ce:	606b      	str	r3, [r5, #4]
 80a27d0:	a813      	add	r0, sp, #76	; 0x4c
 80a27d2:	f7ff fc95 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a27d6:	f1b8 0f00 	cmp.w	r8, #0
 80a27da:	d008      	beq.n	80a27ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a27dc:	a80d      	add	r0, sp, #52	; 0x34
 80a27de:	f7ff fc8f 	bl	80a2100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a27e2:	e756      	b.n	80a2692 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a27e4:	4643      	mov	r3, r8
 80a27e6:	e7c0      	b.n	80a276a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a27e8:	f04f 0801 	mov.w	r8, #1
 80a27ec:	e7f0      	b.n	80a27d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a27ee:	9b01      	ldr	r3, [sp, #4]
 80a27f0:	682d      	ldr	r5, [r5, #0]
 80a27f2:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a27f6:	9b08      	ldr	r3, [sp, #32]
 80a27f8:	781b      	ldrb	r3, [r3, #0]
 80a27fa:	b92b      	cbnz	r3, 80a2808 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a27fc:	f8d9 3000 	ldr.w	r3, [r9]
 80a2800:	9a02      	ldr	r2, [sp, #8]
 80a2802:	4413      	add	r3, r2
 80a2804:	7c1b      	ldrb	r3, [r3, #16]
 80a2806:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a2808:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a280a:	e773      	b.n	80a26f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a280c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a280e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2810:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2812:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2814:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2816:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a2818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a281a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a281c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a281e:	60a2      	str	r2, [r4, #8]
 80a2820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a2822:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2824:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2826:	60e2      	str	r2, [r4, #12]
 80a2828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a282a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a282c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a282e:	6122      	str	r2, [r4, #16]
 80a2830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a2832:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a2834:	9b03      	ldr	r3, [sp, #12]
 80a2836:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a2838:	6162      	str	r2, [r4, #20]
 80a283a:	7623      	strb	r3, [r4, #24]
 80a283c:	e7ce      	b.n	80a27dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a2840 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a2842:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2844:	460e      	mov	r6, r1
 80a2846:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a2848:	4b08      	ldr	r3, [pc, #32]	; (80a286c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a284a:	4611      	mov	r1, r2
 80a284c:	f845 3b04 	str.w	r3, [r5], #4
 80a2850:	a801      	add	r0, sp, #4
 80a2852:	f7fd ff3f 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2856:	4631      	mov	r1, r6
 80a2858:	aa01      	add	r2, sp, #4
 80a285a:	4628      	mov	r0, r5
 80a285c:	f7ff feda 	bl	80a2614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2860:	a801      	add	r0, sp, #4
 80a2862:	f7fd fd21 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a2866:	4620      	mov	r0, r4
 80a2868:	b004      	add	sp, #16
 80a286a:	bd70      	pop	{r4, r5, r6, pc}
 80a286c:	080a442c 	.word	0x080a442c

080a2870 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a2870:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2872:	460f      	mov	r7, r1
 80a2874:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2876:	4638      	mov	r0, r7
 80a2878:	4925      	ldr	r1, [pc, #148]	; (80a2910 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a287a:	4616      	mov	r6, r2
 80a287c:	461d      	mov	r5, r3
 80a287e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2880:	f001 fbdf 	bl	80a4042 <strcmp>
 80a2884:	bb00      	cbnz	r0, 80a28c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a2886:	b1e4      	cbz	r4, 80a28c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a2888:	4629      	mov	r1, r5
 80a288a:	4668      	mov	r0, sp
 80a288c:	f7ff fc92 	bl	80a21b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2890:	2024      	movs	r0, #36	; 0x24
 80a2892:	4920      	ldr	r1, [pc, #128]	; (80a2914 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a2894:	f001 fa39 	bl	80a3d0a <_ZnwjRKSt9nothrow_t>
 80a2898:	4605      	mov	r5, r0
 80a289a:	b170      	cbz	r0, 80a28ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a289c:	4669      	mov	r1, sp
 80a289e:	a803      	add	r0, sp, #12
 80a28a0:	f7fd ff18 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a28a4:	4631      	mov	r1, r6
 80a28a6:	aa03      	add	r2, sp, #12
 80a28a8:	4628      	mov	r0, r5
 80a28aa:	f7ff ffc9 	bl	80a2840 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a28ae:	a803      	add	r0, sp, #12
 80a28b0:	f7fd fcfa 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a28b4:	4b18      	ldr	r3, [pc, #96]	; (80a2918 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a28b6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a28b8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a28ba:	4668      	mov	r0, sp
 80a28bc:	f7fd fcf4 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a28c0:	462c      	mov	r4, r5
}
 80a28c2:	4620      	mov	r0, r4
 80a28c4:	b007      	add	sp, #28
 80a28c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a28c8:	4638      	mov	r0, r7
 80a28ca:	4914      	ldr	r1, [pc, #80]	; (80a291c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a28cc:	f001 fbb9 	bl	80a4042 <strcmp>
 80a28d0:	b9e0      	cbnz	r0, 80a290c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a28d2:	2c00      	cmp	r4, #0
 80a28d4:	d0f5      	beq.n	80a28c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a28d6:	4629      	mov	r1, r5
 80a28d8:	4668      	mov	r0, sp
 80a28da:	f7ff fc6b 	bl	80a21b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a28de:	2024      	movs	r0, #36	; 0x24
 80a28e0:	490c      	ldr	r1, [pc, #48]	; (80a2914 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a28e2:	f001 fa12 	bl	80a3d0a <_ZnwjRKSt9nothrow_t>
 80a28e6:	4605      	mov	r5, r0
 80a28e8:	2800      	cmp	r0, #0
 80a28ea:	d0e6      	beq.n	80a28ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a28ec:	4669      	mov	r1, sp
 80a28ee:	a803      	add	r0, sp, #12
 80a28f0:	f7fd fef0 	bl	80a06d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a28f4:	4631      	mov	r1, r6
 80a28f6:	aa03      	add	r2, sp, #12
 80a28f8:	4628      	mov	r0, r5
 80a28fa:	f7ff ffa1 	bl	80a2840 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a28fe:	a803      	add	r0, sp, #12
 80a2900:	f7fd fcd2 	bl	80a02a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a2904:	4b06      	ldr	r3, [pc, #24]	; (80a2920 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a2906:	622c      	str	r4, [r5, #32]
 80a2908:	602b      	str	r3, [r5, #0]
}
 80a290a:	e7d6      	b.n	80a28ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a290c:	2400      	movs	r4, #0
 80a290e:	e7d8      	b.n	80a28c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a2910:	080a4547 	.word	0x080a4547
 80a2914:	080a479c 	.word	0x080a479c
 80a2918:	080a45dc 	.word	0x080a45dc
 80a291c:	080a454b 	.word	0x080a454b
 80a2920:	080a45c4 	.word	0x080a45c4

080a2924 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a2924:	4b01      	ldr	r3, [pc, #4]	; (80a292c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2926:	4a02      	ldr	r2, [pc, #8]	; (80a2930 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2928:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a292a:	4770      	bx	lr
 80a292c:	20000d1c 	.word	0x20000d1c
 80a2930:	080a455c 	.word	0x080a455c

080a2934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2938:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a293a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a293e:	4604      	mov	r4, r0
 80a2940:	460e      	mov	r6, r1
 80a2942:	4617      	mov	r7, r2
 80a2944:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a2946:	f000 ff85 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a294a:	4581      	cmp	r9, r0
 80a294c:	d04d      	beq.n	80a29ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a294e:	792b      	ldrb	r3, [r5, #4]
 80a2950:	0719      	lsls	r1, r3, #28
 80a2952:	d504      	bpl.n	80a295e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a2954:	4620      	mov	r0, r4
 80a2956:	696a      	ldr	r2, [r5, #20]
 80a2958:	4954      	ldr	r1, [pc, #336]	; (80a2aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a295a:	f7ff fa2b 	bl	80a1db4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a295e:	f1b8 0f00 	cmp.w	r8, #0
 80a2962:	d00d      	beq.n	80a2980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a2964:	215b      	movs	r1, #91	; 0x5b
 80a2966:	4620      	mov	r0, r4
 80a2968:	f7ff fa18 	bl	80a1d9c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a296c:	4641      	mov	r1, r8
 80a296e:	4620      	mov	r0, r4
 80a2970:	f7ff fa06 	bl	80a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a2974:	6823      	ldr	r3, [r4, #0]
 80a2976:	2202      	movs	r2, #2
 80a2978:	4620      	mov	r0, r4
 80a297a:	68db      	ldr	r3, [r3, #12]
 80a297c:	494c      	ldr	r1, [pc, #304]	; (80a2ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a297e:	4798      	blx	r3
    if (attr.has_file) {
 80a2980:	792b      	ldrb	r3, [r5, #4]
 80a2982:	07da      	lsls	r2, r3, #31
 80a2984:	d524      	bpl.n	80a29d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a2986:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a298a:	212f      	movs	r1, #47	; 0x2f
 80a298c:	4640      	mov	r0, r8
 80a298e:	f001 fba0 	bl	80a40d2 <strrchr>
    if (s1) {
 80a2992:	b108      	cbz	r0, 80a2998 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a2994:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a2998:	4641      	mov	r1, r8
 80a299a:	4620      	mov	r0, r4
 80a299c:	f7ff f9f0 	bl	80a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a29a0:	792b      	ldrb	r3, [r5, #4]
 80a29a2:	079b      	lsls	r3, r3, #30
 80a29a4:	d508      	bpl.n	80a29b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a29a6:	213a      	movs	r1, #58	; 0x3a
 80a29a8:	4620      	mov	r0, r4
 80a29aa:	f7ff f9f7 	bl	80a1d9c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a29ae:	4620      	mov	r0, r4
 80a29b0:	68ea      	ldr	r2, [r5, #12]
 80a29b2:	4940      	ldr	r1, [pc, #256]	; (80a2ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a29b4:	f7ff f9fe 	bl	80a1db4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a29b8:	792a      	ldrb	r2, [r5, #4]
 80a29ba:	6823      	ldr	r3, [r4, #0]
 80a29bc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a29c0:	4620      	mov	r0, r4
            write(", ", 2);
 80a29c2:	f04f 0202 	mov.w	r2, #2
 80a29c6:	68db      	ldr	r3, [r3, #12]
 80a29c8:	bf14      	ite	ne
 80a29ca:	493b      	ldrne	r1, [pc, #236]	; (80a2ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a29cc:	493b      	ldreq	r1, [pc, #236]	; (80a2abc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a29ce:	4798      	blx	r3
    if (attr.has_function) {
 80a29d0:	792b      	ldrb	r3, [r5, #4]
 80a29d2:	0758      	lsls	r0, r3, #29
 80a29d4:	d51d      	bpl.n	80a2a12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a29d6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a29d8:	460b      	mov	r3, r1
 80a29da:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a29dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a29e0:	b160      	cbz	r0, 80a29fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a29e2:	2820      	cmp	r0, #32
 80a29e4:	d108      	bne.n	80a29f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a29e6:	4619      	mov	r1, r3
 80a29e8:	e7f7      	b.n	80a29da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a29ea:	4835      	ldr	r0, [pc, #212]	; (80a2ac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a29ec:	f000 f967 	bl	80a2cbe <_ZN5spark12NetworkClass9listeningEv>
 80a29f0:	2800      	cmp	r0, #0
 80a29f2:	d0ac      	beq.n	80a294e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a29f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a29f8:	2828      	cmp	r0, #40	; 0x28
 80a29fa:	d1ee      	bne.n	80a29da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a29fc:	6823      	ldr	r3, [r4, #0]
 80a29fe:	1a52      	subs	r2, r2, r1
 80a2a00:	4620      	mov	r0, r4
 80a2a02:	68db      	ldr	r3, [r3, #12]
 80a2a04:	4798      	blx	r3
        write("(): ", 4);
 80a2a06:	6823      	ldr	r3, [r4, #0]
 80a2a08:	2204      	movs	r2, #4
 80a2a0a:	4620      	mov	r0, r4
 80a2a0c:	68db      	ldr	r3, [r3, #12]
 80a2a0e:	492d      	ldr	r1, [pc, #180]	; (80a2ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a2a10:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a2a12:	2100      	movs	r1, #0
 80a2a14:	4638      	mov	r0, r7
 80a2a16:	f7fe faeb 	bl	80a0ff0 <log_level_name>
 80a2a1a:	4601      	mov	r1, r0
    write(s);
 80a2a1c:	4620      	mov	r0, r4
 80a2a1e:	f7ff f9af 	bl	80a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a2a22:	6823      	ldr	r3, [r4, #0]
 80a2a24:	2202      	movs	r2, #2
 80a2a26:	4620      	mov	r0, r4
 80a2a28:	68db      	ldr	r3, [r3, #12]
 80a2a2a:	4924      	ldr	r1, [pc, #144]	; (80a2abc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2a2c:	4798      	blx	r3
    if (msg) {
 80a2a2e:	b11e      	cbz	r6, 80a2a38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a2a30:	4631      	mov	r1, r6
 80a2a32:	4620      	mov	r0, r4
 80a2a34:	f7ff f9a4 	bl	80a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a2a38:	792b      	ldrb	r3, [r5, #4]
 80a2a3a:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a2a3e:	d02c      	beq.n	80a2a9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a2a40:	6823      	ldr	r3, [r4, #0]
 80a2a42:	4921      	ldr	r1, [pc, #132]	; (80a2ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a2a44:	68db      	ldr	r3, [r3, #12]
 80a2a46:	2202      	movs	r2, #2
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	4798      	blx	r3
        if (attr.has_code) {
 80a2a4c:	792b      	ldrb	r3, [r5, #4]
 80a2a4e:	06d9      	lsls	r1, r3, #27
 80a2a50:	d50a      	bpl.n	80a2a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a2a52:	6823      	ldr	r3, [r4, #0]
 80a2a54:	2207      	movs	r2, #7
 80a2a56:	4620      	mov	r0, r4
 80a2a58:	491c      	ldr	r1, [pc, #112]	; (80a2acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a2a5a:	68db      	ldr	r3, [r3, #12]
 80a2a5c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	69aa      	ldr	r2, [r5, #24]
 80a2a62:	491b      	ldr	r1, [pc, #108]	; (80a2ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a2a64:	f7ff f9a6 	bl	80a1db4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a2a68:	792b      	ldrb	r3, [r5, #4]
 80a2a6a:	069a      	lsls	r2, r3, #26
 80a2a6c:	d511      	bpl.n	80a2a92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a2a6e:	06db      	lsls	r3, r3, #27
 80a2a70:	d505      	bpl.n	80a2a7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a2a72:	6823      	ldr	r3, [r4, #0]
 80a2a74:	2202      	movs	r2, #2
 80a2a76:	4620      	mov	r0, r4
 80a2a78:	68db      	ldr	r3, [r3, #12]
 80a2a7a:	490f      	ldr	r1, [pc, #60]	; (80a2ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a2a7c:	4798      	blx	r3
            write("details = ", 10);
 80a2a7e:	6823      	ldr	r3, [r4, #0]
 80a2a80:	4620      	mov	r0, r4
 80a2a82:	4914      	ldr	r1, [pc, #80]	; (80a2ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2a84:	220a      	movs	r2, #10
 80a2a86:	68db      	ldr	r3, [r3, #12]
 80a2a88:	4798      	blx	r3
            write(attr.details);
 80a2a8a:	4620      	mov	r0, r4
 80a2a8c:	69e9      	ldr	r1, [r5, #28]
 80a2a8e:	f7ff f977 	bl	80a1d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a2a92:	215d      	movs	r1, #93	; 0x5d
 80a2a94:	4620      	mov	r0, r4
 80a2a96:	f7ff f981 	bl	80a1d9c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a2a9a:	6823      	ldr	r3, [r4, #0]
 80a2a9c:	4620      	mov	r0, r4
}
 80a2a9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a2aa2:	2202      	movs	r2, #2
 80a2aa4:	68db      	ldr	r3, [r3, #12]
 80a2aa6:	490c      	ldr	r1, [pc, #48]	; (80a2ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a2aa8:	4718      	bx	r3
 80a2aaa:	bf00      	nop
 80a2aac:	080a4560 	.word	0x080a4560
 80a2ab0:	080a4567 	.word	0x080a4567
 80a2ab4:	080a4524 	.word	0x080a4524
 80a2ab8:	080a456a 	.word	0x080a456a
 80a2abc:	080a456f 	.word	0x080a456f
 80a2ac0:	20000d48 	.word	0x20000d48
 80a2ac4:	080a456d 	.word	0x080a456d
 80a2ac8:	080a4572 	.word	0x080a4572
 80a2acc:	080a4575 	.word	0x080a4575
 80a2ad0:	080a457d 	.word	0x080a457d
 80a2ad4:	080a4580 	.word	0x080a4580
 80a2ad8:	080a44a7 	.word	0x080a44a7

080a2adc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2ae0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a2ae2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2ae6:	4605      	mov	r5, r0
 80a2ae8:	460f      	mov	r7, r1
 80a2aea:	4690      	mov	r8, r2
 80a2aec:	461e      	mov	r6, r3
 80a2aee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2af0:	f000 feb0 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a2af4:	4581      	cmp	r9, r0
 80a2af6:	d105      	bne.n	80a2b04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a2af8:	4849      	ldr	r0, [pc, #292]	; (80a2c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a2afa:	f000 f8e0 	bl	80a2cbe <_ZN5spark12NetworkClass9listeningEv>
 80a2afe:	2800      	cmp	r0, #0
 80a2b00:	f040 808a 	bne.w	80a2c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a2b04:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a2b08:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a2b0a:	4a46      	ldr	r2, [pc, #280]	; (80a2c24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a2b0c:	a801      	add	r0, sp, #4
 80a2b0e:	9201      	str	r2, [sp, #4]
 80a2b10:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a2b12:	f88d 9008 	strb.w	r9, [sp, #8]
 80a2b16:	f7ff f81e 	bl	80a1b56 <_ZN5spark10JSONWriter11beginObjectEv>
 80a2b1a:	4649      	mov	r1, r9
 80a2b1c:	4640      	mov	r0, r8
 80a2b1e:	f7fe fa67 	bl	80a0ff0 <log_level_name>
 80a2b22:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a2b24:	4940      	ldr	r1, [pc, #256]	; (80a2c28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a2b26:	2201      	movs	r2, #1
 80a2b28:	a801      	add	r0, sp, #4
 80a2b2a:	f7ff f89d 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2b2e:	4641      	mov	r1, r8
 80a2b30:	f7ff f919 	bl	80a1d66 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a2b34:	b13f      	cbz	r7, 80a2b46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a2b36:	493d      	ldr	r1, [pc, #244]	; (80a2c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a2b38:	2201      	movs	r2, #1
 80a2b3a:	a801      	add	r0, sp, #4
 80a2b3c:	f7ff f894 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2b40:	4639      	mov	r1, r7
 80a2b42:	f7ff f910 	bl	80a1d66 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a2b46:	b13e      	cbz	r6, 80a2b58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a2b48:	4939      	ldr	r1, [pc, #228]	; (80a2c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a2b4a:	2201      	movs	r2, #1
 80a2b4c:	a801      	add	r0, sp, #4
 80a2b4e:	f7ff f88b 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2b52:	4631      	mov	r1, r6
 80a2b54:	f7ff f907 	bl	80a1d66 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a2b58:	7923      	ldrb	r3, [r4, #4]
 80a2b5a:	07df      	lsls	r7, r3, #31
 80a2b5c:	d50e      	bpl.n	80a2b7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a2b5e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a2b60:	212f      	movs	r1, #47	; 0x2f
 80a2b62:	4630      	mov	r0, r6
 80a2b64:	f001 fab5 	bl	80a40d2 <strrchr>
    if (s1) {
 80a2b68:	b100      	cbz	r0, 80a2b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a2b6a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a2b6c:	4931      	ldr	r1, [pc, #196]	; (80a2c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a2b6e:	2201      	movs	r2, #1
 80a2b70:	a801      	add	r0, sp, #4
 80a2b72:	f7ff f879 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2b76:	4631      	mov	r1, r6
 80a2b78:	f7ff f8f5 	bl	80a1d66 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a2b7c:	7923      	ldrb	r3, [r4, #4]
 80a2b7e:	079e      	lsls	r6, r3, #30
 80a2b80:	d507      	bpl.n	80a2b92 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2b82:	492d      	ldr	r1, [pc, #180]	; (80a2c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2b84:	2202      	movs	r2, #2
 80a2b86:	a801      	add	r0, sp, #4
 80a2b88:	f7ff f86e 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2b8c:	68e1      	ldr	r1, [r4, #12]
 80a2b8e:	f7fe ffef 	bl	80a1b70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a2b92:	7923      	ldrb	r3, [r4, #4]
 80a2b94:	0758      	lsls	r0, r3, #29
 80a2b96:	d514      	bpl.n	80a2bc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2b98:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a2b9a:	4633      	mov	r3, r6
 80a2b9c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a2b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2ba2:	b12a      	cbz	r2, 80a2bb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a2ba4:	2a20      	cmp	r2, #32
 80a2ba6:	d101      	bne.n	80a2bac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a2ba8:	461e      	mov	r6, r3
 80a2baa:	e7f7      	b.n	80a2b9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a2bac:	2a28      	cmp	r2, #40	; 0x28
 80a2bae:	d1f5      	bne.n	80a2b9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a2bb0:	2202      	movs	r2, #2
 80a2bb2:	4922      	ldr	r1, [pc, #136]	; (80a2c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2bb4:	a801      	add	r0, sp, #4
 80a2bb6:	f7ff f857 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2bba:	4631      	mov	r1, r6
 80a2bbc:	1bba      	subs	r2, r7, r6
 80a2bbe:	f7ff f862 	bl	80a1c86 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a2bc2:	7923      	ldrb	r3, [r4, #4]
 80a2bc4:	0719      	lsls	r1, r3, #28
 80a2bc6:	d507      	bpl.n	80a2bd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a2bc8:	491d      	ldr	r1, [pc, #116]	; (80a2c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a2bca:	2201      	movs	r2, #1
 80a2bcc:	a801      	add	r0, sp, #4
 80a2bce:	f7ff f84b 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2bd2:	6961      	ldr	r1, [r4, #20]
 80a2bd4:	f7fe ffde 	bl	80a1b94 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a2bd8:	7923      	ldrb	r3, [r4, #4]
 80a2bda:	06da      	lsls	r2, r3, #27
 80a2bdc:	d508      	bpl.n	80a2bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a2bde:	2204      	movs	r2, #4
 80a2be0:	4918      	ldr	r1, [pc, #96]	; (80a2c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a2be2:	eb0d 0002 	add.w	r0, sp, r2
 80a2be6:	f7ff f83f 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2bea:	69a1      	ldr	r1, [r4, #24]
 80a2bec:	f7fe ffc0 	bl	80a1b70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2bf0:	7923      	ldrb	r3, [r4, #4]
 80a2bf2:	069b      	lsls	r3, r3, #26
 80a2bf4:	d507      	bpl.n	80a2c06 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2bf6:	4914      	ldr	r1, [pc, #80]	; (80a2c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2bf8:	2206      	movs	r2, #6
 80a2bfa:	a801      	add	r0, sp, #4
 80a2bfc:	f7ff f834 	bl	80a1c68 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2c00:	69e1      	ldr	r1, [r4, #28]
 80a2c02:	f7ff f8b0 	bl	80a1d66 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2c06:	a801      	add	r0, sp, #4
 80a2c08:	f7fe ff8f 	bl	80a1b2a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2c0c:	6a28      	ldr	r0, [r5, #32]
 80a2c0e:	2202      	movs	r2, #2
 80a2c10:	6803      	ldr	r3, [r0, #0]
 80a2c12:	490e      	ldr	r1, [pc, #56]	; (80a2c4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2c14:	68db      	ldr	r3, [r3, #12]
 80a2c16:	4798      	blx	r3
}
 80a2c18:	b005      	add	sp, #20
 80a2c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2c1e:	bf00      	nop
 80a2c20:	20000d48 	.word	0x20000d48
 80a2c24:	080a45ac 	.word	0x080a45ac
 80a2c28:	080a453a 	.word	0x080a453a
 80a2c2c:	080a458b 	.word	0x080a458b
 80a2c30:	080a458d 	.word	0x080a458d
 80a2c34:	080a458f 	.word	0x080a458f
 80a2c38:	080a4591 	.word	0x080a4591
 80a2c3c:	080a4594 	.word	0x080a4594
 80a2c40:	080a4322 	.word	0x080a4322
 80a2c44:	080a4597 	.word	0x080a4597
 80a2c48:	080a459c 	.word	0x080a459c
 80a2c4c:	080a44a7 	.word	0x080a44a7

080a2c50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2c50:	2300      	movs	r3, #0
 80a2c52:	6840      	ldr	r0, [r0, #4]
 80a2c54:	461a      	mov	r2, r3
 80a2c56:	f7fe ba37 	b.w	80a10c8 <network_connect>

080a2c5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2c5a:	2200      	movs	r2, #0
 80a2c5c:	2102      	movs	r1, #2
 80a2c5e:	6840      	ldr	r0, [r0, #4]
 80a2c60:	f7fe ba42 	b.w	80a10e8 <network_disconnect>

080a2c64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2c64:	2200      	movs	r2, #0
 80a2c66:	6840      	ldr	r0, [r0, #4]
 80a2c68:	4611      	mov	r1, r2
 80a2c6a:	f7fe ba35 	b.w	80a10d8 <network_connecting>

080a2c6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2c6e:	2200      	movs	r2, #0
 80a2c70:	6840      	ldr	r0, [r0, #4]
 80a2c72:	4611      	mov	r1, r2
 80a2c74:	f7fe ba40 	b.w	80a10f8 <network_ready>

080a2c78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2c78:	2300      	movs	r3, #0
 80a2c7a:	6840      	ldr	r0, [r0, #4]
 80a2c7c:	461a      	mov	r2, r3
 80a2c7e:	4619      	mov	r1, r3
 80a2c80:	f7fe ba42 	b.w	80a1108 <network_on>

080a2c84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2c84:	2300      	movs	r3, #0
 80a2c86:	6840      	ldr	r0, [r0, #4]
 80a2c88:	461a      	mov	r2, r3
 80a2c8a:	4619      	mov	r1, r3
 80a2c8c:	f7fe ba44 	b.w	80a1118 <network_off>

080a2c90 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2c90:	2100      	movs	r1, #0
 80a2c92:	6840      	ldr	r0, [r0, #4]
 80a2c94:	f7fe ba68 	b.w	80a1168 <network_is_on>

080a2c98 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2c98:	2100      	movs	r1, #0
 80a2c9a:	6840      	ldr	r0, [r0, #4]
 80a2c9c:	f7fe ba6c 	b.w	80a1178 <network_is_off>

080a2ca0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2ca0:	2200      	movs	r2, #0
 80a2ca2:	6840      	ldr	r0, [r0, #4]
 80a2ca4:	f081 0101 	eor.w	r1, r1, #1
 80a2ca8:	f7fe ba3e 	b.w	80a1128 <network_listen>

080a2cac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2cac:	2200      	movs	r2, #0
 80a2cae:	6840      	ldr	r0, [r0, #4]
 80a2cb0:	f7fe ba4a 	b.w	80a1148 <network_set_listen_timeout>

080a2cb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2cb4:	2200      	movs	r2, #0
 80a2cb6:	6840      	ldr	r0, [r0, #4]
 80a2cb8:	4611      	mov	r1, r2
 80a2cba:	f7fe ba4d 	b.w	80a1158 <network_get_listen_timeout>

080a2cbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2cbe:	2200      	movs	r2, #0
 80a2cc0:	6840      	ldr	r0, [r0, #4]
 80a2cc2:	4611      	mov	r1, r2
 80a2cc4:	f7fe ba38 	b.w	80a1138 <network_listening>

080a2cc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2cc8:	b570      	push	{r4, r5, r6, lr}
 80a2cca:	4615      	mov	r5, r2
 80a2ccc:	b08e      	sub	sp, #56	; 0x38
 80a2cce:	4604      	mov	r4, r0
    IPAddress addr;
 80a2cd0:	a808      	add	r0, sp, #32
 80a2cd2:	f7fe fdbd 	bl	80a1850 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2cd6:	2211      	movs	r2, #17
 80a2cd8:	2100      	movs	r1, #0
 80a2cda:	a803      	add	r0, sp, #12
 80a2cdc:	f001 f96e 	bl	80a3fbc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2ce0:	2600      	movs	r6, #0
 80a2ce2:	4628      	mov	r0, r5
 80a2ce4:	f001 f9db 	bl	80a409e <strlen>
 80a2ce8:	4b0a      	ldr	r3, [pc, #40]	; (80a2d14 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2cea:	9600      	str	r6, [sp, #0]
 80a2cec:	b281      	uxth	r1, r0
 80a2cee:	685b      	ldr	r3, [r3, #4]
 80a2cf0:	4628      	mov	r0, r5
 80a2cf2:	aa03      	add	r2, sp, #12
 80a2cf4:	f7fe f964 	bl	80a0fc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2cf8:	b130      	cbz	r0, 80a2d08 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2cfa:	4631      	mov	r1, r6
 80a2cfc:	4620      	mov	r0, r4
 80a2cfe:	f7fe fdc7 	bl	80a1890 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2d02:	4620      	mov	r0, r4
 80a2d04:	b00e      	add	sp, #56	; 0x38
 80a2d06:	bd70      	pop	{r4, r5, r6, pc}
 80a2d08:	4620      	mov	r0, r4
 80a2d0a:	a903      	add	r1, sp, #12
 80a2d0c:	f7fe fdae 	bl	80a186c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2d10:	e7f7      	b.n	80a2d02 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2d12:	bf00      	nop
 80a2d14:	200011c8 	.word	0x200011c8

080a2d18 <_ZN5spark12NetworkClass4fromEm>:
}
 80a2d18:	4a03      	ldr	r2, [pc, #12]	; (80a2d28 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2d1a:	4b04      	ldr	r3, [pc, #16]	; (80a2d2c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2d1c:	2804      	cmp	r0, #4
 80a2d1e:	bf14      	ite	ne
 80a2d20:	4610      	movne	r0, r2
 80a2d22:	4618      	moveq	r0, r3
 80a2d24:	4770      	bx	lr
 80a2d26:	bf00      	nop
 80a2d28:	20000d48 	.word	0x20000d48
 80a2d2c:	200011c8 	.word	0x200011c8

080a2d30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2d30:	4b02      	ldr	r3, [pc, #8]	; (80a2d3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2d32:	4a03      	ldr	r2, [pc, #12]	; (80a2d40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2d34:	601a      	str	r2, [r3, #0]
 80a2d36:	2200      	movs	r2, #0
 80a2d38:	605a      	str	r2, [r3, #4]

} // spark
 80a2d3a:	4770      	bx	lr
 80a2d3c:	20000d48 	.word	0x20000d48
 80a2d40:	080a4624 	.word	0x080a4624

080a2d44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d46:	4606      	mov	r6, r0
 80a2d48:	460d      	mov	r5, r1
  size_t n = 0;
 80a2d4a:	2400      	movs	r4, #0
 80a2d4c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2d4e:	42bd      	cmp	r5, r7
 80a2d50:	d00c      	beq.n	80a2d6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2d52:	6833      	ldr	r3, [r6, #0]
 80a2d54:	4630      	mov	r0, r6
 80a2d56:	689b      	ldr	r3, [r3, #8]
 80a2d58:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2d5c:	4798      	blx	r3
     if (chunk>=0)
 80a2d5e:	1e03      	subs	r3, r0, #0
 80a2d60:	db01      	blt.n	80a2d66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2d62:	441c      	add	r4, r3
  while (size--) {
 80a2d64:	e7f3      	b.n	80a2d4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2d66:	2c00      	cmp	r4, #0
 80a2d68:	bf08      	it	eq
 80a2d6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2d6c:	4620      	mov	r0, r4
 80a2d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2d70:	b570      	push	{r4, r5, r6, lr}
 80a2d72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2d74:	460c      	mov	r4, r1
    }
 80a2d76:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2d78:	b149      	cbz	r1, 80a2d8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2d7a:	f001 f990 	bl	80a409e <strlen>
 80a2d7e:	682b      	ldr	r3, [r5, #0]
 80a2d80:	4602      	mov	r2, r0
 80a2d82:	4621      	mov	r1, r4
 80a2d84:	4628      	mov	r0, r5
    }
 80a2d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2d8a:	68db      	ldr	r3, [r3, #12]
 80a2d8c:	4718      	bx	r3
    }
 80a2d8e:	bd70      	pop	{r4, r5, r6, pc}

080a2d90 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2d90:	b508      	push	{r3, lr}
  return write(str);
 80a2d92:	f7ff ffed 	bl	80a2d70 <_ZN5Print5writeEPKc>
}
 80a2d96:	bd08      	pop	{r3, pc}

080a2d98 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2d98:	6803      	ldr	r3, [r0, #0]
 80a2d9a:	689b      	ldr	r3, [r3, #8]
 80a2d9c:	4718      	bx	r3

080a2d9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2d9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2da0:	210d      	movs	r1, #13
{
 80a2da2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2da4:	f7ff fff8 	bl	80a2d98 <_ZN5Print5printEc>
  n += print('\n');
 80a2da8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2daa:	4604      	mov	r4, r0
  n += print('\n');
 80a2dac:	4628      	mov	r0, r5
 80a2dae:	f7ff fff3 	bl	80a2d98 <_ZN5Print5printEc>
  return n;
}
 80a2db2:	4420      	add	r0, r4
 80a2db4:	bd38      	pop	{r3, r4, r5, pc}

080a2db6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2db6:	b538      	push	{r3, r4, r5, lr}
 80a2db8:	4605      	mov	r5, r0
  return write(str);
 80a2dba:	f7ff ffd9 	bl	80a2d70 <_ZN5Print5writeEPKc>
 80a2dbe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2dc0:	4628      	mov	r0, r5
 80a2dc2:	f7ff ffec 	bl	80a2d9e <_ZN5Print7printlnEv>
  return n;
}
 80a2dc6:	4420      	add	r0, r4
 80a2dc8:	bd38      	pop	{r3, r4, r5, pc}

080a2dca <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2dca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2dcc:	2a01      	cmp	r2, #1
 80a2dce:	bf98      	it	ls
 80a2dd0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2dd2:	b530      	push	{r4, r5, lr}
 80a2dd4:	b08b      	sub	sp, #44	; 0x2c
 80a2dd6:	460c      	mov	r4, r1
  *str = '\0';
 80a2dd8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2ddc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2dde:	4625      	mov	r5, r4
 80a2de0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2de4:	fb04 5312 	mls	r3, r4, r2, r5
 80a2de8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2dea:	2b09      	cmp	r3, #9
 80a2dec:	bf94      	ite	ls
 80a2dee:	3330      	addls	r3, #48	; 0x30
 80a2df0:	3337      	addhi	r3, #55	; 0x37
 80a2df2:	b2db      	uxtb	r3, r3
  } while(n);
 80a2df4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2df6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2dfa:	d9f0      	bls.n	80a2dde <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2dfc:	f7ff ffb8 	bl	80a2d70 <_ZN5Print5writeEPKc>
}
 80a2e00:	b00b      	add	sp, #44	; 0x2c
 80a2e02:	bd30      	pop	{r4, r5, pc}

080a2e04 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e08:	b086      	sub	sp, #24
 80a2e0a:	af00      	add	r7, sp, #0
 80a2e0c:	4605      	mov	r5, r0
 80a2e0e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2e10:	1d38      	adds	r0, r7, #4
 80a2e12:	2114      	movs	r1, #20
{
 80a2e14:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2e16:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2e18:	f7fe f9ce 	bl	80a11b8 <vsnprintf>

    if (n<bufsize)
 80a2e1c:	2813      	cmp	r0, #19
 80a2e1e:	d80e      	bhi.n	80a2e3e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2e20:	4628      	mov	r0, r5
 80a2e22:	1d39      	adds	r1, r7, #4
 80a2e24:	f7ff ffa4 	bl	80a2d70 <_ZN5Print5writeEPKc>
 80a2e28:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2e2a:	b11e      	cbz	r6, 80a2e34 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2e2c:	4628      	mov	r0, r5
 80a2e2e:	f7ff ffb6 	bl	80a2d9e <_ZN5Print7printlnEv>
 80a2e32:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2e34:	4620      	mov	r0, r4
 80a2e36:	3718      	adds	r7, #24
 80a2e38:	46bd      	mov	sp, r7
 80a2e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2e3e:	f100 0308 	add.w	r3, r0, #8
 80a2e42:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2e46:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2e48:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2e4c:	4622      	mov	r2, r4
 80a2e4e:	1c41      	adds	r1, r0, #1
 80a2e50:	683b      	ldr	r3, [r7, #0]
 80a2e52:	4668      	mov	r0, sp
 80a2e54:	f7fe f9b0 	bl	80a11b8 <vsnprintf>
  return write(str);
 80a2e58:	4669      	mov	r1, sp
 80a2e5a:	4628      	mov	r0, r5
 80a2e5c:	f7ff ff88 	bl	80a2d70 <_ZN5Print5writeEPKc>
 80a2e60:	4604      	mov	r4, r0
 80a2e62:	46c5      	mov	sp, r8
 80a2e64:	e7e1      	b.n	80a2e2a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2e66 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2e66:	b510      	push	{r4, lr}
 80a2e68:	4604      	mov	r4, r0
 80a2e6a:	f7fe f9ea 	bl	80a1242 <_ZNSt14_Function_baseD1Ev>
 80a2e6e:	4620      	mov	r0, r4
 80a2e70:	bd10      	pop	{r4, pc}
	...

080a2e74 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2e74:	2300      	movs	r3, #0
 80a2e76:	4803      	ldr	r0, [pc, #12]	; (80a2e84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2e78:	4a03      	ldr	r2, [pc, #12]	; (80a2e88 <_GLOBAL__sub_I_RGB+0x14>)
 80a2e7a:	4904      	ldr	r1, [pc, #16]	; (80a2e8c <_GLOBAL__sub_I_RGB+0x18>)
 80a2e7c:	6083      	str	r3, [r0, #8]
 80a2e7e:	f000 bf3d 	b.w	80a3cfc <__aeabi_atexit>
 80a2e82:	bf00      	nop
 80a2e84:	20000d50 	.word	0x20000d50
 80a2e88:	20000084 	.word	0x20000084
 80a2e8c:	080a2e67 	.word	0x080a2e67

080a2e90 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2e90:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2e92:	2600      	movs	r6, #0
 80a2e94:	4604      	mov	r4, r0
 80a2e96:	460d      	mov	r5, r1
 80a2e98:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2e9c:	f7fd ff0e 	bl	80a0cbc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2ea0:	4628      	mov	r0, r5
    _spi = spi;
 80a2ea2:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2ea4:	f7fd ffe4 	bl	80a0e70 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2ea8:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2eaa:	6066      	str	r6, [r4, #4]
}
 80a2eac:	bd70      	pop	{r4, r5, r6, pc}

080a2eae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2eae:	b510      	push	{r4, lr}
 80a2eb0:	4604      	mov	r4, r0
{
	free(buffer);
 80a2eb2:	6800      	ldr	r0, [r0, #0]
 80a2eb4:	f7fe f970 	bl	80a1198 <free>
}
 80a2eb8:	4620      	mov	r0, r4
 80a2eba:	bd10      	pop	{r4, pc}

080a2ebc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2ebc:	b510      	push	{r4, lr}
 80a2ebe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2ec0:	6800      	ldr	r0, [r0, #0]
 80a2ec2:	b108      	cbz	r0, 80a2ec8 <_ZN6String10invalidateEv+0xc>
 80a2ec4:	f7fe f968 	bl	80a1198 <free>
	buffer = NULL;
 80a2ec8:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2eca:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2ece:	6023      	str	r3, [r4, #0]
}
 80a2ed0:	bd10      	pop	{r4, pc}

080a2ed2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2ed2:	b538      	push	{r3, r4, r5, lr}
 80a2ed4:	4604      	mov	r4, r0
 80a2ed6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2ed8:	6800      	ldr	r0, [r0, #0]
 80a2eda:	3101      	adds	r1, #1
 80a2edc:	f7fe f964 	bl	80a11a8 <realloc>
	if (newbuffer) {
 80a2ee0:	b110      	cbz	r0, 80a2ee8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2ee2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2ee6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2ee8:	bd38      	pop	{r3, r4, r5, pc}

080a2eea <_ZN6String7reserveEj>:
{
 80a2eea:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2eec:	6803      	ldr	r3, [r0, #0]
{
 80a2eee:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2ef0:	b123      	cbz	r3, 80a2efc <_ZN6String7reserveEj+0x12>
 80a2ef2:	6843      	ldr	r3, [r0, #4]
 80a2ef4:	428b      	cmp	r3, r1
 80a2ef6:	d301      	bcc.n	80a2efc <_ZN6String7reserveEj+0x12>
 80a2ef8:	2001      	movs	r0, #1
}
 80a2efa:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2efc:	4620      	mov	r0, r4
 80a2efe:	f7ff ffe8 	bl	80a2ed2 <_ZN6String12changeBufferEj>
 80a2f02:	2800      	cmp	r0, #0
 80a2f04:	d0f9      	beq.n	80a2efa <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2f06:	68a3      	ldr	r3, [r4, #8]
 80a2f08:	2b00      	cmp	r3, #0
 80a2f0a:	d1f5      	bne.n	80a2ef8 <_ZN6String7reserveEj+0xe>
 80a2f0c:	6822      	ldr	r2, [r4, #0]
 80a2f0e:	7013      	strb	r3, [r2, #0]
 80a2f10:	e7f2      	b.n	80a2ef8 <_ZN6String7reserveEj+0xe>

080a2f12 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2f12:	b570      	push	{r4, r5, r6, lr}
 80a2f14:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2f16:	4611      	mov	r1, r2
{
 80a2f18:	4604      	mov	r4, r0
 80a2f1a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2f1c:	f7ff ffe5 	bl	80a2eea <_ZN6String7reserveEj>
 80a2f20:	b920      	cbnz	r0, 80a2f2c <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2f22:	4620      	mov	r0, r4
 80a2f24:	f7ff ffca 	bl	80a2ebc <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2f28:	4620      	mov	r0, r4
 80a2f2a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2f2c:	462a      	mov	r2, r5
 80a2f2e:	4631      	mov	r1, r6
 80a2f30:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2f32:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2f34:	f001 f81a 	bl	80a3f6c <memcpy>
	buffer[len] = 0;
 80a2f38:	2100      	movs	r1, #0
 80a2f3a:	6822      	ldr	r2, [r4, #0]
 80a2f3c:	68a3      	ldr	r3, [r4, #8]
 80a2f3e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2f40:	e7f2      	b.n	80a2f28 <_ZN6String4copyEPKcj+0x16>

080a2f42 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2f42:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2f44:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a2f46:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2f48:	460d      	mov	r5, r1
	capacity = 0;
 80a2f4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2f4e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2f50:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2f52:	b139      	cbz	r1, 80a2f64 <_ZN6StringC1EPKc+0x22>
 80a2f54:	4608      	mov	r0, r1
 80a2f56:	f001 f8a2 	bl	80a409e <strlen>
 80a2f5a:	4629      	mov	r1, r5
 80a2f5c:	4602      	mov	r2, r0
 80a2f5e:	4620      	mov	r0, r4
 80a2f60:	f7ff ffd7 	bl	80a2f12 <_ZN6String4copyEPKcj>
}
 80a2f64:	4620      	mov	r0, r4
 80a2f66:	bd38      	pop	{r3, r4, r5, pc}

080a2f68 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2f68:	b538      	push	{r3, r4, r5, lr}
 80a2f6a:	4605      	mov	r5, r0
	if (buffer) {
 80a2f6c:	6800      	ldr	r0, [r0, #0]
{
 80a2f6e:	460c      	mov	r4, r1
	if (buffer) {
 80a2f70:	b168      	cbz	r0, 80a2f8e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a2f72:	686a      	ldr	r2, [r5, #4]
 80a2f74:	688b      	ldr	r3, [r1, #8]
 80a2f76:	429a      	cmp	r2, r3
 80a2f78:	d307      	bcc.n	80a2f8a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a2f7a:	6809      	ldr	r1, [r1, #0]
 80a2f7c:	f001 f86b 	bl	80a4056 <strcpy>
			len = rhs.len;
 80a2f80:	68a3      	ldr	r3, [r4, #8]
 80a2f82:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2f84:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a2f86:	60a3      	str	r3, [r4, #8]
}
 80a2f88:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a2f8a:	f7fe f905 	bl	80a1198 <free>
	buffer = rhs.buffer;
 80a2f8e:	6823      	ldr	r3, [r4, #0]
 80a2f90:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2f92:	6863      	ldr	r3, [r4, #4]
 80a2f94:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2f96:	68a3      	ldr	r3, [r4, #8]
 80a2f98:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2f9a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a2f9c:	e9c4 3300 	strd	r3, r3, [r4]
 80a2fa0:	e7f1      	b.n	80a2f86 <_ZN6String4moveERS_+0x1e>

080a2fa2 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a2fa2:	2300      	movs	r3, #0
String::String(String &&rval)
 80a2fa4:	b510      	push	{r4, lr}
 80a2fa6:	4604      	mov	r4, r0
	capacity = 0;
 80a2fa8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2fac:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2fae:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a2fb0:	f7ff ffda 	bl	80a2f68 <_ZN6String4moveERS_>
}
 80a2fb4:	4620      	mov	r0, r4
 80a2fb6:	bd10      	pop	{r4, pc}

080a2fb8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2fb8:	4288      	cmp	r0, r1
{
 80a2fba:	b510      	push	{r4, lr}
 80a2fbc:	460b      	mov	r3, r1
 80a2fbe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2fc0:	d004      	beq.n	80a2fcc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2fc2:	6809      	ldr	r1, [r1, #0]
 80a2fc4:	b121      	cbz	r1, 80a2fd0 <_ZN6StringaSERKS_+0x18>
 80a2fc6:	689a      	ldr	r2, [r3, #8]
 80a2fc8:	f7ff ffa3 	bl	80a2f12 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2fcc:	4620      	mov	r0, r4
 80a2fce:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2fd0:	f7ff ff74 	bl	80a2ebc <_ZN6String10invalidateEv>
 80a2fd4:	e7fa      	b.n	80a2fcc <_ZN6StringaSERKS_+0x14>

080a2fd6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2fd6:	2300      	movs	r3, #0
String::String(const String &value)
 80a2fd8:	b510      	push	{r4, lr}
 80a2fda:	4604      	mov	r4, r0
	capacity = 0;
 80a2fdc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2fe0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2fe2:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2fe4:	f7ff ffe8 	bl	80a2fb8 <_ZN6StringaSERKS_>
}
 80a2fe8:	4620      	mov	r0, r4
 80a2fea:	bd10      	pop	{r4, pc}

080a2fec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2fec:	b538      	push	{r3, r4, r5, lr}
 80a2fee:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2ff0:	460c      	mov	r4, r1
 80a2ff2:	b149      	cbz	r1, 80a3008 <_ZN6StringaSEPKc+0x1c>
 80a2ff4:	4608      	mov	r0, r1
 80a2ff6:	f001 f852 	bl	80a409e <strlen>
 80a2ffa:	4621      	mov	r1, r4
 80a2ffc:	4602      	mov	r2, r0
 80a2ffe:	4628      	mov	r0, r5
 80a3000:	f7ff ff87 	bl	80a2f12 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a3004:	4628      	mov	r0, r5
 80a3006:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a3008:	f7ff ff58 	bl	80a2ebc <_ZN6String10invalidateEv>
 80a300c:	e7fa      	b.n	80a3004 <_ZN6StringaSEPKc+0x18>

080a300e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a300e:	b570      	push	{r4, r5, r6, lr}
 80a3010:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a3012:	460e      	mov	r6, r1
 80a3014:	b909      	cbnz	r1, 80a301a <_ZN6String6concatEPKcj+0xc>
 80a3016:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3018:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a301a:	b16a      	cbz	r2, 80a3038 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a301c:	6884      	ldr	r4, [r0, #8]
 80a301e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a3020:	4621      	mov	r1, r4
 80a3022:	f7ff ff62 	bl	80a2eea <_ZN6String7reserveEj>
 80a3026:	2800      	cmp	r0, #0
 80a3028:	d0f5      	beq.n	80a3016 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a302a:	6828      	ldr	r0, [r5, #0]
 80a302c:	68ab      	ldr	r3, [r5, #8]
 80a302e:	4631      	mov	r1, r6
 80a3030:	4418      	add	r0, r3
 80a3032:	f001 f810 	bl	80a4056 <strcpy>
	len = newlen;
 80a3036:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a3038:	2001      	movs	r0, #1
 80a303a:	e7ed      	b.n	80a3018 <_ZN6String6concatEPKcj+0xa>

080a303c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a303c:	688a      	ldr	r2, [r1, #8]
 80a303e:	6809      	ldr	r1, [r1, #0]
 80a3040:	f7ff bfe5 	b.w	80a300e <_ZN6String6concatEPKcj>

080a3044 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3044:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3046:	688a      	ldr	r2, [r1, #8]
 80a3048:	6809      	ldr	r1, [r1, #0]
{
 80a304a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a304c:	f7ff ffdf 	bl	80a300e <_ZN6String6concatEPKcj>
 80a3050:	b910      	cbnz	r0, 80a3058 <_ZplRK15StringSumHelperRK6String+0x14>
 80a3052:	4620      	mov	r0, r4
 80a3054:	f7ff ff32 	bl	80a2ebc <_ZN6String10invalidateEv>
	return a;
}
 80a3058:	4620      	mov	r0, r4
 80a305a:	bd10      	pop	{r4, pc}

080a305c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a305c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a305e:	6882      	ldr	r2, [r0, #8]
 80a3060:	b93a      	cbnz	r2, 80a3072 <_ZNK6String6equalsEPKc+0x16>
 80a3062:	b121      	cbz	r1, 80a306e <_ZNK6String6equalsEPKc+0x12>
 80a3064:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a3066:	fab0 f080 	clz	r0, r0
 80a306a:	0940      	lsrs	r0, r0, #5
 80a306c:	e000      	b.n	80a3070 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a306e:	2001      	movs	r0, #1
}
 80a3070:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3072:	6800      	ldr	r0, [r0, #0]
 80a3074:	b909      	cbnz	r1, 80a307a <_ZNK6String6equalsEPKc+0x1e>
 80a3076:	7800      	ldrb	r0, [r0, #0]
 80a3078:	e7f5      	b.n	80a3066 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a307a:	f000 ffe2 	bl	80a4042 <strcmp>
 80a307e:	e7f2      	b.n	80a3066 <_ZNK6String6equalsEPKc+0xa>

080a3080 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a3080:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a3082:	6883      	ldr	r3, [r0, #8]
 80a3084:	4293      	cmp	r3, r2
 80a3086:	d907      	bls.n	80a3098 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a3088:	6804      	ldr	r4, [r0, #0]
 80a308a:	6809      	ldr	r1, [r1, #0]
 80a308c:	18a0      	adds	r0, r4, r2
 80a308e:	f001 f834 	bl	80a40fa <strstr>
	if (found == NULL) return -1;
 80a3092:	b108      	cbz	r0, 80a3098 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a3094:	1b00      	subs	r0, r0, r4
}
 80a3096:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a3098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a309c:	e7fb      	b.n	80a3096 <_ZNK6String7indexOfERKS_j+0x16>

080a309e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a309e:	2200      	movs	r2, #0
 80a30a0:	f7ff bfee 	b.w	80a3080 <_ZNK6String7indexOfERKS_j>

080a30a4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a30a6:	461d      	mov	r5, r3
	if (left > right) {
 80a30a8:	429a      	cmp	r2, r3
 80a30aa:	bf88      	it	hi
 80a30ac:	4613      	movhi	r3, r2
{
 80a30ae:	460f      	mov	r7, r1
 80a30b0:	4614      	mov	r4, r2
	if (left > right) {
 80a30b2:	bf88      	it	hi
 80a30b4:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a30b6:	490b      	ldr	r1, [pc, #44]	; (80a30e4 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a30b8:	bf88      	it	hi
 80a30ba:	461d      	movhi	r5, r3
{
 80a30bc:	4606      	mov	r6, r0
	String out;
 80a30be:	f7ff ff40 	bl	80a2f42 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a30c2:	68ba      	ldr	r2, [r7, #8]
 80a30c4:	42a2      	cmp	r2, r4
 80a30c6:	d30a      	bcc.n	80a30de <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a30c8:	6839      	ldr	r1, [r7, #0]
 80a30ca:	42aa      	cmp	r2, r5
 80a30cc:	bf94      	ite	ls
 80a30ce:	ebc4 0202 	rsbls	r2, r4, r2
 80a30d2:	ebc4 0205 	rsbhi	r2, r4, r5
 80a30d6:	4630      	mov	r0, r6
 80a30d8:	4421      	add	r1, r4
 80a30da:	f7ff ff1a 	bl	80a2f12 <_ZN6String4copyEPKcj>
	return out;
}
 80a30de:	4630      	mov	r0, r6
 80a30e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a30e2:	bf00      	nop
 80a30e4:	080a44a9 	.word	0x080a44a9

080a30e8 <_ZNK6String9substringEj>:
{
 80a30e8:	b510      	push	{r4, lr}
 80a30ea:	4604      	mov	r4, r0
	return substring(left, len);
 80a30ec:	688b      	ldr	r3, [r1, #8]
 80a30ee:	f7ff ffd9 	bl	80a30a4 <_ZNK6String9substringEjj>
}
 80a30f2:	4620      	mov	r0, r4
 80a30f4:	bd10      	pop	{r4, pc}

080a30f6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a30f6:	6800      	ldr	r0, [r0, #0]
 80a30f8:	b108      	cbz	r0, 80a30fe <_ZNK6String5toIntEv+0x8>
 80a30fa:	f000 bf25 	b.w	80a3f48 <atol>
	return 0;
}
 80a30fe:	4770      	bx	lr

080a3100 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3100:	b510      	push	{r4, lr}
 80a3102:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3104:	6800      	ldr	r0, [r0, #0]
 80a3106:	b118      	cbz	r0, 80a3110 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3108:	f7fe f846 	bl	80a1198 <free>
            wakeupSource_ = nullptr;
 80a310c:	2300      	movs	r3, #0
 80a310e:	6023      	str	r3, [r4, #0]
        }
    }
 80a3110:	bd10      	pop	{r4, pc}

080a3112 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3112:	b510      	push	{r4, lr}
 80a3114:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3116:	f7ff fff3 	bl	80a3100 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a311a:	4620      	mov	r0, r4
 80a311c:	bd10      	pop	{r4, pc}
	...

080a3120 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3120:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3122:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3124:	b510      	push	{r4, lr}
 80a3126:	4b08      	ldr	r3, [pc, #32]	; (80a3148 <_GLOBAL__sub_I_System+0x28>)
 80a3128:	4c08      	ldr	r4, [pc, #32]	; (80a314c <_GLOBAL__sub_I_System+0x2c>)
 80a312a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a312c:	4b08      	ldr	r3, [pc, #32]	; (80a3150 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a312e:	6020      	str	r0, [r4, #0]
 80a3130:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3132:	71a0      	strb	r0, [r4, #6]
 80a3134:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3136:	f7fd ff6b 	bl	80a1010 <set_system_mode>
SystemClass System;
 80a313a:	4620      	mov	r0, r4
 80a313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3140:	4a04      	ldr	r2, [pc, #16]	; (80a3154 <_GLOBAL__sub_I_System+0x34>)
 80a3142:	4905      	ldr	r1, [pc, #20]	; (80a3158 <_GLOBAL__sub_I_System+0x38>)
 80a3144:	f000 bdda 	b.w	80a3cfc <__aeabi_atexit>
 80a3148:	20000d6c 	.word	0x20000d6c
 80a314c:	20000d60 	.word	0x20000d60
 80a3150:	ffff0000 	.word	0xffff0000
 80a3154:	20000084 	.word	0x20000084
 80a3158:	080a3113 	.word	0x080a3113

080a315c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a315c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a315e:	6803      	ldr	r3, [r0, #0]
{
 80a3160:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3164:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3166:	2201      	movs	r2, #1
 80a3168:	f247 5330 	movw	r3, #30000	; 0x7530
 80a316c:	f10d 0107 	add.w	r1, sp, #7
 80a3170:	47a0      	blx	r4
}
 80a3172:	b002      	add	sp, #8
 80a3174:	bd10      	pop	{r4, pc}

080a3176 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3176:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3178:	6803      	ldr	r3, [r0, #0]
 80a317a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a317c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3180:	46a4      	mov	ip, r4
}
 80a3182:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3184:	4760      	bx	ip

080a3186 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3186:	b513      	push	{r0, r1, r4, lr}
 80a3188:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a318a:	6802      	ldr	r2, [r0, #0]
{
 80a318c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3190:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3192:	f10d 0107 	add.w	r1, sp, #7
 80a3196:	2201      	movs	r2, #1
 80a3198:	47a0      	blx	r4
}
 80a319a:	b002      	add	sp, #8
 80a319c:	bd10      	pop	{r4, pc}

080a319e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a319e:	4770      	bx	lr

080a31a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a31a0:	4770      	bx	lr
	...

080a31a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a31a4:	b510      	push	{r4, lr}
 80a31a6:	4604      	mov	r4, r0
	    ||
 80a31a8:	4b06      	ldr	r3, [pc, #24]	; (80a31c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a31aa:	4608      	mov	r0, r1
	    ||
 80a31ac:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a31ae:	f104 040c 	add.w	r4, r4, #12
 80a31b2:	d004      	beq.n	80a31be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a31b4:	f000 fdb0 	bl	80a3d18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a31b8:	2800      	cmp	r0, #0
	return nullptr;
 80a31ba:	bf08      	it	eq
 80a31bc:	2400      	moveq	r4, #0
      }
 80a31be:	4620      	mov	r0, r4
 80a31c0:	bd10      	pop	{r4, pc}
 80a31c2:	bf00      	nop
 80a31c4:	080a4690 	.word	0x080a4690

080a31c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a31c8:	b510      	push	{r4, lr}
 80a31ca:	4604      	mov	r4, r0
 80a31cc:	21ac      	movs	r1, #172	; 0xac
 80a31ce:	f000 fd9a 	bl	80a3d06 <_ZdlPvj>
 80a31d2:	4620      	mov	r0, r4
 80a31d4:	bd10      	pop	{r4, pc}

080a31d6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a31d6:	f7fc bf62 	b.w	80a009e <_ZdlPv>
	...

080a31dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a31dc:	b538      	push	{r3, r4, r5, lr}
 80a31de:	4b0b      	ldr	r3, [pc, #44]	; (80a320c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a31e0:	6984      	ldr	r4, [r0, #24]
 80a31e2:	4605      	mov	r5, r0
 80a31e4:	6003      	str	r3, [r0, #0]
 80a31e6:	b17c      	cbz	r4, 80a3208 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a31e8:	6863      	ldr	r3, [r4, #4]
 80a31ea:	3b01      	subs	r3, #1
 80a31ec:	6063      	str	r3, [r4, #4]
 80a31ee:	b95b      	cbnz	r3, 80a3208 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a31f0:	6823      	ldr	r3, [r4, #0]
 80a31f2:	4620      	mov	r0, r4
 80a31f4:	689b      	ldr	r3, [r3, #8]
 80a31f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a31f8:	68a3      	ldr	r3, [r4, #8]
 80a31fa:	3b01      	subs	r3, #1
 80a31fc:	60a3      	str	r3, [r4, #8]
 80a31fe:	b91b      	cbnz	r3, 80a3208 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3200:	6823      	ldr	r3, [r4, #0]
 80a3202:	4620      	mov	r0, r4
 80a3204:	68db      	ldr	r3, [r3, #12]
 80a3206:	4798      	blx	r3
 80a3208:	4628      	mov	r0, r5
 80a320a:	bd38      	pop	{r3, r4, r5, pc}
 80a320c:	080a46a0 	.word	0x080a46a0

080a3210 <_ZN9TCPClientD0Ev>:
 80a3210:	b510      	push	{r4, lr}
 80a3212:	4604      	mov	r4, r0
 80a3214:	f7ff ffe2 	bl	80a31dc <_ZN9TCPClientD1Ev>
 80a3218:	4620      	mov	r0, r4
 80a321a:	211c      	movs	r1, #28
 80a321c:	f000 fd73 	bl	80a3d06 <_ZdlPvj>
 80a3220:	4620      	mov	r0, r4
 80a3222:	bd10      	pop	{r4, pc}

080a3224 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3224:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a3226:	4604      	mov	r4, r0
 80a3228:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a322a:	694d      	ldr	r5, [r1, #20]
 80a322c:	4b04      	ldr	r3, [pc, #16]	; (80a3240 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a322e:	358c      	adds	r5, #140	; 0x8c
 80a3230:	f844 3b04 	str.w	r3, [r4], #4
 80a3234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3238:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a323a:	4630      	mov	r0, r6
 80a323c:	7023      	strb	r3, [r4, #0]
 80a323e:	bd70      	pop	{r4, r5, r6, pc}
 80a3240:	080a4518 	.word	0x080a4518

080a3244 <_ZN9TCPClient4peekEv>:
{
 80a3244:	b510      	push	{r4, lr}
 80a3246:	6943      	ldr	r3, [r0, #20]
 80a3248:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a324a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a324e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3252:	429a      	cmp	r2, r3
 80a3254:	d005      	beq.n	80a3262 <_ZN9TCPClient4peekEv+0x1e>
 80a3256:	6963      	ldr	r3, [r4, #20]
 80a3258:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a325c:	4413      	add	r3, r2
 80a325e:	7918      	ldrb	r0, [r3, #4]
}
 80a3260:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3262:	6803      	ldr	r3, [r0, #0]
 80a3264:	691b      	ldr	r3, [r3, #16]
 80a3266:	4798      	blx	r3
 80a3268:	2800      	cmp	r0, #0
 80a326a:	d1f4      	bne.n	80a3256 <_ZN9TCPClient4peekEv+0x12>
 80a326c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3270:	e7f6      	b.n	80a3260 <_ZN9TCPClient4peekEv+0x1c>

080a3272 <_ZN9TCPClient4readEv>:
{
 80a3272:	b510      	push	{r4, lr}
 80a3274:	6943      	ldr	r3, [r0, #20]
 80a3276:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3278:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a327c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3280:	429a      	cmp	r2, r3
 80a3282:	d008      	beq.n	80a3296 <_ZN9TCPClient4readEv+0x24>
 80a3284:	6963      	ldr	r3, [r4, #20]
 80a3286:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a328a:	1c51      	adds	r1, r2, #1
 80a328c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3290:	4413      	add	r3, r2
 80a3292:	7918      	ldrb	r0, [r3, #4]
}
 80a3294:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3296:	6803      	ldr	r3, [r0, #0]
 80a3298:	691b      	ldr	r3, [r3, #16]
 80a329a:	4798      	blx	r3
 80a329c:	2800      	cmp	r0, #0
 80a329e:	d1f1      	bne.n	80a3284 <_ZN9TCPClient4readEv+0x12>
 80a32a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a32a4:	e7f6      	b.n	80a3294 <_ZN9TCPClient4readEv+0x22>

080a32a6 <_ZN9TCPClient4readEPhj>:
{
 80a32a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a32a8:	6943      	ldr	r3, [r0, #20]
 80a32aa:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a32ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a32b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a32b4:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a32b6:	429a      	cmp	r2, r3
{
 80a32b8:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a32ba:	d016      	beq.n	80a32ea <_ZN9TCPClient4readEPhj+0x44>
 80a32bc:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a32be:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a32c0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a32c4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a32c8:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a32ca:	42bc      	cmp	r4, r7
 80a32cc:	bf28      	it	cs
 80a32ce:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a32d0:	3304      	adds	r3, #4
 80a32d2:	4622      	mov	r2, r4
 80a32d4:	4419      	add	r1, r3
 80a32d6:	f000 fe49 	bl	80a3f6c <memcpy>
 80a32da:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a32dc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a32e0:	4423      	add	r3, r4
 80a32e2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a32e6:	4620      	mov	r0, r4
 80a32e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a32ea:	6803      	ldr	r3, [r0, #0]
 80a32ec:	691b      	ldr	r3, [r3, #16]
 80a32ee:	4798      	blx	r3
 80a32f0:	2800      	cmp	r0, #0
 80a32f2:	d1e3      	bne.n	80a32bc <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a32f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a32f8:	e7f5      	b.n	80a32e6 <_ZN9TCPClient4readEPhj+0x40>

080a32fa <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a32fa:	2300      	movs	r3, #0
 80a32fc:	6942      	ldr	r2, [r0, #20]
 80a32fe:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3302:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3304:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3308:	4770      	bx	lr
	...

080a330c <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a330c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3310:	461f      	mov	r7, r3
    stop();
 80a3312:	6803      	ldr	r3, [r0, #0]
{
 80a3314:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3318:	4605      	mov	r5, r0
 80a331a:	460c      	mov	r4, r1
 80a331c:	4616      	mov	r6, r2
    stop();
 80a331e:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3320:	4638      	mov	r0, r7
 80a3322:	f7ff fcf9 	bl	80a2d18 <_ZN5spark12NetworkClass4fromEm>
 80a3326:	6803      	ldr	r3, [r0, #0]
 80a3328:	68db      	ldr	r3, [r3, #12]
 80a332a:	4798      	blx	r3
 80a332c:	2800      	cmp	r0, #0
 80a332e:	d054      	beq.n	80a33da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3330:	4633      	mov	r3, r6
 80a3332:	2206      	movs	r2, #6
 80a3334:	2101      	movs	r1, #1
 80a3336:	2002      	movs	r0, #2
 80a3338:	9700      	str	r7, [sp, #0]
 80a333a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a333e:	f7fd fd67 	bl	80a0e10 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3342:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3344:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3348:	f04f 0800 	mov.w	r8, #0
 80a334c:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3350:	696b      	ldr	r3, [r5, #20]
 80a3352:	2001      	movs	r0, #1
 80a3354:	681b      	ldr	r3, [r3, #0]
 80a3356:	4923      	ldr	r1, [pc, #140]	; (80a33e4 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3358:	9301      	str	r3, [sp, #4]
 80a335a:	4b23      	ldr	r3, [pc, #140]	; (80a33e8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a335c:	aa02      	add	r2, sp, #8
 80a335e:	9300      	str	r3, [sp, #0]
 80a3360:	4643      	mov	r3, r8
 80a3362:	f7fd fe3d 	bl	80a0fe0 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3366:	696b      	ldr	r3, [r5, #20]
 80a3368:	6818      	ldr	r0, [r3, #0]
 80a336a:	f7fd fd49 	bl	80a0e00 <socket_handle_valid>
 80a336e:	2800      	cmp	r0, #0
 80a3370:	d033      	beq.n	80a33da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3372:	4628      	mov	r0, r5
 80a3374:	f7ff ffc1 	bl	80a32fa <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3378:	2302      	movs	r3, #2
 80a337a:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a337e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3380:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3382:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3386:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3388:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a338c:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3390:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3392:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3396:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a339a:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a339e:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a33a2:	f7fd fe05 	bl	80a0fb0 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a33a6:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a33a8:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a33aa:	2210      	movs	r2, #16
 80a33ac:	6818      	ldr	r0, [r3, #0]
 80a33ae:	a902      	add	r1, sp, #8
 80a33b0:	f7fd fd36 	bl	80a0e20 <socket_connect>
 80a33b4:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a33b6:	4630      	mov	r0, r6
 80a33b8:	f7fd fdfa 	bl	80a0fb0 <HAL_NET_SetNetWatchDog>
 80a33bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a33be:	696e      	ldr	r6, [r5, #20]
 80a33c0:	368c      	adds	r6, #140	; 0x8c
 80a33c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a33c4:	6823      	ldr	r3, [r4, #0]
 80a33c6:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a33c8:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a33ca:	f1b9 0f00 	cmp.w	r9, #0
 80a33ce:	d007      	beq.n	80a33e0 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a33d0:	682b      	ldr	r3, [r5, #0]
 80a33d2:	4628      	mov	r0, r5
 80a33d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a33d6:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a33d8:	4640      	mov	r0, r8
}
 80a33da:	b00b      	add	sp, #44	; 0x2c
 80a33dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a33e0:	2001      	movs	r0, #1
        return connected;
 80a33e2:	e7fa      	b.n	80a33da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a33e4:	080a4658 	.word	0x080a4658
 80a33e8:	080a465f 	.word	0x080a465f

080a33ec <_ZN9TCPClient9availableEv>:
{
 80a33ec:	b538      	push	{r3, r4, r5, lr}
 80a33ee:	6942      	ldr	r2, [r0, #20]
 80a33f0:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a33f2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a33f6:	b12b      	cbz	r3, 80a3404 <_ZN9TCPClient9availableEv+0x18>
 80a33f8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a33fc:	429a      	cmp	r2, r3
 80a33fe:	d101      	bne.n	80a3404 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3400:	f7ff ff7b 	bl	80a32fa <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3404:	6920      	ldr	r0, [r4, #16]
 80a3406:	f7ff fc87 	bl	80a2d18 <_ZN5spark12NetworkClass4fromEm>
 80a340a:	6803      	ldr	r3, [r0, #0]
 80a340c:	68db      	ldr	r3, [r3, #12]
 80a340e:	4798      	blx	r3
 80a3410:	b1f8      	cbz	r0, 80a3452 <_ZN9TCPClient9availableEv+0x66>
 80a3412:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3414:	6818      	ldr	r0, [r3, #0]
 80a3416:	f7fd fcf3 	bl	80a0e00 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a341a:	b1d0      	cbz	r0, 80a3452 <_ZN9TCPClient9availableEv+0x66>
 80a341c:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a341e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3422:	297f      	cmp	r1, #127	; 0x7f
 80a3424:	d815      	bhi.n	80a3452 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3426:	1d05      	adds	r5, r0, #4
 80a3428:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a342c:	2300      	movs	r3, #0
 80a342e:	6800      	ldr	r0, [r0, #0]
 80a3430:	4429      	add	r1, r5
 80a3432:	f7fd fcfd 	bl	80a0e30 <socket_receive>
            if (ret > 0)
 80a3436:	2800      	cmp	r0, #0
 80a3438:	dd0b      	ble.n	80a3452 <_ZN9TCPClient9availableEv+0x66>
 80a343a:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a343c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3440:	b90a      	cbnz	r2, 80a3446 <_ZN9TCPClient9availableEv+0x5a>
 80a3442:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3446:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3448:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a344c:	4410      	add	r0, r2
 80a344e:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3452:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3454:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3458:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a345c:	1ac0      	subs	r0, r0, r3
 80a345e:	bd38      	pop	{r3, r4, r5, pc}

080a3460 <_ZN9TCPClient4stopEv>:
{
 80a3460:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3462:	6943      	ldr	r3, [r0, #20]
{
 80a3464:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3466:	6818      	ldr	r0, [r3, #0]
 80a3468:	f7fd fcca 	bl	80a0e00 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a346c:	b118      	cbz	r0, 80a3476 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a346e:	6963      	ldr	r3, [r4, #20]
 80a3470:	6818      	ldr	r0, [r3, #0]
 80a3472:	f7fd fce5 	bl	80a0e40 <socket_close>
 80a3476:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3478:	f7fd fcea 	bl	80a0e50 <socket_handle_invalid>
 80a347c:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a347e:	6960      	ldr	r0, [r4, #20]
 80a3480:	2211      	movs	r2, #17
 80a3482:	2100      	movs	r1, #0
 80a3484:	308c      	adds	r0, #140	; 0x8c
 80a3486:	f000 fd99 	bl	80a3fbc <memset>
  flush_buffer();
 80a348a:	4620      	mov	r0, r4
}
 80a348c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3490:	f7ff bf33 	b.w	80a32fa <_ZN9TCPClient12flush_bufferEv>

080a3494 <_ZN9TCPClient6statusEv>:
{
 80a3494:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3496:	6943      	ldr	r3, [r0, #20]
{
 80a3498:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a349a:	6818      	ldr	r0, [r3, #0]
 80a349c:	f7fd fcb0 	bl	80a0e00 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a34a0:	b908      	cbnz	r0, 80a34a6 <_ZN9TCPClient6statusEv+0x12>
 80a34a2:	2000      	movs	r0, #0
}
 80a34a4:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a34a6:	6920      	ldr	r0, [r4, #16]
 80a34a8:	f7ff fc36 	bl	80a2d18 <_ZN5spark12NetworkClass4fromEm>
 80a34ac:	6803      	ldr	r3, [r0, #0]
 80a34ae:	68db      	ldr	r3, [r3, #12]
 80a34b0:	4798      	blx	r3
 80a34b2:	2800      	cmp	r0, #0
 80a34b4:	d0f5      	beq.n	80a34a2 <_ZN9TCPClient6statusEv+0xe>
 80a34b6:	6963      	ldr	r3, [r4, #20]
 80a34b8:	6818      	ldr	r0, [r3, #0]
 80a34ba:	f7fd fc99 	bl	80a0df0 <socket_active_status>
 80a34be:	fab0 f080 	clz	r0, r0
 80a34c2:	0940      	lsrs	r0, r0, #5
 80a34c4:	e7ee      	b.n	80a34a4 <_ZN9TCPClient6statusEv+0x10>

080a34c6 <_ZN9TCPClientcvbEv>:
{
 80a34c6:	b508      	push	{r3, lr}
   return (status()!=0);
 80a34c8:	f7ff ffe4 	bl	80a3494 <_ZN9TCPClient6statusEv>
}
 80a34cc:	3800      	subs	r0, #0
 80a34ce:	bf18      	it	ne
 80a34d0:	2001      	movne	r0, #1
 80a34d2:	bd08      	pop	{r3, pc}

080a34d4 <_ZN9TCPClient5writeEPKhjm>:
{
 80a34d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a34d8:	2700      	movs	r7, #0
 80a34da:	6047      	str	r7, [r0, #4]
 80a34dc:	4604      	mov	r4, r0
 80a34de:	460d      	mov	r5, r1
 80a34e0:	4616      	mov	r6, r2
 80a34e2:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a34e4:	f7ff ffd6 	bl	80a3494 <_ZN9TCPClient6statusEv>
 80a34e8:	b170      	cbz	r0, 80a3508 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a34ea:	e9cd 8700 	strd	r8, r7, [sp]
 80a34ee:	6960      	ldr	r0, [r4, #20]
 80a34f0:	463b      	mov	r3, r7
 80a34f2:	4632      	mov	r2, r6
 80a34f4:	4629      	mov	r1, r5
 80a34f6:	6800      	ldr	r0, [r0, #0]
 80a34f8:	f7fd fcb2 	bl	80a0e60 <socket_send_ex>
    if (ret < 0) {
 80a34fc:	2800      	cmp	r0, #0
 80a34fe:	da00      	bge.n	80a3502 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3500:	6060      	str	r0, [r4, #4]
}
 80a3502:	b002      	add	sp, #8
 80a3504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a350c:	e7f8      	b.n	80a3500 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a350e <_ZN9TCPClient9connectedEv>:
{
 80a350e:	b570      	push	{r4, r5, r6, lr}
 80a3510:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3512:	f7ff ffbf 	bl	80a3494 <_ZN9TCPClient6statusEv>
 80a3516:	b9e8      	cbnz	r0, 80a3554 <_ZN9TCPClient9connectedEv+0x46>
 80a3518:	696b      	ldr	r3, [r5, #20]
 80a351a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a351e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3522:	4291      	cmp	r1, r2
 80a3524:	d116      	bne.n	80a3554 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3526:	6818      	ldr	r0, [r3, #0]
 80a3528:	f7fd fc6a 	bl	80a0e00 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a352c:	b908      	cbnz	r0, 80a3532 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a352e:	2000      	movs	r0, #0
}
 80a3530:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3532:	696b      	ldr	r3, [r5, #20]
 80a3534:	6818      	ldr	r0, [r3, #0]
 80a3536:	f7fd fc5b 	bl	80a0df0 <socket_active_status>
 80a353a:	2801      	cmp	r0, #1
 80a353c:	4604      	mov	r4, r0
 80a353e:	d1f6      	bne.n	80a352e <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3540:	682b      	ldr	r3, [r5, #0]
 80a3542:	4628      	mov	r0, r5
 80a3544:	691b      	ldr	r3, [r3, #16]
 80a3546:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3548:	b930      	cbnz	r0, 80a3558 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a354a:	682b      	ldr	r3, [r5, #0]
 80a354c:	4628      	mov	r0, r5
 80a354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3550:	4798      	blx	r3
 80a3552:	e7ec      	b.n	80a352e <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3554:	2001      	movs	r0, #1
 80a3556:	e7eb      	b.n	80a3530 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3558:	4620      	mov	r0, r4
 80a355a:	e7e9      	b.n	80a3530 <_ZN9TCPClient9connectedEv+0x22>

080a355c <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a355c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a355e:	b510      	push	{r4, lr}
 80a3560:	4604      	mov	r4, r0
          total(0) {
 80a3562:	6001      	str	r1, [r0, #0]
 80a3564:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3568:	3088      	adds	r0, #136	; 0x88
 80a356a:	f7fe f971 	bl	80a1850 <_ZN9IPAddressC1Ev>
}
 80a356e:	4620      	mov	r0, r4
 80a3570:	bd10      	pop	{r4, pc}
	...

080a3574 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a357a:	2300      	movs	r3, #0
 80a357c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3580:	4a0d      	ldr	r2, [pc, #52]	; (80a35b8 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3582:	6103      	str	r3, [r0, #16]
 80a3584:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3586:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3588:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a358a:	20ac      	movs	r0, #172	; 0xac
 80a358c:	460e      	mov	r6, r1
 80a358e:	f7fc fd82 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3592:	1e05      	subs	r5, r0, #0
 80a3594:	f105 070c 	add.w	r7, r5, #12
 80a3598:	d008      	beq.n	80a35ac <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a359a:	2301      	movs	r3, #1
 80a359c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a35a0:	4b06      	ldr	r3, [pc, #24]	; (80a35bc <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a35a2:	4631      	mov	r1, r6
 80a35a4:	4638      	mov	r0, r7
 80a35a6:	602b      	str	r3, [r5, #0]
 80a35a8:	f7ff ffd8 	bl	80a355c <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a35ac:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a35ae:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a35b2:	f7ff fea2 	bl	80a32fa <_ZN9TCPClient12flush_bufferEv>
}
 80a35b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a35b8:	080a46a0 	.word	0x080a46a0
 80a35bc:	080a467c 	.word	0x080a467c

080a35c0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a35c0:	b510      	push	{r4, lr}
 80a35c2:	4604      	mov	r4, r0
 80a35c4:	f7fd fc44 	bl	80a0e50 <socket_handle_invalid>
 80a35c8:	4601      	mov	r1, r0
 80a35ca:	4620      	mov	r0, r4
 80a35cc:	f7ff ffd2 	bl	80a3574 <_ZN9TCPClientC1Em>
}
 80a35d0:	4620      	mov	r0, r4
 80a35d2:	bd10      	pop	{r4, pc}

080a35d4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a35d4:	b510      	push	{r4, lr}
 80a35d6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a35d8:	6800      	ldr	r0, [r0, #0]
 80a35da:	f7fd fc11 	bl	80a0e00 <socket_handle_valid>
 80a35de:	b110      	cbz	r0, 80a35e6 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a35e0:	6820      	ldr	r0, [r4, #0]
 80a35e2:	f7fd fc2d 	bl	80a0e40 <socket_close>
    }
}
 80a35e6:	4620      	mov	r0, r4
 80a35e8:	bd10      	pop	{r4, pc}

080a35ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a35ea:	300c      	adds	r0, #12
 80a35ec:	f7ff bff2 	b.w	80a35d4 <_ZN9TCPClient4DataD1Ev>

080a35f0 <_ZN9TCPClient7connectEPKctm>:
{
 80a35f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a35f4:	461f      	mov	r7, r3
    stop();
 80a35f6:	6803      	ldr	r3, [r0, #0]
{
 80a35f8:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a35fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a35fc:	4606      	mov	r6, r0
 80a35fe:	460d      	mov	r5, r1
 80a3600:	4690      	mov	r8, r2
    stop();
 80a3602:	4798      	blx	r3
    if (Network.ready())
 80a3604:	4813      	ldr	r0, [pc, #76]	; (80a3654 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3606:	f7ff fb32 	bl	80a2c6e <_ZN5spark12NetworkClass5readyEv>
 80a360a:	b1f0      	cbz	r0, 80a364a <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a360c:	a802      	add	r0, sp, #8
 80a360e:	f7fe f91f 	bl	80a1850 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3612:	4628      	mov	r0, r5
 80a3614:	f000 fd43 	bl	80a409e <strlen>
 80a3618:	2400      	movs	r4, #0
 80a361a:	b281      	uxth	r1, r0
 80a361c:	463b      	mov	r3, r7
 80a361e:	4628      	mov	r0, r5
 80a3620:	9400      	str	r4, [sp, #0]
 80a3622:	aa03      	add	r2, sp, #12
 80a3624:	f7fd fccc 	bl	80a0fc0 <inet_gethostbyname>
 80a3628:	b990      	cbnz	r0, 80a3650 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a362a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a362c:	ad09      	add	r5, sp, #36	; 0x24
 80a362e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3632:	4b09      	ldr	r3, [pc, #36]	; (80a3658 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3634:	ac03      	add	r4, sp, #12
 80a3636:	9308      	str	r3, [sp, #32]
 80a3638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a363a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a363c:	6823      	ldr	r3, [r4, #0]
 80a363e:	4642      	mov	r2, r8
 80a3640:	702b      	strb	r3, [r5, #0]
 80a3642:	4630      	mov	r0, r6
 80a3644:	463b      	mov	r3, r7
 80a3646:	a908      	add	r1, sp, #32
 80a3648:	47c8      	blx	r9
}
 80a364a:	b00f      	add	sp, #60	; 0x3c
 80a364c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a3650:	4620      	mov	r0, r4
 80a3652:	e7fa      	b.n	80a364a <_ZN9TCPClient7connectEPKctm+0x5a>
 80a3654:	20000d48 	.word	0x20000d48
 80a3658:	080a4518 	.word	0x080a4518

080a365c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a365c:	4b02      	ldr	r3, [pc, #8]	; (80a3668 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a365e:	681a      	ldr	r2, [r3, #0]
 80a3660:	4b02      	ldr	r3, [pc, #8]	; (80a366c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3662:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a3664:	4770      	bx	lr
 80a3666:	bf00      	nop
 80a3668:	2000001c 	.word	0x2000001c
 80a366c:	20000d70 	.word	0x20000d70

080a3670 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3670:	4770      	bx	lr

080a3672 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3672:	7441      	strb	r1, [r0, #17]
}
 80a3674:	4770      	bx	lr

080a3676 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3676:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3678:	7c00      	ldrb	r0, [r0, #16]
 80a367a:	f7fd fc49 	bl	80a0f10 <hal_usart_available_data_for_write>
}
 80a367e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3682:	bd08      	pop	{r3, pc}

080a3684 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3684:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3686:	7c00      	ldrb	r0, [r0, #16]
 80a3688:	f7fd fc1a 	bl	80a0ec0 <hal_usart_available>
}
 80a368c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3690:	bd08      	pop	{r3, pc}

080a3692 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3692:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3694:	7c00      	ldrb	r0, [r0, #16]
 80a3696:	f7fd fc23 	bl	80a0ee0 <hal_usart_peek>
}
 80a369a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a369e:	bd08      	pop	{r3, pc}

080a36a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a36a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a36a2:	7c00      	ldrb	r0, [r0, #16]
 80a36a4:	f7fd fc14 	bl	80a0ed0 <hal_usart_read>
}
 80a36a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a36ac:	bd08      	pop	{r3, pc}

080a36ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a36ae:	7c00      	ldrb	r0, [r0, #16]
 80a36b0:	f7fd bc1e 	b.w	80a0ef0 <hal_usart_flush>

080a36b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a36b4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a36b6:	7c46      	ldrb	r6, [r0, #17]
{
 80a36b8:	4604      	mov	r4, r0
 80a36ba:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a36bc:	b12e      	cbz	r6, 80a36ca <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a36be:	4629      	mov	r1, r5
 80a36c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a36c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a36c6:	f7fd bbf3 	b.w	80a0eb0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a36ca:	7c00      	ldrb	r0, [r0, #16]
 80a36cc:	f7fd fc20 	bl	80a0f10 <hal_usart_available_data_for_write>
 80a36d0:	2800      	cmp	r0, #0
 80a36d2:	dcf4      	bgt.n	80a36be <_ZN11USARTSerial5writeEh+0xa>
}
 80a36d4:	4630      	mov	r0, r6
 80a36d6:	bd70      	pop	{r4, r5, r6, pc}

080a36d8 <_ZN11USARTSerialD0Ev>:
 80a36d8:	b510      	push	{r4, lr}
 80a36da:	4604      	mov	r4, r0
 80a36dc:	2114      	movs	r1, #20
 80a36de:	f000 fb12 	bl	80a3d06 <_ZdlPvj>
 80a36e2:	4620      	mov	r0, r4
 80a36e4:	bd10      	pop	{r4, pc}
	...

080a36e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a36e8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a36ec:	b510      	push	{r4, lr}
 80a36ee:	4604      	mov	r4, r0
 80a36f0:	4608      	mov	r0, r1
 80a36f2:	4611      	mov	r1, r2
 80a36f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a36f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a36fc:	4a04      	ldr	r2, [pc, #16]	; (80a3710 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a36fe:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3700:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a3702:	2201      	movs	r2, #1
 80a3704:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a3706:	461a      	mov	r2, r3
 80a3708:	f7fd fbc2 	bl	80a0e90 <hal_usart_init>
}
 80a370c:	4620      	mov	r0, r4
 80a370e:	bd10      	pop	{r4, pc}
 80a3710:	080a4708 	.word	0x080a4708

080a3714 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a3714:	2300      	movs	r3, #0
 80a3716:	7c00      	ldrb	r0, [r0, #16]
 80a3718:	f7fd bc02 	b.w	80a0f20 <hal_usart_begin_config>

080a371c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a371c:	2200      	movs	r2, #0
 80a371e:	f7ff bff9 	b.w	80a3714 <_ZN11USARTSerial5beginEmm>

080a3722 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a3722:	7c00      	ldrb	r0, [r0, #16]
 80a3724:	f7fd bbbc 	b.w	80a0ea0 <hal_usart_end>

080a3728 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3728:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a372a:	4d0d      	ldr	r5, [pc, #52]	; (80a3760 <_Z22__fetch_global_Serial1v+0x38>)
 80a372c:	7829      	ldrb	r1, [r5, #0]
 80a372e:	f3bf 8f5b 	dmb	ish
 80a3732:	f011 0401 	ands.w	r4, r1, #1
 80a3736:	d111      	bne.n	80a375c <_Z22__fetch_global_Serial1v+0x34>
 80a3738:	4628      	mov	r0, r5
 80a373a:	f7fc fcbd 	bl	80a00b8 <__cxa_guard_acquire>
 80a373e:	b168      	cbz	r0, 80a375c <_Z22__fetch_global_Serial1v+0x34>
 80a3740:	4621      	mov	r1, r4
 80a3742:	4a08      	ldr	r2, [pc, #32]	; (80a3764 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3744:	4b08      	ldr	r3, [pc, #32]	; (80a3768 <_Z22__fetch_global_Serial1v+0x40>)
 80a3746:	4809      	ldr	r0, [pc, #36]	; (80a376c <_Z22__fetch_global_Serial1v+0x44>)
 80a3748:	f7ff ffce 	bl	80a36e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a374c:	4628      	mov	r0, r5
 80a374e:	f7fc fcb8 	bl	80a00c2 <__cxa_guard_release>
 80a3752:	4a07      	ldr	r2, [pc, #28]	; (80a3770 <_Z22__fetch_global_Serial1v+0x48>)
 80a3754:	4907      	ldr	r1, [pc, #28]	; (80a3774 <_Z22__fetch_global_Serial1v+0x4c>)
 80a3756:	4805      	ldr	r0, [pc, #20]	; (80a376c <_Z22__fetch_global_Serial1v+0x44>)
 80a3758:	f000 fad0 	bl	80a3cfc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a375c:	4803      	ldr	r0, [pc, #12]	; (80a376c <_Z22__fetch_global_Serial1v+0x44>)
 80a375e:	bd38      	pop	{r3, r4, r5, pc}
 80a3760:	20000d74 	.word	0x20000d74
 80a3764:	20000d78 	.word	0x20000d78
 80a3768:	20000dfc 	.word	0x20000dfc
 80a376c:	20000e80 	.word	0x20000e80
 80a3770:	20000084 	.word	0x20000084
 80a3774:	080a3671 	.word	0x080a3671

080a3778 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3778:	7441      	strb	r1, [r0, #17]
}
 80a377a:	4770      	bx	lr

080a377c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a377c:	4770      	bx	lr

080a377e <_ZN9USBSerial4readEv>:
{
 80a377e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3780:	2100      	movs	r1, #0
 80a3782:	7c00      	ldrb	r0, [r0, #16]
 80a3784:	f7fd fbfc 	bl	80a0f80 <HAL_USB_USART_Receive_Data>
}
 80a3788:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a378c:	bd08      	pop	{r3, pc}

080a378e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a378e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3790:	2101      	movs	r1, #1
 80a3792:	7c00      	ldrb	r0, [r0, #16]
 80a3794:	f7fd fbf4 	bl	80a0f80 <HAL_USB_USART_Receive_Data>
}
 80a3798:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a379c:	bd08      	pop	{r3, pc}

080a379e <_ZN9USBSerial17availableForWriteEv>:
{
 80a379e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a37a0:	7c00      	ldrb	r0, [r0, #16]
 80a37a2:	f7fd fbe5 	bl	80a0f70 <HAL_USB_USART_Available_Data_For_Write>
}
 80a37a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a37aa:	bd08      	pop	{r3, pc}

080a37ac <_ZN9USBSerial9availableEv>:
{
 80a37ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a37ae:	7c00      	ldrb	r0, [r0, #16]
 80a37b0:	f7fd fbd6 	bl	80a0f60 <HAL_USB_USART_Available_Data>
}
 80a37b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a37b8:	bd08      	pop	{r3, pc}

080a37ba <_ZN9USBSerial5writeEh>:
{
 80a37ba:	b538      	push	{r3, r4, r5, lr}
 80a37bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a37be:	7c00      	ldrb	r0, [r0, #16]
{
 80a37c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a37c2:	f7fd fbd5 	bl	80a0f70 <HAL_USB_USART_Available_Data_For_Write>
 80a37c6:	2800      	cmp	r0, #0
 80a37c8:	dc01      	bgt.n	80a37ce <_ZN9USBSerial5writeEh+0x14>
 80a37ca:	7c60      	ldrb	r0, [r4, #17]
 80a37cc:	b128      	cbz	r0, 80a37da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a37ce:	4629      	mov	r1, r5
 80a37d0:	7c20      	ldrb	r0, [r4, #16]
 80a37d2:	f7fd fbdd 	bl	80a0f90 <HAL_USB_USART_Send_Data>
 80a37d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a37da:	bd38      	pop	{r3, r4, r5, pc}

080a37dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a37dc:	7c00      	ldrb	r0, [r0, #16]
 80a37de:	f7fd bbdf 	b.w	80a0fa0 <HAL_USB_USART_Flush_Data>

080a37e2 <_ZN9USBSerialD0Ev>:
 80a37e2:	b510      	push	{r4, lr}
 80a37e4:	4604      	mov	r4, r0
 80a37e6:	2114      	movs	r1, #20
 80a37e8:	f000 fa8d 	bl	80a3d06 <_ZdlPvj>
 80a37ec:	4620      	mov	r0, r4
 80a37ee:	bd10      	pop	{r4, pc}

080a37f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a37f0:	b510      	push	{r4, lr}
 80a37f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a37f6:	4604      	mov	r4, r0
 80a37f8:	4608      	mov	r0, r1
 80a37fa:	2100      	movs	r1, #0
 80a37fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3800:	4b04      	ldr	r3, [pc, #16]	; (80a3814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3802:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3804:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3806:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3808:	4611      	mov	r1, r2
  _blocking = true;
 80a380a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a380c:	f7fd fb90 	bl	80a0f30 <HAL_USB_USART_Init>
}
 80a3810:	4620      	mov	r0, r4
 80a3812:	bd10      	pop	{r4, pc}
 80a3814:	080a4738 	.word	0x080a4738

080a3818 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3818:	2200      	movs	r2, #0
 80a381a:	7c00      	ldrb	r0, [r0, #16]
 80a381c:	f7fd bb90 	b.w	80a0f40 <HAL_USB_USART_Begin>

080a3820 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a3820:	7c00      	ldrb	r0, [r0, #16]
 80a3822:	f7fd bb95 	b.w	80a0f50 <HAL_USB_USART_End>
	...

080a3828 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3828:	b510      	push	{r4, lr}
 80a382a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a382c:	2214      	movs	r2, #20
 80a382e:	2100      	movs	r1, #0
 80a3830:	f000 fbc4 	bl	80a3fbc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3834:	4b05      	ldr	r3, [pc, #20]	; (80a384c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3836:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a3838:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a383a:	4b05      	ldr	r3, [pc, #20]	; (80a3850 <_Z19acquireSerialBufferv+0x28>)
 80a383c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a383e:	f240 1301 	movw	r3, #257	; 0x101
 80a3842:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3844:	2381      	movs	r3, #129	; 0x81
 80a3846:	8223      	strh	r3, [r4, #16]
}
 80a3848:	bd10      	pop	{r4, pc}
 80a384a:	bf00      	nop
 80a384c:	20000ec4 	.word	0x20000ec4
 80a3850:	20000fc5 	.word	0x20000fc5

080a3854 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3854:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3856:	4d0f      	ldr	r5, [pc, #60]	; (80a3894 <_Z16_fetch_usbserialv+0x40>)
{
 80a3858:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a385a:	a801      	add	r0, sp, #4
 80a385c:	f7ff ffe4 	bl	80a3828 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3860:	7829      	ldrb	r1, [r5, #0]
 80a3862:	f3bf 8f5b 	dmb	ish
 80a3866:	f011 0401 	ands.w	r4, r1, #1
 80a386a:	d110      	bne.n	80a388e <_Z16_fetch_usbserialv+0x3a>
 80a386c:	4628      	mov	r0, r5
 80a386e:	f7fc fc23 	bl	80a00b8 <__cxa_guard_acquire>
 80a3872:	b160      	cbz	r0, 80a388e <_Z16_fetch_usbserialv+0x3a>
 80a3874:	4621      	mov	r1, r4
 80a3876:	aa01      	add	r2, sp, #4
 80a3878:	4807      	ldr	r0, [pc, #28]	; (80a3898 <_Z16_fetch_usbserialv+0x44>)
 80a387a:	f7ff ffb9 	bl	80a37f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a387e:	4628      	mov	r0, r5
 80a3880:	f7fc fc1f 	bl	80a00c2 <__cxa_guard_release>
 80a3884:	4a05      	ldr	r2, [pc, #20]	; (80a389c <_Z16_fetch_usbserialv+0x48>)
 80a3886:	4906      	ldr	r1, [pc, #24]	; (80a38a0 <_Z16_fetch_usbserialv+0x4c>)
 80a3888:	4803      	ldr	r0, [pc, #12]	; (80a3898 <_Z16_fetch_usbserialv+0x44>)
 80a388a:	f000 fa37 	bl	80a3cfc <__aeabi_atexit>
	return _usbserial;
}
 80a388e:	4802      	ldr	r0, [pc, #8]	; (80a3898 <_Z16_fetch_usbserialv+0x44>)
 80a3890:	b007      	add	sp, #28
 80a3892:	bd30      	pop	{r4, r5, pc}
 80a3894:	20000e94 	.word	0x20000e94
 80a3898:	20000e9c 	.word	0x20000e9c
 80a389c:	20000084 	.word	0x20000084
 80a38a0:	080a377d 	.word	0x080a377d

080a38a4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a38a4:	b510      	push	{r4, lr}
 80a38a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a38a8:	2214      	movs	r2, #20
 80a38aa:	2100      	movs	r1, #0
 80a38ac:	f000 fb86 	bl	80a3fbc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a38b0:	4b05      	ldr	r3, [pc, #20]	; (80a38c8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a38b2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a38b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a38b6:	4b05      	ldr	r3, [pc, #20]	; (80a38cc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a38b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a38ba:	f240 1301 	movw	r3, #257	; 0x101
 80a38be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a38c0:	2381      	movs	r3, #129	; 0x81
 80a38c2:	8223      	strh	r3, [r4, #16]
}
 80a38c4:	bd10      	pop	{r4, pc}
 80a38c6:	bf00      	nop
 80a38c8:	20001046 	.word	0x20001046
 80a38cc:	20001147 	.word	0x20001147

080a38d0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a38d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a38d2:	4c0f      	ldr	r4, [pc, #60]	; (80a3910 <_Z17_fetch_usbserial1v+0x40>)
{
 80a38d4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a38d6:	a801      	add	r0, sp, #4
 80a38d8:	f7ff ffe4 	bl	80a38a4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a38dc:	7823      	ldrb	r3, [r4, #0]
 80a38de:	f3bf 8f5b 	dmb	ish
 80a38e2:	07db      	lsls	r3, r3, #31
 80a38e4:	d410      	bmi.n	80a3908 <_Z17_fetch_usbserial1v+0x38>
 80a38e6:	4620      	mov	r0, r4
 80a38e8:	f7fc fbe6 	bl	80a00b8 <__cxa_guard_acquire>
 80a38ec:	b160      	cbz	r0, 80a3908 <_Z17_fetch_usbserial1v+0x38>
 80a38ee:	2101      	movs	r1, #1
 80a38f0:	aa01      	add	r2, sp, #4
 80a38f2:	4808      	ldr	r0, [pc, #32]	; (80a3914 <_Z17_fetch_usbserial1v+0x44>)
 80a38f4:	f7ff ff7c 	bl	80a37f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a38f8:	4620      	mov	r0, r4
 80a38fa:	f7fc fbe2 	bl	80a00c2 <__cxa_guard_release>
 80a38fe:	4a06      	ldr	r2, [pc, #24]	; (80a3918 <_Z17_fetch_usbserial1v+0x48>)
 80a3900:	4906      	ldr	r1, [pc, #24]	; (80a391c <_Z17_fetch_usbserial1v+0x4c>)
 80a3902:	4804      	ldr	r0, [pc, #16]	; (80a3914 <_Z17_fetch_usbserial1v+0x44>)
 80a3904:	f000 f9fa 	bl	80a3cfc <__aeabi_atexit>
  return _usbserial1;
}
 80a3908:	4802      	ldr	r0, [pc, #8]	; (80a3914 <_Z17_fetch_usbserial1v+0x44>)
 80a390a:	b006      	add	sp, #24
 80a390c:	bd10      	pop	{r4, pc}
 80a390e:	bf00      	nop
 80a3910:	20000e98 	.word	0x20000e98
 80a3914:	20000eb0 	.word	0x20000eb0
 80a3918:	20000084 	.word	0x20000084
 80a391c:	080a377d 	.word	0x080a377d

080a3920 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a3920:	2200      	movs	r2, #0
 80a3922:	6840      	ldr	r0, [r0, #4]
 80a3924:	4611      	mov	r1, r2
 80a3926:	f7fd bbe7 	b.w	80a10f8 <network_ready>

080a392a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a392a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a392c:	4615      	mov	r5, r2
 80a392e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a3930:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3932:	460e      	mov	r6, r1
 80a3934:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3936:	2100      	movs	r1, #0
 80a3938:	a803      	add	r0, sp, #12
 80a393a:	f000 fb3f 	bl	80a3fbc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a393e:	4628      	mov	r0, r5
 80a3940:	f000 fbad 	bl	80a409e <strlen>
 80a3944:	2700      	movs	r7, #0
 80a3946:	b281      	uxth	r1, r0
 80a3948:	6873      	ldr	r3, [r6, #4]
 80a394a:	4628      	mov	r0, r5
 80a394c:	9700      	str	r7, [sp, #0]
 80a394e:	aa03      	add	r2, sp, #12
 80a3950:	f7fd fb36 	bl	80a0fc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3954:	b130      	cbz	r0, 80a3964 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3956:	4639      	mov	r1, r7
 80a3958:	4620      	mov	r0, r4
 80a395a:	f7fd ff99 	bl	80a1890 <_ZN9IPAddressC1Em>
    }
 80a395e:	4620      	mov	r0, r4
 80a3960:	b009      	add	sp, #36	; 0x24
 80a3962:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3964:	4620      	mov	r0, r4
 80a3966:	a903      	add	r1, sp, #12
 80a3968:	f7fd ff80 	bl	80a186c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a396c:	e7f7      	b.n	80a395e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a396e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a396e:	2200      	movs	r2, #0
 80a3970:	6840      	ldr	r0, [r0, #4]
 80a3972:	4611      	mov	r1, r2
 80a3974:	f7fd bbe0 	b.w	80a1138 <network_listening>

080a3978 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3978:	2200      	movs	r2, #0
 80a397a:	6840      	ldr	r0, [r0, #4]
 80a397c:	4611      	mov	r1, r2
 80a397e:	f7fd bbeb 	b.w	80a1158 <network_get_listen_timeout>

080a3982 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3982:	2200      	movs	r2, #0
 80a3984:	6840      	ldr	r0, [r0, #4]
 80a3986:	f7fd bbdf 	b.w	80a1148 <network_set_listen_timeout>

080a398a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a398a:	2200      	movs	r2, #0
 80a398c:	6840      	ldr	r0, [r0, #4]
 80a398e:	f081 0101 	eor.w	r1, r1, #1
 80a3992:	f7fd bbc9 	b.w	80a1128 <network_listen>

080a3996 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3996:	2300      	movs	r3, #0
 80a3998:	6840      	ldr	r0, [r0, #4]
 80a399a:	461a      	mov	r2, r3
 80a399c:	4619      	mov	r1, r3
 80a399e:	f7fd bbbb 	b.w	80a1118 <network_off>

080a39a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a39a2:	2300      	movs	r3, #0
 80a39a4:	6840      	ldr	r0, [r0, #4]
 80a39a6:	461a      	mov	r2, r3
 80a39a8:	4619      	mov	r1, r3
 80a39aa:	f7fd bbad 	b.w	80a1108 <network_on>

080a39ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a39ae:	2200      	movs	r2, #0
 80a39b0:	6840      	ldr	r0, [r0, #4]
 80a39b2:	4611      	mov	r1, r2
 80a39b4:	f7fd bb90 	b.w	80a10d8 <network_connecting>

080a39b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a39b8:	2200      	movs	r2, #0
 80a39ba:	2102      	movs	r1, #2
 80a39bc:	6840      	ldr	r0, [r0, #4]
 80a39be:	f7fd bb93 	b.w	80a10e8 <network_disconnect>

080a39c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a39c2:	2300      	movs	r3, #0
 80a39c4:	6840      	ldr	r0, [r0, #4]
 80a39c6:	461a      	mov	r2, r3
 80a39c8:	f7fd bb7e 	b.w	80a10c8 <network_connect>

080a39cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a39cc:	2204      	movs	r2, #4
 80a39ce:	4b02      	ldr	r3, [pc, #8]	; (80a39d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a39d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a39d2:	4a02      	ldr	r2, [pc, #8]	; (80a39dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a39d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a39d6:	4770      	bx	lr
 80a39d8:	200011c8 	.word	0x200011c8
 80a39dc:	080a4768 	.word	0x080a4768

080a39e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a39e0:	4b01      	ldr	r3, [pc, #4]	; (80a39e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a39e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a39e4:	4770      	bx	lr
 80a39e6:	bf00      	nop
 80a39e8:	20000020 	.word	0x20000020

080a39ec <serialEventRun>:
{
 80a39ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a39ee:	4b13      	ldr	r3, [pc, #76]	; (80a3a3c <serialEventRun+0x50>)
 80a39f0:	b143      	cbz	r3, 80a3a04 <serialEventRun+0x18>
 80a39f2:	f7ff ff2f 	bl	80a3854 <_Z16_fetch_usbserialv>
 80a39f6:	6803      	ldr	r3, [r0, #0]
 80a39f8:	691b      	ldr	r3, [r3, #16]
 80a39fa:	4798      	blx	r3
 80a39fc:	2800      	cmp	r0, #0
 80a39fe:	dd01      	ble.n	80a3a04 <serialEventRun+0x18>
        serialEvent();
 80a3a00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3a04:	4b0e      	ldr	r3, [pc, #56]	; (80a3a40 <serialEventRun+0x54>)
 80a3a06:	b143      	cbz	r3, 80a3a1a <serialEventRun+0x2e>
 80a3a08:	f7ff fe8e 	bl	80a3728 <_Z22__fetch_global_Serial1v>
 80a3a0c:	6803      	ldr	r3, [r0, #0]
 80a3a0e:	691b      	ldr	r3, [r3, #16]
 80a3a10:	4798      	blx	r3
 80a3a12:	2800      	cmp	r0, #0
 80a3a14:	dd01      	ble.n	80a3a1a <serialEventRun+0x2e>
        serialEvent1();
 80a3a16:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a3a1a:	4b0a      	ldr	r3, [pc, #40]	; (80a3a44 <serialEventRun+0x58>)
 80a3a1c:	b10b      	cbz	r3, 80a3a22 <serialEventRun+0x36>
 80a3a1e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3a22:	4b09      	ldr	r3, [pc, #36]	; (80a3a48 <serialEventRun+0x5c>)
 80a3a24:	b143      	cbz	r3, 80a3a38 <serialEventRun+0x4c>
 80a3a26:	f7ff ff53 	bl	80a38d0 <_Z17_fetch_usbserial1v>
 80a3a2a:	6803      	ldr	r3, [r0, #0]
 80a3a2c:	691b      	ldr	r3, [r3, #16]
 80a3a2e:	4798      	blx	r3
 80a3a30:	2800      	cmp	r0, #0
 80a3a32:	dd01      	ble.n	80a3a38 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a3a34:	f3af 8000 	nop.w
}
 80a3a38:	bd08      	pop	{r3, pc}
 80a3a3a:	bf00      	nop
	...

080a3a4c <_post_loop>:
{
 80a3a4c:	b508      	push	{r3, lr}
	serialEventRun();
 80a3a4e:	f7ff ffcd 	bl	80a39ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3a52:	f7fd f963 	bl	80a0d1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3a56:	4b01      	ldr	r3, [pc, #4]	; (80a3a5c <_post_loop+0x10>)
 80a3a58:	6018      	str	r0, [r3, #0]
}
 80a3a5a:	bd08      	pop	{r3, pc}
 80a3a5c:	200011e8 	.word	0x200011e8

080a3a60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3a60:	4802      	ldr	r0, [pc, #8]	; (80a3a6c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3a62:	4a03      	ldr	r2, [pc, #12]	; (80a3a70 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3a64:	4903      	ldr	r1, [pc, #12]	; (80a3a74 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3a66:	1a12      	subs	r2, r2, r0
 80a3a68:	f000 ba80 	b.w	80a3f6c <memcpy>
 80a3a6c:	40024000 	.word	0x40024000
 80a3a70:	40024004 	.word	0x40024004
 80a3a74:	080a49c0 	.word	0x080a49c0

080a3a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3a78:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3a7a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3a7c:	461a      	mov	r2, r3
 80a3a7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3a82:	9300      	str	r3, [sp, #0]
 80a3a84:	f7fd faf6 	bl	80a1074 <system_ctrl_set_result>
}
 80a3a88:	b003      	add	sp, #12
 80a3a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3a90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3a90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3a92:	8843      	ldrh	r3, [r0, #2]
 80a3a94:	2b0a      	cmp	r3, #10
 80a3a96:	d008      	beq.n	80a3aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3a98:	2b50      	cmp	r3, #80	; 0x50
 80a3a9a:	d10b      	bne.n	80a3ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a3a9c:	4b09      	ldr	r3, [pc, #36]	; (80a3ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3a9e:	681b      	ldr	r3, [r3, #0]
 80a3aa0:	b14b      	cbz	r3, 80a3ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3aa2:	b003      	add	sp, #12
 80a3aa4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3aa8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a3aaa:	f7ff ffe5 	bl	80a3a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3aae:	b003      	add	sp, #12
 80a3ab0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3ab4:	2300      	movs	r3, #0
 80a3ab6:	461a      	mov	r2, r3
 80a3ab8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3abc:	9300      	str	r3, [sp, #0]
 80a3abe:	f7fd fad9 	bl	80a1074 <system_ctrl_set_result>
}
 80a3ac2:	e7f4      	b.n	80a3aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3ac4:	200011d4 	.word	0x200011d4

080a3ac8 <module_user_init_hook>:
{
 80a3ac8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3aca:	4c12      	ldr	r4, [pc, #72]	; (80a3b14 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3acc:	2100      	movs	r1, #0
 80a3ace:	4812      	ldr	r0, [pc, #72]	; (80a3b18 <module_user_init_hook+0x50>)
 80a3ad0:	f7fd fb8a 	bl	80a11e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3ad4:	4d11      	ldr	r5, [pc, #68]	; (80a3b1c <module_user_init_hook+0x54>)
 80a3ad6:	6823      	ldr	r3, [r4, #0]
 80a3ad8:	42ab      	cmp	r3, r5
 80a3ada:	bf0c      	ite	eq
 80a3adc:	2201      	moveq	r2, #1
 80a3ade:	2200      	movne	r2, #0
 80a3ae0:	4b0f      	ldr	r3, [pc, #60]	; (80a3b20 <module_user_init_hook+0x58>)
 80a3ae2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3ae4:	d002      	beq.n	80a3aec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a3ae6:	f7ff ffbb 	bl	80a3a60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3aea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3aec:	f7fd f906 	bl	80a0cfc <HAL_RNG_GetRandomNumber>
 80a3af0:	4604      	mov	r4, r0
    srand(seed);
 80a3af2:	f000 fa6b 	bl	80a3fcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3af6:	4b0b      	ldr	r3, [pc, #44]	; (80a3b24 <module_user_init_hook+0x5c>)
 80a3af8:	b113      	cbz	r3, 80a3b00 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a3afa:	4620      	mov	r0, r4
 80a3afc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3b00:	2100      	movs	r1, #0
 80a3b02:	4808      	ldr	r0, [pc, #32]	; (80a3b24 <module_user_init_hook+0x5c>)
 80a3b04:	f7fd fad8 	bl	80a10b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3b0c:	2100      	movs	r1, #0
 80a3b0e:	4806      	ldr	r0, [pc, #24]	; (80a3b28 <module_user_init_hook+0x60>)
 80a3b10:	f7fd baa6 	b.w	80a1060 <system_ctrl_set_app_request_handler>
 80a3b14:	40024000 	.word	0x40024000
 80a3b18:	080a39e1 	.word	0x080a39e1
 80a3b1c:	9a271c1e 	.word	0x9a271c1e
 80a3b20:	200011d0 	.word	0x200011d0
 80a3b24:	00000000 	.word	0x00000000
 80a3b28:	080a3a91 	.word	0x080a3a91

080a3b2c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a3b2c:	b510      	push	{r4, lr}
 80a3b2e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3b30:	6880      	ldr	r0, [r0, #8]
 80a3b32:	b108      	cbz	r0, 80a3b38 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3b34:	f7fd f8ca 	bl	80a0ccc <os_mutex_recursive_destroy>
 80a3b38:	4620      	mov	r0, r4
 80a3b3a:	bd10      	pop	{r4, pc}

080a3b3c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3b3c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3b3e:	b570      	push	{r4, r5, r6, lr}
 80a3b40:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3b42:	d901      	bls.n	80a3b48 <pinAvailable+0xc>
    return false;
 80a3b44:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3b46:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3b48:	f1a0 030d 	sub.w	r3, r0, #13
 80a3b4c:	2b02      	cmp	r3, #2
 80a3b4e:	d90b      	bls.n	80a3b68 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3b50:	2801      	cmp	r0, #1
 80a3b52:	d826      	bhi.n	80a3ba2 <pinAvailable+0x66>
 80a3b54:	f000 f892 	bl	80a3c7c <_Z19__fetch_global_Wirev>
 80a3b58:	2100      	movs	r1, #0
 80a3b5a:	7c00      	ldrb	r0, [r0, #16]
 80a3b5c:	f7fd f936 	bl	80a0dcc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3b60:	f080 0001 	eor.w	r0, r0, #1
 80a3b64:	b2c0      	uxtb	r0, r0
 80a3b66:	e7ee      	b.n	80a3b46 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3b68:	4e13      	ldr	r6, [pc, #76]	; (80a3bb8 <pinAvailable+0x7c>)
 80a3b6a:	7831      	ldrb	r1, [r6, #0]
 80a3b6c:	f3bf 8f5b 	dmb	ish
 80a3b70:	f011 0501 	ands.w	r5, r1, #1
 80a3b74:	d10f      	bne.n	80a3b96 <pinAvailable+0x5a>
 80a3b76:	4630      	mov	r0, r6
 80a3b78:	f7fc fa9e 	bl	80a00b8 <__cxa_guard_acquire>
 80a3b7c:	b158      	cbz	r0, 80a3b96 <pinAvailable+0x5a>
 80a3b7e:	4629      	mov	r1, r5
 80a3b80:	480e      	ldr	r0, [pc, #56]	; (80a3bbc <pinAvailable+0x80>)
 80a3b82:	f7ff f985 	bl	80a2e90 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3b86:	4630      	mov	r0, r6
 80a3b88:	f7fc fa9b 	bl	80a00c2 <__cxa_guard_release>
 80a3b8c:	4a0c      	ldr	r2, [pc, #48]	; (80a3bc0 <pinAvailable+0x84>)
 80a3b8e:	490d      	ldr	r1, [pc, #52]	; (80a3bc4 <pinAvailable+0x88>)
 80a3b90:	480a      	ldr	r0, [pc, #40]	; (80a3bbc <pinAvailable+0x80>)
 80a3b92:	f000 f8b3 	bl	80a3cfc <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3b96:	4b09      	ldr	r3, [pc, #36]	; (80a3bbc <pinAvailable+0x80>)
 80a3b98:	7818      	ldrb	r0, [r3, #0]
 80a3b9a:	f7fd f971 	bl	80a0e80 <hal_spi_is_enabled>
 80a3b9e:	2800      	cmp	r0, #0
 80a3ba0:	d1d0      	bne.n	80a3b44 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3ba2:	3c12      	subs	r4, #18
 80a3ba4:	2c01      	cmp	r4, #1
 80a3ba6:	d805      	bhi.n	80a3bb4 <pinAvailable+0x78>
 80a3ba8:	f7ff fdbe 	bl	80a3728 <_Z22__fetch_global_Serial1v>
 80a3bac:	7c00      	ldrb	r0, [r0, #16]
 80a3bae:	f7fd f9a7 	bl	80a0f00 <hal_usart_is_enabled>
 80a3bb2:	e7d5      	b.n	80a3b60 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3bb4:	2001      	movs	r0, #1
 80a3bb6:	e7c6      	b.n	80a3b46 <pinAvailable+0xa>
 80a3bb8:	200011d8 	.word	0x200011d8
 80a3bbc:	200011dc 	.word	0x200011dc
 80a3bc0:	20000084 	.word	0x20000084
 80a3bc4:	080a3b2d 	.word	0x080a3b2d

080a3bc8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3bc8:	2817      	cmp	r0, #23
{
 80a3bca:	b538      	push	{r3, r4, r5, lr}
 80a3bcc:	4604      	mov	r4, r0
 80a3bce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3bd0:	d80a      	bhi.n	80a3be8 <pinMode+0x20>
 80a3bd2:	29ff      	cmp	r1, #255	; 0xff
 80a3bd4:	d008      	beq.n	80a3be8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3bd6:	f7ff ffb1 	bl	80a3b3c <pinAvailable>
 80a3bda:	b128      	cbz	r0, 80a3be8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3bdc:	4629      	mov	r1, r5
 80a3bde:	4620      	mov	r0, r4
}
 80a3be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3be4:	f7fd b8aa 	b.w	80a0d3c <HAL_Pin_Mode>
}
 80a3be8:	bd38      	pop	{r3, r4, r5, pc}

080a3bea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3bea:	b538      	push	{r3, r4, r5, lr}
 80a3bec:	4604      	mov	r4, r0
 80a3bee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3bf0:	f7fd f8ac 	bl	80a0d4c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3bf4:	28ff      	cmp	r0, #255	; 0xff
 80a3bf6:	d010      	beq.n	80a3c1a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3bf8:	2806      	cmp	r0, #6
 80a3bfa:	d804      	bhi.n	80a3c06 <digitalWrite+0x1c>
 80a3bfc:	234d      	movs	r3, #77	; 0x4d
 80a3bfe:	fa23 f000 	lsr.w	r0, r3, r0
 80a3c02:	07c3      	lsls	r3, r0, #31
 80a3c04:	d409      	bmi.n	80a3c1a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3c06:	4620      	mov	r0, r4
 80a3c08:	f7ff ff98 	bl	80a3b3c <pinAvailable>
 80a3c0c:	b128      	cbz	r0, 80a3c1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3c0e:	4629      	mov	r1, r5
 80a3c10:	4620      	mov	r0, r4
}
 80a3c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3c16:	f7fd b8a1 	b.w	80a0d5c <HAL_GPIO_Write>
}
 80a3c1a:	bd38      	pop	{r3, r4, r5, pc}

080a3c1c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3c1c:	b510      	push	{r4, lr}
 80a3c1e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3c20:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3c22:	bf9c      	itt	ls
 80a3c24:	340a      	addls	r4, #10
 80a3c26:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3c28:	4620      	mov	r0, r4
 80a3c2a:	f7ff ff87 	bl	80a3b3c <pinAvailable>
 80a3c2e:	b150      	cbz	r0, 80a3c46 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3c30:	2103      	movs	r1, #3
 80a3c32:	4620      	mov	r0, r4
 80a3c34:	f7fd f87a 	bl	80a0d2c <HAL_Validate_Pin_Function>
 80a3c38:	2803      	cmp	r0, #3
 80a3c3a:	d104      	bne.n	80a3c46 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a3c3c:	4620      	mov	r0, r4
}
 80a3c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3c42:	f7fd b893 	b.w	80a0d6c <hal_adc_read>
}
 80a3c46:	2000      	movs	r0, #0
 80a3c48:	bd10      	pop	{r4, pc}
	...

080a3c4c <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3c4c:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3c4e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3c50:	2520      	movs	r5, #32
 80a3c52:	8043      	strh	r3, [r0, #2]
 80a3c54:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c56:	4e08      	ldr	r6, [pc, #32]	; (80a3c78 <_Z17acquireWireBufferv+0x2c>)
{
 80a3c58:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3c5a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c5c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3c5e:	6085      	str	r5, [r0, #8]
 80a3c60:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c62:	4628      	mov	r0, r5
 80a3c64:	f000 f853 	bl	80a3d0e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c68:	4631      	mov	r1, r6
	};
 80a3c6a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c6c:	4628      	mov	r0, r5
 80a3c6e:	f000 f84e 	bl	80a3d0e <_ZnajRKSt9nothrow_t>
	};
 80a3c72:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3c74:	4620      	mov	r0, r4
 80a3c76:	bd70      	pop	{r4, r5, r6, pc}
 80a3c78:	080a479c 	.word	0x080a479c

080a3c7c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3c7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c7e:	4d0f      	ldr	r5, [pc, #60]	; (80a3cbc <_Z19__fetch_global_Wirev+0x40>)
{
 80a3c80:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c82:	7829      	ldrb	r1, [r5, #0]
 80a3c84:	f3bf 8f5b 	dmb	ish
 80a3c88:	f011 0401 	ands.w	r4, r1, #1
 80a3c8c:	d113      	bne.n	80a3cb6 <_Z19__fetch_global_Wirev+0x3a>
 80a3c8e:	4628      	mov	r0, r5
 80a3c90:	f7fc fa12 	bl	80a00b8 <__cxa_guard_acquire>
 80a3c94:	b178      	cbz	r0, 80a3cb6 <_Z19__fetch_global_Wirev+0x3a>
 80a3c96:	a801      	add	r0, sp, #4
 80a3c98:	f7ff ffd8 	bl	80a3c4c <_Z17acquireWireBufferv>
 80a3c9c:	4621      	mov	r1, r4
 80a3c9e:	aa01      	add	r2, sp, #4
 80a3ca0:	4807      	ldr	r0, [pc, #28]	; (80a3cc0 <_Z19__fetch_global_Wirev+0x44>)
 80a3ca2:	f7fd fda9 	bl	80a17f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3ca6:	4628      	mov	r0, r5
 80a3ca8:	f7fc fa0b 	bl	80a00c2 <__cxa_guard_release>
 80a3cac:	4a05      	ldr	r2, [pc, #20]	; (80a3cc4 <_Z19__fetch_global_Wirev+0x48>)
 80a3cae:	4906      	ldr	r1, [pc, #24]	; (80a3cc8 <_Z19__fetch_global_Wirev+0x4c>)
 80a3cb0:	4803      	ldr	r0, [pc, #12]	; (80a3cc0 <_Z19__fetch_global_Wirev+0x44>)
 80a3cb2:	f000 f823 	bl	80a3cfc <__aeabi_atexit>
	return wire;
}
 80a3cb6:	4802      	ldr	r0, [pc, #8]	; (80a3cc0 <_Z19__fetch_global_Wirev+0x44>)
 80a3cb8:	b007      	add	sp, #28
 80a3cba:	bd30      	pop	{r4, r5, pc}
 80a3cbc:	200011ec 	.word	0x200011ec
 80a3cc0:	200011f0 	.word	0x200011f0
 80a3cc4:	20000084 	.word	0x20000084
 80a3cc8:	080a17a1 	.word	0x080a17a1

080a3ccc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3ccc:	2300      	movs	r3, #0
 80a3cce:	b513      	push	{r0, r1, r4, lr}
 80a3cd0:	4c07      	ldr	r4, [pc, #28]	; (80a3cf0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3cd2:	461a      	mov	r2, r3
 80a3cd4:	4619      	mov	r1, r3
 80a3cd6:	4620      	mov	r0, r4
 80a3cd8:	9300      	str	r3, [sp, #0]
 80a3cda:	f7fd fdef 	bl	80a18bc <_ZN9IPAddressC1Ehhhh>
 80a3cde:	4620      	mov	r0, r4
 80a3ce0:	4a04      	ldr	r2, [pc, #16]	; (80a3cf4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3ce2:	4905      	ldr	r1, [pc, #20]	; (80a3cf8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3ce4:	b002      	add	sp, #8
 80a3ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3cea:	f000 b807 	b.w	80a3cfc <__aeabi_atexit>
 80a3cee:	bf00      	nop
 80a3cf0:	20001204 	.word	0x20001204
 80a3cf4:	20000084 	.word	0x20000084
 80a3cf8:	080a00c9 	.word	0x080a00c9

080a3cfc <__aeabi_atexit>:
 80a3cfc:	460b      	mov	r3, r1
 80a3cfe:	4601      	mov	r1, r0
 80a3d00:	4618      	mov	r0, r3
 80a3d02:	f000 b925 	b.w	80a3f50 <__cxa_atexit>

080a3d06 <_ZdlPvj>:
 80a3d06:	f7fc b9ca 	b.w	80a009e <_ZdlPv>

080a3d0a <_ZnwjRKSt9nothrow_t>:
 80a3d0a:	f7fc b9c4 	b.w	80a0096 <_Znwj>

080a3d0e <_ZnajRKSt9nothrow_t>:
 80a3d0e:	f7fc b9c4 	b.w	80a009a <_Znaj>

080a3d12 <_ZSt25__throw_bad_function_callv>:
 80a3d12:	b508      	push	{r3, lr}
 80a3d14:	f7fd fa58 	bl	80a11c8 <abort>

080a3d18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a3d18:	4901      	ldr	r1, [pc, #4]	; (80a3d20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a3d1a:	f000 b8fb 	b.w	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3d1e:	bf00      	nop
 80a3d20:	080a47b8 	.word	0x080a47b8

080a3d24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3d26:	2400      	movs	r4, #0
 80a3d28:	2310      	movs	r3, #16
 80a3d2a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3d2e:	6803      	ldr	r3, [r0, #0]
 80a3d30:	4615      	mov	r5, r2
 80a3d32:	699e      	ldr	r6, [r3, #24]
 80a3d34:	6812      	ldr	r2, [r2, #0]
 80a3d36:	466b      	mov	r3, sp
 80a3d38:	9400      	str	r4, [sp, #0]
 80a3d3a:	f88d 4004 	strb.w	r4, [sp, #4]
 80a3d3e:	47b0      	blx	r6
 80a3d40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3d44:	f003 0306 	and.w	r3, r3, #6
 80a3d48:	2b06      	cmp	r3, #6
 80a3d4a:	bf09      	itett	eq
 80a3d4c:	2001      	moveq	r0, #1
 80a3d4e:	4620      	movne	r0, r4
 80a3d50:	9b00      	ldreq	r3, [sp, #0]
 80a3d52:	602b      	streq	r3, [r5, #0]
 80a3d54:	b004      	add	sp, #16
 80a3d56:	bd70      	pop	{r4, r5, r6, pc}

080a3d58 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a3d58:	9800      	ldr	r0, [sp, #0]
 80a3d5a:	4290      	cmp	r0, r2
 80a3d5c:	bf14      	ite	ne
 80a3d5e:	2001      	movne	r0, #1
 80a3d60:	2006      	moveq	r0, #6
 80a3d62:	4770      	bx	lr

080a3d64 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3d64:	b510      	push	{r4, lr}
 80a3d66:	4604      	mov	r4, r0
 80a3d68:	4b02      	ldr	r3, [pc, #8]	; (80a3d74 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a3d6a:	6003      	str	r3, [r0, #0]
 80a3d6c:	f000 f8cf 	bl	80a3f0e <_ZNSt9type_infoD1Ev>
 80a3d70:	4620      	mov	r0, r4
 80a3d72:	bd10      	pop	{r4, pc}
 80a3d74:	080a47f8 	.word	0x080a47f8

080a3d78 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a3d78:	b510      	push	{r4, lr}
 80a3d7a:	4604      	mov	r4, r0
 80a3d7c:	f7ff fff2 	bl	80a3d64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3d80:	4620      	mov	r0, r4
 80a3d82:	2108      	movs	r1, #8
 80a3d84:	f7ff ffbf 	bl	80a3d06 <_ZdlPvj>
 80a3d88:	4620      	mov	r0, r4
 80a3d8a:	bd10      	pop	{r4, pc}

080a3d8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a3d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3d94:	461f      	mov	r7, r3
 80a3d96:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a3d9a:	4598      	cmp	r8, r3
 80a3d9c:	4606      	mov	r6, r0
 80a3d9e:	4615      	mov	r5, r2
 80a3da0:	d107      	bne.n	80a3db2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3da2:	9907      	ldr	r1, [sp, #28]
 80a3da4:	f000 f8b6 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3da8:	b118      	cbz	r0, 80a3db2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3daa:	7165      	strb	r5, [r4, #5]
 80a3dac:	2000      	movs	r0, #0
 80a3dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3db2:	4639      	mov	r1, r7
 80a3db4:	4630      	mov	r0, r6
 80a3db6:	f000 f8ad 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3dba:	2800      	cmp	r0, #0
 80a3dbc:	d0f6      	beq.n	80a3dac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a3dbe:	2301      	movs	r3, #1
 80a3dc0:	f8c4 8000 	str.w	r8, [r4]
 80a3dc4:	7125      	strb	r5, [r4, #4]
 80a3dc6:	71a3      	strb	r3, [r4, #6]
 80a3dc8:	e7f0      	b.n	80a3dac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a3dca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a3dca:	b538      	push	{r3, r4, r5, lr}
 80a3dcc:	4615      	mov	r5, r2
 80a3dce:	461c      	mov	r4, r3
 80a3dd0:	f000 f8a0 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3dd4:	b120      	cbz	r0, 80a3de0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a3dd6:	2308      	movs	r3, #8
 80a3dd8:	60e3      	str	r3, [r4, #12]
 80a3dda:	2306      	movs	r3, #6
 80a3ddc:	6025      	str	r5, [r4, #0]
 80a3dde:	7123      	strb	r3, [r4, #4]
 80a3de0:	bd38      	pop	{r3, r4, r5, pc}

080a3de2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a3de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3de6:	4605      	mov	r5, r0
 80a3de8:	460c      	mov	r4, r1
 80a3dea:	4616      	mov	r6, r2
 80a3dec:	461f      	mov	r7, r3
 80a3dee:	f000 f891 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3df2:	b948      	cbnz	r0, 80a3e08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3df4:	2f03      	cmp	r7, #3
 80a3df6:	d807      	bhi.n	80a3e08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a3df8:	6823      	ldr	r3, [r4, #0]
 80a3dfa:	4632      	mov	r2, r6
 80a3dfc:	4629      	mov	r1, r5
 80a3dfe:	4620      	mov	r0, r4
 80a3e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3e04:	695b      	ldr	r3, [r3, #20]
 80a3e06:	4718      	bx	r3
 80a3e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3e0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a3e0c:	b510      	push	{r4, lr}
 80a3e0e:	4604      	mov	r4, r0
 80a3e10:	4b02      	ldr	r3, [pc, #8]	; (80a3e1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a3e12:	6003      	str	r3, [r0, #0]
 80a3e14:	f7ff ffa6 	bl	80a3d64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3e18:	4620      	mov	r0, r4
 80a3e1a:	bd10      	pop	{r4, pc}
 80a3e1c:	080a4858 	.word	0x080a4858

080a3e20 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a3e20:	b510      	push	{r4, lr}
 80a3e22:	4604      	mov	r4, r0
 80a3e24:	f7ff fff2 	bl	80a3e0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a3e28:	4620      	mov	r0, r4
 80a3e2a:	210c      	movs	r1, #12
 80a3e2c:	f7ff ff6b 	bl	80a3d06 <_ZdlPvj>
 80a3e30:	4620      	mov	r0, r4
 80a3e32:	bd10      	pop	{r4, pc}

080a3e34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a3e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3e38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3e3c:	4606      	mov	r6, r0
 80a3e3e:	4590      	cmp	r8, r2
 80a3e40:	460f      	mov	r7, r1
 80a3e42:	4615      	mov	r5, r2
 80a3e44:	461c      	mov	r4, r3
 80a3e46:	d00b      	beq.n	80a3e60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a3e48:	68b0      	ldr	r0, [r6, #8]
 80a3e4a:	462a      	mov	r2, r5
 80a3e4c:	6803      	ldr	r3, [r0, #0]
 80a3e4e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3e52:	6a1e      	ldr	r6, [r3, #32]
 80a3e54:	4639      	mov	r1, r7
 80a3e56:	4623      	mov	r3, r4
 80a3e58:	46b4      	mov	ip, r6
 80a3e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3e5e:	4760      	bx	ip
 80a3e60:	4619      	mov	r1, r3
 80a3e62:	f000 f857 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3e66:	2800      	cmp	r0, #0
 80a3e68:	d0ee      	beq.n	80a3e48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a3e6a:	2006      	movs	r0, #6
 80a3e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3e70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e74:	460d      	mov	r5, r1
 80a3e76:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a3e7a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3e7e:	4619      	mov	r1, r3
 80a3e80:	4681      	mov	r9, r0
 80a3e82:	4617      	mov	r7, r2
 80a3e84:	4698      	mov	r8, r3
 80a3e86:	f000 f845 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3e8a:	b190      	cbz	r0, 80a3eb2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3e8c:	2d00      	cmp	r5, #0
 80a3e8e:	6034      	str	r4, [r6, #0]
 80a3e90:	7137      	strb	r7, [r6, #4]
 80a3e92:	db09      	blt.n	80a3ea8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3e94:	442c      	add	r4, r5
 80a3e96:	45a2      	cmp	sl, r4
 80a3e98:	bf0c      	ite	eq
 80a3e9a:	2406      	moveq	r4, #6
 80a3e9c:	2401      	movne	r4, #1
 80a3e9e:	71b4      	strb	r4, [r6, #6]
 80a3ea0:	2000      	movs	r0, #0
 80a3ea2:	b001      	add	sp, #4
 80a3ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3ea8:	3502      	adds	r5, #2
 80a3eaa:	d1f9      	bne.n	80a3ea0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3eac:	2301      	movs	r3, #1
 80a3eae:	71b3      	strb	r3, [r6, #6]
 80a3eb0:	e7f6      	b.n	80a3ea0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3eb2:	4554      	cmp	r4, sl
 80a3eb4:	d106      	bne.n	80a3ec4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3eb6:	4659      	mov	r1, fp
 80a3eb8:	4648      	mov	r0, r9
 80a3eba:	f000 f82b 	bl	80a3f14 <_ZNKSt9type_infoeqERKS_>
 80a3ebe:	b108      	cbz	r0, 80a3ec4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3ec0:	7177      	strb	r7, [r6, #5]
 80a3ec2:	e7ed      	b.n	80a3ea0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3ec4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a3ec8:	463a      	mov	r2, r7
 80a3eca:	6803      	ldr	r3, [r0, #0]
 80a3ecc:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a3ed0:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a3ed4:	69dc      	ldr	r4, [r3, #28]
 80a3ed6:	4629      	mov	r1, r5
 80a3ed8:	4643      	mov	r3, r8
 80a3eda:	46a4      	mov	ip, r4
 80a3edc:	b001      	add	sp, #4
 80a3ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3ee2:	4760      	bx	ip

080a3ee4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a3ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ee8:	4607      	mov	r7, r0
 80a3eea:	460c      	mov	r4, r1
 80a3eec:	4615      	mov	r5, r2
 80a3eee:	461e      	mov	r6, r3
 80a3ef0:	f7ff ff6b 	bl	80a3dca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a3ef4:	b948      	cbnz	r0, 80a3f0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a3ef6:	68b8      	ldr	r0, [r7, #8]
 80a3ef8:	462a      	mov	r2, r5
 80a3efa:	6803      	ldr	r3, [r0, #0]
 80a3efc:	4621      	mov	r1, r4
 80a3efe:	699f      	ldr	r7, [r3, #24]
 80a3f00:	4633      	mov	r3, r6
 80a3f02:	46bc      	mov	ip, r7
 80a3f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3f08:	4760      	bx	ip
 80a3f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3f0e <_ZNSt9type_infoD1Ev>:
 80a3f0e:	4770      	bx	lr

080a3f10 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a3f10:	2000      	movs	r0, #0
 80a3f12:	4770      	bx	lr

080a3f14 <_ZNKSt9type_infoeqERKS_>:
 80a3f14:	4281      	cmp	r1, r0
 80a3f16:	b508      	push	{r3, lr}
 80a3f18:	d00e      	beq.n	80a3f38 <_ZNKSt9type_infoeqERKS_+0x24>
 80a3f1a:	6840      	ldr	r0, [r0, #4]
 80a3f1c:	7803      	ldrb	r3, [r0, #0]
 80a3f1e:	2b2a      	cmp	r3, #42	; 0x2a
 80a3f20:	d00c      	beq.n	80a3f3c <_ZNKSt9type_infoeqERKS_+0x28>
 80a3f22:	6849      	ldr	r1, [r1, #4]
 80a3f24:	780b      	ldrb	r3, [r1, #0]
 80a3f26:	2b2a      	cmp	r3, #42	; 0x2a
 80a3f28:	bf08      	it	eq
 80a3f2a:	3101      	addeq	r1, #1
 80a3f2c:	f000 f889 	bl	80a4042 <strcmp>
 80a3f30:	fab0 f080 	clz	r0, r0
 80a3f34:	0940      	lsrs	r0, r0, #5
 80a3f36:	bd08      	pop	{r3, pc}
 80a3f38:	2001      	movs	r0, #1
 80a3f3a:	e7fc      	b.n	80a3f36 <_ZNKSt9type_infoeqERKS_+0x22>
 80a3f3c:	2000      	movs	r0, #0
 80a3f3e:	e7fa      	b.n	80a3f36 <_ZNKSt9type_infoeqERKS_+0x22>

080a3f40 <atoi>:
 80a3f40:	220a      	movs	r2, #10
 80a3f42:	2100      	movs	r1, #0
 80a3f44:	f000 b96a 	b.w	80a421c <strtol>

080a3f48 <atol>:
 80a3f48:	220a      	movs	r2, #10
 80a3f4a:	2100      	movs	r1, #0
 80a3f4c:	f000 b966 	b.w	80a421c <strtol>

080a3f50 <__cxa_atexit>:
 80a3f50:	b510      	push	{r4, lr}
 80a3f52:	4604      	mov	r4, r0
 80a3f54:	4804      	ldr	r0, [pc, #16]	; (80a3f68 <__cxa_atexit+0x18>)
 80a3f56:	4613      	mov	r3, r2
 80a3f58:	b120      	cbz	r0, 80a3f64 <__cxa_atexit+0x14>
 80a3f5a:	460a      	mov	r2, r1
 80a3f5c:	2002      	movs	r0, #2
 80a3f5e:	4621      	mov	r1, r4
 80a3f60:	f3af 8000 	nop.w
 80a3f64:	bd10      	pop	{r4, pc}
 80a3f66:	bf00      	nop
 80a3f68:	00000000 	.word	0x00000000

080a3f6c <memcpy>:
 80a3f6c:	440a      	add	r2, r1
 80a3f6e:	4291      	cmp	r1, r2
 80a3f70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3f74:	d100      	bne.n	80a3f78 <memcpy+0xc>
 80a3f76:	4770      	bx	lr
 80a3f78:	b510      	push	{r4, lr}
 80a3f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3f7e:	4291      	cmp	r1, r2
 80a3f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3f84:	d1f9      	bne.n	80a3f7a <memcpy+0xe>
 80a3f86:	bd10      	pop	{r4, pc}

080a3f88 <memmove>:
 80a3f88:	4288      	cmp	r0, r1
 80a3f8a:	b510      	push	{r4, lr}
 80a3f8c:	eb01 0402 	add.w	r4, r1, r2
 80a3f90:	d902      	bls.n	80a3f98 <memmove+0x10>
 80a3f92:	4284      	cmp	r4, r0
 80a3f94:	4623      	mov	r3, r4
 80a3f96:	d807      	bhi.n	80a3fa8 <memmove+0x20>
 80a3f98:	1e43      	subs	r3, r0, #1
 80a3f9a:	42a1      	cmp	r1, r4
 80a3f9c:	d008      	beq.n	80a3fb0 <memmove+0x28>
 80a3f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3fa6:	e7f8      	b.n	80a3f9a <memmove+0x12>
 80a3fa8:	4601      	mov	r1, r0
 80a3faa:	4402      	add	r2, r0
 80a3fac:	428a      	cmp	r2, r1
 80a3fae:	d100      	bne.n	80a3fb2 <memmove+0x2a>
 80a3fb0:	bd10      	pop	{r4, pc}
 80a3fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3fba:	e7f7      	b.n	80a3fac <memmove+0x24>

080a3fbc <memset>:
 80a3fbc:	4603      	mov	r3, r0
 80a3fbe:	4402      	add	r2, r0
 80a3fc0:	4293      	cmp	r3, r2
 80a3fc2:	d100      	bne.n	80a3fc6 <memset+0xa>
 80a3fc4:	4770      	bx	lr
 80a3fc6:	f803 1b01 	strb.w	r1, [r3], #1
 80a3fca:	e7f9      	b.n	80a3fc0 <memset+0x4>

080a3fcc <srand>:
 80a3fcc:	b538      	push	{r3, r4, r5, lr}
 80a3fce:	4b0d      	ldr	r3, [pc, #52]	; (80a4004 <srand+0x38>)
 80a3fd0:	4604      	mov	r4, r0
 80a3fd2:	681d      	ldr	r5, [r3, #0]
 80a3fd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3fd6:	b97b      	cbnz	r3, 80a3ff8 <srand+0x2c>
 80a3fd8:	2018      	movs	r0, #24
 80a3fda:	f7fd f8d5 	bl	80a1188 <malloc>
 80a3fde:	4a0a      	ldr	r2, [pc, #40]	; (80a4008 <srand+0x3c>)
 80a3fe0:	4b0a      	ldr	r3, [pc, #40]	; (80a400c <srand+0x40>)
 80a3fe2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3fe4:	e9c0 2300 	strd	r2, r3, [r0]
 80a3fe8:	4b09      	ldr	r3, [pc, #36]	; (80a4010 <srand+0x44>)
 80a3fea:	2201      	movs	r2, #1
 80a3fec:	6083      	str	r3, [r0, #8]
 80a3fee:	230b      	movs	r3, #11
 80a3ff0:	8183      	strh	r3, [r0, #12]
 80a3ff2:	2300      	movs	r3, #0
 80a3ff4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3ff8:	2200      	movs	r2, #0
 80a3ffa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3ffc:	611c      	str	r4, [r3, #16]
 80a3ffe:	615a      	str	r2, [r3, #20]
 80a4000:	bd38      	pop	{r3, r4, r5, pc}
 80a4002:	bf00      	nop
 80a4004:	20000020 	.word	0x20000020
 80a4008:	abcd330e 	.word	0xabcd330e
 80a400c:	e66d1234 	.word	0xe66d1234
 80a4010:	0005deec 	.word	0x0005deec

080a4014 <strchr>:
 80a4014:	4603      	mov	r3, r0
 80a4016:	b2c9      	uxtb	r1, r1
 80a4018:	4618      	mov	r0, r3
 80a401a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a401e:	b112      	cbz	r2, 80a4026 <strchr+0x12>
 80a4020:	428a      	cmp	r2, r1
 80a4022:	d1f9      	bne.n	80a4018 <strchr+0x4>
 80a4024:	4770      	bx	lr
 80a4026:	2900      	cmp	r1, #0
 80a4028:	bf18      	it	ne
 80a402a:	2000      	movne	r0, #0
 80a402c:	4770      	bx	lr

080a402e <strchrnul>:
 80a402e:	b510      	push	{r4, lr}
 80a4030:	4604      	mov	r4, r0
 80a4032:	f7ff ffef 	bl	80a4014 <strchr>
 80a4036:	b918      	cbnz	r0, 80a4040 <strchrnul+0x12>
 80a4038:	4620      	mov	r0, r4
 80a403a:	f000 f830 	bl	80a409e <strlen>
 80a403e:	4420      	add	r0, r4
 80a4040:	bd10      	pop	{r4, pc}

080a4042 <strcmp>:
 80a4042:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4046:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a404a:	2a01      	cmp	r2, #1
 80a404c:	bf28      	it	cs
 80a404e:	429a      	cmpcs	r2, r3
 80a4050:	d0f7      	beq.n	80a4042 <strcmp>
 80a4052:	1ad0      	subs	r0, r2, r3
 80a4054:	4770      	bx	lr

080a4056 <strcpy>:
 80a4056:	4603      	mov	r3, r0
 80a4058:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a405c:	f803 2b01 	strb.w	r2, [r3], #1
 80a4060:	2a00      	cmp	r2, #0
 80a4062:	d1f9      	bne.n	80a4058 <strcpy+0x2>
 80a4064:	4770      	bx	lr
	...

080a4068 <strdup>:
 80a4068:	4b02      	ldr	r3, [pc, #8]	; (80a4074 <strdup+0xc>)
 80a406a:	4601      	mov	r1, r0
 80a406c:	6818      	ldr	r0, [r3, #0]
 80a406e:	f000 b803 	b.w	80a4078 <_strdup_r>
 80a4072:	bf00      	nop
 80a4074:	20000020 	.word	0x20000020

080a4078 <_strdup_r>:
 80a4078:	b570      	push	{r4, r5, r6, lr}
 80a407a:	4604      	mov	r4, r0
 80a407c:	4608      	mov	r0, r1
 80a407e:	460d      	mov	r5, r1
 80a4080:	f000 f80d 	bl	80a409e <strlen>
 80a4084:	1c46      	adds	r6, r0, #1
 80a4086:	4631      	mov	r1, r6
 80a4088:	4620      	mov	r0, r4
 80a408a:	f7fd f8a5 	bl	80a11d8 <_malloc_r>
 80a408e:	4604      	mov	r4, r0
 80a4090:	b118      	cbz	r0, 80a409a <_strdup_r+0x22>
 80a4092:	4632      	mov	r2, r6
 80a4094:	4629      	mov	r1, r5
 80a4096:	f7ff ff69 	bl	80a3f6c <memcpy>
 80a409a:	4620      	mov	r0, r4
 80a409c:	bd70      	pop	{r4, r5, r6, pc}

080a409e <strlen>:
 80a409e:	4603      	mov	r3, r0
 80a40a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a40a4:	2a00      	cmp	r2, #0
 80a40a6:	d1fb      	bne.n	80a40a0 <strlen+0x2>
 80a40a8:	1a18      	subs	r0, r3, r0
 80a40aa:	3801      	subs	r0, #1
 80a40ac:	4770      	bx	lr

080a40ae <strncmp>:
 80a40ae:	b510      	push	{r4, lr}
 80a40b0:	b16a      	cbz	r2, 80a40ce <strncmp+0x20>
 80a40b2:	3901      	subs	r1, #1
 80a40b4:	1884      	adds	r4, r0, r2
 80a40b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a40ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a40be:	4293      	cmp	r3, r2
 80a40c0:	d103      	bne.n	80a40ca <strncmp+0x1c>
 80a40c2:	42a0      	cmp	r0, r4
 80a40c4:	d001      	beq.n	80a40ca <strncmp+0x1c>
 80a40c6:	2b00      	cmp	r3, #0
 80a40c8:	d1f5      	bne.n	80a40b6 <strncmp+0x8>
 80a40ca:	1a98      	subs	r0, r3, r2
 80a40cc:	bd10      	pop	{r4, pc}
 80a40ce:	4610      	mov	r0, r2
 80a40d0:	e7fc      	b.n	80a40cc <strncmp+0x1e>

080a40d2 <strrchr>:
 80a40d2:	b538      	push	{r3, r4, r5, lr}
 80a40d4:	4603      	mov	r3, r0
 80a40d6:	460c      	mov	r4, r1
 80a40d8:	b969      	cbnz	r1, 80a40f6 <strrchr+0x24>
 80a40da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a40de:	f7ff bf99 	b.w	80a4014 <strchr>
 80a40e2:	4605      	mov	r5, r0
 80a40e4:	1c43      	adds	r3, r0, #1
 80a40e6:	4621      	mov	r1, r4
 80a40e8:	4618      	mov	r0, r3
 80a40ea:	f7ff ff93 	bl	80a4014 <strchr>
 80a40ee:	2800      	cmp	r0, #0
 80a40f0:	d1f7      	bne.n	80a40e2 <strrchr+0x10>
 80a40f2:	4628      	mov	r0, r5
 80a40f4:	bd38      	pop	{r3, r4, r5, pc}
 80a40f6:	2500      	movs	r5, #0
 80a40f8:	e7f5      	b.n	80a40e6 <strrchr+0x14>

080a40fa <strstr>:
 80a40fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a40fc:	780c      	ldrb	r4, [r1, #0]
 80a40fe:	b164      	cbz	r4, 80a411a <strstr+0x20>
 80a4100:	4603      	mov	r3, r0
 80a4102:	781a      	ldrb	r2, [r3, #0]
 80a4104:	4618      	mov	r0, r3
 80a4106:	1c5e      	adds	r6, r3, #1
 80a4108:	b90a      	cbnz	r2, 80a410e <strstr+0x14>
 80a410a:	4610      	mov	r0, r2
 80a410c:	e005      	b.n	80a411a <strstr+0x20>
 80a410e:	4294      	cmp	r4, r2
 80a4110:	d108      	bne.n	80a4124 <strstr+0x2a>
 80a4112:	460d      	mov	r5, r1
 80a4114:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a4118:	b902      	cbnz	r2, 80a411c <strstr+0x22>
 80a411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a411c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a4120:	4297      	cmp	r7, r2
 80a4122:	d0f7      	beq.n	80a4114 <strstr+0x1a>
 80a4124:	4633      	mov	r3, r6
 80a4126:	e7ec      	b.n	80a4102 <strstr+0x8>

080a4128 <_strtol_l.isra.0>:
 80a4128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a412c:	468c      	mov	ip, r1
 80a412e:	4686      	mov	lr, r0
 80a4130:	4e39      	ldr	r6, [pc, #228]	; (80a4218 <_strtol_l.isra.0+0xf0>)
 80a4132:	4660      	mov	r0, ip
 80a4134:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a4138:	5da5      	ldrb	r5, [r4, r6]
 80a413a:	f015 0508 	ands.w	r5, r5, #8
 80a413e:	d1f8      	bne.n	80a4132 <_strtol_l.isra.0+0xa>
 80a4140:	2c2d      	cmp	r4, #45	; 0x2d
 80a4142:	d133      	bne.n	80a41ac <_strtol_l.isra.0+0x84>
 80a4144:	f04f 0801 	mov.w	r8, #1
 80a4148:	f89c 4000 	ldrb.w	r4, [ip]
 80a414c:	f100 0c02 	add.w	ip, r0, #2
 80a4150:	2b00      	cmp	r3, #0
 80a4152:	d05c      	beq.n	80a420e <_strtol_l.isra.0+0xe6>
 80a4154:	2b10      	cmp	r3, #16
 80a4156:	d10c      	bne.n	80a4172 <_strtol_l.isra.0+0x4a>
 80a4158:	2c30      	cmp	r4, #48	; 0x30
 80a415a:	d10a      	bne.n	80a4172 <_strtol_l.isra.0+0x4a>
 80a415c:	f89c 0000 	ldrb.w	r0, [ip]
 80a4160:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4164:	2858      	cmp	r0, #88	; 0x58
 80a4166:	d14d      	bne.n	80a4204 <_strtol_l.isra.0+0xdc>
 80a4168:	2310      	movs	r3, #16
 80a416a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a416e:	f10c 0c02 	add.w	ip, ip, #2
 80a4172:	2600      	movs	r6, #0
 80a4174:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a4178:	3f01      	subs	r7, #1
 80a417a:	fbb7 f9f3 	udiv	r9, r7, r3
 80a417e:	4630      	mov	r0, r6
 80a4180:	fb03 7a19 	mls	sl, r3, r9, r7
 80a4184:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a4188:	2d09      	cmp	r5, #9
 80a418a:	d818      	bhi.n	80a41be <_strtol_l.isra.0+0x96>
 80a418c:	462c      	mov	r4, r5
 80a418e:	42a3      	cmp	r3, r4
 80a4190:	dd24      	ble.n	80a41dc <_strtol_l.isra.0+0xb4>
 80a4192:	1c75      	adds	r5, r6, #1
 80a4194:	d007      	beq.n	80a41a6 <_strtol_l.isra.0+0x7e>
 80a4196:	4581      	cmp	r9, r0
 80a4198:	d31d      	bcc.n	80a41d6 <_strtol_l.isra.0+0xae>
 80a419a:	d101      	bne.n	80a41a0 <_strtol_l.isra.0+0x78>
 80a419c:	45a2      	cmp	sl, r4
 80a419e:	db1a      	blt.n	80a41d6 <_strtol_l.isra.0+0xae>
 80a41a0:	2601      	movs	r6, #1
 80a41a2:	fb00 4003 	mla	r0, r0, r3, r4
 80a41a6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a41aa:	e7eb      	b.n	80a4184 <_strtol_l.isra.0+0x5c>
 80a41ac:	2c2b      	cmp	r4, #43	; 0x2b
 80a41ae:	bf08      	it	eq
 80a41b0:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a41b4:	46a8      	mov	r8, r5
 80a41b6:	bf08      	it	eq
 80a41b8:	f100 0c02 	addeq.w	ip, r0, #2
 80a41bc:	e7c8      	b.n	80a4150 <_strtol_l.isra.0+0x28>
 80a41be:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a41c2:	2d19      	cmp	r5, #25
 80a41c4:	d801      	bhi.n	80a41ca <_strtol_l.isra.0+0xa2>
 80a41c6:	3c37      	subs	r4, #55	; 0x37
 80a41c8:	e7e1      	b.n	80a418e <_strtol_l.isra.0+0x66>
 80a41ca:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a41ce:	2d19      	cmp	r5, #25
 80a41d0:	d804      	bhi.n	80a41dc <_strtol_l.isra.0+0xb4>
 80a41d2:	3c57      	subs	r4, #87	; 0x57
 80a41d4:	e7db      	b.n	80a418e <_strtol_l.isra.0+0x66>
 80a41d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a41da:	e7e4      	b.n	80a41a6 <_strtol_l.isra.0+0x7e>
 80a41dc:	1c73      	adds	r3, r6, #1
 80a41de:	d106      	bne.n	80a41ee <_strtol_l.isra.0+0xc6>
 80a41e0:	2322      	movs	r3, #34	; 0x22
 80a41e2:	4638      	mov	r0, r7
 80a41e4:	f8ce 3000 	str.w	r3, [lr]
 80a41e8:	b942      	cbnz	r2, 80a41fc <_strtol_l.isra.0+0xd4>
 80a41ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a41ee:	f1b8 0f00 	cmp.w	r8, #0
 80a41f2:	d000      	beq.n	80a41f6 <_strtol_l.isra.0+0xce>
 80a41f4:	4240      	negs	r0, r0
 80a41f6:	2a00      	cmp	r2, #0
 80a41f8:	d0f7      	beq.n	80a41ea <_strtol_l.isra.0+0xc2>
 80a41fa:	b10e      	cbz	r6, 80a4200 <_strtol_l.isra.0+0xd8>
 80a41fc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a4200:	6011      	str	r1, [r2, #0]
 80a4202:	e7f2      	b.n	80a41ea <_strtol_l.isra.0+0xc2>
 80a4204:	2430      	movs	r4, #48	; 0x30
 80a4206:	2b00      	cmp	r3, #0
 80a4208:	d1b3      	bne.n	80a4172 <_strtol_l.isra.0+0x4a>
 80a420a:	2308      	movs	r3, #8
 80a420c:	e7b1      	b.n	80a4172 <_strtol_l.isra.0+0x4a>
 80a420e:	2c30      	cmp	r4, #48	; 0x30
 80a4210:	d0a4      	beq.n	80a415c <_strtol_l.isra.0+0x34>
 80a4212:	230a      	movs	r3, #10
 80a4214:	e7ad      	b.n	80a4172 <_strtol_l.isra.0+0x4a>
 80a4216:	bf00      	nop
 80a4218:	080a4892 	.word	0x080a4892

080a421c <strtol>:
 80a421c:	4613      	mov	r3, r2
 80a421e:	460a      	mov	r2, r1
 80a4220:	4601      	mov	r1, r0
 80a4222:	4802      	ldr	r0, [pc, #8]	; (80a422c <strtol+0x10>)
 80a4224:	6800      	ldr	r0, [r0, #0]
 80a4226:	f7ff bf7f 	b.w	80a4128 <_strtol_l.isra.0>
 80a422a:	bf00      	nop
 80a422c:	20000020 	.word	0x20000020

080a4230 <dynalib_user>:
 80a4230:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a4240:	00000000 6c616e61 6176676f 0065756c     ....analogvalue.
 80a4250:	6970612f 5550002f 45470054 75460054     /api/.PUT.GET.Fu
 80a4260:	44206c6c 00617461 6e756f63 2d2d0074     ll Data.count.--
 80a4270:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
 80a4280:	73203200 6e6f6365 48007364 44204555     .2 seconds.HUE D
 80a4290:	00415441 6b737544 6f227b00 203a226e     ATA.Dusk.{"on": 
 80a42a0:	65757274 7322202c 656e6563 22203a22     true, "scene": "
 80a42b0:	61527064 76445371 306d3648 2232786e     dpRaqSDvH6m0nx2"
 80a42c0:	7422202c 736e6172 6f697469 6d69746e     , "transitiontim
 80a42d0:	203a2265 007d3033 6b737544 7b003220     e": 30}.Dusk 2.{
 80a42e0:	226e6f22 7274203a 202c6575 65637322     "on": true, "sce
 80a42f0:	3a22656e 324f2220 58527750 734c446c     ne": "O2PwRXlDLs
 80a4300:	4941796c 202c2264 61727422 7469736e     lyAId", "transit
 80a4310:	746e6f69 22656d69 3033203a 694e007d     iontime": 30}.Ni
 80a4320:	00746867 6e6f227b 74203a22 2c657572     ght.{"on": true,
 80a4330:	63732220 22656e65 6222203a 412d4962      "scene": "bbI-A
 80a4340:	64723747 79565658 2c224978 72742220     G7rdXVVyxI", "tr
 80a4350:	69736e61 6e6f6974 656d6974 33203a22     ansitiontime": 3
 80a4360:	44007d30 7b005941 226e6f22 7274203a     0}.DAY.{"on": tr
 80a4370:	202c6575 65637322 3a22656e 59762220     ue, "scene": "vY
 80a4380:	5975616d 7a675243 337a4655 202c222d     mauYCRgzUFz3-", 
 80a4390:	61727422 7469736e 746e6f69 22656d69     "transitiontime"
 80a43a0:	3033203a 6144007d 68540079 69207369     : 30}.Day.This i
 80a43b0:	616d2073 6c206e69 00706f6f 6a486b61     s main loop.akHj
 80a43c0:	72615879 647a5349 65364e6d 4c6a7234     yXarISzdmN6e4rjL
 80a43d0:	7870356e 56497063 7a416967 5a47334f     n5pxcpIVgiAzO3GZ
 80a43e0:	6f312d6c 696c2f00 73746867 2f00352f     l-1o./lights/5./
 80a43f0:	756f7267 332f7370 7463612f 006e6f69     groups/3/action.
 80a4400:	7473227b 22657461 227b203a 22657568     {"state": {"hue"
 80a4410:	3122203a 30303030 007d7d22 6c6c756e     : "10000"}}.null
 80a4420:	00000000                                ....

080a4424 <_ZTVN5spark10LogHandlerE>:
	...
 80a4434:	080a00a5 080a00cb                       ........

080a443c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a4444:	080a014d 080a0181 080a2935 080a00cd     M.......5)......

080a4454 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
 80a445c:	080a0101 080a0115 65636341 2a007470     ........Accept.*
 80a446c:	20002a2f 50545448 302e312f 63000a0d     /*. HTTP/1.0...c
 80a447c:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
 80a448c:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
 80a449c:	00687467 54534f50 0d0a0d00 0000000a     gth.POST........

080a44ac <_ZTV10JsonBuffer>:
	...
 80a44b4:	080a0c35 080a0c51                       5...Q...

080a44bc <_ZTV10JsonParser>:
	...
 80a44c4:	080a0c65 080a0c89                       e.......

080a44cc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a44d4:	080a1227 080a122d 080a127d 080a123b     '...-...}...;...
 80a44e4:	080a1229                                )...

080a44e8 <_ZTV7TwoWire>:
	...
 80a44f0:	080a17a1 080a17eb 080a17c3 080a17a3     ................
 80a4500:	080a17cb 080a17d3 080a17db 080a17e3     ................

080a4510 <_ZTV9IPAddress>:
	...
 80a4518:	080a181d 080a00c9 080a0195 25006425     ............%d.%
 80a4528:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 80a4538:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 80a4548:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a4558:	0072656c 00707061 30313025 5d002075     ler.app.%010u .]
 80a4568:	202c0020 3a292800 5b200020 646f6300      ., .(): . [.cod
 80a4578:	203d2065 00692500 61746564 20736c69     e = .%i.details 
 80a4588:	6d00203d 66006300 006e6c00 63006e66     = .m.c.f.ln.fn.c
 80a4598:	0065646f 61746564 00006c69              ode.detail..

080a45a4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a45ac:	080a1cbf 080a1ce5 080a1ca5 080a1903     ................

080a45bc <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a45c4:	080a2161 080a2179 080a2935 080a00cd     a!..y!..5)......

080a45d4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a45dc:	080a218d 080a21a1 080a2add 080a1cad     .!...!...*......

080a45ec <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a45f4:	080a1cbd 080a1cf3 080a2871 080a1caf     ........q(......

080a4604 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a460c:	080a1cbb 080a1d01 080a2089 080a1d1d     ......... ......

080a461c <_ZTVN5spark12NetworkClassE>:
	...
 80a4624:	080a2c51 080a2c5b 080a2c65 080a2c6f     Q,..[,..e,..o,..
 80a4634:	080a2c79 080a2c85 080a2c91 080a2c99     y,...,...,...,..
 80a4644:	080a2ca1 080a2cad 080a2cb5 080a2cbf     .,...,...,...,..
 80a4654:	080a2cc9 69726977 5400676e 6c435043     .,..wiring.TCPCl
 80a4664:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a4674 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a467c:	080a31a1 080a31c9 080a35eb 080a31d7     .1...1...5...1..
 80a468c:	080a31a5                                .1..

080a4690 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a4698 <_ZTV9TCPClient>:
	...
 80a46a0:	080a31dd 080a3211 080a315d 080a3177     .1...2..]1..w1..
 80a46b0:	080a33ed 080a3273 080a3245 080a319f     .3..s2..E2...1..
 80a46c0:	080a330d 080a35f1 080a32a7 080a3461     .3...5...2..a4..
 80a46d0:	080a350f 080a34c7 080a3187 080a34d5     .5...4...1...4..
 80a46e0:	080a3225 252d5925 64252d6d 3a482554     %2..%Y-%m-%dT%H:
 80a46f0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a4700 <_ZTV11USARTSerial>:
	...
 80a4708:	080a3671 080a36d9 080a36b5 080a2d45     q6...6...6..E-..
 80a4718:	080a3685 080a36a1 080a3693 080a36af     .6...6...6...6..
 80a4728:	080a3673 080a3677                       s6..w6..

080a4730 <_ZTV9USBSerial>:
	...
 80a4738:	080a377d 080a37e3 080a37bb 080a2d45     }7...7...7..E-..
 80a4748:	080a37ad 080a377f 080a378f 080a37dd     .7...7...7...7..
 80a4758:	080a379f 080a3779                       .7..y7..

080a4760 <_ZTVN5spark9WiFiClassE>:
	...
 80a4768:	080a39c3 080a39b9 080a39af 080a3921     .9...9...9..!9..
 80a4778:	080a39a3 080a3997 080a2c91 080a2c99     .9...9...,...,..
 80a4788:	080a398b 080a3983 080a3979 080a396f     .9...9..y9..o9..
 80a4798:	080a392b                                +9..

080a479c <_ZSt7nothrow>:
	...

080a479d <_ZTSSt19_Sp_make_shared_tag>:
 80a479d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a47ad:	5f646572 00676174                        red_tag....

080a47b8 <_ZTISt19_Sp_make_shared_tag>:
 80a47b8:	080a47f8 080a479d                       .G...G..

080a47c0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a47c0:	080a4858 080a47cc 080a487c              XH...G..|H..

080a47cc <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a47cc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a47dc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a47ec:	00000045                                E...

080a47f0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a47f0:	00000000 080a47c0 080a3d65 080a3d79     .....G..e=..y=..
 80a4800:	080a3f11 080a3f11 080a3de3 080a3d25     .?...?...=..%=..
 80a4810:	080a3dcb 080a3d8d 080a3d59              .=...=..Y=..

080a481c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a481c:	080a4858 080a4828 080a47c0              XH..(H...G..

080a4828 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a4828:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a4838:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a4848:	456f666e 00000000                       nfoE....

080a4850 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a4850:	00000000 080a481c 080a3e0d 080a3e21     .....H...>..!>..
 80a4860:	080a3f11 080a3f11 080a3de3 080a3d25     .?...?...=..%=..
 80a4870:	080a3ee5 080a3e71 080a3e35              .>..q>..5>..

080a487c <_ZTISt9type_info>:
 80a487c:	080a47f8 080a4884                       .G...H..

080a4884 <_ZTSSt9type_info>:
 80a4884:	74397453 5f657079 6f666e69               St9type_info.

080a4891 <_ctype_>:
 80a4891:	20202000 20202020 28282020 20282828     .         ((((( 
 80a48a1:	20202020 20202020 20202020 20202020                     
 80a48b1:	10108820 10101010 10101010 10101010      ...............
 80a48c1:	04040410 04040404 10040404 10101010     ................
 80a48d1:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a48e1:	01010101 01010101 01010101 10101010     ................
 80a48f1:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4901:	02020202 02020202 02020202 10101010     ................
 80a4911:	00000020 00000000 00000000 00000000      ...............
	...

080a4992 <link_const_variable_data_end>:
	...

080a4994 <link_constructors_location>:
 80a4994:	080a073d 	.word	0x080a073d
 80a4998:	080a2925 	.word	0x080a2925
 80a499c:	080a2d31 	.word	0x080a2d31
 80a49a0:	080a2e75 	.word	0x080a2e75
 80a49a4:	080a3121 	.word	0x080a3121
 80a49a8:	080a365d 	.word	0x080a365d
 80a49ac:	080a39cd 	.word	0x080a39cd
 80a49b0:	080a3ccd 	.word	0x080a3ccd

080a49b4 <link_constructors_end>:
	...
